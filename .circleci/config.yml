aliases:
  - &restore_yarn_cache
    keys:
      - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - yarn-packages-v1-{{ .Branch }}-
      - yarn-packages-v1-
  - &save_yarn_cache
    paths:
      - ~/.cache/yarn
    key: yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
  - &restore_python_cache
    keys:
      - python-packages-v2-{{ .Branch }}-{{ checksum "packages/arb-compiler-evm/requirements.txt" }}
      - python-packages-v2-{{ .Branch }}-
      - python-packages-v2-
  - &save_python_cache
    paths:
      - ~/.local/lib/python3.7/site-packages
    key: python-packages-v2-{{ .Branch }}-{{ checksum "packages/arb-compiler-evm/requirements.txt" }}
  - &restore_ethbridge_cache
    keys:
      - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - yarn-packages-v1-{{ .Branch }}-
      - yarn-packages-v1-
  - &save_ethbridge_cache
    paths:
      - ~/.cache/yarn
    key: yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}

  - &restore_go_cache
    keys:
      - go-mod-v7-{{ .Branch }}-{{ checksum "packages/arb-validator/go.sum" }}
      - go-mod-v7-{{ .Branch }}-
      - go-mod-v7-
  - &save_go_cache
    key: go-mod-v7-{{ .Branch }}-{{ checksum "packages/arb-validator/go.sum" }}
    paths:
      - ~/go/pkg/mod
  - &test-path /tmp/test-results
  - &ethbridge-test-path /tmp/test-results/ethbridge.xml
version: 2
workflows:
  version: 2
  build:
    jobs:
      - go-deps
      - cpp-avm
      - frontend
      - ethbridge
      - backend:
          requires:
            - go-deps
            - cpp-avm
      - backend-integration:
          requires:
            - go-deps
            - cpp-avm
jobs:
  go-deps:
    docker:
      - image: offchainlabs/backend-base:0.2.8
    steps:
      - checkout
      - restore_cache: *restore_go_cache
      - run:
          command: |
            cd packages/arb-provider-go
            go mod download
      - save_cache: *save_go_cache
  frontend:
    docker:
      - image: offchainlabs/frontend-base:0.1.0
    environment:
      TEST_RESULTS: *test-path
    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS
      - restore_cache: *restore_yarn_cache
      - run: yarn install --cache-folder ~/.cache/yarn
      - save_cache: *save_yarn_cache
      - restore_cache: *restore_python_cache
      - run:
          command: | # use pipenv to install dependencies
            pip3 install --user -r requirements.txt
            python3 setup.py install --user
          working_directory: /home/user/project/packages/arb-compiler-evm
      - save_cache: *save_python_cache
      - run:
          name: test arb-compiler-evm
          command: |
            python3 setup.py nosetests --processes=2 --process-timeout=120 --with-coverage --cover-package=arbitrum --with-xunit --xunit-file=${TEST_RESULTS}/arb-compiler-evm.xml
          working_directory: /home/user/project/packages/arb-compiler-evm
      - run:
          name: test arb-provider-ethers
          command: |
            yarn
            yarn test:ci --reporter-options output=${TEST_RESULTS}/arb-provider-ethers.xml
            yarn lint --format junit -o ${TEST_RESULTS}/arb-provider-ethers-lint.xml
          working_directory: /home/user/project/packages/arb-provider-ethers
      - run:
          name: test arb-provider-web3
          command: |
            yarn test:ci --reporter-options output=${TEST_RESULTS}/arb-provider-web3.xml
            yarn lint --format junit -o ${TEST_RESULTS}/arb-provider-web3-lint.xml
          working_directory: /home/user/project/packages/arb-provider-web3
      - run:
          name: Upload Coverage to Codecov
          command: codecovbash
          working_directory: /home/user/project/packages
      - store_test_results:
          path: *test-path
  ethbridge:
    docker:
      - image: offchainlabs/ethbridge-base:0.2.1
    environment: # environment variables for the build itself
      TEST_RESULTS: *test-path # path to where test results will be saved
    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS
      - restore_cache: *restore_yarn_cache
      - run:
          name: install
          command: |
            yarn install --cache-folder ~/.cache/yarn
            yarn build
          working_directory: /home/user/project
      - run:
          name: test arb-bridge-eth
          command: |
            yarn test:coverage
            yarn lint:js --format junit -o ${TEST_RESULTS}/arb-bridge-eth-lint.xml
            yarn lint:solidity
          environment:
            MOCHA_FILE: *ethbridge-test-path
          working_directory: /home/user/project/packages/arb-bridge-eth
      - run:
          command: yarn buidler node
          background: true
          working_directory: /home/user/project/packages/arb-bridge-eth
      - run: while ! nc -z localhost 8545; do sleep 2; done
      - run:
          name: test arb-bridge-eth gas usage
          command: |
            yarn test:gas:ci
          working_directory: /home/user/project/packages/arb-bridge-eth
      - run:
          name: codechecks
          command: npx codechecks
          working_directory: /home/user/project
      - run:
          name: Upload Coverage to Codecov
          command: codecovbash -R /home/user/project -c -F unit
          working_directory: /home/user/project/packages
      - store_test_results:
          path: *test-path

  cpp-avm:
    docker:
      - image: offchainlabs/cpp-base:0.2.5
    environment: # environment variables for the build itself
      TEST_RESULTS: *test-path # path to where test results will be saved
    steps:
      - checkout
      - run:
          name: 'Pull Submodules'
          command: |
            git submodule update --init --recursive
      - run: mkdir -p $TEST_RESULTS
      - run:
          command: |
            mkdir -p packages/arb-avm-cpp/build
            cd packages/arb-avm-cpp/build
            cmake -DCMAKE_BUILD_TYPE=Debug -DCODE_COVERAGE=True ..
            cmake --build . -j 2
            cp lib/lib* ../cmachine/
      - run:
          name: test arb-avm-cpp
          command: |
            ./bin/avm_tests -r junit > ${TEST_RESULTS}/arb-avm-cpp.xml
            lcov --capture --directory . --output-file coverage.info
            lcov --remove coverage.info --output-file coverage.info '/usr/*' '*/tests/*' '*/external/*'
            lcov --list coverage.info
          working_directory: /home/user/project/packages/arb-avm-cpp/build
      - persist_to_workspace: # store the built files into the workspace for other jobs.
          root: /home/user/project/packages/arb-avm-cpp/cmachine
          paths:
            - ./*.a
      - run: codecovbash -R /home/user/project -c -F unit
      - store_test_results:
          path: *test-path
  backend:
    docker:
      - image: offchainlabs/backend-base:0.2.8
    environment: # environment variables for the build itself
      TEST_RESULTS: *test-path # path to where test results will be saved
    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS
      - attach_workspace:
          at: /home/user/workspace
      - run:
          command: |
            echo arbitrum > ~/password.txt
            cp /home/user/workspace/*.a /home/user/project/packages/arb-avm-cpp/cmachine
      - restore_cache: *restore_go_cache
      - run:
          command: |
            cd packages/arb-validator
            export CGO_LDFLAGS="-lgcov --coverage"
            go install -v ./...
      - run:
          name: test arb-util
          command: |
            cd ..
            export ARB_PACKAGES=$(go list ./... | grep -v 'evilRollupServer' | awk -vORS=, '{ print "github.com/offchainlabs/arbitrum/"substr($1,21) }' | sed 's/,$/\n/')
            cd arb-util
            gotestsum --format short-verbose --junitfile ${TEST_RESULTS}/arb-util.xml -- -race -coverprofile=coverage.txt -covermode=atomic -coverpkg=$ARB_PACKAGES ./...
          working_directory: /home/user/project/packages/arb-util
      - run:
          name: test arb-avm-cpp
          command: |
            export CGO_LDFLAGS="-lgcov --coverage"
            cd ..
            export ARB_PACKAGES=$(go list ./... | grep -v 'evilRollupServer' | awk -vORS=, '{ print "github.com/offchainlabs/arbitrum/"substr($1,21) }' | sed 's/,$/\n/')
            cd arb-avm-cpp
            gotestsum --format short-verbose --junitfile ${TEST_RESULTS}/arb-avm-cpp.xml -- -race -coverprofile=coverage.txt -covermode=atomic -coverpkg=$ARB_PACKAGES ./...
          working_directory: /home/user/project/packages/arb-avm-cpp
      - run:
          name: test arb-validator-core
          command: |
            export CGO_LDFLAGS="-lgcov --coverage"
            cd ..
            export ARB_PACKAGES=$(go list ./... | grep -v 'evilRollupServer' | awk -vORS=, '{ print "github.com/offchainlabs/arbitrum/"substr($1,21) }' | sed 's/,$/\n/')
            cd arb-validator-core
            gotestsum --format short-verbose --junitfile ${TEST_RESULTS}/arb-validator-core.xml -- -race -coverprofile=coverage.txt -covermode=atomic -coverpkg=$ARB_PACKAGES ./...
          working_directory: /home/user/project/packages/arb-validator-core
      - run:
          name: test arb-validator
          command: |
            export CGO_LDFLAGS="-lgcov --coverage"
            cd ..
            export ARB_PACKAGES=$(go list ./... | grep -v 'evilRollupServer' | awk -vORS=, '{ print "github.com/offchainlabs/arbitrum/"substr($1,21) }' | sed 's/,$/\n/')
            cd arb-validator
            gotestsum --format short-verbose --junitfile ${TEST_RESULTS}/arb-validator.xml -- -race -coverprofile=coverage.txt -covermode=atomic -coverpkg=$ARB_PACKAGES ./...
          working_directory: /home/user/project/packages/arb-validator
      - run:
          name: test arb-provider-go
          command: |
            export CGO_LDFLAGS="-lgcov --coverage"
            cd ..
            export ARB_PACKAGES=$(go list ./... | grep -v 'evilRollupServer' | awk -vORS=, '{ print "github.com/offchainlabs/arbitrum/"substr($1,21) }' | sed 's/,$/\n/')
            cd arb-provider-go
            gotestsum --format short-verbose --junitfile ${TEST_RESULTS}/arb-provider-go.xml -- -race -coverprofile=coverage.txt -covermode=atomic -coverpkg=$ARB_PACKAGES ./...
          working_directory: /home/user/project/packages/arb-provider-go
      - run: codecovbash -R /home/user/project -c -F unit
      - store_test_results:
          path: *test-path

  backend-integration:
    docker:
      - image: offchainlabs/backend-base:0.2.8
    environment: # environment variables for the build itself
      TEST_RESULTS: *test-path # path to where test results will be saved
    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS
      - attach_workspace:
          at: /home/user/workspace
      - run:
          command: |
            echo arbitrum > ~/password.txt
            cp /home/user/workspace/*.a /home/user/project/packages/arb-avm-cpp/cmachine
      - restore_cache: *restore_go_cache
      - run:
          command: |
            cd packages/arb-validator
            export CGO_LDFLAGS="-lgcov --coverage"
            go install -v ./...
      - run:
          name: test fibgo
          command: |
            export CGO_LDFLAGS="-lgcov --coverage"
            export ARB_PACKAGES=$(go list ./... | grep -v 'evilRollupServer' | awk -vORS=, '{ print "github.com/offchainlabs/arbitrum/"substr($1,21) }' | sed 's/,$/\n/')
            cd ../tests/fibgo
            gotestsum --format short-verbose --junitfile ${TEST_RESULTS}/fibgo.xml -- -race -coverprofile=coverage.txt -covermode=atomic -coverpkg=$ARB_PACKAGES ./...
          working_directory: /home/user/project/packages
      - run: codecovbash -R /home/user/project -c -F integration
      - store_test_results:
          path: *test-path
