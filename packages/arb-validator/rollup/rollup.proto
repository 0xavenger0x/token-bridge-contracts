/*
 * Copyright 2019, Offchain Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package rollup;
import "value/value.proto";
import "protocol/protocol.proto";
option go_package = "github.com/offchainlabs/arbitrum/packages/arb-validator/rollup";

message NodeGraphBuf {
    repeated NodeBuf nodes = 1;
    value.HashBuf oldestNodeHash = 2;
    value.HashBuf latestConfirmedHash = 3;
    repeated value.HashBuf    leafHashes = 4;
}

message StakedNodeGraphBuf {
    NodeGraphBuf nodeGraph = 1;
    repeated StakerBuf stakers = 2;
    repeated ChallengeBuf challenges = 3;
}

message ChainObserverBuf {
    StakedNodeGraphBuf stakedNodeGraph = 1;
    bytes contractAddress = 2;
    ChainParamsBuf vmParams = 3;
    PendingInboxBuf pendingInbox = 4;
}

message ChainParamsBuf {
    value.BigIntegerBuf stakeRequirement = 1;
    RollupTimeBuf gracePeriod = 2;
    uint32 maxExecutionSteps = 3;
}

message NodeBuf {
    uint64 depth = 1;
    value.HashBuf hash = 2;
    DisputableNodeBuf disputableNode = 3;
    value.HashBuf machineHash = 4;
    value.HashBuf pendingTopHash = 5;
    uint32 linkType = 6;
    value.HashBuf prevHash = 7;
}

message StakerBuf {
    bytes address = 1;
    value.HashBuf location = 2;
    RollupTimeBuf creationTime = 3;
    bytes challengeAddr = 4;
}

message ChallengeBuf {
    bytes contract = 1;
    bytes asserter = 2;
    bytes challenger = 3;
    uint32 kind = 4;
}

message DisputableNodeBuf {
    value.HashBuf prevNodeHash = 1;
    RollupTimeBuf timeLowerBound = 2;
    RollupTimeBuf timeUpperBound = 3;
    value.HashBuf afterPendingTop = 4;
    value.HashBuf importedMessagesSlice = 5;
    value.BigIntegerBuf importedMessageCount = 6;
    protocol.AssertionStub assertionStub = 7;
}

message PendingInboxBuf {
    repeated bytes items = 1;
    value.HashBuf hashOfRest = 2;
}

message RollupTimeBuf {
    value.BigIntegerBuf val = 1;
}



