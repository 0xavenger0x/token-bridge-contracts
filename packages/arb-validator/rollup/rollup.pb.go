//
// Copyright 2019, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.10.1
// source: rollup.proto

package rollup

import (
	proto "github.com/golang/protobuf/proto"
	common "github.com/offchainlabs/arbitrum/packages/arb-util/common"
	valprotocol "github.com/offchainlabs/arbitrum/packages/arb-validator-core/valprotocol"
	structures "github.com/offchainlabs/arbitrum/packages/arb-validator/structures"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type NodeBuf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrevHash        *common.HashBuf                   `protobuf:"bytes,1,opt,name=prevHash,proto3" json:"prevHash,omitempty"`
	Deadline        *common.TimeTicksBuf              `protobuf:"bytes,2,opt,name=deadline,proto3" json:"deadline,omitempty"`
	DisputableNode  *valprotocol.DisputableNodeBuf    `protobuf:"bytes,3,opt,name=disputableNode,proto3" json:"disputableNode,omitempty"`
	LinkType        uint32                            `protobuf:"varint,4,opt,name=linkType,proto3" json:"linkType,omitempty"`
	VmProtoData     *valprotocol.VMProtoDataBuf       `protobuf:"bytes,5,opt,name=vmProtoData,proto3" json:"vmProtoData,omitempty"`
	MachineHash     *common.HashBuf                   `protobuf:"bytes,6,opt,name=machineHash,proto3" json:"machineHash,omitempty"`
	Assertion       *structures.ExecutionAssertionBuf `protobuf:"bytes,7,opt,name=assertion,proto3" json:"assertion,omitempty"`
	Depth           uint64                            `protobuf:"varint,8,opt,name=depth,proto3" json:"depth,omitempty"`
	NodeDataHash    *common.HashBuf                   `protobuf:"bytes,9,opt,name=nodeDataHash,proto3" json:"nodeDataHash,omitempty"`
	InnerHash       *common.HashBuf                   `protobuf:"bytes,10,opt,name=innerHash,proto3" json:"innerHash,omitempty"`
	Hash            *common.HashBuf                   `protobuf:"bytes,11,opt,name=hash,proto3" json:"hash,omitempty"`
	AssertionTxHash *common.HashBuf                   `protobuf:"bytes,12,opt,name=assertionTxHash,proto3" json:"assertionTxHash,omitempty"`
}

func (x *NodeBuf) Reset() {
	*x = NodeBuf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollup_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeBuf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeBuf) ProtoMessage() {}

func (x *NodeBuf) ProtoReflect() protoreflect.Message {
	mi := &file_rollup_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeBuf.ProtoReflect.Descriptor instead.
func (*NodeBuf) Descriptor() ([]byte, []int) {
	return file_rollup_proto_rawDescGZIP(), []int{0}
}

func (x *NodeBuf) GetPrevHash() *common.HashBuf {
	if x != nil {
		return x.PrevHash
	}
	return nil
}

func (x *NodeBuf) GetDeadline() *common.TimeTicksBuf {
	if x != nil {
		return x.Deadline
	}
	return nil
}

func (x *NodeBuf) GetDisputableNode() *valprotocol.DisputableNodeBuf {
	if x != nil {
		return x.DisputableNode
	}
	return nil
}

func (x *NodeBuf) GetLinkType() uint32 {
	if x != nil {
		return x.LinkType
	}
	return 0
}

func (x *NodeBuf) GetVmProtoData() *valprotocol.VMProtoDataBuf {
	if x != nil {
		return x.VmProtoData
	}
	return nil
}

func (x *NodeBuf) GetMachineHash() *common.HashBuf {
	if x != nil {
		return x.MachineHash
	}
	return nil
}

func (x *NodeBuf) GetAssertion() *structures.ExecutionAssertionBuf {
	if x != nil {
		return x.Assertion
	}
	return nil
}

func (x *NodeBuf) GetDepth() uint64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *NodeBuf) GetNodeDataHash() *common.HashBuf {
	if x != nil {
		return x.NodeDataHash
	}
	return nil
}

func (x *NodeBuf) GetInnerHash() *common.HashBuf {
	if x != nil {
		return x.InnerHash
	}
	return nil
}

func (x *NodeBuf) GetHash() *common.HashBuf {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *NodeBuf) GetAssertionTxHash() *common.HashBuf {
	if x != nil {
		return x.AssertionTxHash
	}
	return nil
}

type NodeGraphBuf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes               []*NodeBuf                  `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	OldestNodeHash      *common.HashBuf             `protobuf:"bytes,2,opt,name=oldestNodeHash,proto3" json:"oldestNodeHash,omitempty"`
	LatestConfirmedHash *common.HashBuf             `protobuf:"bytes,3,opt,name=latestConfirmedHash,proto3" json:"latestConfirmedHash,omitempty"`
	LeafHashes          []*common.HashBuf           `protobuf:"bytes,4,rep,name=leafHashes,proto3" json:"leafHashes,omitempty"`
	Params              *valprotocol.ChainParamsBuf `protobuf:"bytes,5,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *NodeGraphBuf) Reset() {
	*x = NodeGraphBuf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollup_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeGraphBuf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeGraphBuf) ProtoMessage() {}

func (x *NodeGraphBuf) ProtoReflect() protoreflect.Message {
	mi := &file_rollup_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeGraphBuf.ProtoReflect.Descriptor instead.
func (*NodeGraphBuf) Descriptor() ([]byte, []int) {
	return file_rollup_proto_rawDescGZIP(), []int{1}
}

func (x *NodeGraphBuf) GetNodes() []*NodeBuf {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *NodeGraphBuf) GetOldestNodeHash() *common.HashBuf {
	if x != nil {
		return x.OldestNodeHash
	}
	return nil
}

func (x *NodeGraphBuf) GetLatestConfirmedHash() *common.HashBuf {
	if x != nil {
		return x.LatestConfirmedHash
	}
	return nil
}

func (x *NodeGraphBuf) GetLeafHashes() []*common.HashBuf {
	if x != nil {
		return x.LeafHashes
	}
	return nil
}

func (x *NodeGraphBuf) GetParams() *valprotocol.ChainParamsBuf {
	if x != nil {
		return x.Params
	}
	return nil
}

type StakedNodeGraphBuf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeGraph  *NodeGraphBuf   `protobuf:"bytes,1,opt,name=nodeGraph,proto3" json:"nodeGraph,omitempty"`
	Stakers    []*StakerBuf    `protobuf:"bytes,2,rep,name=stakers,proto3" json:"stakers,omitempty"`
	Challenges []*ChallengeBuf `protobuf:"bytes,3,rep,name=challenges,proto3" json:"challenges,omitempty"`
}

func (x *StakedNodeGraphBuf) Reset() {
	*x = StakedNodeGraphBuf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollup_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakedNodeGraphBuf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakedNodeGraphBuf) ProtoMessage() {}

func (x *StakedNodeGraphBuf) ProtoReflect() protoreflect.Message {
	mi := &file_rollup_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakedNodeGraphBuf.ProtoReflect.Descriptor instead.
func (*StakedNodeGraphBuf) Descriptor() ([]byte, []int) {
	return file_rollup_proto_rawDescGZIP(), []int{2}
}

func (x *StakedNodeGraphBuf) GetNodeGraph() *NodeGraphBuf {
	if x != nil {
		return x.NodeGraph
	}
	return nil
}

func (x *StakedNodeGraphBuf) GetStakers() []*StakerBuf {
	if x != nil {
		return x.Stakers
	}
	return nil
}

func (x *StakedNodeGraphBuf) GetChallenges() []*ChallengeBuf {
	if x != nil {
		return x.Challenges
	}
	return nil
}

type ChainObserverBuf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakedNodeGraph     *StakedNodeGraphBuf  `protobuf:"bytes,1,opt,name=stakedNodeGraph,proto3" json:"stakedNodeGraph,omitempty"`
	ContractAddress     *common.AddressBuf   `protobuf:"bytes,2,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
	Inbox               *structures.InboxBuf `protobuf:"bytes,3,opt,name=inbox,proto3" json:"inbox,omitempty"`
	KnownValidNode      *common.HashBuf      `protobuf:"bytes,4,opt,name=knownValidNode,proto3" json:"knownValidNode,omitempty"`
	CalculatedValidNode *common.HashBuf      `protobuf:"bytes,5,opt,name=calculatedValidNode,proto3" json:"calculatedValidNode,omitempty"`
	LatestBlockId       *common.BlockIdBuf   `protobuf:"bytes,6,opt,name=latestBlockId,proto3" json:"latestBlockId,omitempty"`
	IsOpinionated       bool                 `protobuf:"varint,7,opt,name=isOpinionated,proto3" json:"isOpinionated,omitempty"`
}

func (x *ChainObserverBuf) Reset() {
	*x = ChainObserverBuf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollup_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainObserverBuf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainObserverBuf) ProtoMessage() {}

func (x *ChainObserverBuf) ProtoReflect() protoreflect.Message {
	mi := &file_rollup_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainObserverBuf.ProtoReflect.Descriptor instead.
func (*ChainObserverBuf) Descriptor() ([]byte, []int) {
	return file_rollup_proto_rawDescGZIP(), []int{3}
}

func (x *ChainObserverBuf) GetStakedNodeGraph() *StakedNodeGraphBuf {
	if x != nil {
		return x.StakedNodeGraph
	}
	return nil
}

func (x *ChainObserverBuf) GetContractAddress() *common.AddressBuf {
	if x != nil {
		return x.ContractAddress
	}
	return nil
}

func (x *ChainObserverBuf) GetInbox() *structures.InboxBuf {
	if x != nil {
		return x.Inbox
	}
	return nil
}

func (x *ChainObserverBuf) GetKnownValidNode() *common.HashBuf {
	if x != nil {
		return x.KnownValidNode
	}
	return nil
}

func (x *ChainObserverBuf) GetCalculatedValidNode() *common.HashBuf {
	if x != nil {
		return x.CalculatedValidNode
	}
	return nil
}

func (x *ChainObserverBuf) GetLatestBlockId() *common.BlockIdBuf {
	if x != nil {
		return x.LatestBlockId
	}
	return nil
}

func (x *ChainObserverBuf) GetIsOpinionated() bool {
	if x != nil {
		return x.IsOpinionated
	}
	return false
}

type StakerBuf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address       *common.AddressBuf   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Location      *common.HashBuf      `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	CreationTime  *common.TimeTicksBuf `protobuf:"bytes,3,opt,name=creationTime,proto3" json:"creationTime,omitempty"`
	ChallengeAddr *common.AddressBuf   `protobuf:"bytes,4,opt,name=challengeAddr,proto3" json:"challengeAddr,omitempty"`
}

func (x *StakerBuf) Reset() {
	*x = StakerBuf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollup_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakerBuf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakerBuf) ProtoMessage() {}

func (x *StakerBuf) ProtoReflect() protoreflect.Message {
	mi := &file_rollup_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakerBuf.ProtoReflect.Descriptor instead.
func (*StakerBuf) Descriptor() ([]byte, []int) {
	return file_rollup_proto_rawDescGZIP(), []int{4}
}

func (x *StakerBuf) GetAddress() *common.AddressBuf {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *StakerBuf) GetLocation() *common.HashBuf {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *StakerBuf) GetCreationTime() *common.TimeTicksBuf {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *StakerBuf) GetChallengeAddr() *common.AddressBuf {
	if x != nil {
		return x.ChallengeAddr
	}
	return nil
}

type ChallengeBuf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId          *common.BlockIdBuf `protobuf:"bytes,1,opt,name=blockId,proto3" json:"blockId,omitempty"`
	LogIndex         uint64             `protobuf:"varint,2,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	Asserter         *common.AddressBuf `protobuf:"bytes,3,opt,name=asserter,proto3" json:"asserter,omitempty"`
	Challenger       *common.AddressBuf `protobuf:"bytes,4,opt,name=challenger,proto3" json:"challenger,omitempty"`
	Contract         *common.AddressBuf `protobuf:"bytes,5,opt,name=contract,proto3" json:"contract,omitempty"`
	ConflictNodeHash *common.HashBuf    `protobuf:"bytes,6,opt,name=conflictNodeHash,proto3" json:"conflictNodeHash,omitempty"`
}

func (x *ChallengeBuf) Reset() {
	*x = ChallengeBuf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollup_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeBuf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeBuf) ProtoMessage() {}

func (x *ChallengeBuf) ProtoReflect() protoreflect.Message {
	mi := &file_rollup_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeBuf.ProtoReflect.Descriptor instead.
func (*ChallengeBuf) Descriptor() ([]byte, []int) {
	return file_rollup_proto_rawDescGZIP(), []int{5}
}

func (x *ChallengeBuf) GetBlockId() *common.BlockIdBuf {
	if x != nil {
		return x.BlockId
	}
	return nil
}

func (x *ChallengeBuf) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *ChallengeBuf) GetAsserter() *common.AddressBuf {
	if x != nil {
		return x.Asserter
	}
	return nil
}

func (x *ChallengeBuf) GetChallenger() *common.AddressBuf {
	if x != nil {
		return x.Challenger
	}
	return nil
}

func (x *ChallengeBuf) GetContract() *common.AddressBuf {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *ChallengeBuf) GetConflictNodeHash() *common.HashBuf {
	if x != nil {
		return x.ConflictNodeHash
	}
	return nil
}

var File_rollup_proto protoreflect.FileDescriptor

var file_rollup_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x76, 0x61, 0x6c, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x61, 0x6c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x04, 0x0a, 0x07, 0x4e, 0x6f, 0x64, 0x65,
	0x42, 0x75, 0x66, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x42, 0x75, 0x66, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x30, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x73, 0x42, 0x75, 0x66, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x61, 0x6c,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x75, 0x66, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x70,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x69,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x76, 0x6d, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x61,
	0x6c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x56, 0x4d, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x44, 0x61, 0x74, 0x61, 0x42, 0x75, 0x66, 0x52, 0x0b, 0x76, 0x6d, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x42, 0x75, 0x66, 0x52, 0x0b, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x52, 0x09,
	0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12,
	0x33, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x42, 0x75, 0x66, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x2d, 0x0a, 0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x42, 0x75, 0x66, 0x52, 0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x42,
	0x75, 0x66, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x39, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x65,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x42,
	0x75, 0x66, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x22, 0x97, 0x02, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x42, 0x75, 0x66, 0x12, 0x25, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x42, 0x75, 0x66, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0e, 0x6f,
	0x6c, 0x64, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x42, 0x75, 0x66, 0x52, 0x0e, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x41, 0x0a, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x42,
	0x75, 0x66, 0x52, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2f, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x66, 0x48,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x42, 0x75, 0x66, 0x52, 0x0a, 0x6c, 0x65,
	0x61, 0x66, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x61, 0x6c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x42, 0x75, 0x66, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xab, 0x01,
	0x0a, 0x12, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x42, 0x75, 0x66, 0x12, 0x32, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x42, 0x75, 0x66, 0x52, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x6f, 0x6c, 0x6c,
	0x75, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x42, 0x75, 0x66, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x6f, 0x6c, 0x6c,
	0x75, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x75, 0x66, 0x52,
	0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x9e, 0x03, 0x0a, 0x10,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x75, 0x66,
	0x12, 0x44, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x6f, 0x6c, 0x6c,
	0x75, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x42, 0x75, 0x66, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x3c, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x75, 0x66, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x42, 0x75, 0x66, 0x52, 0x05, 0x69, 0x6e, 0x62, 0x6f, 0x78,
	0x12, 0x37, 0x0a, 0x0e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x42, 0x75, 0x66, 0x52, 0x0e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x13, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x48, 0x61, 0x73, 0x68, 0x42, 0x75, 0x66, 0x52, 0x13, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x0d,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x42, 0x75, 0x66, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x4f, 0x70, 0x69, 0x6e,
	0x69, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x4f, 0x70, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x22, 0xda, 0x01, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x42, 0x75, 0x66, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x42, 0x75, 0x66, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x42, 0x75,
	0x66, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x22, 0xa9, 0x02, 0x0a, 0x0c, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x75, 0x66, 0x12, 0x2c, 0x0a, 0x07, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x42, 0x75, 0x66, 0x52,
	0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65,
	0x72, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x52, 0x0a, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66,
	0x6c, 0x69, 0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x73, 0x68,
	0x42, 0x75, 0x66, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6c, 0x61, 0x62, 0x73,
	0x2f, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x75, 0x6d, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x2f, 0x61, 0x72, 0x62, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rollup_proto_rawDescOnce sync.Once
	file_rollup_proto_rawDescData = file_rollup_proto_rawDesc
)

func file_rollup_proto_rawDescGZIP() []byte {
	file_rollup_proto_rawDescOnce.Do(func() {
		file_rollup_proto_rawDescData = protoimpl.X.CompressGZIP(file_rollup_proto_rawDescData)
	})
	return file_rollup_proto_rawDescData
}

var file_rollup_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_rollup_proto_goTypes = []interface{}{
	(*NodeBuf)(nil),                          // 0: rollup.NodeBuf
	(*NodeGraphBuf)(nil),                     // 1: rollup.NodeGraphBuf
	(*StakedNodeGraphBuf)(nil),               // 2: rollup.StakedNodeGraphBuf
	(*ChainObserverBuf)(nil),                 // 3: rollup.ChainObserverBuf
	(*StakerBuf)(nil),                        // 4: rollup.StakerBuf
	(*ChallengeBuf)(nil),                     // 5: rollup.ChallengeBuf
	(*common.HashBuf)(nil),                   // 6: common.HashBuf
	(*common.TimeTicksBuf)(nil),              // 7: common.TimeTicksBuf
	(*valprotocol.DisputableNodeBuf)(nil),    // 8: valprotocol.DisputableNodeBuf
	(*valprotocol.VMProtoDataBuf)(nil),       // 9: valprotocol.VMProtoDataBuf
	(*structures.ExecutionAssertionBuf)(nil), // 10: structures.ExecutionAssertionBuf
	(*valprotocol.ChainParamsBuf)(nil),       // 11: valprotocol.ChainParamsBuf
	(*common.AddressBuf)(nil),                // 12: common.AddressBuf
	(*structures.InboxBuf)(nil),              // 13: structures.InboxBuf
	(*common.BlockIdBuf)(nil),                // 14: common.BlockIdBuf
}
var file_rollup_proto_depIdxs = []int32{
	6,  // 0: rollup.NodeBuf.prevHash:type_name -> common.HashBuf
	7,  // 1: rollup.NodeBuf.deadline:type_name -> common.TimeTicksBuf
	8,  // 2: rollup.NodeBuf.disputableNode:type_name -> valprotocol.DisputableNodeBuf
	9,  // 3: rollup.NodeBuf.vmProtoData:type_name -> valprotocol.VMProtoDataBuf
	6,  // 4: rollup.NodeBuf.machineHash:type_name -> common.HashBuf
	10, // 5: rollup.NodeBuf.assertion:type_name -> structures.ExecutionAssertionBuf
	6,  // 6: rollup.NodeBuf.nodeDataHash:type_name -> common.HashBuf
	6,  // 7: rollup.NodeBuf.innerHash:type_name -> common.HashBuf
	6,  // 8: rollup.NodeBuf.hash:type_name -> common.HashBuf
	6,  // 9: rollup.NodeBuf.assertionTxHash:type_name -> common.HashBuf
	0,  // 10: rollup.NodeGraphBuf.nodes:type_name -> rollup.NodeBuf
	6,  // 11: rollup.NodeGraphBuf.oldestNodeHash:type_name -> common.HashBuf
	6,  // 12: rollup.NodeGraphBuf.latestConfirmedHash:type_name -> common.HashBuf
	6,  // 13: rollup.NodeGraphBuf.leafHashes:type_name -> common.HashBuf
	11, // 14: rollup.NodeGraphBuf.params:type_name -> valprotocol.ChainParamsBuf
	1,  // 15: rollup.StakedNodeGraphBuf.nodeGraph:type_name -> rollup.NodeGraphBuf
	4,  // 16: rollup.StakedNodeGraphBuf.stakers:type_name -> rollup.StakerBuf
	5,  // 17: rollup.StakedNodeGraphBuf.challenges:type_name -> rollup.ChallengeBuf
	2,  // 18: rollup.ChainObserverBuf.stakedNodeGraph:type_name -> rollup.StakedNodeGraphBuf
	12, // 19: rollup.ChainObserverBuf.contractAddress:type_name -> common.AddressBuf
	13, // 20: rollup.ChainObserverBuf.inbox:type_name -> structures.InboxBuf
	6,  // 21: rollup.ChainObserverBuf.knownValidNode:type_name -> common.HashBuf
	6,  // 22: rollup.ChainObserverBuf.calculatedValidNode:type_name -> common.HashBuf
	14, // 23: rollup.ChainObserverBuf.latestBlockId:type_name -> common.BlockIdBuf
	12, // 24: rollup.StakerBuf.address:type_name -> common.AddressBuf
	6,  // 25: rollup.StakerBuf.location:type_name -> common.HashBuf
	7,  // 26: rollup.StakerBuf.creationTime:type_name -> common.TimeTicksBuf
	12, // 27: rollup.StakerBuf.challengeAddr:type_name -> common.AddressBuf
	14, // 28: rollup.ChallengeBuf.blockId:type_name -> common.BlockIdBuf
	12, // 29: rollup.ChallengeBuf.asserter:type_name -> common.AddressBuf
	12, // 30: rollup.ChallengeBuf.challenger:type_name -> common.AddressBuf
	12, // 31: rollup.ChallengeBuf.contract:type_name -> common.AddressBuf
	6,  // 32: rollup.ChallengeBuf.conflictNodeHash:type_name -> common.HashBuf
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_rollup_proto_init() }
func file_rollup_proto_init() {
	if File_rollup_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rollup_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeBuf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rollup_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeGraphBuf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rollup_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakedNodeGraphBuf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rollup_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainObserverBuf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rollup_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakerBuf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rollup_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeBuf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rollup_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rollup_proto_goTypes,
		DependencyIndexes: file_rollup_proto_depIdxs,
		MessageInfos:      file_rollup_proto_msgTypes,
	}.Build()
	File_rollup_proto = out.File
	file_rollup_proto_rawDesc = nil
	file_rollup_proto_goTypes = nil
	file_rollup_proto_depIdxs = nil
}
