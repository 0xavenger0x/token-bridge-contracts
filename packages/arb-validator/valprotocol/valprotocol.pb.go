// Code generated by protoc-gen-go. DO NOT EDIT.
// source: valprotocol.proto

package valprotocol

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	protocol "github.com/offchainlabs/arbitrum/packages/arb-util/protocol"
	value "github.com/offchainlabs/arbitrum/packages/arb-util/value"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PreconditionBuf struct {
	BeforeHash           *value.HashBuf             `protobuf:"bytes,1,opt,name=beforeHash,proto3" json:"beforeHash,omitempty"`
	TimeBounds           *protocol.TimeBoundsBlocks `protobuf:"bytes,2,opt,name=timeBounds,proto3" json:"timeBounds,omitempty"`
	BeforeInbox          *value.HashBuf             `protobuf:"bytes,3,opt,name=beforeInbox,proto3" json:"beforeInbox,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PreconditionBuf) Reset()         { *m = PreconditionBuf{} }
func (m *PreconditionBuf) String() string { return proto.CompactTextString(m) }
func (*PreconditionBuf) ProtoMessage()    {}
func (*PreconditionBuf) Descriptor() ([]byte, []int) {
	return fileDescriptor_564cd27168d44311, []int{0}
}

func (m *PreconditionBuf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PreconditionBuf.Unmarshal(m, b)
}
func (m *PreconditionBuf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PreconditionBuf.Marshal(b, m, deterministic)
}
func (m *PreconditionBuf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreconditionBuf.Merge(m, src)
}
func (m *PreconditionBuf) XXX_Size() int {
	return xxx_messageInfo_PreconditionBuf.Size(m)
}
func (m *PreconditionBuf) XXX_DiscardUnknown() {
	xxx_messageInfo_PreconditionBuf.DiscardUnknown(m)
}

var xxx_messageInfo_PreconditionBuf proto.InternalMessageInfo

func (m *PreconditionBuf) GetBeforeHash() *value.HashBuf {
	if m != nil {
		return m.BeforeHash
	}
	return nil
}

func (m *PreconditionBuf) GetTimeBounds() *protocol.TimeBoundsBlocks {
	if m != nil {
		return m.TimeBounds
	}
	return nil
}

func (m *PreconditionBuf) GetBeforeInbox() *value.HashBuf {
	if m != nil {
		return m.BeforeInbox
	}
	return nil
}

type ExecutionAssertionStubBuf struct {
	AfterHash            *value.HashBuf `protobuf:"bytes,1,opt,name=afterHash,proto3" json:"afterHash,omitempty"`
	DidInboxInsn         bool           `protobuf:"varint,2,opt,name=didInboxInsn,proto3" json:"didInboxInsn,omitempty"`
	NumGas               uint64         `protobuf:"varint,3,opt,name=numGas,proto3" json:"numGas,omitempty"`
	FirstMessageHash     *value.HashBuf `protobuf:"bytes,4,opt,name=firstMessageHash,proto3" json:"firstMessageHash,omitempty"`
	LastMessageHash      *value.HashBuf `protobuf:"bytes,5,opt,name=lastMessageHash,proto3" json:"lastMessageHash,omitempty"`
	FirstLogHash         *value.HashBuf `protobuf:"bytes,6,opt,name=firstLogHash,proto3" json:"firstLogHash,omitempty"`
	LastLogHash          *value.HashBuf `protobuf:"bytes,7,opt,name=lastLogHash,proto3" json:"lastLogHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ExecutionAssertionStubBuf) Reset()         { *m = ExecutionAssertionStubBuf{} }
func (m *ExecutionAssertionStubBuf) String() string { return proto.CompactTextString(m) }
func (*ExecutionAssertionStubBuf) ProtoMessage()    {}
func (*ExecutionAssertionStubBuf) Descriptor() ([]byte, []int) {
	return fileDescriptor_564cd27168d44311, []int{1}
}

func (m *ExecutionAssertionStubBuf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecutionAssertionStubBuf.Unmarshal(m, b)
}
func (m *ExecutionAssertionStubBuf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecutionAssertionStubBuf.Marshal(b, m, deterministic)
}
func (m *ExecutionAssertionStubBuf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionAssertionStubBuf.Merge(m, src)
}
func (m *ExecutionAssertionStubBuf) XXX_Size() int {
	return xxx_messageInfo_ExecutionAssertionStubBuf.Size(m)
}
func (m *ExecutionAssertionStubBuf) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionAssertionStubBuf.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionAssertionStubBuf proto.InternalMessageInfo

func (m *ExecutionAssertionStubBuf) GetAfterHash() *value.HashBuf {
	if m != nil {
		return m.AfterHash
	}
	return nil
}

func (m *ExecutionAssertionStubBuf) GetDidInboxInsn() bool {
	if m != nil {
		return m.DidInboxInsn
	}
	return false
}

func (m *ExecutionAssertionStubBuf) GetNumGas() uint64 {
	if m != nil {
		return m.NumGas
	}
	return 0
}

func (m *ExecutionAssertionStubBuf) GetFirstMessageHash() *value.HashBuf {
	if m != nil {
		return m.FirstMessageHash
	}
	return nil
}

func (m *ExecutionAssertionStubBuf) GetLastMessageHash() *value.HashBuf {
	if m != nil {
		return m.LastMessageHash
	}
	return nil
}

func (m *ExecutionAssertionStubBuf) GetFirstLogHash() *value.HashBuf {
	if m != nil {
		return m.FirstLogHash
	}
	return nil
}

func (m *ExecutionAssertionStubBuf) GetLastLogHash() *value.HashBuf {
	if m != nil {
		return m.LastLogHash
	}
	return nil
}

type MessageBuf struct {
	Value                *value.ValueBuf        `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	TokenType            *protocol.TokenTypeBuf `protobuf:"bytes,2,opt,name=tokenType,proto3" json:"tokenType,omitempty"`
	Amount               *value.BigIntegerBuf   `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Sender               *protocol.AddressBuf   `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *MessageBuf) Reset()         { *m = MessageBuf{} }
func (m *MessageBuf) String() string { return proto.CompactTextString(m) }
func (*MessageBuf) ProtoMessage()    {}
func (*MessageBuf) Descriptor() ([]byte, []int) {
	return fileDescriptor_564cd27168d44311, []int{2}
}

func (m *MessageBuf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageBuf.Unmarshal(m, b)
}
func (m *MessageBuf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageBuf.Marshal(b, m, deterministic)
}
func (m *MessageBuf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageBuf.Merge(m, src)
}
func (m *MessageBuf) XXX_Size() int {
	return xxx_messageInfo_MessageBuf.Size(m)
}
func (m *MessageBuf) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageBuf.DiscardUnknown(m)
}

var xxx_messageInfo_MessageBuf proto.InternalMessageInfo

func (m *MessageBuf) GetValue() *value.ValueBuf {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *MessageBuf) GetTokenType() *protocol.TokenTypeBuf {
	if m != nil {
		return m.TokenType
	}
	return nil
}

func (m *MessageBuf) GetAmount() *value.BigIntegerBuf {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *MessageBuf) GetSender() *protocol.AddressBuf {
	if m != nil {
		return m.Sender
	}
	return nil
}

func init() {
	proto.RegisterType((*PreconditionBuf)(nil), "valprotocol.PreconditionBuf")
	proto.RegisterType((*ExecutionAssertionStubBuf)(nil), "valprotocol.ExecutionAssertionStubBuf")
	proto.RegisterType((*MessageBuf)(nil), "valprotocol.MessageBuf")
}

func init() { proto.RegisterFile("valprotocol.proto", fileDescriptor_564cd27168d44311) }

var fileDescriptor_564cd27168d44311 = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xcf, 0x6e, 0xd4, 0x30,
	0x10, 0xc6, 0xb5, 0xa5, 0x0d, 0x74, 0xb6, 0x62, 0xc1, 0xaa, 0xca, 0xb2, 0x27, 0x14, 0x09, 0x89,
	0x43, 0x49, 0x50, 0xe1, 0x80, 0x7a, 0x6b, 0x50, 0x05, 0x2b, 0x81, 0x84, 0x42, 0xc5, 0x81, 0x9b,
	0x13, 0x4f, 0xb2, 0xd6, 0x26, 0xf6, 0xca, 0x7f, 0xaa, 0xf2, 0x54, 0x3c, 0x05, 0x0f, 0xc2, 0x9b,
	0x20, 0x3b, 0xde, 0xdd, 0x04, 0xa2, 0x5e, 0xac, 0xc9, 0xcc, 0xef, 0x9b, 0x19, 0x7d, 0x76, 0xe0,
	0xe9, 0x2d, 0x6d, 0x36, 0x4a, 0x1a, 0x59, 0xca, 0x26, 0xf1, 0x01, 0x99, 0xf6, 0x52, 0x0b, 0x57,
	0xb7, 0x98, 0xfa, 0xb3, 0xab, 0x2f, 0x9e, 0x6d, 0x8b, 0xe9, 0x50, 0x18, 0xff, 0x9a, 0xc0, 0xec,
	0xab, 0xc2, 0x52, 0x0a, 0xc6, 0x0d, 0x97, 0x22, 0xb3, 0x15, 0x49, 0x00, 0x0a, 0xac, 0xa4, 0xc2,
	0x4f, 0x54, 0xaf, 0xe6, 0x93, 0x17, 0x93, 0x57, 0xd3, 0x8b, 0xc7, 0x49, 0xd7, 0xce, 0xa5, 0x32,
	0x5b, 0xe5, 0x3d, 0x82, 0x5c, 0x02, 0x18, 0xde, 0x62, 0x26, 0xad, 0x60, 0x7a, 0x7e, 0xe0, 0xf9,
	0x45, 0xb2, 0x1b, 0x74, 0xb3, 0xab, 0x65, 0x8d, 0x2c, 0xd7, 0x3a, 0xef, 0xd1, 0xe4, 0x0d, 0x4c,
	0xbb, 0x4e, 0x4b, 0x51, 0xc8, 0xbb, 0xf9, 0x83, 0xd1, 0x61, 0x7d, 0x24, 0xfe, 0x73, 0x00, 0xcf,
	0xaf, 0xef, 0xb0, 0xb4, 0x6e, 0xdd, 0x2b, 0xad, 0x51, 0xb9, 0xe0, 0x9b, 0xb1, 0x85, 0xdb, 0xfd,
	0x1c, 0x8e, 0x69, 0x65, 0x50, 0xdd, 0xb3, 0xfa, 0x1e, 0x20, 0x31, 0x9c, 0x30, 0xce, 0x7c, 0xdf,
	0xa5, 0xd0, 0xc2, 0xef, 0xfe, 0x28, 0x1f, 0xe4, 0xc8, 0x19, 0x44, 0xc2, 0xb6, 0x1f, 0xa9, 0xf6,
	0xcb, 0x1d, 0xe6, 0xe1, 0x8b, 0x5c, 0xc2, 0x93, 0x8a, 0x2b, 0x6d, 0xbe, 0xa0, 0xd6, 0xb4, 0xee,
	0xbc, 0x3a, 0x1c, 0x1d, 0xf8, 0x1f, 0x47, 0xde, 0xc3, 0xac, 0xa1, 0x43, 0xe9, 0xd1, 0xa8, 0xf4,
	0x5f, 0x8c, 0x5c, 0xc0, 0x89, 0xef, 0xf6, 0x59, 0xd6, 0x5e, 0x16, 0x8d, 0xca, 0x06, 0x8c, 0xf3,
	0xd8, 0xb5, 0xd9, 0x4a, 0x1e, 0x8e, 0x7b, 0xdc, 0x43, 0xe2, 0xdf, 0x13, 0x80, 0x30, 0xd5, 0x99,
	0xfa, 0x12, 0x8e, 0x3c, 0x1c, 0x0c, 0x9d, 0x05, 0xe9, 0x77, 0x77, 0x3a, 0x6d, 0x57, 0x25, 0xef,
	0xe0, 0xd8, 0xc8, 0x35, 0x8a, 0x9b, 0x9f, 0x1b, 0x0c, 0xcf, 0xe0, 0xac, 0xf7, 0x0c, 0xb6, 0x25,
	0x7f, 0x07, 0x3b, 0x90, 0x9c, 0x43, 0x44, 0x5b, 0x69, 0x85, 0x09, 0x97, 0x7f, 0x1a, 0xba, 0x67,
	0xbc, 0x5e, 0x0a, 0x83, 0x35, 0x2a, 0x27, 0x08, 0x8c, 0xa3, 0x35, 0x0a, 0x86, 0x2a, 0x78, 0x7d,
	0xba, 0x1f, 0x70, 0xc5, 0x98, 0x42, 0xad, 0x3d, 0xdd, 0x31, 0xd9, 0xf5, 0x8f, 0x0f, 0x35, 0x37,
	0x2b, 0x5b, 0x24, 0xa5, 0x6c, 0x53, 0x59, 0x55, 0xe5, 0x8a, 0x72, 0xd1, 0xd0, 0x42, 0xa7, 0x54,
	0x15, 0xdc, 0x28, 0xdb, 0xa6, 0x1b, 0x5a, 0xae, 0x69, 0x8d, 0x3e, 0xf3, 0xfa, 0x96, 0x36, 0x9c,
	0x51, 0x23, 0x55, 0xda, 0xfb, 0xa1, 0x8a, 0xc8, 0x47, 0x6f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff,
	0x36, 0x3c, 0x6f, 0x3d, 0x79, 0x03, 0x00, 0x00,
}
