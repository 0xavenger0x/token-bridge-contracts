/*
 * Copyright 2019, Offchain Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package valmessage;
import "protocol/protocol.proto";
import "value/value.proto";
option go_package = "github.com/offchainlabs/arbitrum/packages/arb-validator/valmessage";

message TokenTypeBuf {
    bytes value = 1;
}

message VMConfiguration {
    uint64 grace_period = 1;
    value.BigIntegerBuf escrow_required = 2;
    protocol.AddressBuf escrow_currency = 3;
    repeated protocol.AddressBuf assert_keys = 4;
    uint32 max_execution_step_count = 5;
    protocol.AddressBuf owner = 6;
}

message UnanimousAssertionValidatorNotification {
    bool accepted = 1;
    repeated bytes signatures = 2;
}

message SignedMessage {
    protocol.MessageBuf message = 1;
    bytes signature = 2;
}

message UnanimousAssertionValidatorRequest {
    value.HashBuf beforeHash = 1;
    value.HashBuf beforeInbox = 2;
    uint64 sequenceNum = 3;
    protocol.TimeBoundsBlocks timeBounds = 4;
    repeated SignedMessage signedMessages = 5;
}

message ValidatorRequest {
    value.HashBuf request_id = 1;
    oneof request {
        UnanimousAssertionValidatorRequest unanimous = 2;
        UnanimousAssertionValidatorNotification unanimousNotification = 3;
    }
}

message UnanimousAssertionFollowerResponse {
    bool accepted = 1;
    bytes signature = 2;
    value.HashBuf assertion_hash = 3;
}

message FollowerResponse {
    value.HashBuf request_id = 1;
    UnanimousAssertionFollowerResponse unanimous = 3;
}
