// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgecontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProofABI is the input ABI used to generate the binding from.
const OneStepProofABI = "[{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"messagesAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"logsAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[5]\",\"name\":\"fields\",\"type\":\"bytes32[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"messagesAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"logsAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"_kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inboxSeqNum\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_msgData\",\"type\":\"bytes\"}],\"name\":\"executeStepWithMessage\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[5]\",\"name\":\"fields\",\"type\":\"bytes32[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// OneStepProofFuncSigs maps the 4-byte function signature to its string representation.
var OneStepProofFuncSigs = map[string]string{
	"385bc114": "executeStep(bytes32,bytes32,bytes32,bytes)",
	"96105dce": "executeStepWithMessage(bytes32,bytes32,bytes32,bytes,uint8,uint256,uint256,address,uint256,bytes)",
}

// OneStepProofBin is the compiled bytecode used for deploying new contracts.
var OneStepProofBin = "0x608060405234801561001057600080fd5b50615c5780620000216000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063385bc1141461003b57806396105dce14610106575b600080fd5b6100be6004803603608081101561005157600080fd5b8135916020810135916040820135919081019060808101606082013564010000000081111561007f57600080fd5b82018360208201111561009157600080fd5b803590602001918460018302840111640100000000831117156100b357600080fd5b509092509050610206565b6040516001600160401b0383168152602081018260a080838360005b838110156100f25781810151838201526020016100da565b505050509050019250505060405180910390f35b6100be600480360361014081101561011d57600080fd5b8135916020810135916040820135919081019060808101606082013564010000000081111561014b57600080fd5b82018360208201111561015d57600080fd5b8035906020019184600183028401116401000000008311171561017f57600080fd5b9193909260ff833516926020810135926040820135926001600160a01b0360608401351692608081013592919060c081019060a001356401000000008111156101c757600080fd5b8201836020820111156101d957600080fd5b803590602001918460018302840111640100000000831117156101fb57600080fd5b50909250905061028f565b600061021061591c565b60408051600081526020810190915261022761593a565b61026b89898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525089925061039e915050565b905061027681610863565b61027f81610bcb565b9350935050509550959350505050565b600061029961591c565b6102a161593a565b6102f88f8f8f8f8f8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040805182815260208101909152935091506102f29050565b5061039e565b90506103248a888b8b8a8a8a6040518083838082843760405192018290039091209350610c2e92505050565b8160e00181815250506103718a8a8a8a8a8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c9c92505050565b60c082015261037f81610863565b61038881610bcb565b92509250509c509c9a5050505050505050505050565b6103a661593a565b6000836000815181106103b557fe5b602001015160f81c60f81b60f81c90506000846001815181106103d457fe5b602001015160f81c60f81b60f81c905060006002905060608360040160ff1660405190808252806020026020018201604052801561042c57816020015b6104196159d3565b8152602001906001900390816104115790505b50905060608360040160ff1660405190808252806020026020018201604052801561047157816020015b61045e6159d3565b8152602001906001900390816104565790505b50905060005b8560ff168110156104af5761048c8985610dc4565b845185908490811061049a57fe5b60209081029190910101529350600101610477565b5060005b8460ff168110156104eb576104c88985610dc4565b83518490849081106104d657fe5b602090810291909101015293506001016104b3565b506104f4615a10565b6104fe8985610f86565b909450905061050b61593a565b604051806101e0016040528083815260200161052684611037565b81526020018e81526020018d81526020018c815260200160006001600160401b031681526020016105556110ac565b81526020016000801b815260200160405180604001604052808a60ff16815260200187815250815260200160405180604001604052808960ff1681526020018681525081526020018b87815181106105a957fe5b602001015160f81c60f81b60f81c60ff16600114151581526020018b87600101815181106105d357fe5b0160209081015160f81c825281018c90526002870160408201526060018a90528a519091506000908b908790811061060757fe5b602001015160f81c60f81b60f81c905060008b876001018151811061062857fe5b01602001516002979097019660f81c905060ff8216158061064c57508160ff166001145b6040518060400160405280600b81526020016a04241445f494d4d5f5459560ac1b815250906106f95760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156106be5781810151838201526020016106a6565b50505050905090810190601f1680156106eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506107026159d3565b60ff831661071f578351516107189083906110f3565b90506107bf565b6000875111604051806040016040528060068152602001654e4f5f494d4d60d01b8152509061078f5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156106be5781810151838201526020016106a6565b506107bc828560000151600001518960018e0360ff16815181106107af57fe5b6020026020010151611157565b90505b6107c8816111db565b84515260005b838b0360ff1681101561080d576108058882815181106107ea57fe5b6020026020010151866000015161134890919063ffffffff16565b6001016107ce565b5060005b8960ff1681101561084e5761084687828151811061082b57fe5b6020026020010151866000015161136290919063ffffffff16565b600101610811565b50929f9e505050505050505050505050505050565b600080600061298b61087c85610160015160ff1661137c565b935093509350935061088e8583611b38565b1561089c5750505050610bc8565b61010085015151841115610951576108ba6108b56110ac565b6111db565b6108cb8660200151602001516111db565b146040518060400160405280600d81526020016c535441434b5f4d495353494e4760981b8152509061093e5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156106be5781810151838201526020016106a6565b5061094885611ba2565b50505050610bc8565b610120850151518311156109ec5761096a6108b56110ac565b61097b8660200151604001516111db565b146040518060400160405280600b81526020016a4155585f4d495353494e4760a81b8152509061093e5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156106be5781810151838201526020016106a6565b60008411806109fe5750846101400151155b8015610a0f57506101008501515184145b80610a3757508461014001518015610a25575083155b8015610a375750610100850151516001145b6040518060400160405280600a815260200169535441434b5f4d414e5960b01b81525090610aa65760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156106be5781810151838201526020016106a6565b50610120850151516040805180820190915260088152674155585f4d414e5960c01b6020820152908414610b1b5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156106be5781810151838201526020016106a6565b50610b29858263ffffffff16565b60005b61010086015151811015610b7557610b6d866101000151602001518281518110610b5257fe5b6020026020010151876020015161134890919063ffffffff16565b600101610b2c565b5060005b61012086015151811015610bc257610bba866101200151602001518281518110610b9f57fe5b6020026020010151876020015161136290919063ffffffff16565b600101610b79565b50505050505b50565b6000610bd561591c565b8260a001516040518060a00160405280610bf28660000151611c0b565b8152602001610c048660200151611c0b565b81526020018560400151815260200185606001518152602001856080015181525091509150915091565b6040805160f89790971b6001600160f81b03191660208089019190915260609690961b6bffffffffffffffffffffffff191660218801526035870194909452605586019290925260758501526095808501919091528151808503909101815260b59093019052815191012090565b610ca46159d3565b60408051600680825260e08201909252606091816020015b610cc46159d3565b815260200190600190039081610cbc579050509050610ce58860ff16611ce5565b81600081518110610cf257fe5b6020026020010181905250610d0687611ce5565b81600181518110610d1357fe5b6020026020010181905250610d2786611ce5565b81600281518110610d3457fe5b6020026020010181905250610d51856001600160a01b0316611ce5565b81600381518110610d5e57fe5b6020026020010181905250610d7284611ce5565b81600481518110610d7f57fe5b6020026020010181905250610d978360008551611d9e565b81600581518110610da457fe5b6020026020010181905250610db881611f22565b98975050505050505050565b6000610dce6159d3565b83518310610e14576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b600080610e21868661203b565b91509150610e2d612062565b60ff168160ff161415610e61576000610e468784612067565b909350905082610e5582611ce5565b94509450505050610f7f565b610e696120db565b60ff168160ff161415610e8b57610e8086836120e0565b935093505050610f7f565b610e93612182565b60ff168160ff161415610ebb576000610eac8784612067565b909350905082610e5582612187565b610ec3612244565b60ff168160ff161415610eda57610e808683612249565b610ee26122dd565b60ff168160ff1610158015610f035750610efa6122e2565b60ff168160ff16105b15610f3f576000610f126122dd565b820390506060610f238289866122e7565b909450905083610f3282611f22565b9550955050505050610f7f565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b6000610f90615a10565b610f98615a10565b6000610100820181905280610fad8787612067565b9096509150610fbc8787612249565b60208501529550610fcd8787612249565b60408501529550610fde8787610dc4565b60608501529550610fef8787610dc4565b608085015295506110008787612067565b60a085015295506110118787612067565b90965090506110208787610dc4565b60e085015291835260c08301529590945092505050565b61103f615a10565b60405180610120016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e00151815260200183610100015181525090505b919050565b6110b46159d3565b604080516000808252602082019092526110ee916110e8565b6110d56159d3565b8152602001906001900390816110cd5790505b50611f22565b905090565b6110fb6159d3565b6040805160608101825260ff85168152602080820185905282516000808252918101845261114e93830191611146565b6111336159d3565b81526020019060019003908161112b5790505b509052612380565b90505b92915050565b61115f6159d3565b604080516001808252818301909252606091816020015b61117e6159d3565b81526020019060019003908161117657905050905082816000815181106111a157fe5b60200260200101819052506111d260405180606001604052808760ff16815260200186815260200183815250612380565b95945050505050565b60006111e5612062565b60ff16826080015160ff161415611208578151611201906123ee565b90506110a7565b6112106120db565b60ff16826080015160ff16141561122e576112018260200151612412565b611236612244565b60ff16826080015160ff16141561125857815160a0830151611201919061250f565b6112606122dd565b60ff16826080015160ff161415611299576112796159d3565b6112868360400151612560565b9050611291816111db565b9150506110a7565b6112a16126c2565b60ff16826080015160ff1614156112ba575080516110a7565b6112c2612182565b60ff16826080015160ff161415611307575060608082015160408051607b602080830191909152818301939093528151808203830181529301905281519101206110a7565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b6113568260200151826126c7565b82602001819052505050565b6113708260400151826126c7565b82604001819052505050565b6000808061298b60018514806113925750600285145b8061139d5750600385145b156113b75750600292506000915060039050612745611b31565b60048514806113c65750600685145b156113e057506002925060009150600490506129a4611b31565b60058514806113ef5750600785145b1561140957506002925060009150600790506129a4611b31565b60088514806114185750600985145b156114325750600392506000915060049050612a76611b31565b600a8514156114505750600292506000915060199050612745611b31565b600b85141561146e5750600292506000915060079050612745611b31565b601085148061147d5750601185145b806114885750601285145b806114935750601385145b8061149e5750601685145b806114a95750601785145b806114b45750601885145b156114cd57506002925060009150829050612745611b31565b60148514156114ea57506002925060009150829050612b63611b31565b601585141561150757506001925060009150829050612bbc611b31565b601985141561152457506001925060009150829050612c18611b31565b601a8514806115335750601b85145b8061153e5750601c85145b806115495750601d85145b156115635750600292506000915060049050612745611b31565b60208514156115815750600192506000915060079050612c64611b31565b602185141561159f5750600192506000915060039050612c91611b31565b60228514156115bd5750600292506000915060089050612745611b31565b60238514156115dc575060019250600091506102589050612cbb611b31565b60248514156115fa5750600392506000915060fa9050612e99611b31565b603085141561161757506001925060009150829050612f57611b31565b603185141561163457506000925082915060019050612f65611b31565b603285141561165157506000925082915060019050612f7c611b31565b603385141561166f5750600192506000915060029050612f93611b31565b603485141561168d5750600192506000915060049050612fad611b31565b60358514156116ab5750600292506000915060049050612fee611b31565b60368514156116c857506000925082915060029050613062611b31565b60378514156116e5575060009250829150600190506130a6611b31565b6038851415611702575060019250600091508290506130bf611b31565b603985141561171f575060009250600191508190506130d6611b31565b603a85141561173c575060009250829150600290506130ed611b31565b603b85141561175957506000925082915060019050610bc8611b31565b603c8514156117765750600092508291506001905061311b611b31565b603d85141561179357506001925060009150829050613137611b31565b60408514156117b05750600192506000915082905061317b611b31565b60418514156117ce57506002925060009150600190506131b1611b31565b60428514156117ec575060039250600091506001905061320e611b31565b604385141561180a5750600292506000915060019050613292611b31565b604485141561182857506003925060009150600190506132d1611b31565b605085141561184557506002925060009150829050613337611b31565b605185141561186357506003925060009150602890506133d4611b31565b60528514156118815750600192506000915060029050613491611b31565b605385141561189e575060019250829150600390506134dc611b31565b60548514156118bc575060029250600191506029905061355e611b31565b60608514156118d957506000925082915060649050610bc8611b31565b60618514156118f7575060019250600091506064905061361b611b31565b60708514156119155750600192506000915060649050613662611b31565b607185141561193357506001925060009150602890506136ea611b31565b607285141561195057506000925082915060289050613767611b31565b607385141561196d575060009250829150600590506137c7611b31565b607485141561198a575060009250829150600a90506137d0611b31565b60758514156119a7575060019250600091508190506137dd611b31565b60768514156119c457506000925082915060019050613818611b31565b60778514156119e157506000925082915060199050613832611b31565b60788514156119ff5750600292506000915060199050613883611b31565b6079851415611a1d57506003925060009150601990506138fb611b31565b607b851415611a3a575060009250829150600a905061398c611b31565b6080851415611a5957506004925060009150614e2090506139d4611b31565b6081851415611a7857506004925060009150610dac9050613b4d611b31565b6082851415611a9857506003925060009150620140509050613c8a611b31565b6083851415611ab7575060019250600091506103e89050613d85611b31565b60a0851415611ad457506000925082915060019050614086611b31565b60a18510801590611ae6575060a68511155b15611b225760405162461bcd60e51b815260040180806020018281038252602d815260200180615bf6602d913960400191505060405180910390fd5b50600092508291508190506137c75b9193509193565b60a080830180516001600160401b03908401811690915260208401519091015160009183161115611b8257602083015160001960a090910152611b7a83611ba2565b506001611151565b50602082015160a00180516001600160401b038316900390526000611151565b60408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051908201209082015160c001511415611bfe57611bf981602001516140c1565b610bc8565b6020015160c08101519052565b600060028261010001511415611c23575060006110a7565b60018261010001511415611c39575060016110a7565b81516020830151611c49906111db565b611c5684604001516111db565b611c6385606001516111db565b611c7086608001516111db565b8660a001518760c00151611c878960e001516111db565b60405160200180898152602001888152602001878152602001868152602001858152602001848152602001838152602001828152602001985050505050505050506040516020818303038152906040528051906020012090506110a7565b611ced6159d3565b6040805160c0810182528381528151606081018352600080825260208281018290528451828152808201865293949085019390830191611d43565b611d306159d3565b815260200190600190039081611d285790505b50905281526040805160008082526020828101909352919092019190611d7f565b611d6c6159d3565b815260200190600190039081611d645790505b5081526000602082018190526040820152600160609091015292915050565b611da66159d3565b60208204611db26159d3565b611dba6110ac565b60408051600280825260608281019093529293509091816020015b611ddd6159d3565b815260200190600190039081611dd557905050905060005b83811015611e5e57611e1a611e1589602084028a0163ffffffff6140cc16565b611ce5565b82600081518110611e2757fe5b60200260200101819052508282600181518110611e4057fe5b6020026020010181905250611e5482612560565b9250600101611df5565b506020850615611ed4576000611e8088601f198989010163ffffffff6140cc16565b9050602086066020036008021b611e9681611ce5565b82600081518110611ea357fe5b60200260200101819052508282600181518110611ebc57fe5b6020026020010181905250611ed082612560565b9250505b611edd85611ce5565b81600081518110611eea57fe5b60200260200101819052508181600181518110611f0357fe5b6020026020010181905250611f1781612560565b979650505050505050565b611f2a6159d3565b611f348251614125565b611f85576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b8351811015611fbc57838181518110611f9f57fe5b602002602001015160a00151820191508080600101915050611f8a565b506040805160c0810182526000808252825160608101845281815260208181018390528451838152808201865293949085019391929083019190612016565b6120036159d3565b815260200190600190039081611ffb5790505b5090528152602081019490945260006040850152600360608501526080909301525090565b6000808260010184848151811061204e57fe5b016020015190925060f81c90509250929050565b600090565b6000808284511015801561207f575060208385510310155b6120bc576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b602083016120d0858563ffffffff6140cc16565b915091509250929050565b600190565b60006120ea6159d3565b826000806120f66159d3565b6000612102898661203b565b9095509350612111898661203b565b9095509250600160ff851614156121325761212c8986610dc4565b90955091505b61213c898661412c565b9095509050600160ff851614156121675784612159848385611157565b965096505050505050610f7f565b8461217284836110f3565b9650965050505050509250929050565b600c90565b61218f6159d3565b6040805160c08101825260008082528251606081018452818152602081810183905284518381528082018652939490850193919290830191906121e8565b6121d56159d3565b8152602001906001900390816121cd5790505b50905281526040805160008082526020828101909352919092019190612224565b6122116159d3565b8152602001906001900390816122095790505b50815260208101849052600c604082015260016060909101529050919050565b600290565b60006122536159d3565b82845110158015612268575060408385510310155b6122a4576040805162461bcd60e51b81526020600482015260086024820152671d1bc81cda1bdc9d60c21b604482015290519081900360640190fd5b6000806122b1868661412c565b90945091506122c08685612067565b9094509050836122d08383614143565b9350935050509250929050565b600390565b600d90565b60006060600083905060608660ff1660405190808252806020026020018201604052801561232f57816020015b61231c6159d3565b8152602001906001900390816123145790505b50905060005b8760ff168160ff1610156123735761234d8784610dc4565b8351849060ff851690811061235e57fe5b60209081029190910101529250600101612335565b5090969095509350505050565b6123886159d3565b6040805160c08101825260008082526020808301869052835182815290810184529192830191906123cf565b6123bc6159d3565b8152602001906001900390816123b45790505b5081526000602082015260016040820181905260609091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b600060028260400151511061242357fe5b604082015151612488576124356120db565b8251602080850151604080516001600160f81b031960f896871b8116828601529490951b9093166021850152602280850191909152825180850390910181526042909301909152815191012090506110a7565b6124906120db565b82600001516124b684604001516000815181106124a957fe5b60200260200101516111db565b8460200151604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b60006125196122dd565b8383604051602001808460ff1660ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b6125686159d3565b6008825111156125b6576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b606082516040519080825280602002602001820160405280156125e3578160200160208202803883390190505b508051909150600160005b82811015612646576126058682815181106124a957fe5b84828151811061261157fe5b60200260200101818152505085818151811061262957fe5b602002602001015160a001518201915080806001019150506125ee565b506000835184604051602001808360ff1660ff1660f81b8152600101828051906020019060200280838360005b8381101561268b578181015183820152602001612673565b50505050905001925050506040516020818303038152906040528051906020012090506126b88183614143565b9695505050505050565b606490565b6126cf6159d3565b6040805160028082526060828101909352816020015b6126ed6159d3565b8152602001906001900390816126e5579050509050828160008151811061271057fe5b6020026020010181905250838160018151811061272957fe5b602002602001018190525061273d81612560565b949350505050565b61274d6159d3565b61275b8261010001516141fb565b90506127656159d3565b6127738361010001516141fb565b905061277e8261423d565b1580612790575061278e8161423d565b155b156127a55761279e83614248565b5050610bc8565b8151815161016085015160009060ff16600114156127c6575081810161298d565b61016086015160ff16600214156127e0575081810261298d565b61016086015160ff16600314156127fa575080820361298d565b61016086015160ff16600a1415612814575080820a61298d565b61016086015160ff16600b141561282e575080820b61298d565b61016086015160ff1660101415612848575080821061298d565b61016086015160ff1660111415612862575080821161298d565b61016086015160ff166012141561287c575080821261298d565b61016086015160ff1660131415612896575080821361298d565b61016086015160ff16601614156128b0575081811661298d565b61016086015160ff16601714156128ca575081811761298d565b61016086015160ff16601814156128e4575081811861298d565b61016086015160ff16601a14156128fe575080821a61298d565b61016086015160ff16601b1415612918575080821b61298d565b61016086015160ff16601c1415612932575080821c61298d565b61016086015160ff16601d141561294c575080821d61298d565b61016086015160ff166022141561298b57506040805160208082018590528183018490528251808303840181526060909201909252805191012061298d565bfe5b610bc286610100015161299f83611ce5565b614267565b6129ac6159d3565b6129ba8261010001516141fb565b90506129c46159d3565b6129d28361010001516141fb565b90506129dd8261423d565b15806129ef57506129ed8161423d565b155b806129f957508051155b15612a075761279e83614248565b8151815161016085015160009060ff1660041415612a28575080820461298d565b61016086015160ff1660051415612a42575080820561298d565b61016086015160ff1660061415612a5c575080820661298d565b61016086015160ff166007141561298b575080820761298d565b612a7e6159d3565b612a8c8261010001516141fb565b9050612a966159d3565b612aa48361010001516141fb565b9050612aae6159d3565b612abc8461010001516141fb565b9050612ac78361423d565b1580612ad95750612ad78261423d565b155b80612aea5750612ae88161423d565b155b80612af457508051155b15612b0a57612b0284614248565b505050610bc8565b82518251825161016087015160009060ff1660081415612b2f57818385089050612b47565b61016088015160ff166009141561298b578183850990505b612b5988610100015161299f83611ce5565b5050505050505050565b612b6b6159d3565b612b798261010001516141fb565b9050612b836159d3565b612b918361010001516141fb565b9050612bb783610100015161299f612ba8846111db565b612bb1866111db565b14614291565b505050565b612bc46159d3565b612bd28261010001516141fb565b9050612bdd8161423d565b612bf957612bf482610100015161299f6000611ce5565b612c14565b8051610100830151811590612c119061299f83611ce5565b50505b5050565b612c206159d3565b612c2e8261010001516141fb565b9050612c398161423d565b612c4c57612c4682614248565b50610bc8565b8051610100830151811990612c119061299f83611ce5565b612c6c6159d3565b612c7a8261010001516141fb565b9050612c1482610100015161299f611e15846111db565b612c996159d3565b612ca78261010001516141fb565b9050612c1482610100015161299f836142b3565b612cc36159d3565b612cd18261010001516141fb565b9050612cdc81614320565b1580612cee5750806040015151600714155b15612cfc57612c4682614248565b604081015160005b6007811015612d3e57612d29828281518110612d1c57fe5b602002602001015161423d565b612d3657612b0284614248565b600101612d04565b50612d47615a7b565b60005b6019811015612dab5760406003821602836004830481518110612d6957fe5b602002602001015160000151901c6001600160401b03168260058381612d8b57fe5b04600584066005020160198110612d9e57fe5b6020020152600101612d4a565b50612db58161432d565b604080516007808252610100820190925291925060609190816020015b612dda6159d3565b815260200190600190039081612dd257905050905060005b6007811015612e2457612e056000611ce5565b828281518110612e1157fe5b6020908102919091010152600101612df2565b5060005b6019811015612e7f57604060038216028360058304600584066005020160198110612e4f57fe5b6020020151901b826004830481518110612e6557fe5b602090810291909101015180519091179052600101612e28565b50612e9285610100015161299f83611f22565b5050505050565b612ea16159d3565b612eaf8261010001516141fb565b9050612eb96159d3565b612ec78361010001516141fb565b9050612ed16159d3565b612edf8461010001516141fb565b9050612eea8361423d565b1580612efc5750612efa8261423d565b155b80612f0d5750612f0b8161423d565b155b15612f1b57612b0284614248565b8251825182516101008701516040805180820190915283815260208101839052612f4e919061299f90611e159087614f1e565b50505050505050565b612c148161010001516141fb565b610bc8816101000151826020015160800151614267565b610bc8816101000151826020015160600151614267565b612fa18161010001516141fb565b60209091015160600152565b612fb56159d3565b612fc38261010001516141fb565b9050612fce8161563b565b612fdb57612c4682614248565b612fe4816111db565b6020830151525050565b612ff66159d3565b6130048261010001516141fb565b905061300e6159d3565b61301c8361010001516141fb565b90506130278261563b565b158061303957506130378161423d565b155b156130475761279e83614248565b805115612bb757613057826111db565b602084015152505050565b61010081015151600090158015613092575061307f6108b56110ac565b6130908360200151602001516111db565b145b9050612c1482610100015161299f83614291565b610100810151815151610bc8919061299f906001615648565b610bc881610120015161299f8361010001516141fb565b610bc881610100015161299f8361012001516141fb565b61012081015151600090158015613092575061310a6108b56110ac565b6130908360200151604001516111db565b610bc881610100015161299f836020015160c001516001615648565b61313f6159d3565b61314d8261010001516141fb565b90506131588161563b565b61316557612c4682614248565b61316e816111db565b602083015160c001525050565b6131836159d3565b6131918261010001516141fb565b90506131a282610100015182614267565b612c1482610100015182614267565b6131b96159d3565b6131c78261010001516141fb565b90506131d16159d3565b6131df8361010001516141fb565b90506131f083610100015182614267565b6131ff83610100015183614267565b612bb783610100015182614267565b6132166159d3565b6132248261010001516141fb565b905061322e6159d3565b61323c8361010001516141fb565b90506132466159d3565b6132548461010001516141fb565b905061326584610100015182614267565b61327484610100015183614267565b61328384610100015184614267565b612c1184610100015182614267565b61329a6159d3565b6132a88261010001516141fb565b90506132b26159d3565b6132c08361010001516141fb565b90506131ff83610100015183614267565b6132d96159d3565b6132e78261010001516141fb565b90506132f16159d3565b6132ff8361010001516141fb565b90506133096159d3565b6133178461010001516141fb565b905061332884610100015184614267565b61328384610100015183614267565b61333f6159d3565b61334d8261010001516141fb565b90506133576159d3565b6133658361010001516141fb565b90506133708261423d565b1580613382575061338081614320565b155b8061339c575061339181615700565b60ff16826000015110155b156133aa5761279e83614248565b612bb783610100015182604001518460000151815181106133c757fe5b6020026020010151614267565b6133dc6159d3565b6133ea8261010001516141fb565b90506133f46159d3565b6134028361010001516141fb565b905061340c6159d3565b61341a8461010001516141fb565b90506134258361423d565b1580613437575061343582614320565b155b80613451575061344682615700565b60ff16836000015110155b1561345f57612b0284614248565b60408201518351815183918391811061347457fe5b6020026020010181905250612e9285610100015161299f83611f22565b6134996159d3565b6134a78261010001516141fb565b90506134b281614320565b6134bf57612c4682614248565b612c1482610100015161299f6134d484615700565b60ff16611ce5565b6134e46159d3565b6134f28261010001516141fb565b90506134fc6159d3565b61350a8361012001516141fb565b90506135158261423d565b1580613527575061352581614320565b155b80613541575061353681615700565b60ff16826000015110155b1561354f5761279e83614248565b6133aa83610120015182614267565b6135666159d3565b6135748261010001516141fb565b905061357e6159d3565b61358c8361010001516141fb565b90506135966159d3565b6135a48461012001516141fb565b90506135af81614320565b15806135c157506135bf8361423d565b155b806135db57506135d081615700565b60ff16836000015110155b156135e957612b0284614248565b6040810151835181518491839181106135fe57fe5b6020026020010181905250612e9285610120015161299f83611f22565b80608001516136316108b58361010001516141fb565b6040805160208082019490945280820192909252805180830382018152606090920190528051910120608090910152565b61366a6159d3565b6136788261010001516141fb565b90506127108160a001511180613694575061369281615727565b155b156136a257612c4682614248565b81606001516136b0826111db565b6040516020018083815260200182815260200192505050604051602081830303815290604052805190602001208260600181815250505050565b6136f26159d3565b6137008261010001516141fb565b905061370d6108b56110ac565b61371e836020015160e001516111db565b146137365761372c82615825565b602083015160e001525b612c1482610100015161299f61374b846111db565b612bb1866020015160e00151604001516001815181106124a957fe5b6137726108b56110ac565b613783826020015160e001516111db565b146137b55761379f816101000151826020015160e00151614267565b6137a76110ac565b602082015160e00152610bc8565b610bc881610100015161299f83615825565b610bc881614248565b610bc881602001516158be565b6137e56159d3565b6137f38261010001516141fb565b90506137fe8161423d565b61380b57612c4682614248565b51602082015160a0015250565b610bc881610100015161299f836020015160a00151611ce5565b61010081015160408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051910120610bc8919061299f906001615648565b61388b6159d3565b6138998261010001516141fb565b90506138a36159d3565b6138b18361010001516141fb565b90506138bc8261423d565b15806138ce57506138cc8161563b565b155b156138dc5761279e83614248565b612bb783610100015161299f84600001516138f6856111db565b6110f3565b6139036159d3565b6139118261010001516141fb565b905061391b6159d3565b6139298361010001516141fb565b90506139336159d3565b6139418461010001516141fb565b905061394c8361423d565b158061395e575061395c8161563b565b155b1561396c57612b0284614248565b612c1184610100015161299f8560000151613986856111db565b86611157565b604080516000808252602082019092526060916139bf565b6139ac6159d3565b8152602001906001900390816139a45790505b509050612c1482610100015161299f83611f22565b6139dc6159d3565b6139ea8261010001516141fb565b90506139f46159d3565b613a028361010001516141fb565b9050613a0c6159d3565b613a1a8461010001516141fb565b9050613a246159d3565b613a328561010001516141fb565b9050613a3d8461423d565b1580613a4f5750613a4d8361423d565b155b80613a605750613a5e8261423d565b155b80613a715750613a6f8161423d565b155b15613a7f5761094885614248565b83518351835115801590613a9557508351600114155b15613ab857613aad87610100015161299f6000611ce5565b505050505050610bc8565b83518351604080516000808252602080830180855285905260ff601b9096019586168385015260608301889052608083018790529251909260019260a080820193601f1981019281900390910190855afa158015613b1a573d6000803e3d6000fd5b505050602060405103519050613b418a610100015161299f836001600160a01b0316611ce5565b50505050505050505050565b613b556159d3565b613b638261010001516141fb565b9050613b6d6159d3565b613b7b8361010001516141fb565b9050613b856159d3565b613b938461010001516141fb565b9050613b9d6159d3565b613bab8561010001516141fb565b9050613bb68461423d565b1580613bc85750613bc68361423d565b155b80613bd95750613bd78261423d565b155b80613bea5750613be88161423d565b155b15613bf85761094885614248565b613c00615a9a565b5060408051608081018252855181528451602082015283519181019190915281516060820152613c2e615ab8565b600060408260808560066107d05a03fa905080613c5a57613c4e88614248565b50505050505050610bc8565b610100880151613c759061299f8460015b6020020151611ce5565b610100880151612b599061299f846000613c6b565b613c926159d3565b613ca08261010001516141fb565b9050613caa6159d3565b613cb88361010001516141fb565b9050613cc26159d3565b613cd08461010001516141fb565b9050613cdb8361423d565b1580613ced5750613ceb8261423d565b155b80613cfe5750613cfc8161423d565b155b15613d0c57612b0284614248565b613d14615ad6565b50604080516060810182528451815283516020820152825191810191909152613d3b615ab8565b600060408260808560076107d05a03fa905080613d5b57613aad87614248565b610100870151613d709061299f846001613c6b565b610100870151612f4e9061299f846000613c6b565b613d8d6159d3565b613d9b8261010001516141fb565b9050613da5615af4565b60005b601e811015613e3557613dba83614320565b613dc757612b0284614248565b60408301518051613dd85750613e35565b8051600214613dea5761094885614248565b80600081518110613df757fe5b60200260200101518383601e8110613e0b57fe5b6020020152805181906001908110613e1f57fe5b6020908102919091010151935050600101613da8565b613e44846207a1208302611b38565b15613e5157505050610bc8565b613e5a83614320565b1580613e6a575060408301515115155b15613e7857612b0284614248565b613e80615b22565b60005b8281101561404257613e936159d3565b8482601e8110613e9f57fe5b60200201519050613eaf81614320565b613ebc57613aad87614248565b60408101518051600614613ed357613c4e88614248565b60005b6006811015613f1057613eee828281518110612d1c57fe5b613f0857613efb89614248565b5050505050505050610bc8565b600101613ed6565b5080600081518110613f1e57fe5b602002602001015160000151848460060260b48110613f3957fe5b6020020152805181906001908110613f4d57fe5b602002602001015160000151848460060260010160b48110613f6b57fe5b6020020152805181906003908110613f7f57fe5b602002602001015160000151848460060260020160b48110613f9d57fe5b6020020152805181906002908110613fb157fe5b602002602001015160000151848460060260030160b48110613fcf57fe5b6020020152805181906005908110613fe357fe5b602002602001015160000151848460060260040160b4811061400157fe5b602002015280518190600490811061401557fe5b602002602001015160000151848460060260050160b4811061403357fe5b60200201525050600101613e83565b5060c0820261404f615b41565b6000602082848660086107d05a03fa90508061406e57613c4e88614248565b6101008801518251612b59919061299f901515614291565b610bc881610100015161299f6000801b6040516020018082815260200191505060405160208183030381529060405280519060200120612187565b600161010090910152565b6000816020018351101561411c576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b6008101590565b600080602083016120d0858563ffffffff6140cc16565b61414b6159d3565b6040805160c08101825284815281516060810183526000808252602082810182905284518281528082018652939490850193908301916141a1565b61418e6159d3565b8152602001906001900390816141865790505b509052815260408051600080825260208281019093529190920191906141dd565b6141ca6159d3565b8152602001906001900390816141c25790505b50815260006020820152600260408201526060019290925250919050565b6142036159d3565b61420b6159d3565b826020015160018460000151038151811061422257fe5b60209081029190910101518351600019018452915050919050565b6080015160ff161590565b61425181611ba2565b6101008101516000908190526101209091015152565b80826020015183600001518151811061427c57fe5b60209081029190910101525080516001019052565b6142996159d3565b81156142a9576112016001611ce5565b6112016000611ce5565b6142bb6159d3565b816080015160ff1660021415614310576040805162461bcd60e51b8152602060048201526015602482015274696e76616c6964207479706520636f6465203f3f3f60581b604482015290519081900360640190fd5b611151826080015160ff16611ce5565b6080015160ff1660031490565b614335615a7b565b61433d61591c565b61434561591c565b61434d615a7b565b614355615b5f565b60405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060008090505b6018811015614f13576080878101516060808a01516040808c01516020808e01518e511890911890921890931889526101208b01516101008c015160e08d015160c08e015160a08f0151181818189089018190526101c08b01516101a08c01516101808d01516101608e01516101408f0151181818189289019283526102608b01516102408c01516102208d01516102008e01516101e08f015118181818918901919091526103008a01516102e08b01516102c08c01516102a08d01516102808e0151181818189288018390526001600160401b0360028202166001603f1b91829004179092188652510485600260200201516002026001600160401b03161785600060200201511884600160200201526001603f1b8560036020020151816145a157fe5b0485600360200201516002026001600160401b03161785600160200201511884600260200201526001603f1b8560046020020151816145dc57fe5b0485600460200201516002026001600160401b031617856002600581106145ff57fe5b602002015118606085015284516001603f1b9086516060808901519390920460029091026001600160401b031617909118608086810191825286518a5118808b5287516020808d018051909218825289516040808f0180519092189091528a518e8801805190911890528a51948e0180519095189094528901805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291880180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292870180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a01805190911890529084525163100000009060208901516001600160401b03641000000000909102169190041761010084015260408701516001603d1b9060408901516001600160401b03600890910216919004176101608401526060870151628000009060608901516001600160401b036502000000000090910216919004176102608401526080870151654000000000009060808901516001600160401b036204000090910216919004176102c084015260a08701516001603f1b900487600560200201516002026001600160401b0316178360026019811061486957fe5b602002015260c0870151621000008104651000000000009091026001600160401b039081169190911760a085015260e0880151664000000000000081046104009091028216176101a08501526101008801516208000081046520000000000090910282161761020085015261012088015160048082029092166001603e1b909104176103008501526101408801516101408901516001600160401b036001603e1b90910216919004176080840152610160870151670400000000000000906101608901516001600160401b036040909102169190041760e084015261018087015162200000906101808901516001600160401b036508000000000090910216919004176101408401526101a08701516602000000000000906101a08901516001600160401b0361800090910216919004176102408401526101c08701516008906101c08901516001600160401b036001603d1b90910216919004176102a08401526101e0870151641000000000906101e08901516001600160401b03631000000090910216919004176020840152610200808801516102008901516001600160401b0366800000000000009091021691900417610120840152610220870151648000000000906102208901516001600160401b036302000000909102169190041761018084015261024087015165080000000000906102408901516001600160401b036220000090910216919004176101e0840152610260870151610100906102608901516001600160401b03600160381b90910216919004176102e0840152610280870151642000000000906102808901516001600160401b036308000000909102169190041760608401526102a087015165100000000000906102a08901516001600160401b0362100000909102169190041760c08401526102c08701516302000000906102c08901516001600160401b0364800000000090910216919004176101c08401526102e0870151600160381b906102e08901516001600160401b036101009091021691900417610220840152610300870151660400000000000090048760186020020151614000026001600160401b031617836014602002015282600a602002015183600560200201511916836000602002015118876000602002015282600b602002015183600660200201511916836001602002015118876001602002015282600c602002015183600760200201511916836002602002015118876002602002015282600d602002015183600860200201511916836003602002015118876003602002015282600e602002015183600960200201511916836004602002015118876004602002015282600f602002015183600a602002015119168360056020020151188760056020020152826010602002015183600b602002015119168360066020020151188760066020020152826011602002015183600c602002015119168360076020020151188760076020020152826012602002015183600d602002015119168360086020020151188760086020020152826013602002015183600e602002015119168360096020020151188760096020020152826014602002015183600f6020020151191683600a60200201511887600a602002015282601560200201518360106020020151191683600b60200201511887600b602002015282601660200201518360116020020151191683600c60200201511887600c602002015282601760200201518360126020020151191683600d60200201511887600d602002015282601860200201518360136020020151191683600e60200201511887600e602002015282600060200201518360146020020151191683600f60200201511887600ff0157fe5b6020020151875118875260010161447c565b509495945050505050565b6000614f28615b7e565b50604080516108008101825263428a2f9881526371374491602082015263b5c0fbcf9181019190915263e9b5dba56060820152633956c25b60808201526359f111f160a082015263923f82a460c082015263ab1c5ed560e082015263d807aa986101008201526312835b0161012082015263243185be61014082015263550c7dc36101608201526372be5d746101808201526380deb1fe6101a0820152639bdc06a76101c082015263c19bf1746101e082015263e49b69c161020082015263efbe4786610220820152630fc19dc661024082015263240ca1cc610260820152632de92c6f610280820152634a7484aa6102a0820152635cb0a9dc6102c08201526376f988da6102e082015263983e515261030082015263a831c66d61032082015263b00327c861034082015263bf597fc761036082015263c6e00bf361038082015263d5a791476103a08201526306ca63516103c082015263142929676103e08201526327b70a85610400820152632e1b2138610420820152634d2c6dfc6104408201526353380d1361046082015263650a735461048082015263766a0abb6104a08201526381c2c92e6104c08201526392722c856104e082015263a2bfe8a161050082015263a81a664b61052082015263c24b8b7061054082015263c76c51a361056082015263d192e81961058082015263d69906246105a082015263f40e35856105c082015263106aa0706105e08201526319a4c116610600820152631e376c08610620820152632748774c6106408201526334b0bcb561066082015263391c0cb3610680820152634ed8aa4a6106a0820152635b9cca4f6106c082015263682e6ff36106e082015263748f82ee6107008201526378a5636f6107208201526384c87814610740820152638cc702086107608201526390befffa61078082015263a4506ceb6107a082015263bef9a3f76107c082015263c67178f26107e08201526151f3615b7e565b60005b60088163ffffffff1610156152805763ffffffff6020820260e003168660006020020151901c828263ffffffff166040811061522e57fe5b63ffffffff92831660209182029290920191909152820260e003168660016020020151901c828260080163ffffffff166040811061526857fe5b63ffffffff90921660209290920201526001016151f6565b5060106000805b60408363ffffffff1610156153dc57600384600f850363ffffffff16604081106152ad57fe5b602002015163ffffffff16901c6152de85600f860363ffffffff16604081106152d257fe5b602002015160126158c9565b61530286600f870363ffffffff16604081106152f657fe5b602002015160076158c9565b18189150600a846002850363ffffffff166040811061531d57fe5b602002015163ffffffff16901c61534e856002860363ffffffff166040811061534257fe5b602002015160136158c9565b615372866002870363ffffffff166040811061536657fe5b602002015160116158c9565b1818905080846007850363ffffffff166040811061538c57fe5b602002015183866010870363ffffffff16604081106153a757fe5b6020020151010101848463ffffffff16604081106153c157fe5b63ffffffff9092166020929092020152600190920191615287565b6153e4615b9d565b600093505b60088463ffffffff161015615435578360200260e00363ffffffff1688901c818563ffffffff166008811061541a57fe5b63ffffffff90921660209290920201526001909301926153e9565b60008060008096505b60408763ffffffff16101561558a57608084015161545d9060196158c9565b608085015161546d90600b6158c9565b608086015161547d9060066158c9565b18189450878763ffffffff166040811061549357fe5b6020020151898863ffffffff16604081106154aa57fe5b6020020151608086015160a087015160c08801516154c99291906158e7565b8787600760200201510101010192506154ea846000602002015160166158c9565b84516154f790600d6158c9565b85516155049060026158c9565b6040870180516020890180518a5160c08c01805163ffffffff90811660e08f015260a08e018051821690925260808e018051821690925260608e0180518e0182169092528086169091528083169095528481169092528083189190911691161892909118929092188181018681019093168752600199909901989750909250905061543e565b600096505b60088763ffffffff1610156155de578660200260e00363ffffffff168b901c848863ffffffff16600881106155c057fe5b60200201805163ffffffff920191909116905260019096019561558f565b60008097505b60088863ffffffff16101561562b578760200260e00363ffffffff16858963ffffffff166008811061561257fe5b602002015160019099019863ffffffff16901b176155e4565b9c9b505050505050505050505050565b6080015160ff1660011490565b6156506159d3565b6040805160c08101825284815281516060810183526000808252602082810182905284518281528082018652939490850193908301916156a6565b6156936159d3565b81526020019060019003908161568b5790505b509052815260408051600080825260208281019093529190920191906156e2565b6156cf6159d3565b8152602001906001900390816156c75790505b50815260006020820152606460408201526060019290925250919050565b608081015160009060ff166003141561571f57506040810151516110a7565b5060016110a7565b608081015160009060ff1661573e575060016110a7565b608082015160ff1660011415615756575060006110a7565b608082015160ff16600214156157aa576040805162461bcd60e51b81526020600482015260146024820152736d75737420686176652066756c6c2076616c756560601b604482015290519081900360640190fd5b608082015160ff166003141561580d5760408201515160005b81811015615802576157eb846040015182815181106157de57fe5b6020026020010151615727565b6157fa576000925050506110a7565b6001016157c3565b5060019150506110a7565b608082015160ff1660641415611307575060006110a7565b61582d6159d3565b60e082015160408051808201909152600981526812539093d617d5905360ba1b60208201529061589e5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156106be5781810151838201526020016106a6565b506158b182604001518360e001516158f0565b60408301525060c0015190565b600261010090910152565b63ffffffff9182166020829003831681901b919092169190911c1790565b82191691161890565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6040518060a001604052806005906020820280388339509192915050565b604051806101e0016040528061594e615a10565b815260200161595b615a10565b81526000602082018190526040820181905260608201819052608082015260a0016159846159d3565b815260006020820152604001615998615bbc565b81526020016159a5615bbc565b8152602001600015158152602001600060ff1681526020016060815260200160008152602001606081525090565b6040518060c00160405280600081526020016159ed615bd6565b815260606020820181905260006040830181905290820181905260809091015290565b6040805161012081019091526000815260208101615a2c6159d3565b8152602001615a396159d3565b8152602001615a466159d3565b8152602001615a536159d3565b81526000602082018190526040820152606001615a6e6159d3565b8152602001600081525090565b6040518061032001604052806019906020820280388339509192915050565b60405180608001604052806004906020820280388339509192915050565b60405180604001604052806002906020820280388339509192915050565b60405180606001604052806003906020820280388339509192915050565b604051806103c00160405280601e905b615b0c6159d3565b815260200190600190039081615b045790505090565b60405180611680016040528060b4906020820280388339509192915050565b60405180602001604052806001906020820280388339509192915050565b6040518061030001604052806018906020820280388339509192915050565b6040518061080001604052806040906020820280388339509192915050565b6040518061010001604052806008906020820280388339509192915050565b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fe75736520616e6f7465687220636f6e747261637420746f2068616e646c6520627566666572206f70636f646573a265627a7a7231582064cd5cadc6707dd795d2ba38d6566ce11eb1eaca5c10619ef77033c4980eb0d664736f6c63430005110032"

// DeployOneStepProof deploys a new Ethereum contract, binding an instance of OneStepProof to it.
func DeployOneStepProof(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// OneStepProof is an auto generated Go binding around an Ethereum contract.
type OneStepProof struct {
	OneStepProofCaller     // Read-only binding to the contract
	OneStepProofTransactor // Write-only binding to the contract
	OneStepProofFilterer   // Log filterer for contract events
}

// OneStepProofCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofSession struct {
	Contract     *OneStepProof     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProofCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofCallerSession struct {
	Contract *OneStepProofCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// OneStepProofTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTransactorSession struct {
	Contract     *OneStepProofTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// OneStepProofRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofRaw struct {
	Contract *OneStepProof // Generic contract binding to access the raw methods on
}

// OneStepProofCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofCallerRaw struct {
	Contract *OneStepProofCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTransactorRaw struct {
	Contract *OneStepProofTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof creates a new instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProof(address common.Address, backend bind.ContractBackend) (*OneStepProof, error) {
	contract, err := bindOneStepProof(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// NewOneStepProofCaller creates a new read-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofCaller, error) {
	contract, err := bindOneStepProof(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofCaller{contract: contract}, nil
}

// NewOneStepProofTransactor creates a new write-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTransactor, error) {
	contract, err := bindOneStepProof(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTransactor{contract: contract}, nil
}

// NewOneStepProofFilterer creates a new log filterer instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofFilterer, error) {
	contract, err := bindOneStepProof(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofFilterer{contract: contract}, nil
}

// bindOneStepProof binds a generic wrapper to an already deployed contract.
func bindOneStepProof(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.OneStepProofCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transact(opts, method, params...)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x385bc114.
//
// Solidity: function executeStep(bytes32 inboxAcc, bytes32 messagesAcc, bytes32 logsAcc, bytes proof) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof *OneStepProofCaller) ExecuteStep(opts *bind.CallOpts, inboxAcc [32]byte, messagesAcc [32]byte, logsAcc [32]byte, proof []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	var out []interface{}
	err := _OneStepProof.contract.Call(opts, &out, "executeStep", inboxAcc, messagesAcc, logsAcc, proof)

	outstruct := new(struct {
		Gas    uint64
		Fields [5][32]byte
	})

	outstruct.Gas = out[0].(uint64)
	outstruct.Fields = out[1].([5][32]byte)

	return *outstruct, err

}

// ExecuteStep is a free data retrieval call binding the contract method 0x385bc114.
//
// Solidity: function executeStep(bytes32 inboxAcc, bytes32 messagesAcc, bytes32 logsAcc, bytes proof) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof *OneStepProofSession) ExecuteStep(inboxAcc [32]byte, messagesAcc [32]byte, logsAcc [32]byte, proof []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	return _OneStepProof.Contract.ExecuteStep(&_OneStepProof.CallOpts, inboxAcc, messagesAcc, logsAcc, proof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x385bc114.
//
// Solidity: function executeStep(bytes32 inboxAcc, bytes32 messagesAcc, bytes32 logsAcc, bytes proof) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof *OneStepProofCallerSession) ExecuteStep(inboxAcc [32]byte, messagesAcc [32]byte, logsAcc [32]byte, proof []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	return _OneStepProof.Contract.ExecuteStep(&_OneStepProof.CallOpts, inboxAcc, messagesAcc, logsAcc, proof)
}

// ExecuteStepWithMessage is a free data retrieval call binding the contract method 0x96105dce.
//
// Solidity: function executeStepWithMessage(bytes32 inboxAcc, bytes32 messagesAcc, bytes32 logsAcc, bytes proof, uint8 _kind, uint256 _blockNumber, uint256 _timestamp, address _sender, uint256 _inboxSeqNum, bytes _msgData) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof *OneStepProofCaller) ExecuteStepWithMessage(opts *bind.CallOpts, inboxAcc [32]byte, messagesAcc [32]byte, logsAcc [32]byte, proof []byte, _kind uint8, _blockNumber *big.Int, _timestamp *big.Int, _sender common.Address, _inboxSeqNum *big.Int, _msgData []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	var out []interface{}
	err := _OneStepProof.contract.Call(opts, &out, "executeStepWithMessage", inboxAcc, messagesAcc, logsAcc, proof, _kind, _blockNumber, _timestamp, _sender, _inboxSeqNum, _msgData)

	outstruct := new(struct {
		Gas    uint64
		Fields [5][32]byte
	})

	outstruct.Gas = out[0].(uint64)
	outstruct.Fields = out[1].([5][32]byte)

	return *outstruct, err

}

// ExecuteStepWithMessage is a free data retrieval call binding the contract method 0x96105dce.
//
// Solidity: function executeStepWithMessage(bytes32 inboxAcc, bytes32 messagesAcc, bytes32 logsAcc, bytes proof, uint8 _kind, uint256 _blockNumber, uint256 _timestamp, address _sender, uint256 _inboxSeqNum, bytes _msgData) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof *OneStepProofSession) ExecuteStepWithMessage(inboxAcc [32]byte, messagesAcc [32]byte, logsAcc [32]byte, proof []byte, _kind uint8, _blockNumber *big.Int, _timestamp *big.Int, _sender common.Address, _inboxSeqNum *big.Int, _msgData []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	return _OneStepProof.Contract.ExecuteStepWithMessage(&_OneStepProof.CallOpts, inboxAcc, messagesAcc, logsAcc, proof, _kind, _blockNumber, _timestamp, _sender, _inboxSeqNum, _msgData)
}

// ExecuteStepWithMessage is a free data retrieval call binding the contract method 0x96105dce.
//
// Solidity: function executeStepWithMessage(bytes32 inboxAcc, bytes32 messagesAcc, bytes32 logsAcc, bytes proof, uint8 _kind, uint256 _blockNumber, uint256 _timestamp, address _sender, uint256 _inboxSeqNum, bytes _msgData) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof *OneStepProofCallerSession) ExecuteStepWithMessage(inboxAcc [32]byte, messagesAcc [32]byte, logsAcc [32]byte, proof []byte, _kind uint8, _blockNumber *big.Int, _timestamp *big.Int, _sender common.Address, _inboxSeqNum *big.Int, _msgData []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	return _OneStepProof.Contract.ExecuteStepWithMessage(&_OneStepProof.CallOpts, inboxAcc, messagesAcc, logsAcc, proof, _kind, _blockNumber, _timestamp, _sender, _inboxSeqNum, _msgData)
}

// PrecompilesABI is the input ABI used to generate the binding from.
const PrecompilesABI = "[]"

// PrecompilesBin is the compiled bytecode used for deploying new contracts.
var PrecompilesBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723158205ce6983cd5e455a6437cf442037f85435c299cf5e4e3e5a53a8e5ca4fe755cfe64736f6c63430005110032"

// DeployPrecompiles deploys a new Ethereum contract, binding an instance of Precompiles to it.
func DeployPrecompiles(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Precompiles, error) {
	parsed, err := abi.JSON(strings.NewReader(PrecompilesABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PrecompilesBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Precompiles{PrecompilesCaller: PrecompilesCaller{contract: contract}, PrecompilesTransactor: PrecompilesTransactor{contract: contract}, PrecompilesFilterer: PrecompilesFilterer{contract: contract}}, nil
}

// Precompiles is an auto generated Go binding around an Ethereum contract.
type Precompiles struct {
	PrecompilesCaller     // Read-only binding to the contract
	PrecompilesTransactor // Write-only binding to the contract
	PrecompilesFilterer   // Log filterer for contract events
}

// PrecompilesCaller is an auto generated read-only Go binding around an Ethereum contract.
type PrecompilesCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompilesTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PrecompilesTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompilesFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PrecompilesFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompilesSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PrecompilesSession struct {
	Contract     *Precompiles      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PrecompilesCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PrecompilesCallerSession struct {
	Contract *PrecompilesCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// PrecompilesTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PrecompilesTransactorSession struct {
	Contract     *PrecompilesTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// PrecompilesRaw is an auto generated low-level Go binding around an Ethereum contract.
type PrecompilesRaw struct {
	Contract *Precompiles // Generic contract binding to access the raw methods on
}

// PrecompilesCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PrecompilesCallerRaw struct {
	Contract *PrecompilesCaller // Generic read-only contract binding to access the raw methods on
}

// PrecompilesTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PrecompilesTransactorRaw struct {
	Contract *PrecompilesTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPrecompiles creates a new instance of Precompiles, bound to a specific deployed contract.
func NewPrecompiles(address common.Address, backend bind.ContractBackend) (*Precompiles, error) {
	contract, err := bindPrecompiles(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Precompiles{PrecompilesCaller: PrecompilesCaller{contract: contract}, PrecompilesTransactor: PrecompilesTransactor{contract: contract}, PrecompilesFilterer: PrecompilesFilterer{contract: contract}}, nil
}

// NewPrecompilesCaller creates a new read-only instance of Precompiles, bound to a specific deployed contract.
func NewPrecompilesCaller(address common.Address, caller bind.ContractCaller) (*PrecompilesCaller, error) {
	contract, err := bindPrecompiles(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PrecompilesCaller{contract: contract}, nil
}

// NewPrecompilesTransactor creates a new write-only instance of Precompiles, bound to a specific deployed contract.
func NewPrecompilesTransactor(address common.Address, transactor bind.ContractTransactor) (*PrecompilesTransactor, error) {
	contract, err := bindPrecompiles(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PrecompilesTransactor{contract: contract}, nil
}

// NewPrecompilesFilterer creates a new log filterer instance of Precompiles, bound to a specific deployed contract.
func NewPrecompilesFilterer(address common.Address, filterer bind.ContractFilterer) (*PrecompilesFilterer, error) {
	contract, err := bindPrecompiles(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PrecompilesFilterer{contract: contract}, nil
}

// bindPrecompiles binds a generic wrapper to an already deployed contract.
func bindPrecompiles(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PrecompilesABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Precompiles *PrecompilesRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Precompiles.Contract.PrecompilesCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Precompiles *PrecompilesRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Precompiles.Contract.PrecompilesTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Precompiles *PrecompilesRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Precompiles.Contract.PrecompilesTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Precompiles *PrecompilesCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Precompiles.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Precompiles *PrecompilesTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Precompiles.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Precompiles *PrecompilesTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Precompiles.Contract.contract.Transact(opts, method, params...)
}
