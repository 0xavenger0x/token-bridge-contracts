// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgecontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MerkleUtilABI is the input ABI used to generate the binding from.
const MerkleUtilABI = "[{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"op\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"buf\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"bufferOp\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"op\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"buf\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof1\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof2\",\"type\":\"bytes32[]\"}],\"name\":\"getOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"op\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"buf\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof1\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"nproof1\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof2\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"nproof2\",\"type\":\"bytes32[]\"}],\"name\":\"setOp\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// MerkleUtilFuncSigs maps the 4-byte function signature to its string representation.
var MerkleUtilFuncSigs = map[string]string{
	"585ec5ad": "bufferOp(uint8,bytes32,uint256,uint256,bytes)",
	"1424c514": "getOp(uint8,bytes32,uint256,bytes32[],bytes32[])",
	"c58ed997": "setOp(uint8,bytes32,uint256,uint256,bytes32[],bytes32[],bytes32[],bytes32[])",
}

// MerkleUtilBin is the compiled bytecode used for deploying new contracts.
var MerkleUtilBin = "0x611254610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80631424c51414610050578063585ec5ad1461019b578063c58ed9971461025a575b600080fd5b610189600480360360a081101561006657600080fd5b60ff8235169160208101359160408201359190810190608081016060820135600160201b81111561009657600080fd5b8201836020820111156100a857600080fd5b803590602001918460208302840111600160201b831117156100c957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561011857600080fd5b82018360208201111561012a57600080fd5b803590602001918460208302840111600160201b8311171561014b57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061049d945050505050565b60408051918252519081900360200190f35b610189600480360360a08110156101b157600080fd5b60ff8235169160208101359160408201359160608101359181019060a081016080820135600160201b8111156101e657600080fd5b8201836020820111156101f857600080fd5b803590602001918460018302840111600160201b8311171561021957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610506945050505050565b610189600480360361010081101561027157600080fd5b60ff8235169160208101359160408201359160608101359181019060a081016080820135600160201b8111156102a657600080fd5b8201836020820111156102b857600080fd5b803590602001918460208302840111600160201b831117156102d957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561032857600080fd5b82018360208201111561033a57600080fd5b803590602001918460208302840111600160201b8311171561035b57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156103aa57600080fd5b8201836020820111156103bc57600080fd5b803590602001918460208302840111600160201b831117156103dd57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561042c57600080fd5b82018360208201111561043e57600080fd5b803590602001918460208302840111600160201b8311171561045f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506106cb945050505050565b60008560ff1660a114156104cd576104c66104bc866020870486610741565b6020865b06610826565b90506104fd565b8560ff1660a214156104e5576104c685858585610833565b8560ff1660a314156104fd576104c685858585610992565b95945050505050565b60006060610547838460008151811061051b57fe5b602001015160f81c60f81b8560018151811061053357fe5b01602001516001600160f81b031916610ac5565b90506060610574848560028151811061055c57fe5b602001015160f81c60f81b8660038151811061053357fe5b905060606105a1858660048151811061058957fe5b602001015160f81c60f81b8760058151811061053357fe5b905060606105ce86876006815181106105b657fe5b602001015160f81c60f81b8860078151811061053357fe5b90508960ff1660a11415610602576105f66105ee8a60208b5b0487610741565b60208a6104c0565b94506104fd9350505050565b8960ff1660a2141561061a576105f689898685610833565b8960ff1660a31415610632576105f689898685610992565b8960ff1660a4141561067d57600061064c8a60208b6105e7565b9050600061065e8260208c068b610b48565b90506106708b60208c04838989610b87565b96505050505050506104fd565b8960ff1660a514156106a35761069889898987878787610be1565b9450505050506104fd565b8960ff1660a614156106be5761069889898987878787610d26565b5050505095945050505050565b60008860ff1660a414156107175760006106e98960208a0488610741565b905060006106fb8260208b068a610b48565b905061070e8a60208b5b04838a8a610b87565b92505050610735565b8860ff1660a514156107355761073288888888888888610be1565b90505b98975050505050505050565b600081516000141561076057831561075857600080fd5b50600061081f565b600061077f8360008151811061077257fe5b6020026020010151610e0d565b905060015b83518110156107e95784600116600114156107bd576107b6828583815181106107a957fe5b6020026020010151610e33565b91506107dd565b6107da8482815181106107cc57fe5b602002602001015183610e33565b91505b600194851c9401610784565b508481146107f657600080fd5b831561080657506000905061081f565b8260008151811061081357fe5b60200260200101519150505b9392505050565b601f036008021c60ff1690565b604080516008808252818301909252600091606091906020820181803883390190505090506000610866876020886105e7565b9050602080870660080110610935576000610889886020895b0460010187610741565b905060005b6018601f8916600803018110156108dd576108af838260208b5b0601610826565b60f81b8482815181106108be57fe5b60200101906001600160f81b031916908160001a90535060010161088e565b506018601f8816600803015b600881101561092e576109008260208a84016104c0565b60f81b84828151811061090f57fe5b60200101906001600160f81b031916908160001a9053506001016108e9565b505061097e565b60005b600881101561097c5761094e828260208a6108a8565b60f81b83828151811061095d57fe5b60200101906001600160f81b031916908160001a905350600101610938565b505b61098782610e5f565b979650505050505050565b6040805160208082528183019092526000916060919060208201818038833901905050905060006109c5876020886105e7565b9050602080870660200110610a7e5760006109e28860208961087f565b905060005b601f8816602003811015610a3057610a02838260208b6108a8565b60f81b848281518110610a1157fe5b60200101906001600160f81b031916908160001a9053506001016109e7565b50601f87166008035b602081101561092e57610a508260208a84016104c0565b60f81b848281518110610a5f57fe5b60200101906001600160f81b031916908160001a905350600101610a39565b60005b602081101561097c57610a97828260208a6108a8565b60f81b838281518110610aa657fe5b60200101906001600160f81b031916908160001a905350600101610a81565b6040805160f883811c8083526020808202840101909352606092919085901c908390838015610afe578160200160208202803883390190505b50905060005b83811015610b3d57610b1b88828501602002610ea2565b60001b828281518110610b2a57fe5b6020908102919091010152600101610b04565b509695505050505050565b60006060610b5585610ee8565b90508260f81b818581518110610b6757fe5b60200101906001600160f81b031916908160001a9053506104fd81610e5f565b6000610bd78686868686600081518110610b9d57fe5b602002602001015160001c87600181518110610bb557fe5b602002602001015188600281518110610bca57fe5b6020026020010151610f52565b9695505050505050565b60006060610bee87610ee8565b90506000610c018a60208b5b0489610741565b90506020808a0660080110610cd9576000610c248b60208c5b0460010188610741565b905060005b6018601f8c1660080301811015610c7157610c67838260208e0601868460180181518110610c5357fe5b01602001516001600160f81b03191661113c565b9250600101610c29565b506018601f8b16600803015b6008811015610cd257610c9f8260208d840106868460180181518110610c5357fe5b9150610cb28c60208d5b04858c8c610b87565b9b50610cc88c60208d5b04600101848a8a610b87565b9b50600101610c7d565b5050610d18565b60005b6008811015610d0857610cfe828260208d0601858460180181518110610c5357fe5b9150600101610cdc565b50610d158a60208b610705565b99505b509798975050505050505050565b60006060610d3387610ee8565b90506000610d438a60208b610bfa565b90506020808a0660200110610de1576000610d608b60208c610c1a565b905060005b601f8b16602003811015610d9357610d89838260208e0601868481518110610c5357fe5b9250600101610d65565b50601f8a166020035b6020811015610cd257610dbb8260208d840106868481518110610c5357fe5b9150610dc98c60208d610ca9565b9b50610dd78c60208d610cbc565b9b50600101610d9c565b60005b6020811015610d0857610e03828260208d0601858481518110610c5357fe5b9150600101610de4565b60408051602080820184905282518083038201815291830190925280519101205b919050565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600080805b8351811015610e9b57600882901b9150838160018651030381518110610e8657fe5b016020015160f81c9190911790600101610e64565b5092915050565b600080805b6020811015610ee057600882901b91508481600186602001030381518110610ecb57fe5b016020015160f81c9190911790600101610ea7565b509392505050565b6040805160208082528183019092526060918391839160208201818038833901905050905060005b8351811015610ee0578260f81b8282601f0381518110610f2c57fe5b60200101906001600160f81b031916908160001a90535060089290921c91600101610f10565b600080610f5e87610e0d565b9050610f6b898988610741565b506060610f76611158565b905060028751901b89111561103d5787610f94578992505050610987565b6000610f9f8a6111f9565b88519091505b60018203811015610fca57610fc08c8483815181106107a957fe5b9b50600101610fa5565b5060015b60018203811015611028578a60011660011415610ffc57610ff5848483815181106107a957fe5b935061101c565b61101983828151811061100b57fe5b602002602001015185610e33565b93505b60019a8b1c9a01610fce565b506110338b84610e33565b9350505050610987565b60015b87518110156110bd5760008a60011660011461105c5783611071565b88828151811061106857fe5b60200260200101515b905060008b6001166001146110995789838151811061108c57fe5b602002602001015161109b565b845b90506110a78282610e33565b60019c8d1c9c9095509290920191506110409050565b5087156110cc57509050610987565b8086815181106110d857fe5b60200260200101518414156110ec57600080fd5b60006110f88686610e33565b905080875b895181101561112057611116838583815181106107a957fe5b91506001016110fd565b5083811461112d57600080fd5b509a9950505050505050505050565b6000606061114985610ee8565b905082818581518110610b6757fe5b604080518181526108208101825260609182919060208201610800803883390190505090506111876000610e0d565b8160008151811061119457fe5b602090810291909101015260015b60408110156111f3576111d48260018303815181106111bd57fe5b60200260200101518360018403815181106107a957fe5b8282815181106111e057fe5b60209081029190910101526001016111a2565b50905090565b60008161120857506000610e2e565b611215600183901c6111f9565b6001019050610e2e56fea265627a7a723158203a4b54fe79dfc5077fe63ce73a1844feb5394dbf3a19879d47f0265e422f61b864736f6c63430005110032"

// DeployMerkleUtil deploys a new Ethereum contract, binding an instance of MerkleUtil to it.
func DeployMerkleUtil(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MerkleUtil, error) {
	parsed, err := abi.JSON(strings.NewReader(MerkleUtilABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MerkleUtilBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MerkleUtil{MerkleUtilCaller: MerkleUtilCaller{contract: contract}, MerkleUtilTransactor: MerkleUtilTransactor{contract: contract}, MerkleUtilFilterer: MerkleUtilFilterer{contract: contract}}, nil
}

// MerkleUtil is an auto generated Go binding around an Ethereum contract.
type MerkleUtil struct {
	MerkleUtilCaller     // Read-only binding to the contract
	MerkleUtilTransactor // Write-only binding to the contract
	MerkleUtilFilterer   // Log filterer for contract events
}

// MerkleUtilCaller is an auto generated read-only Go binding around an Ethereum contract.
type MerkleUtilCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleUtilTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MerkleUtilTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleUtilFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MerkleUtilFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleUtilSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MerkleUtilSession struct {
	Contract     *MerkleUtil       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MerkleUtilCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MerkleUtilCallerSession struct {
	Contract *MerkleUtilCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// MerkleUtilTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MerkleUtilTransactorSession struct {
	Contract     *MerkleUtilTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// MerkleUtilRaw is an auto generated low-level Go binding around an Ethereum contract.
type MerkleUtilRaw struct {
	Contract *MerkleUtil // Generic contract binding to access the raw methods on
}

// MerkleUtilCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MerkleUtilCallerRaw struct {
	Contract *MerkleUtilCaller // Generic read-only contract binding to access the raw methods on
}

// MerkleUtilTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MerkleUtilTransactorRaw struct {
	Contract *MerkleUtilTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMerkleUtil creates a new instance of MerkleUtil, bound to a specific deployed contract.
func NewMerkleUtil(address common.Address, backend bind.ContractBackend) (*MerkleUtil, error) {
	contract, err := bindMerkleUtil(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MerkleUtil{MerkleUtilCaller: MerkleUtilCaller{contract: contract}, MerkleUtilTransactor: MerkleUtilTransactor{contract: contract}, MerkleUtilFilterer: MerkleUtilFilterer{contract: contract}}, nil
}

// NewMerkleUtilCaller creates a new read-only instance of MerkleUtil, bound to a specific deployed contract.
func NewMerkleUtilCaller(address common.Address, caller bind.ContractCaller) (*MerkleUtilCaller, error) {
	contract, err := bindMerkleUtil(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MerkleUtilCaller{contract: contract}, nil
}

// NewMerkleUtilTransactor creates a new write-only instance of MerkleUtil, bound to a specific deployed contract.
func NewMerkleUtilTransactor(address common.Address, transactor bind.ContractTransactor) (*MerkleUtilTransactor, error) {
	contract, err := bindMerkleUtil(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MerkleUtilTransactor{contract: contract}, nil
}

// NewMerkleUtilFilterer creates a new log filterer instance of MerkleUtil, bound to a specific deployed contract.
func NewMerkleUtilFilterer(address common.Address, filterer bind.ContractFilterer) (*MerkleUtilFilterer, error) {
	contract, err := bindMerkleUtil(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MerkleUtilFilterer{contract: contract}, nil
}

// bindMerkleUtil binds a generic wrapper to an already deployed contract.
func bindMerkleUtil(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MerkleUtilABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MerkleUtil *MerkleUtilRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MerkleUtil.Contract.MerkleUtilCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MerkleUtil *MerkleUtilRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MerkleUtil.Contract.MerkleUtilTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MerkleUtil *MerkleUtilRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MerkleUtil.Contract.MerkleUtilTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MerkleUtil *MerkleUtilCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MerkleUtil.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MerkleUtil *MerkleUtilTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MerkleUtil.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MerkleUtil *MerkleUtilTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MerkleUtil.Contract.contract.Transact(opts, method, params...)
}

// BufferOp is a free data retrieval call binding the contract method 0x585ec5ad.
//
// Solidity: function bufferOp(uint8 op, bytes32 buf, uint256 offset, uint256 b, bytes proof) pure returns(bytes32)
func (_MerkleUtil *MerkleUtilCaller) BufferOp(opts *bind.CallOpts, op uint8, buf [32]byte, offset *big.Int, b *big.Int, proof []byte) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _MerkleUtil.contract.Call(opts, out, "bufferOp", op, buf, offset, b, proof)
	return *ret0, err
}

// BufferOp is a free data retrieval call binding the contract method 0x585ec5ad.
//
// Solidity: function bufferOp(uint8 op, bytes32 buf, uint256 offset, uint256 b, bytes proof) pure returns(bytes32)
func (_MerkleUtil *MerkleUtilSession) BufferOp(op uint8, buf [32]byte, offset *big.Int, b *big.Int, proof []byte) ([32]byte, error) {
	return _MerkleUtil.Contract.BufferOp(&_MerkleUtil.CallOpts, op, buf, offset, b, proof)
}

// BufferOp is a free data retrieval call binding the contract method 0x585ec5ad.
//
// Solidity: function bufferOp(uint8 op, bytes32 buf, uint256 offset, uint256 b, bytes proof) pure returns(bytes32)
func (_MerkleUtil *MerkleUtilCallerSession) BufferOp(op uint8, buf [32]byte, offset *big.Int, b *big.Int, proof []byte) ([32]byte, error) {
	return _MerkleUtil.Contract.BufferOp(&_MerkleUtil.CallOpts, op, buf, offset, b, proof)
}

// GetOp is a free data retrieval call binding the contract method 0x1424c514.
//
// Solidity: function getOp(uint8 op, bytes32 buf, uint256 offset, bytes32[] proof1, bytes32[] proof2) pure returns(uint256)
func (_MerkleUtil *MerkleUtilCaller) GetOp(opts *bind.CallOpts, op uint8, buf [32]byte, offset *big.Int, proof1 [][32]byte, proof2 [][32]byte) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MerkleUtil.contract.Call(opts, out, "getOp", op, buf, offset, proof1, proof2)
	return *ret0, err
}

// GetOp is a free data retrieval call binding the contract method 0x1424c514.
//
// Solidity: function getOp(uint8 op, bytes32 buf, uint256 offset, bytes32[] proof1, bytes32[] proof2) pure returns(uint256)
func (_MerkleUtil *MerkleUtilSession) GetOp(op uint8, buf [32]byte, offset *big.Int, proof1 [][32]byte, proof2 [][32]byte) (*big.Int, error) {
	return _MerkleUtil.Contract.GetOp(&_MerkleUtil.CallOpts, op, buf, offset, proof1, proof2)
}

// GetOp is a free data retrieval call binding the contract method 0x1424c514.
//
// Solidity: function getOp(uint8 op, bytes32 buf, uint256 offset, bytes32[] proof1, bytes32[] proof2) pure returns(uint256)
func (_MerkleUtil *MerkleUtilCallerSession) GetOp(op uint8, buf [32]byte, offset *big.Int, proof1 [][32]byte, proof2 [][32]byte) (*big.Int, error) {
	return _MerkleUtil.Contract.GetOp(&_MerkleUtil.CallOpts, op, buf, offset, proof1, proof2)
}

// SetOp is a free data retrieval call binding the contract method 0xc58ed997.
//
// Solidity: function setOp(uint8 op, bytes32 buf, uint256 offset, uint256 b, bytes32[] proof1, bytes32[] nproof1, bytes32[] proof2, bytes32[] nproof2) pure returns(bytes32)
func (_MerkleUtil *MerkleUtilCaller) SetOp(opts *bind.CallOpts, op uint8, buf [32]byte, offset *big.Int, b *big.Int, proof1 [][32]byte, nproof1 [][32]byte, proof2 [][32]byte, nproof2 [][32]byte) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _MerkleUtil.contract.Call(opts, out, "setOp", op, buf, offset, b, proof1, nproof1, proof2, nproof2)
	return *ret0, err
}

// SetOp is a free data retrieval call binding the contract method 0xc58ed997.
//
// Solidity: function setOp(uint8 op, bytes32 buf, uint256 offset, uint256 b, bytes32[] proof1, bytes32[] nproof1, bytes32[] proof2, bytes32[] nproof2) pure returns(bytes32)
func (_MerkleUtil *MerkleUtilSession) SetOp(op uint8, buf [32]byte, offset *big.Int, b *big.Int, proof1 [][32]byte, nproof1 [][32]byte, proof2 [][32]byte, nproof2 [][32]byte) ([32]byte, error) {
	return _MerkleUtil.Contract.SetOp(&_MerkleUtil.CallOpts, op, buf, offset, b, proof1, nproof1, proof2, nproof2)
}

// SetOp is a free data retrieval call binding the contract method 0xc58ed997.
//
// Solidity: function setOp(uint8 op, bytes32 buf, uint256 offset, uint256 b, bytes32[] proof1, bytes32[] nproof1, bytes32[] proof2, bytes32[] nproof2) pure returns(bytes32)
func (_MerkleUtil *MerkleUtilCallerSession) SetOp(op uint8, buf [32]byte, offset *big.Int, b *big.Int, proof1 [][32]byte, nproof1 [][32]byte, proof2 [][32]byte, nproof2 [][32]byte) ([32]byte, error) {
	return _MerkleUtil.Contract.SetOp(&_MerkleUtil.CallOpts, op, buf, offset, b, proof1, nproof1, proof2, nproof2)
}

// OneStepProofABI is the input ABI used to generate the binding from.
const OneStepProofABI = "[{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"messagesAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"logsAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[5]\",\"name\":\"fields\",\"type\":\"bytes32[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"messagesAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"logsAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"_kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inboxSeqNum\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_msgData\",\"type\":\"bytes\"}],\"name\":\"executeStepWithMessage\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[5]\",\"name\":\"fields\",\"type\":\"bytes32[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// OneStepProofFuncSigs maps the 4-byte function signature to its string representation.
var OneStepProofFuncSigs = map[string]string{
	"385bc114": "executeStep(bytes32,bytes32,bytes32,bytes)",
	"96105dce": "executeStepWithMessage(bytes32,bytes32,bytes32,bytes,uint8,uint256,uint256,address,uint256,bytes)",
}

// OneStepProofBin is the compiled bytecode used for deploying new contracts.
var OneStepProofBin = ""

// DeployOneStepProof deploys a new Ethereum contract, binding an instance of OneStepProof to it.
func DeployOneStepProof(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// OneStepProof is an auto generated Go binding around an Ethereum contract.
type OneStepProof struct {
	OneStepProofCaller     // Read-only binding to the contract
	OneStepProofTransactor // Write-only binding to the contract
	OneStepProofFilterer   // Log filterer for contract events
}

// OneStepProofCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofSession struct {
	Contract     *OneStepProof     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProofCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofCallerSession struct {
	Contract *OneStepProofCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// OneStepProofTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTransactorSession struct {
	Contract     *OneStepProofTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// OneStepProofRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofRaw struct {
	Contract *OneStepProof // Generic contract binding to access the raw methods on
}

// OneStepProofCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofCallerRaw struct {
	Contract *OneStepProofCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTransactorRaw struct {
	Contract *OneStepProofTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof creates a new instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProof(address common.Address, backend bind.ContractBackend) (*OneStepProof, error) {
	contract, err := bindOneStepProof(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// NewOneStepProofCaller creates a new read-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofCaller, error) {
	contract, err := bindOneStepProof(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofCaller{contract: contract}, nil
}

// NewOneStepProofTransactor creates a new write-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTransactor, error) {
	contract, err := bindOneStepProof(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTransactor{contract: contract}, nil
}

// NewOneStepProofFilterer creates a new log filterer instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofFilterer, error) {
	contract, err := bindOneStepProof(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofFilterer{contract: contract}, nil
}

// bindOneStepProof binds a generic wrapper to an already deployed contract.
func bindOneStepProof(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.OneStepProofCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transact(opts, method, params...)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x385bc114.
//
// Solidity: function executeStep(bytes32 inboxAcc, bytes32 messagesAcc, bytes32 logsAcc, bytes proof) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof *OneStepProofCaller) ExecuteStep(opts *bind.CallOpts, inboxAcc [32]byte, messagesAcc [32]byte, logsAcc [32]byte, proof []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	ret := new(struct {
		Gas    uint64
		Fields [5][32]byte
	})
	out := ret
	err := _OneStepProof.contract.Call(opts, out, "executeStep", inboxAcc, messagesAcc, logsAcc, proof)
	return *ret, err
}

// ExecuteStep is a free data retrieval call binding the contract method 0x385bc114.
//
// Solidity: function executeStep(bytes32 inboxAcc, bytes32 messagesAcc, bytes32 logsAcc, bytes proof) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof *OneStepProofSession) ExecuteStep(inboxAcc [32]byte, messagesAcc [32]byte, logsAcc [32]byte, proof []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	return _OneStepProof.Contract.ExecuteStep(&_OneStepProof.CallOpts, inboxAcc, messagesAcc, logsAcc, proof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x385bc114.
//
// Solidity: function executeStep(bytes32 inboxAcc, bytes32 messagesAcc, bytes32 logsAcc, bytes proof) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof *OneStepProofCallerSession) ExecuteStep(inboxAcc [32]byte, messagesAcc [32]byte, logsAcc [32]byte, proof []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	return _OneStepProof.Contract.ExecuteStep(&_OneStepProof.CallOpts, inboxAcc, messagesAcc, logsAcc, proof)
}

// ExecuteStepWithMessage is a free data retrieval call binding the contract method 0x96105dce.
//
// Solidity: function executeStepWithMessage(bytes32 inboxAcc, bytes32 messagesAcc, bytes32 logsAcc, bytes proof, uint8 _kind, uint256 _blockNumber, uint256 _timestamp, address _sender, uint256 _inboxSeqNum, bytes _msgData) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof *OneStepProofCaller) ExecuteStepWithMessage(opts *bind.CallOpts, inboxAcc [32]byte, messagesAcc [32]byte, logsAcc [32]byte, proof []byte, _kind uint8, _blockNumber *big.Int, _timestamp *big.Int, _sender common.Address, _inboxSeqNum *big.Int, _msgData []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	ret := new(struct {
		Gas    uint64
		Fields [5][32]byte
	})
	out := ret
	err := _OneStepProof.contract.Call(opts, out, "executeStepWithMessage", inboxAcc, messagesAcc, logsAcc, proof, _kind, _blockNumber, _timestamp, _sender, _inboxSeqNum, _msgData)
	return *ret, err
}

// ExecuteStepWithMessage is a free data retrieval call binding the contract method 0x96105dce.
//
// Solidity: function executeStepWithMessage(bytes32 inboxAcc, bytes32 messagesAcc, bytes32 logsAcc, bytes proof, uint8 _kind, uint256 _blockNumber, uint256 _timestamp, address _sender, uint256 _inboxSeqNum, bytes _msgData) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof *OneStepProofSession) ExecuteStepWithMessage(inboxAcc [32]byte, messagesAcc [32]byte, logsAcc [32]byte, proof []byte, _kind uint8, _blockNumber *big.Int, _timestamp *big.Int, _sender common.Address, _inboxSeqNum *big.Int, _msgData []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	return _OneStepProof.Contract.ExecuteStepWithMessage(&_OneStepProof.CallOpts, inboxAcc, messagesAcc, logsAcc, proof, _kind, _blockNumber, _timestamp, _sender, _inboxSeqNum, _msgData)
}

// ExecuteStepWithMessage is a free data retrieval call binding the contract method 0x96105dce.
//
// Solidity: function executeStepWithMessage(bytes32 inboxAcc, bytes32 messagesAcc, bytes32 logsAcc, bytes proof, uint8 _kind, uint256 _blockNumber, uint256 _timestamp, address _sender, uint256 _inboxSeqNum, bytes _msgData) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof *OneStepProofCallerSession) ExecuteStepWithMessage(inboxAcc [32]byte, messagesAcc [32]byte, logsAcc [32]byte, proof []byte, _kind uint8, _blockNumber *big.Int, _timestamp *big.Int, _sender common.Address, _inboxSeqNum *big.Int, _msgData []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	return _OneStepProof.Contract.ExecuteStepWithMessage(&_OneStepProof.CallOpts, inboxAcc, messagesAcc, logsAcc, proof, _kind, _blockNumber, _timestamp, _sender, _inboxSeqNum, _msgData)
}

// PrecompilesABI is the input ABI used to generate the binding from.
const PrecompilesABI = "[]"

// PrecompilesBin is the compiled bytecode used for deploying new contracts.
var PrecompilesBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a7231582089a25ee4d0917faa75d52d337f832f58e8fef2b903c6259ee110daea7c41f21264736f6c63430005110032"

// DeployPrecompiles deploys a new Ethereum contract, binding an instance of Precompiles to it.
func DeployPrecompiles(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Precompiles, error) {
	parsed, err := abi.JSON(strings.NewReader(PrecompilesABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PrecompilesBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Precompiles{PrecompilesCaller: PrecompilesCaller{contract: contract}, PrecompilesTransactor: PrecompilesTransactor{contract: contract}, PrecompilesFilterer: PrecompilesFilterer{contract: contract}}, nil
}

// Precompiles is an auto generated Go binding around an Ethereum contract.
type Precompiles struct {
	PrecompilesCaller     // Read-only binding to the contract
	PrecompilesTransactor // Write-only binding to the contract
	PrecompilesFilterer   // Log filterer for contract events
}

// PrecompilesCaller is an auto generated read-only Go binding around an Ethereum contract.
type PrecompilesCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompilesTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PrecompilesTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompilesFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PrecompilesFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompilesSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PrecompilesSession struct {
	Contract     *Precompiles      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PrecompilesCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PrecompilesCallerSession struct {
	Contract *PrecompilesCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// PrecompilesTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PrecompilesTransactorSession struct {
	Contract     *PrecompilesTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// PrecompilesRaw is an auto generated low-level Go binding around an Ethereum contract.
type PrecompilesRaw struct {
	Contract *Precompiles // Generic contract binding to access the raw methods on
}

// PrecompilesCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PrecompilesCallerRaw struct {
	Contract *PrecompilesCaller // Generic read-only contract binding to access the raw methods on
}

// PrecompilesTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PrecompilesTransactorRaw struct {
	Contract *PrecompilesTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPrecompiles creates a new instance of Precompiles, bound to a specific deployed contract.
func NewPrecompiles(address common.Address, backend bind.ContractBackend) (*Precompiles, error) {
	contract, err := bindPrecompiles(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Precompiles{PrecompilesCaller: PrecompilesCaller{contract: contract}, PrecompilesTransactor: PrecompilesTransactor{contract: contract}, PrecompilesFilterer: PrecompilesFilterer{contract: contract}}, nil
}

// NewPrecompilesCaller creates a new read-only instance of Precompiles, bound to a specific deployed contract.
func NewPrecompilesCaller(address common.Address, caller bind.ContractCaller) (*PrecompilesCaller, error) {
	contract, err := bindPrecompiles(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PrecompilesCaller{contract: contract}, nil
}

// NewPrecompilesTransactor creates a new write-only instance of Precompiles, bound to a specific deployed contract.
func NewPrecompilesTransactor(address common.Address, transactor bind.ContractTransactor) (*PrecompilesTransactor, error) {
	contract, err := bindPrecompiles(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PrecompilesTransactor{contract: contract}, nil
}

// NewPrecompilesFilterer creates a new log filterer instance of Precompiles, bound to a specific deployed contract.
func NewPrecompilesFilterer(address common.Address, filterer bind.ContractFilterer) (*PrecompilesFilterer, error) {
	contract, err := bindPrecompiles(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PrecompilesFilterer{contract: contract}, nil
}

// bindPrecompiles binds a generic wrapper to an already deployed contract.
func bindPrecompiles(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PrecompilesABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Precompiles *PrecompilesRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Precompiles.Contract.PrecompilesCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Precompiles *PrecompilesRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Precompiles.Contract.PrecompilesTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Precompiles *PrecompilesRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Precompiles.Contract.PrecompilesTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Precompiles *PrecompilesCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Precompiles.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Precompiles *PrecompilesTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Precompiles.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Precompiles *PrecompilesTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Precompiles.Contract.contract.Transact(opts, method, params...)
}
