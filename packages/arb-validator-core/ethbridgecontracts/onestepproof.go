// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgecontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProofABI is the input ABI used to generate the binding from.
const OneStepProofABI = "[{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"messagesAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"logsAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[5]\",\"name\":\"fields\",\"type\":\"bytes32[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"messagesAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"logsAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"_kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inboxSeqNum\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_msgData\",\"type\":\"bytes\"}],\"name\":\"executeStepWithMessage\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[5]\",\"name\":\"fields\",\"type\":\"bytes32[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// OneStepProofFuncSigs maps the 4-byte function signature to its string representation.
var OneStepProofFuncSigs = map[string]string{
	"385bc114": "executeStep(bytes32,bytes32,bytes32,bytes)",
	"96105dce": "executeStepWithMessage(bytes32,bytes32,bytes32,bytes,uint8,uint256,uint256,address,uint256,bytes)",
}

// OneStepProofBin is the compiled bytecode used for deploying new contracts.
var OneStepProofBin = "0x608060405234801561001057600080fd5b506157ec80620000216000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063385bc1141461003b57806396105dce14610106575b600080fd5b6100be6004803603608081101561005157600080fd5b8135916020810135916040820135919081019060808101606082013564010000000081111561007f57600080fd5b82018360208201111561009157600080fd5b803590602001918460018302840111640100000000831117156100b357600080fd5b509092509050610206565b6040516001600160401b0383168152602081018260a080838360005b838110156100f25781810151838201526020016100da565b505050509050019250505060405180910390f35b6100be600480360361014081101561011d57600080fd5b8135916020810135916040820135919081019060808101606082013564010000000081111561014b57600080fd5b82018360208201111561015d57600080fd5b8035906020019184600183028401116401000000008311171561017f57600080fd5b9193909260ff833516926020810135926040820135926001600160a01b0360608401351692608081013592919060c081019060a001356401000000008111156101c757600080fd5b8201836020820111156101d957600080fd5b803590602001918460018302840111640100000000831117156101fb57600080fd5b50909250905061027d565b6000610210615522565b610218615540565b61025a88888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061037792505050565b905061026581610807565b61026e81610b9b565b92509250509550959350505050565b6000610287615522565b61028f615540565b6102d18f8f8f8f8f8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061037792505050565b90506102fd8a888b8b8a8a8a6040518083838082843760405192018290039091209350610bfe92505050565b8160e001818152505061034a8a8a8a8a8a8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c6c92505050565b60c082015261035881610807565b61036181610b9b565b92509250509c509c9a5050505050505050505050565b61037f615540565b60008260008151811061038e57fe5b602001015160f81c60f81b60f81c90506000836001815181106103ad57fe5b602001015160f81c60f81b60f81c905060006002905060608360040160ff1660405190808252806020026020018201604052801561040557816020015b6103f26155cc565b8152602001906001900390816103ea5790505b50905060608360040160ff1660405190808252806020026020018201604052801561044a57816020015b6104376155cc565b81526020019060019003908161042f5790505b50905060005b8560ff16811015610488576104658885610d94565b845185908490811061047357fe5b60209081029190910101529350600101610450565b5060005b8460ff168110156104c4576104a18885610d94565b83518490849081106104af57fe5b6020908102919091010152935060010161048c565b506104cd615600565b6104d78885610f26565b809250819550505060008885815181106104ed57fe5b602001015160f81c60f81b60f81c9050600089866001018151811061050e57fe5b01602001516002969096019560f81c9050610527615540565b604051806101c0016040528085815260200161054286610fd7565b81526020018f81526020018e81526020018d815260200160006001600160401b0316815260200161057161104c565b81526020016000801b815260200160405180604001604052808c60ff16815260200189815250815260200160405180604001604052808b60ff1681526020018881525081526020018460ff16600114151581526020018360ff1681526020018c81526020018881525090508260ff16600014806105f157508260ff166001145b6040518060400160405280600b81526020016a04241445f494d4d5f5459560ac1b8152509061069e5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561066357818101518382015260200161064b565b50505050905090810190601f1680156106905780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506106a76155cc565b60ff84166106c4578151516106bd908490611093565b9050610764565b6000875111604051806040016040528060068152602001654e4f5f494d4d60d01b815250906107345760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561066357818101518382015260200161064b565b50610761838360000151600001518960018e0360ff168151811061075457fe5b60200260200101516110f5565b90505b61076d81611179565b82515260005b848b0360ff168110156107b2576107aa88828151811061078f57fe5b6020026020010151846000015161129990919063ffffffff16565b600101610773565b5060005b8960ff168110156107f3576107eb8782815181106107d057fe5b602002602001015184600001516112b390919063ffffffff16565b6001016107b6565b50909e9d5050505050505050505050505050565b600080600061272f61082085610160015160ff166112cd565b6001600160401b03821660a0808b0182905260208b01518101805183900390528a5101519498509296509094509250111561087557602085015160001960a09091015261086c85611a1d565b50505050610b98565b610100850151518411156109215761089361088e61104c565b611179565b6108a4866020015160200151611179565b146040518060400160405280600d81526020016c535441434b5f4d495353494e4760981b815250906109175760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561066357818101518382015260200161064b565b5061086c85611a1d565b610120850151518311156109bc5761093a61088e61104c565b61094b866020015160400151611179565b146040518060400160405280600b81526020016a4155585f4d495353494e4760a81b815250906109175760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561066357818101518382015260200161064b565b60008411806109ce5750846101400151155b80156109df57506101008501515184145b80610a07575084610140015180156109f5575083155b8015610a075750610100850151516001145b6040518060400160405280600a815260200169535441434b5f4d414e5960b01b81525090610a765760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561066357818101518382015260200161064b565b50610120850151516040805180820190915260088152674155585f4d414e5960c01b6020820152908414610aeb5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561066357818101518382015260200161064b565b50610af9858263ffffffff16565b60005b61010086015151811015610b4557610b3d866101000151602001518281518110610b2257fe5b6020026020010151876020015161129990919063ffffffff16565b600101610afc565b5060005b61012086015151811015610b9257610b8a866101200151602001518281518110610b6f57fe5b602002602001015187602001516112b390919063ffffffff16565b600101610b49565b50505050505b50565b6000610ba5615522565b8260a001516040518060a00160405280610bc28660000151611a86565b8152602001610bd48660200151611a86565b81526020018560400151815260200185606001518152602001856080015181525091509150915091565b6040805160f89790971b6001600160f81b03191660208089019190915260609690961b6bffffffffffffffffffffffff191660218801526035870194909452605586019290925260758501526095808501919091528151808503909101815260b59093019052815191012090565b610c746155cc565b60408051600680825260e08201909252606091816020015b610c946155cc565b815260200190600190039081610c8c579050509050610cb58860ff16611b60565b81600081518110610cc257fe5b6020026020010181905250610cd687611b60565b81600181518110610ce357fe5b6020026020010181905250610cf786611b60565b81600281518110610d0457fe5b6020026020010181905250610d21856001600160a01b0316611b60565b81600381518110610d2e57fe5b6020026020010181905250610d4284611b60565b81600481518110610d4f57fe5b6020026020010181905250610d678360008551611c12565b81600581518110610d7457fe5b6020026020010181905250610d8881611d96565b98975050505050505050565b6000610d9e6155cc565b83518310610de4576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b600080610df18686611ea8565b91509150610dfd611ecf565b60ff168160ff161415610e31576000610e168784611ed4565b909350905082610e2582611b60565b94509450505050610f1f565b610e39611f48565b60ff168160ff161415610e5b57610e508683611f4d565b935093505050610f1f565b610e63611fef565b60ff168160ff161415610e7a57610e508683611ff4565b610e82612088565b60ff168160ff1610158015610ea35750610e9a61208d565b60ff168160ff16105b15610edf576000610eb2612088565b820390506060610ec3828986612092565b909450905083610ed282611d96565b9550955050505050610f1f565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b6000610f30615600565b610f38615600565b6000610100820181905280610f4d8787611ed4565b9096509150610f5c8787611ff4565b60208501529550610f6d8787611ff4565b60408501529550610f7e8787610d94565b60608501529550610f8f8787610d94565b60808501529550610fa08787611ed4565b60a08501529550610fb18787611ed4565b9096509050610fc08787610d94565b60e085015291835260c08301529590945092505050565b610fdf615600565b60405180610120016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e00151815260200183610100015181525090505b919050565b6110546155cc565b6040805160008082526020820190925261108e91611088565b6110756155cc565b81526020019060019003908161106d5790505b50611d96565b905090565b61109b6155cc565b6040805160608101825260ff8516815260208082018590528251600080825291810184526110ee938301916110e6565b6110d36155cc565b8152602001906001900390816110cb5790505b50905261212b565b9392505050565b6110fd6155cc565b604080516001808252818301909252606091816020015b61111c6155cc565b815260200190600190039081611114579050509050828160008151811061113f57fe5b602002602001018190525061117060405180606001604052808760ff1681526020018681526020018381525061212b565b95945050505050565b6000611183611ecf565b60ff16826060015160ff1614156111a657815161119f90612192565b9050611047565b6111ae611f48565b60ff16826060015160ff1614156111cc5761119f82602001516121b6565b6111d4611fef565b60ff16826060015160ff1614156111f6578151608083015161119f91906122b3565b6111fe612088565b60ff16826060015160ff161415611237576112176155cc565b6112248360400151612304565b905061122f81611179565b915050611047565b61123f612466565b60ff16826060015160ff16141561125857508051611047565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b6112a782602001518261246b565b82602001819052505050565b6112c182604001518261246b565b82604001819052505050565b6000808061272f60018514806112e35750600285145b806112ee5750600385145b1561130857506002925060009150600390506124e9611a16565b60048514806113175750600685145b156113315750600292506000915060049050612748611a16565b60058514806113405750600785145b1561135a5750600292506000915060079050612748611a16565b60088514806113695750600985145b15611383575060039250600091506004905061281a611a16565b600a8514156113a157506002925060009150601990506124e9611a16565b600b8514156113bf57506002925060009150600790506124e9611a16565b60108514806113ce5750601185145b806113d95750601285145b806113e45750601385145b806113ef5750601685145b806113fa5750601785145b806114055750601885145b1561141e575060029250600091508290506124e9611a16565b601485141561143b57506002925060009150829050612907611a16565b601585141561145857506001925060009150829050612960611a16565b6019851415611475575060019250600091508290506129bc611a16565b601a8514806114845750601b85145b8061148f5750601c85145b8061149a5750601d85145b156114b457506002925060009150600490506124e9611a16565b60208514156114d25750600192506000915060079050612a08611a16565b60218514156114f05750600192506000915060039050612a35611a16565b602285141561150e57506002925060009150600890506124e9611a16565b602385141561152d575060019250600091506102589050612a5f611a16565b602485141561154b5750600392506000915060fa9050612c3d611a16565b603085141561156857506001925060009150829050612cfb611a16565b603185141561158557506000925082915060019050612d09611a16565b60328514156115a257506000925082915060019050612d20611a16565b60338514156115c05750600192506000915060029050612d37611a16565b60348514156115de5750600192506000915060049050612d51611a16565b60358514156115fc5750600292506000915060049050612d92611a16565b603685141561161957506000925082915060029050612e06611a16565b603785141561163657506000925082915060019050612e4a611a16565b603885141561165357506001925060009150829050612e63611a16565b603985141561167057506000925060019150819050612e7a611a16565b603a85141561168d57506000925082915060029050612e91611a16565b603b8514156116aa57506000925082915060019050610b98611a16565b603c8514156116c757506000925082915060019050612ebf611a16565b603d8514156116e457506001925060009150829050612edb611a16565b604085141561170157506001925060009150829050612f1f611a16565b604185141561171f5750600292506000915060019050612f55611a16565b604285141561173d5750600392506000915060019050612fb2611a16565b604385141561175b5750600292506000915060019050613036611a16565b60448514156117795750600392506000915060019050613075611a16565b6050851415611796575060029250600091508290506130db611a16565b60518514156117b45750600392506000915060289050613178611a16565b60528514156117d25750600192506000915060029050613235611a16565b60538514156117ef57506001925082915060039050613280611a16565b605485141561180d5750600292506001915060299050613302611a16565b606085141561182a57506000925082915060649050610b98611a16565b606185141561184857506001925060009150606490506133bf611a16565b60708514156118665750600192506000915060649050613406611a16565b6071851415611884575060019250600091506028905061348e611a16565b60728514156118a15750600092508291506028905061350b611a16565b60738514156118be5750600092508291506005905061356b611a16565b60748514156118db575060009250829150600a9050613574611a16565b60758514156118f857506001925060009150819050613581611a16565b6076851415611915575060009250829150600190506135bc611a16565b6077851415611932575060009250829150601990506135d6611a16565b60788514156119505750600292506000915060199050613627611a16565b607985141561196e575060039250600091506019905061369f611a16565b607b85141561198b575060009250829150600a9050613730611a16565b60808514156119aa57506004925060009150614e209050613778611a16565b60818514156119c957506004925060009150614e2090506138f1611a16565b60828514156119e857506003925060009150614e209050613a2e611a16565b6083851415611a0757506001925060009150614e209050613b29611a16565b506000925082915081905061356b5b9193509193565b60408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051908201209082015160c001511415611a7957611a748160200151613cd3565b610b98565b6020015160c08101519052565b600060028261010001511415611a9e57506000611047565b60018261010001511415611ab457506001611047565b81516020830151611ac490611179565b611ad18460400151611179565b611ade8560600151611179565b611aeb8660800151611179565b8660a001518760c00151611b028960e00151611179565b6040516020018089815260200188815260200187815260200186815260200185815260200184815260200183815260200182815260200198505050505050505050604051602081830303815290604052805190602001209050611047565b611b686155cc565b6040805160a0810182528381528151606081018352600080825260208281018290528451828152808201865293949085019390830191611bbe565b611bab6155cc565b815260200190600190039081611ba35790505b50905281526040805160008082526020828101909352919092019190611bfa565b611be76155cc565b815260200190600190039081611bdf5790505b50815260006020820152600160409091015292915050565b611c1a6155cc565b60208204611c266155cc565b611c2e61104c565b60408051600280825260608281019093529293509091816020015b611c516155cc565b815260200190600190039081611c4957905050905060005b83811015611cd257611c8e611c8989602084028a0163ffffffff613cde16565b611b60565b82600081518110611c9b57fe5b60200260200101819052508282600181518110611cb457fe5b6020026020010181905250611cc882612304565b9250600101611c69565b506020850615611d48576000611cf488601f198989010163ffffffff613cde16565b9050602086066020036008021b611d0a81611b60565b82600081518110611d1757fe5b60200260200101819052508282600181518110611d3057fe5b6020026020010181905250611d4482612304565b9250505b611d5185611b60565b81600081518110611d5e57fe5b60200260200101819052508181600181518110611d7757fe5b6020026020010181905250611d8b81612304565b979650505050505050565b611d9e6155cc565b611da88251613d37565b611df9576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b8351811015611e3057838181518110611e1357fe5b602002602001015160800151820191508080600101915050611dfe565b506040805160a0810182526000808252825160608101845281815260208181018390528451838152808201865293949085019391929083019190611e8a565b611e776155cc565b815260200190600190039081611e6f5790505b50905281526020810194909452600360408501526060909301525090565b60008082600101848481518110611ebb57fe5b016020015190925060f81c90509250929050565b600090565b60008082845110158015611eec575060208385510310155b611f29576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b60208301611f3d858563ffffffff613cde16565b915091509250929050565b600190565b6000611f576155cc565b82600080611f636155cc565b6000611f6f8986611ea8565b9095509350611f7e8986611ea8565b9095509250600160ff85161415611f9f57611f998986610d94565b90955091505b611fa98986613d3e565b9095509050600160ff85161415611fd45784611fc68483856110f5565b965096505050505050610f1f565b84611fdf8483611093565b9650965050505050509250929050565b600290565b6000611ffe6155cc565b82845110158015612013575060408385510310155b61204f576040805162461bcd60e51b81526020600482015260086024820152671d1bc81cda1bdc9d60c21b604482015290519081900360640190fd5b60008061205c8686613d3e565b909450915061206b8685611ed4565b90945090508361207b8383613d55565b9350935050509250929050565b600390565b600c90565b60006060600083905060608660ff166040519080825280602002602001820160405280156120da57816020015b6120c76155cc565b8152602001906001900390816120bf5790505b50905060005b8760ff168160ff16101561211e576120f88784610d94565b8351849060ff851690811061210957fe5b602090810291909101015292506001016120e0565b5090969095509350505050565b6121336155cc565b6040805160a081018252600080825260208083018690528351828152908101845291928301919061217a565b6121676155cc565b81526020019060019003908161215f5790505b50815260016020820181905260409091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b60006002826040015151106121c757fe5b60408201515161222c576121d9611f48565b8251602080850151604080516001600160f81b031960f896871b8116828601529490951b909316602185015260228085019190915282518085039091018152604290930190915281519101209050611047565b612234611f48565b826000015161225a846040015160008151811061224d57fe5b6020026020010151611179565b8460200151604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b60006122bd612088565b8383604051602001808460ff1660ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b61230c6155cc565b60088251111561235a576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b60608251604051908082528060200260200182016040528015612387578160200160208202803883390190505b508051909150600160005b828110156123ea576123a986828151811061224d57fe5b8482815181106123b557fe5b6020026020010181815250508581815181106123cd57fe5b602002602001015160800151820191508080600101915050612392565b506000835184604051602001808360ff1660ff1660f81b8152600101828051906020019060200280838360005b8381101561242f578181015183820152602001612417565b505050509050019250505060405160208183030381529060405280519060200120905061245c8183613d55565b9695505050505050565b606490565b6124736155cc565b6040805160028082526060828101909352816020015b6124916155cc565b81526020019060019003908161248957905050905082816000815181106124b457fe5b602002602001018190525083816001815181106124cd57fe5b60200260200101819052506124e181612304565b949350505050565b6124f16155cc565b6124ff826101000151613e06565b90506125096155cc565b612517836101000151613e06565b905061252282613e48565b1580612534575061253281613e48565b155b156125495761254283613e53565b5050610b98565b8151815161016085015160009060ff166001141561256a5750818101612731565b61016086015160ff16600214156125845750818102612731565b61016086015160ff166003141561259e5750808203612731565b61016086015160ff16600a14156125b8575080820a612731565b61016086015160ff16600b14156125d2575080820b612731565b61016086015160ff16601014156125ec5750808210612731565b61016086015160ff16601114156126065750808211612731565b61016086015160ff16601214156126205750808212612731565b61016086015160ff166013141561263a5750808213612731565b61016086015160ff16601614156126545750818116612731565b61016086015160ff166017141561266e5750818117612731565b61016086015160ff16601814156126885750818118612731565b61016086015160ff16601a14156126a2575080821a612731565b61016086015160ff16601b14156126bc575080821b612731565b61016086015160ff16601c14156126d6575080821c612731565b61016086015160ff16601d14156126f0575080821d612731565b61016086015160ff166022141561272f575060408051602080820185905281830184905282518083038401815260609092019092528051910120612731565bfe5b610b9286610100015161274383611b60565b613e72565b6127506155cc565b61275e826101000151613e06565b90506127686155cc565b612776836101000151613e06565b905061278182613e48565b1580612793575061279181613e48565b155b8061279d57508051155b156127ab5761254283613e53565b8151815161016085015160009060ff16600414156127cc5750808204612731565b61016086015160ff16600514156127e65750808205612731565b61016086015160ff16600614156128005750808206612731565b61016086015160ff166007141561272f5750808207612731565b6128226155cc565b612830826101000151613e06565b905061283a6155cc565b612848836101000151613e06565b90506128526155cc565b612860846101000151613e06565b905061286b83613e48565b158061287d575061287b82613e48565b155b8061288e575061288c81613e48565b155b8061289857508051155b156128ae576128a684613e53565b505050610b98565b82518251825161016087015160009060ff16600814156128d3578183850890506128eb565b61016088015160ff166009141561272f578183850990505b6128fd88610100015161274383611b60565b5050505050505050565b61290f6155cc565b61291d826101000151613e06565b90506129276155cc565b612935836101000151613e06565b905061295b83610100015161274361294c84611179565b61295586611179565b14613e9c565b505050565b6129686155cc565b612976826101000151613e06565b905061298181613e48565b61299d576129988261010001516127436000611b60565b6129b8565b80516101008301518115906129b59061274383611b60565b50505b5050565b6129c46155cc565b6129d2826101000151613e06565b90506129dd81613e48565b6129f0576129ea82613e53565b50610b98565b80516101008301518119906129b59061274383611b60565b612a106155cc565b612a1e826101000151613e06565b90506129b8826101000151612743611c8984611179565b612a3d6155cc565b612a4b826101000151613e06565b90506129b882610100015161274383613ebe565b612a676155cc565b612a75826101000151613e06565b9050612a8081613f2d565b1580612a925750806040015151600714155b15612aa0576129ea82613e53565b604081015160005b6007811015612ae257612acd828281518110612ac057fe5b6020026020010151613e48565b612ada576128a684613e53565b600101612aa8565b50612aeb61566b565b60005b6019811015612b4f5760406003821602836004830481518110612b0d57fe5b602002602001015160000151901c6001600160401b03168260058381612b2f57fe5b04600584066005020160198110612b4257fe5b6020020152600101612aee565b50612b5981613f3a565b604080516007808252610100820190925291925060609190816020015b612b7e6155cc565b815260200190600190039081612b7657905050905060005b6007811015612bc857612ba96000611b60565b828281518110612bb557fe5b6020908102919091010152600101612b96565b5060005b6019811015612c2357604060038216028360058304600584066005020160198110612bf357fe5b6020020151901b826004830481518110612c0957fe5b602090810291909101015180519091179052600101612bcc565b50612c3685610100015161274383611d96565b5050505050565b612c456155cc565b612c53826101000151613e06565b9050612c5d6155cc565b612c6b836101000151613e06565b9050612c756155cc565b612c83846101000151613e06565b9050612c8e83613e48565b1580612ca05750612c9e82613e48565b155b80612cb15750612caf81613e48565b155b15612cbf576128a684613e53565b8251825182516101008701516040805180820190915283815260208101839052612cf2919061274390611c899087614b2b565b50505050505050565b6129b8816101000151613e06565b610b98816101000151826020015160800151613e72565b610b98816101000151826020015160600151613e72565b612d45816101000151613e06565b60209091015160600152565b612d596155cc565b612d67826101000151613e06565b9050612d7281615248565b612d7f576129ea82613e53565b612d8881611179565b6020830151525050565b612d9a6155cc565b612da8826101000151613e06565b9050612db26155cc565b612dc0836101000151613e06565b9050612dcb82615248565b1580612ddd5750612ddb81613e48565b155b15612deb5761254283613e53565b80511561295b57612dfb82611179565b602084015152505050565b61010081015151600090158015612e365750612e2361088e61104c565b612e34836020015160200151611179565b145b90506129b882610100015161274383613e9c565b610100810151815151610b989190612743906001615255565b610b98816101200151612743836101000151613e06565b610b98816101000151612743836101200151613e06565b61012081015151600090158015612e365750612eae61088e61104c565b612e34836020015160400151611179565b610b98816101000151612743836020015160c001516001615255565b612ee36155cc565b612ef1826101000151613e06565b9050612efc81615248565b612f09576129ea82613e53565b612f1281611179565b602083015160c001525050565b612f276155cc565b612f35826101000151613e06565b9050612f4682610100015182613e72565b6129b882610100015182613e72565b612f5d6155cc565b612f6b826101000151613e06565b9050612f756155cc565b612f83836101000151613e06565b9050612f9483610100015182613e72565b612fa383610100015183613e72565b61295b83610100015182613e72565b612fba6155cc565b612fc8826101000151613e06565b9050612fd26155cc565b612fe0836101000151613e06565b9050612fea6155cc565b612ff8846101000151613e06565b905061300984610100015182613e72565b61301884610100015183613e72565b61302784610100015184613e72565b6129b584610100015182613e72565b61303e6155cc565b61304c826101000151613e06565b90506130566155cc565b613064836101000151613e06565b9050612fa383610100015183613e72565b61307d6155cc565b61308b826101000151613e06565b90506130956155cc565b6130a3836101000151613e06565b90506130ad6155cc565b6130bb846101000151613e06565b90506130cc84610100015184613e72565b61302784610100015183613e72565b6130e36155cc565b6130f1826101000151613e06565b90506130fb6155cc565b613109836101000151613e06565b905061311482613e48565b1580613126575061312481613f2d565b155b80613140575061313581615306565b60ff16826000015110155b1561314e5761254283613e53565b61295b836101000151826040015184600001518151811061316b57fe5b6020026020010151613e72565b6131806155cc565b61318e826101000151613e06565b90506131986155cc565b6131a6836101000151613e06565b90506131b06155cc565b6131be846101000151613e06565b90506131c983613e48565b15806131db57506131d982613f2d565b155b806131f557506131ea82615306565b60ff16836000015110155b15613203576128a684613e53565b60408201518351815183918391811061321857fe5b6020026020010181905250612c3685610100015161274383611d96565b61323d6155cc565b61324b826101000151613e06565b905061325681613f2d565b613263576129ea82613e53565b6129b882610100015161274361327884615306565b60ff16611b60565b6132886155cc565b613296826101000151613e06565b90506132a06155cc565b6132ae836101200151613e06565b90506132b982613e48565b15806132cb57506132c981613f2d565b155b806132e557506132da81615306565b60ff16826000015110155b156132f35761254283613e53565b61314e83610120015182613e72565b61330a6155cc565b613318826101000151613e06565b90506133226155cc565b613330836101000151613e06565b905061333a6155cc565b613348846101200151613e06565b905061335381613f2d565b1580613365575061336383613e48565b155b8061337f575061337481615306565b60ff16836000015110155b1561338d576128a684613e53565b6040810151835181518491839181106133a257fe5b6020026020010181905250612c3685610120015161274383611d96565b80608001516133d561088e836101000151613e06565b6040805160208082019490945280820192909252805180830382018152606090920190528051910120608090910152565b61340e6155cc565b61341c826101000151613e06565b90506127108160800151118061343857506134368161532d565b155b15613446576129ea82613e53565b816060015161345482611179565b6040516020018083815260200182815260200192505050604051602081830303815290604052805190602001208260600181815250505050565b6134966155cc565b6134a4826101000151613e06565b90506134b161088e61104c565b6134c2836020015160e00151611179565b146134da576134d08261542b565b602083015160e001525b6129b88261010001516127436134ef84611179565b612955866020015160e001516040015160018151811061224d57fe5b61351661088e61104c565b613527826020015160e00151611179565b1461355957613543816101000151826020015160e00151613e72565b61354b61104c565b602082015160e00152610b98565b610b988161010001516127438361542b565b610b9881613e53565b610b9881602001516154c4565b6135896155cc565b613597826101000151613e06565b90506135a281613e48565b6135af576129ea82613e53565b51602082015160a0015250565b610b98816101000151612743836020015160a00151611b60565b61010081015160408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051910120610b989190612743906001615255565b61362f6155cc565b61363d826101000151613e06565b90506136476155cc565b613655836101000151613e06565b905061366082613e48565b1580613672575061367081615248565b155b156136805761254283613e53565b61295b836101000151612743846000015161369a85611179565b611093565b6136a76155cc565b6136b5826101000151613e06565b90506136bf6155cc565b6136cd836101000151613e06565b90506136d76155cc565b6136e5846101000151613e06565b90506136f083613e48565b1580613702575061370081615248565b155b15613710576128a684613e53565b6129b5846101000151612743856000015161372a85611179565b866110f5565b60408051600080825260208201909252606091613763565b6137506155cc565b8152602001906001900390816137485790505b5090506129b882610100015161274383611d96565b6137806155cc565b61378e826101000151613e06565b90506137986155cc565b6137a6836101000151613e06565b90506137b06155cc565b6137be846101000151613e06565b90506137c86155cc565b6137d6856101000151613e06565b90506137e184613e48565b15806137f357506137f183613e48565b155b80613804575061380282613e48565b155b80613815575061381381613e48565b155b156138235761086c85613e53565b8351835183511580159061383957508351600114155b1561385c576138518761010001516127436000611b60565b505050505050610b98565b83518351604080516000808252602080830180855285905260ff601b9096019586168385015260608301889052608083018790529251909260019260a080820193601f1981019281900390910190855afa1580156138be573d6000803e3d6000fd5b5050506020604051035190506138e58a6101000151612743836001600160a01b0316611b60565b50505050505050505050565b6138f96155cc565b613907826101000151613e06565b90506139116155cc565b61391f836101000151613e06565b90506139296155cc565b613937846101000151613e06565b90506139416155cc565b61394f856101000151613e06565b905061395a84613e48565b158061396c575061396a83613e48565b155b8061397d575061397b82613e48565b155b8061398e575061398c81613e48565b155b1561399c5761086c85613e53565b6139a461568a565b50604080516080810182528551815284516020820152835191810191909152815160608201526139d26156a8565b600060408260808560066107d05a03fa9050806139fe576139f288613e53565b50505050505050610b98565b610100880151613a19906127438460015b6020020151611b60565b6101008801516128fd90612743846000613a0f565b613a366155cc565b613a44826101000151613e06565b9050613a4e6155cc565b613a5c836101000151613e06565b9050613a666155cc565b613a74846101000151613e06565b9050613a7f83613e48565b1580613a915750613a8f82613e48565b155b80613aa25750613aa081613e48565b155b15613ab0576128a684613e53565b613ab86156c6565b50604080516060810182528451815283516020820152825191810191909152613adf6156a8565b600060408260808560076107d05a03fa905080613aff5761385187613e53565b610100870151613b1490612743846001613a0f565b610100870151612cf290612743846000613a0f565b613b316156e4565b613b396155cc565b613b47836101000151613e06565b905060005b601e811015613c6957613b5e82613f2d565b613b6b576128a684613e53565b60408201518051613b7c5750613c69565b8051600214613b8e5761086c85613e53565b613b966155cc565b81600081518110613ba357fe5b6020026020010151905081600181518110613bba57fe5b60200260200101519350613bcd81613f2d565b613be457613bda86613e53565b5050505050610b98565b60408101518051600614613bfb5761385187613e53565b60005b6006811015613c5957613c16828281518110612ac057fe5b613c23576139f288613e53565b818181518110613c2f57fe5b6020026020010151600001518782876006020160b48110613c4c57fe5b6020020152600101613bfe565b505060019092019150613b4c9050565b613c7282613f2d565b1580613c82575060408201515115155b15613c90576128a684613e53565b60c08102613c9c615703565b6000602082848860086107d05a03fa905080613cbb5761385187613e53565b6101008701518251612cf29190612743901515613e9c565b600161010090910152565b60008160200183511015613d2e576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b6008101590565b60008060208301611f3d858563ffffffff613cde16565b613d5d6155cc565b6040805160a0810182528481528151606081018352600080825260208281018290528451828152808201865293949085019390830191613db3565b613da06155cc565b815260200190600190039081613d985790505b50905281526040805160008082526020828101909352919092019190613def565b613ddc6155cc565b815260200190600190039081613dd45790505b508152600260208201526040019290925250919050565b613e0e6155cc565b613e166155cc565b8260200151600184600001510381518110613e2d57fe5b60209081029190910101518351600019018452915050919050565b6060015160ff161590565b613e5c81611a1d565b6101008101516000908190526101209091015152565b808260200151836000015181518110613e8757fe5b60209081029190910101525080516001019052565b613ea46155cc565b8115613eb45761119f6001611b60565b61119f6000611b60565b613ec66155cc565b816060015160ff1660021415613f17576040805162461bcd60e51b8152602060048201526011602482015270696e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b613f27826060015160ff16611b60565b92915050565b6060015160ff1660031490565b613f4261566b565b613f4a615522565b613f52615522565b613f5a61566b565b613f62615721565b60405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060008090505b6018811015614b20576080878101516060808a01516040808c01516020808e01518e511890911890921890931889526101208b01516101008c015160e08d015160c08e015160a08f0151181818189089018190526101c08b01516101a08c01516101808d01516101608e01516101408f0151181818189289019283526102608b01516102408c01516102208d01516102008e01516101e08f015118181818918901919091526103008a01516102e08b01516102c08c01516102a08d01516102808e0151181818189288018390526001600160401b0360028202166001603f1b91829004179092188652510485600260200201516002026001600160401b03161785600060200201511884600160200201526001603f1b8560036020020151816141ae57fe5b0485600360200201516002026001600160401b03161785600160200201511884600260200201526001603f1b8560046020020151816141e957fe5b0485600460200201516002026001600160401b0316178560026005811061420c57fe5b602002015118606085015284516001603f1b9086516060808901519390920460029091026001600160401b031617909118608086810191825286518a5118808b5287516020808d018051909218825289516040808f0180519092189091528a518e8801805190911890528a51948e0180519095189094528901805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291880180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292870180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a01805190911890529084525163100000009060208901516001600160401b03641000000000909102169190041761010084015260408701516001603d1b9060408901516001600160401b03600890910216919004176101608401526060870151628000009060608901516001600160401b036502000000000090910216919004176102608401526080870151654000000000009060808901516001600160401b036204000090910216919004176102c084015260a08701516001603f1b900487600560200201516002026001600160401b0316178360026019811061447657fe5b602002015260c0870151621000008104651000000000009091026001600160401b039081169190911760a085015260e0880151664000000000000081046104009091028216176101a08501526101008801516208000081046520000000000090910282161761020085015261012088015160048082029092166001603e1b909104176103008501526101408801516101408901516001600160401b036001603e1b90910216919004176080840152610160870151670400000000000000906101608901516001600160401b036040909102169190041760e084015261018087015162200000906101808901516001600160401b036508000000000090910216919004176101408401526101a08701516602000000000000906101a08901516001600160401b0361800090910216919004176102408401526101c08701516008906101c08901516001600160401b036001603d1b90910216919004176102a08401526101e0870151641000000000906101e08901516001600160401b03631000000090910216919004176020840152610200808801516102008901516001600160401b0366800000000000009091021691900417610120840152610220870151648000000000906102208901516001600160401b036302000000909102169190041761018084015261024087015165080000000000906102408901516001600160401b036220000090910216919004176101e0840152610260870151610100906102608901516001600160401b03600160381b90910216919004176102e0840152610280870151642000000000906102808901516001600160401b036308000000909102169190041760608401526102a087015165100000000000906102a08901516001600160401b0362100000909102169190041760c08401526102c08701516302000000906102c08901516001600160401b0364800000000090910216919004176101c08401526102e0870151600160381b906102e08901516001600160401b036101009091021691900417610220840152610300870151660400000000000090048760186020020151614000026001600160401b031617836014602002015282600a602002015183600560200201511916836000602002015118876000602002015282600b602002015183600660200201511916836001602002015118876001602002015282600c602002015183600760200201511916836002602002015118876002602002015282600d602002015183600860200201511916836003602002015118876003602002015282600e602002015183600960200201511916836004602002015118876004602002015282600f602002015183600a602002015119168360056020020151188760056020020152826010602002015183600b602002015119168360066020020151188760066020020152826011602002015183600c602002015119168360076020020151188760076020020152826012602002015183600d602002015119168360086020020151188760086020020152826013602002015183600e602002015119168360096020020151188760096020020152826014602002015183600f6020020151191683600a60200201511887600a602002015282601560200201518360106020020151191683600b60200201511887600b602002015282601660200201518360116020020151191683600c60200201511887600c602002015282601760200201518360126020020151191683600d60200201511887600d602002015282601860200201518360136020020151191683600e60200201511887600e602002015282600060200201518360146020020151191683600f60200201511887600fb0e57fe5b60200201518751188752600101614089565b509495945050505050565b6000614b35615740565b50604080516108008101825263428a2f9881526371374491602082015263b5c0fbcf9181019190915263e9b5dba56060820152633956c25b60808201526359f111f160a082015263923f82a460c082015263ab1c5ed560e082015263d807aa986101008201526312835b0161012082015263243185be61014082015263550c7dc36101608201526372be5d746101808201526380deb1fe6101a0820152639bdc06a76101c082015263c19bf1746101e082015263e49b69c161020082015263efbe4786610220820152630fc19dc661024082015263240ca1cc610260820152632de92c6f610280820152634a7484aa6102a0820152635cb0a9dc6102c08201526376f988da6102e082015263983e515261030082015263a831c66d61032082015263b00327c861034082015263bf597fc761036082015263c6e00bf361038082015263d5a791476103a08201526306ca63516103c082015263142929676103e08201526327b70a85610400820152632e1b2138610420820152634d2c6dfc6104408201526353380d1361046082015263650a735461048082015263766a0abb6104a08201526381c2c92e6104c08201526392722c856104e082015263a2bfe8a161050082015263a81a664b61052082015263c24b8b7061054082015263c76c51a361056082015263d192e81961058082015263d69906246105a082015263f40e35856105c082015263106aa0706105e08201526319a4c116610600820152631e376c08610620820152632748774c6106408201526334b0bcb561066082015263391c0cb3610680820152634ed8aa4a6106a0820152635b9cca4f6106c082015263682e6ff36106e082015263748f82ee6107008201526378a5636f6107208201526384c87814610740820152638cc702086107608201526390befffa61078082015263a4506ceb6107a082015263bef9a3f76107c082015263c67178f26107e0820152614e00615740565b60005b60088163ffffffff161015614e8d5763ffffffff6020820260e003168660006020020151901c828263ffffffff1660408110614e3b57fe5b63ffffffff92831660209182029290920191909152820260e003168660016020020151901c828260080163ffffffff1660408110614e7557fe5b63ffffffff9092166020929092020152600101614e03565b5060106000805b60408363ffffffff161015614fe957600384600f850363ffffffff1660408110614eba57fe5b602002015163ffffffff16901c614eeb85600f860363ffffffff1660408110614edf57fe5b602002015160126154cf565b614f0f86600f870363ffffffff1660408110614f0357fe5b602002015160076154cf565b18189150600a846002850363ffffffff1660408110614f2a57fe5b602002015163ffffffff16901c614f5b856002860363ffffffff1660408110614f4f57fe5b602002015160136154cf565b614f7f866002870363ffffffff1660408110614f7357fe5b602002015160116154cf565b1818905080846007850363ffffffff1660408110614f9957fe5b602002015183866010870363ffffffff1660408110614fb457fe5b6020020151010101848463ffffffff1660408110614fce57fe5b63ffffffff9092166020929092020152600190920191614e94565b614ff161575f565b600093505b60088463ffffffff161015615042578360200260e00363ffffffff1688901c818563ffffffff166008811061502757fe5b63ffffffff9092166020929092020152600190930192614ff6565b60008060008096505b60408763ffffffff16101561519757608084015161506a9060196154cf565b608085015161507a90600b6154cf565b608086015161508a9060066154cf565b18189450878763ffffffff16604081106150a057fe5b6020020151898863ffffffff16604081106150b757fe5b6020020151608086015160a087015160c08801516150d69291906154ed565b8787600760200201510101010192506150f7846000602002015160166154cf565b845161510490600d6154cf565b85516151119060026154cf565b6040870180516020890180518a5160c08c01805163ffffffff90811660e08f015260a08e018051821690925260808e018051821690925260608e0180518e0182169092528086169091528083169095528481169092528083189190911691161892909118929092188181018681019093168752600199909901989750909250905061504b565b600096505b60088763ffffffff1610156151eb578660200260e00363ffffffff168b901c848863ffffffff16600881106151cd57fe5b60200201805163ffffffff920191909116905260019096019561519c565b60008097505b60088863ffffffff161015615238578760200260e00363ffffffff16858963ffffffff166008811061521f57fe5b602002015160019099019863ffffffff16901b176151f1565b9c9b505050505050505050505050565b6060015160ff1660011490565b61525d6155cc565b6040805160a08101825284815281516060810183526000808252602082810182905284518281528082018652939490850193908301916152b3565b6152a06155cc565b8152602001906001900390816152985790505b509052815260408051600080825260208281019093529190920191906152ef565b6152dc6155cc565b8152602001906001900390816152d45790505b508152606460208201526040019290925250919050565b606081015160009060ff16600314156153255750604081015151611047565b506001611047565b606081015160009060ff1661534457506001611047565b606082015160ff166001141561535c57506000611047565b606082015160ff16600214156153b0576040805162461bcd60e51b81526020600482015260146024820152736d75737420686176652066756c6c2076616c756560601b604482015290519081900360640190fd5b606082015160ff16600314156154135760408201515160005b81811015615408576153f1846040015182815181106153e457fe5b602002602001015161532d565b61540057600092505050611047565b6001016153c9565b506001915050611047565b606082015160ff166064141561125857506000611047565b6154336155cc565b60e082015160408051808201909152600981526812539093d617d5905360ba1b6020820152906154a45760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561066357818101518382015260200161064b565b506154b782604001518360e001516154f6565b60408301525060c0015190565b600261010090910152565b63ffffffff9182166020829003831681901b919092169190911c1790565b82191691161890565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6040518060a001604052806005906020820280388339509192915050565b604051806101c00160405280615554615600565b8152602001615561615600565b81526000602082018190526040820181905260608201819052608082015260a00161558a6155cc565b81526000602082015260400161559e61577e565b81526020016155ab61577e565b81526000602082018190526040820181905260608083015260809091015290565b6040518060a00160405280600081526020016155e6615798565b815260606020820181905260006040830181905291015290565b604080516101208101909152600081526020810161561c6155cc565b81526020016156296155cc565b81526020016156366155cc565b81526020016156436155cc565b8152600060208201819052604082015260600161565e6155cc565b8152602001600081525090565b6040518061032001604052806019906020820280388339509192915050565b60405180608001604052806004906020820280388339509192915050565b60405180604001604052806002906020820280388339509192915050565b60405180606001604052806003906020820280388339509192915050565b60405180611680016040528060b4906020820280388339509192915050565b60405180602001604052806001906020820280388339509192915050565b6040518061030001604052806018906020820280388339509192915050565b6040518061080001604052806040906020820280388339509192915050565b6040518061010001604052806008906020820280388339509192915050565b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fea265627a7a723158203ddc6de0e445d4c9a84374db12de0c7622c71301ac3d0c02cdb6ca504060a61f64736f6c63430005110032"

// DeployOneStepProof deploys a new Ethereum contract, binding an instance of OneStepProof to it.
func DeployOneStepProof(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// OneStepProof is an auto generated Go binding around an Ethereum contract.
type OneStepProof struct {
	OneStepProofCaller     // Read-only binding to the contract
	OneStepProofTransactor // Write-only binding to the contract
	OneStepProofFilterer   // Log filterer for contract events
}

// OneStepProofCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofSession struct {
	Contract     *OneStepProof     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProofCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofCallerSession struct {
	Contract *OneStepProofCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// OneStepProofTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTransactorSession struct {
	Contract     *OneStepProofTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// OneStepProofRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofRaw struct {
	Contract *OneStepProof // Generic contract binding to access the raw methods on
}

// OneStepProofCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofCallerRaw struct {
	Contract *OneStepProofCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTransactorRaw struct {
	Contract *OneStepProofTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof creates a new instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProof(address common.Address, backend bind.ContractBackend) (*OneStepProof, error) {
	contract, err := bindOneStepProof(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// NewOneStepProofCaller creates a new read-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofCaller, error) {
	contract, err := bindOneStepProof(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofCaller{contract: contract}, nil
}

// NewOneStepProofTransactor creates a new write-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTransactor, error) {
	contract, err := bindOneStepProof(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTransactor{contract: contract}, nil
}

// NewOneStepProofFilterer creates a new log filterer instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofFilterer, error) {
	contract, err := bindOneStepProof(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofFilterer{contract: contract}, nil
}

// bindOneStepProof binds a generic wrapper to an already deployed contract.
func bindOneStepProof(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.OneStepProofCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transact(opts, method, params...)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x385bc114.
//
// Solidity: function executeStep(bytes32 inboxAcc, bytes32 messagesAcc, bytes32 logsAcc, bytes proof) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof *OneStepProofCaller) ExecuteStep(opts *bind.CallOpts, inboxAcc [32]byte, messagesAcc [32]byte, logsAcc [32]byte, proof []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	ret := new(struct {
		Gas    uint64
		Fields [5][32]byte
	})
	out := ret
	err := _OneStepProof.contract.Call(opts, out, "executeStep", inboxAcc, messagesAcc, logsAcc, proof)
	return *ret, err
}

// ExecuteStep is a free data retrieval call binding the contract method 0x385bc114.
//
// Solidity: function executeStep(bytes32 inboxAcc, bytes32 messagesAcc, bytes32 logsAcc, bytes proof) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof *OneStepProofSession) ExecuteStep(inboxAcc [32]byte, messagesAcc [32]byte, logsAcc [32]byte, proof []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	return _OneStepProof.Contract.ExecuteStep(&_OneStepProof.CallOpts, inboxAcc, messagesAcc, logsAcc, proof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x385bc114.
//
// Solidity: function executeStep(bytes32 inboxAcc, bytes32 messagesAcc, bytes32 logsAcc, bytes proof) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof *OneStepProofCallerSession) ExecuteStep(inboxAcc [32]byte, messagesAcc [32]byte, logsAcc [32]byte, proof []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	return _OneStepProof.Contract.ExecuteStep(&_OneStepProof.CallOpts, inboxAcc, messagesAcc, logsAcc, proof)
}

// ExecuteStepWithMessage is a free data retrieval call binding the contract method 0x96105dce.
//
// Solidity: function executeStepWithMessage(bytes32 inboxAcc, bytes32 messagesAcc, bytes32 logsAcc, bytes proof, uint8 _kind, uint256 _blockNumber, uint256 _timestamp, address _sender, uint256 _inboxSeqNum, bytes _msgData) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof *OneStepProofCaller) ExecuteStepWithMessage(opts *bind.CallOpts, inboxAcc [32]byte, messagesAcc [32]byte, logsAcc [32]byte, proof []byte, _kind uint8, _blockNumber *big.Int, _timestamp *big.Int, _sender common.Address, _inboxSeqNum *big.Int, _msgData []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	ret := new(struct {
		Gas    uint64
		Fields [5][32]byte
	})
	out := ret
	err := _OneStepProof.contract.Call(opts, out, "executeStepWithMessage", inboxAcc, messagesAcc, logsAcc, proof, _kind, _blockNumber, _timestamp, _sender, _inboxSeqNum, _msgData)
	return *ret, err
}

// ExecuteStepWithMessage is a free data retrieval call binding the contract method 0x96105dce.
//
// Solidity: function executeStepWithMessage(bytes32 inboxAcc, bytes32 messagesAcc, bytes32 logsAcc, bytes proof, uint8 _kind, uint256 _blockNumber, uint256 _timestamp, address _sender, uint256 _inboxSeqNum, bytes _msgData) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof *OneStepProofSession) ExecuteStepWithMessage(inboxAcc [32]byte, messagesAcc [32]byte, logsAcc [32]byte, proof []byte, _kind uint8, _blockNumber *big.Int, _timestamp *big.Int, _sender common.Address, _inboxSeqNum *big.Int, _msgData []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	return _OneStepProof.Contract.ExecuteStepWithMessage(&_OneStepProof.CallOpts, inboxAcc, messagesAcc, logsAcc, proof, _kind, _blockNumber, _timestamp, _sender, _inboxSeqNum, _msgData)
}

// ExecuteStepWithMessage is a free data retrieval call binding the contract method 0x96105dce.
//
// Solidity: function executeStepWithMessage(bytes32 inboxAcc, bytes32 messagesAcc, bytes32 logsAcc, bytes proof, uint8 _kind, uint256 _blockNumber, uint256 _timestamp, address _sender, uint256 _inboxSeqNum, bytes _msgData) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof *OneStepProofCallerSession) ExecuteStepWithMessage(inboxAcc [32]byte, messagesAcc [32]byte, logsAcc [32]byte, proof []byte, _kind uint8, _blockNumber *big.Int, _timestamp *big.Int, _sender common.Address, _inboxSeqNum *big.Int, _msgData []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	return _OneStepProof.Contract.ExecuteStepWithMessage(&_OneStepProof.CallOpts, inboxAcc, messagesAcc, logsAcc, proof, _kind, _blockNumber, _timestamp, _sender, _inboxSeqNum, _msgData)
}

// PrecompilesABI is the input ABI used to generate the binding from.
const PrecompilesABI = "[]"

// PrecompilesBin is the compiled bytecode used for deploying new contracts.
var PrecompilesBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a7231582089a25ee4d0917faa75d52d337f832f58e8fef2b903c6259ee110daea7c41f21264736f6c63430005110032"

// DeployPrecompiles deploys a new Ethereum contract, binding an instance of Precompiles to it.
func DeployPrecompiles(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Precompiles, error) {
	parsed, err := abi.JSON(strings.NewReader(PrecompilesABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PrecompilesBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Precompiles{PrecompilesCaller: PrecompilesCaller{contract: contract}, PrecompilesTransactor: PrecompilesTransactor{contract: contract}, PrecompilesFilterer: PrecompilesFilterer{contract: contract}}, nil
}

// Precompiles is an auto generated Go binding around an Ethereum contract.
type Precompiles struct {
	PrecompilesCaller     // Read-only binding to the contract
	PrecompilesTransactor // Write-only binding to the contract
	PrecompilesFilterer   // Log filterer for contract events
}

// PrecompilesCaller is an auto generated read-only Go binding around an Ethereum contract.
type PrecompilesCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompilesTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PrecompilesTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompilesFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PrecompilesFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompilesSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PrecompilesSession struct {
	Contract     *Precompiles      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PrecompilesCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PrecompilesCallerSession struct {
	Contract *PrecompilesCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// PrecompilesTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PrecompilesTransactorSession struct {
	Contract     *PrecompilesTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// PrecompilesRaw is an auto generated low-level Go binding around an Ethereum contract.
type PrecompilesRaw struct {
	Contract *Precompiles // Generic contract binding to access the raw methods on
}

// PrecompilesCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PrecompilesCallerRaw struct {
	Contract *PrecompilesCaller // Generic read-only contract binding to access the raw methods on
}

// PrecompilesTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PrecompilesTransactorRaw struct {
	Contract *PrecompilesTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPrecompiles creates a new instance of Precompiles, bound to a specific deployed contract.
func NewPrecompiles(address common.Address, backend bind.ContractBackend) (*Precompiles, error) {
	contract, err := bindPrecompiles(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Precompiles{PrecompilesCaller: PrecompilesCaller{contract: contract}, PrecompilesTransactor: PrecompilesTransactor{contract: contract}, PrecompilesFilterer: PrecompilesFilterer{contract: contract}}, nil
}

// NewPrecompilesCaller creates a new read-only instance of Precompiles, bound to a specific deployed contract.
func NewPrecompilesCaller(address common.Address, caller bind.ContractCaller) (*PrecompilesCaller, error) {
	contract, err := bindPrecompiles(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PrecompilesCaller{contract: contract}, nil
}

// NewPrecompilesTransactor creates a new write-only instance of Precompiles, bound to a specific deployed contract.
func NewPrecompilesTransactor(address common.Address, transactor bind.ContractTransactor) (*PrecompilesTransactor, error) {
	contract, err := bindPrecompiles(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PrecompilesTransactor{contract: contract}, nil
}

// NewPrecompilesFilterer creates a new log filterer instance of Precompiles, bound to a specific deployed contract.
func NewPrecompilesFilterer(address common.Address, filterer bind.ContractFilterer) (*PrecompilesFilterer, error) {
	contract, err := bindPrecompiles(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PrecompilesFilterer{contract: contract}, nil
}

// bindPrecompiles binds a generic wrapper to an already deployed contract.
func bindPrecompiles(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PrecompilesABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Precompiles *PrecompilesRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Precompiles.Contract.PrecompilesCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Precompiles *PrecompilesRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Precompiles.Contract.PrecompilesTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Precompiles *PrecompilesRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Precompiles.Contract.PrecompilesTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Precompiles *PrecompilesCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Precompiles.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Precompiles *PrecompilesTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Precompiles.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Precompiles *PrecompilesTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Precompiles.Contract.contract.Transact(opts, method, params...)
}
