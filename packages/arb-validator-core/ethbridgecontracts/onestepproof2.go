// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgecontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProof2ABI is the input ABI used to generate the binding from.
const OneStepProof2ABI = "[{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"messagesAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"logsAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[5]\",\"name\":\"fields\",\"type\":\"bytes32[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"parseProof\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// OneStepProof2FuncSigs maps the 4-byte function signature to its string representation.
var OneStepProof2FuncSigs = map[string]string{
	"1041c884": "executeStep(bytes32,bytes32,bytes32,bytes,bytes)",
	"793deea3": "parseProof(bytes)",
}

// OneStepProof2Bin is the compiled bytecode used for deploying new contracts.
var OneStepProof2Bin = "0x608060405234801561001057600080fd5b506134ba806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631041c8841461003b578063793deea314610159575b600080fd5b610110600480360360a081101561005157600080fd5b8135916020810135916040820135919081019060808101606082013564010000000081111561007f57600080fd5b82018360208201111561009157600080fd5b803590602001918460018302840111640100000000831117156100b357600080fd5b9193909290916020810190356401000000008111156100d157600080fd5b8201836020820111156100e357600080fd5b8035906020019184600183028401116401000000008311171561010557600080fd5b509092509050610322565b60405167ffffffffffffffff83168152602081018260a080838360005b8381101561014557818101518382015260200161012d565b505050509050019250505060405180910390f35b6101ff6004803603602081101561016f57600080fd5b81019060208101813564010000000081111561018a57600080fd5b82018360208201111561019c57600080fd5b803590602001918460018302840111640100000000831117156101be57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506103cf945050505050565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b8381101561024b578181015183820152602001610233565b50505050905001858103845288818151815260200191508051906020019060200280838360005b8381101561028a578181015183820152602001610272565b50505050905001858103835287818151815260200191508051906020019060200280838360005b838110156102c95781810151838201526020016102b1565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156103085781810151838201526020016102f0565b505050509050019850505050505050505060405180910390f35b600061032c6132a3565b6103346132c1565b6103aa8a8a8a8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b908190840183828082843760009201919091525061040b92505050565b90506103b5816108d1565b6103be81610c39565b925092505097509795505050505050565b6060806060806103dd61335a565b6103e686610c9c565b80516020820151604083015160609093015191975095509093509150505b9193509193565b6104136132c1565b60008360008151811061042257fe5b602001015160f81c60f81b60f81c905060008460018151811061044157fe5b602001015160f81c60f81b60f81c905060006002905060608360040160ff1660405190808252806020026020018201604052801561049957816020015b610486613382565b81526020019060019003908161047e5790505b50905060608360040160ff166040519080825280602002602001820160405280156104de57816020015b6104cb613382565b8152602001906001900390816104c35790505b50905060005b8560ff1681101561051c576104f98985610d94565b845185908490811061050757fe5b602090810291909101015293506001016104e4565b5060005b8460ff16811015610558576105358985610d94565b835184908490811061054357fe5b60209081029190910101529350600101610520565b506105616133bf565b61056b8985610f56565b90945090506105786132c1565b604051806101e0016040528083815260200161059384611007565b81526020018e81526020018d81526020018c8152602001600067ffffffffffffffff1681526020016105c361107b565b81526020016000801b815260200160405180604001604052808a60ff16815260200187815250815260200160405180604001604052808960ff1681526020018681525081526020018b878151811061061757fe5b602001015160f81c60f81b60f81c60ff16600114151581526020018b876001018151811061064157fe5b0160209081015160f81c825281018c90526002870160408201526060018a90528a519091506000908b908790811061067557fe5b602001015160f81c60f81b60f81c905060008b876001018151811061069657fe5b01602001516002979097019660f81c905060ff821615806106ba57508160ff166001145b6040518060400160405280600b81526020016a04241445f494d4d5f5459560ac1b815250906107675760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561072c578181015183820152602001610714565b50505050905090810190601f1680156107595780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610770613382565b60ff831661078d578351516107869083906110c2565b905061082d565b6000875111604051806040016040528060068152602001654e4f5f494d4d60d01b815250906107fd5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561072c578181015183820152602001610714565b5061082a828560000151600001518960018e0360ff168151811061081d57fe5b6020026020010151611126565b90505b610836816111ac565b84515260005b838b0360ff1681101561087b5761087388828151811061085857fe5b6020026020010151866000015161131990919063ffffffff16565b60010161083c565b5060005b8960ff168110156108bc576108b487828151811061089957fe5b6020026020010151866000015161133390919063ffffffff16565b60010161087f565b50929f9e505050505050505050505050505050565b600080600061342a6108ea85610160015160ff1661134d565b93509350935093506108fc8583611408565b1561090a5750505050610c36565b610100850151518411156109bf5761092861092361107b565b6111ac565b6109398660200151602001516111ac565b146040518060400160405280600d81526020016c535441434b5f4d495353494e4760981b815250906109ac5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561072c578181015183820152602001610714565b506109b685611474565b50505050610c36565b61012085015151831115610a5a576109d861092361107b565b6109e98660200151604001516111ac565b146040518060400160405280600b81526020016a4155585f4d495353494e4760a81b815250906109ac5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561072c578181015183820152602001610714565b6000841180610a6c5750846101400151155b8015610a7d57506101008501515184145b80610aa557508461014001518015610a93575083155b8015610aa55750610100850151516001145b6040518060400160405280600a815260200169535441434b5f4d414e5960b01b81525090610b145760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561072c578181015183820152602001610714565b50610120850151516040805180820190915260088152674155585f4d414e5960c01b6020820152908414610b895760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561072c578181015183820152602001610714565b50610b97858263ffffffff16565b60005b61010086015151811015610be357610bdb866101000151602001518281518110610bc057fe5b6020026020010151876020015161131990919063ffffffff16565b600101610b9a565b5060005b61012086015151811015610c3057610c28866101200151602001518281518110610c0d57fe5b6020026020010151876020015161133390919063ffffffff16565b600101610be7565b50505050505b50565b6000610c436132a3565b8260a001516040518060a00160405280610c6086600001516114dd565b8152602001610c7286602001516114dd565b81526020018560400151815260200185606001518152602001856080015181525091509150915091565b610ca461335a565b6060610ce38384600081518110610cb757fe5b602001015160f81c60f81b85600181518110610ccf57fe5b01602001516001600160f81b0319166115b7565b90506060610d108485600181518110610cf857fe5b602001015160f81c60f81b86600281518110610ccf57fe5b90506060610d3d8586600281518110610d2557fe5b602001015160f81c60f81b87600381518110610ccf57fe5b90506060610d6a8687600381518110610d5257fe5b602001015160f81c60f81b88600481518110610ccf57fe5b6040805160808101825295865260208601949094529284019190915250606082015290505b919050565b6000610d9e613382565b83518310610de4576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b600080610df1868661164a565b91509150610dfd611671565b60ff168160ff161415610e31576000610e168784611676565b909350905082610e25826116ea565b94509450505050610f4f565b610e396117a3565b60ff168160ff161415610e5b57610e5086836117a8565b935093505050610f4f565b610e6361184a565b60ff168160ff161415610e8b576000610e7c8784611676565b909350905082610e258261184f565b610e9361190c565b60ff168160ff161415610eaa57610e508683611911565b610eb26119a5565b60ff168160ff1610158015610ed35750610eca6119aa565b60ff168160ff16105b15610f0f576000610ee26119a5565b820390506060610ef38289866119af565b909450905083610f0282611a48565b9550955050505050610f4f565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b6000610f606133bf565b610f686133bf565b6000610100820181905280610f7d8787611676565b9096509150610f8c8787611911565b60208501529550610f9d8787611911565b60408501529550610fae8787610d94565b60608501529550610fbf8787610d94565b60808501529550610fd08787611676565b60a08501529550610fe18787611676565b9096509050610ff08787610d94565b60e085015291835260c08301529590945092505050565b61100f6133bf565b60405180610120016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e0015181526020018361010001518152509050919050565b611083613382565b604080516000808252602082019092526110bd916110b7565b6110a4613382565b81526020019060019003908161109c5790505b50611a48565b905090565b6110ca613382565b6040805160608101825260ff85168152602080820185905282516000808252918101845261111d93830191611115565b611102613382565b8152602001906001900390816110fa5790505b509052611b61565b90505b92915050565b61112e613382565b604080516001808252818301909252606091816020015b61114d613382565b815260200190600190039081611145579050509050828160008151811061117057fe5b60200260200101819052506111a160405180606001604052808760ff16815260200186815260200183815250611b61565b9150505b9392505050565b60006111b6611671565b60ff16826080015160ff1614156111d95781516111d290611bcf565b9050610d8f565b6111e16117a3565b60ff16826080015160ff1614156111ff576111d28260200151611bf3565b61120761190c565b60ff16826080015160ff16141561122957815160a08301516111d29190611cf0565b6112316119a5565b60ff16826080015160ff16141561126a5761124a613382565b6112578360400151611d41565b9050611262816111ac565b915050610d8f565b611272611ea3565b60ff16826080015160ff16141561128b57508051610d8f565b61129361184a565b60ff16826080015160ff1614156112d8575060608082015160408051607b60208083019190915281830193909352815180820383018152930190528151910120610d8f565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b611327826020015182611ea8565b82602001819052505050565b611341826040015182611ea8565b82604001819052505050565b6000808061342a60a185141561137257506002925060009150600a9050611f26610404565b60a285141561139057506002925060009150600a905061200e610404565b60a38514156113ae57506002925060009150600a90506120d6610404565b60a48514156113cc575060039250600091506064905061219e610404565b60a58514156113ea57506003925060009150606490506122b1610404565b60a685141561003657506003925060009150606490506123a7610404565b60a0808301805167ffffffffffffffff90840181169091526020840151909101516000918316111561145357602083015160001960a09091015261144b83611474565b506001611120565b50602082015160a001805167ffffffffffffffff8316900390526000611120565b60408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051908201209082015160c0015114156114d0576114cb816020015161249d565b610c36565b6020015160c08101519052565b6000600282610100015114156114f557506000610d8f565b6001826101000151141561150b57506001610d8f565b8151602083015161151b906111ac565b61152884604001516111ac565b61153585606001516111ac565b61154286608001516111ac565b8660a001518760c001516115598960e001516111ac565b6040516020018089815260200188815260200187815260200186815260200185815260200184815260200183815260200182815260200198505050505050505050604051602081830303815290604052805190602001209050610d8f565b606060008360f81c8360f81c0360ff16905060008460f81c60ff169050606082604051908082528060200260200182016040528015611600578160200160208202803883390190505b50905060005b8381101561163f5761161d888285016020026124a8565b60001b82828151811061162c57fe5b6020908102919091010152600101611606565b509695505050505050565b6000808260010184848151811061165d57fe5b016020015190925060f81c90509250929050565b600090565b6000808284511015801561168e575060208385510310155b6116cb576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b602083016116df858563ffffffff6124e816565b915091509250929050565b6116f2613382565b6040805160c0810182528381528151606081018352600080825260208281018290528451828152808201865293949085019390830191611748565b611735613382565b81526020019060019003908161172d5790505b50905281526040805160008082526020828101909352919092019190611784565b611771613382565b8152602001906001900390816117695790505b5081526000602082018190526040820152600160609091015292915050565b600190565b60006117b2613382565b826000806117be613382565b60006117ca898661164a565b90955093506117d9898661164a565b9095509250600160ff851614156117fa576117f48986610d94565b90955091505b6118048986612541565b9095509050600160ff8516141561182f5784611821848385611126565b965096505050505050610f4f565b8461183a84836110c2565b9650965050505050509250929050565b600c90565b611857613382565b6040805160c08101825260008082528251606081018452818152602081810183905284518381528082018652939490850193919290830191906118b0565b61189d613382565b8152602001906001900390816118955790505b509052815260408051600080825260208281019093529190920191906118ec565b6118d9613382565b8152602001906001900390816118d15790505b50815260208101849052600c604082015260016060909101529050919050565b600290565b600061191b613382565b82845110158015611930575060408385510310155b61196c576040805162461bcd60e51b81526020600482015260086024820152671d1bc81cda1bdc9d60c21b604482015290519081900360640190fd5b6000806119798686612541565b90945091506119888685611676565b9094509050836119988383612558565b9350935050509250929050565b600390565b600d90565b60006060600083905060608660ff166040519080825280602002602001820160405280156119f757816020015b6119e4613382565b8152602001906001900390816119dc5790505b50905060005b8760ff168160ff161015611a3b57611a158784610d94565b8351849060ff8516908110611a2657fe5b602090810291909101015292506001016119fd565b5090969095509350505050565b611a50613382565b611a5a8251612610565b611aab576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b8351811015611ae257838181518110611ac557fe5b602002602001015160a00151820191508080600101915050611ab0565b506040805160c0810182526000808252825160608101845281815260208181018390528451838152808201865293949085019391929083019190611b3c565b611b29613382565b815260200190600190039081611b215790505b5090528152602081019490945260006040850152600360608501526080909301525090565b611b69613382565b6040805160c0810182526000808252602080830186905283518281529081018452919283019190611bb0565b611b9d613382565b815260200190600190039081611b955790505b5081526000602082015260016040820181905260609091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b6000600282604001515110611c0457fe5b604082015151611c6957611c166117a3565b8251602080850151604080516001600160f81b031960f896871b8116828601529490951b909316602185015260228085019190915282518085039091018152604290930190915281519101209050610d8f565b611c716117a3565b8260000151611c978460400151600081518110611c8a57fe5b60200260200101516111ac565b8460200151604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b6000611cfa6119a5565b8383604051602001808460ff1660ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b611d49613382565b600882511115611d97576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b60608251604051908082528060200260200182016040528015611dc4578160200160208202803883390190505b508051909150600160005b82811015611e2757611de6868281518110611c8a57fe5b848281518110611df257fe5b602002602001018181525050858181518110611e0a57fe5b602002602001015160a00151820191508080600101915050611dcf565b506000835184604051602001808360ff1660ff1660f81b8152600101828051906020019060200280838360005b83811015611e6c578181015183820152602001611e54565b5050505090500192505050604051602081830303815290604052805190602001209050611e998183612558565b9695505050505050565b606490565b611eb0613382565b6040805160028082526060828101909352816020015b611ece613382565b815260200190600190039081611ec65790505090508281600081518110611ef157fe5b60200260200101819052508381600181518110611f0a57fe5b6020026020010181905250611f1e81611d41565b949350505050565b611f2e613382565b611f3c826101000151612617565b9050611f46613382565b611f54836101000151612617565b9050611f5f81612659565b1580611f715750611f6f82612677565b155b15611f8657611f7f83612684565b5050610c36565b8051600160401b11611fcd576040805162461bcd60e51b815260206004820152601b6024820152600080516020613466833981519152604482015290519081900360640190fd5b6000611fef83606001518360000151611fea876101c00151610c9c565b6126a3565b9050612008846101000151612003836116ea565b6126c5565b50505050565b612016613382565b612024826101000151612617565b905061202e613382565b61203c836101000151612617565b905061204781612659565b1580612059575061205782612677565b155b1561206757611f7f83612684565b600160401b8160000151600701106120b4576040805162461bcd60e51b815260206004820152601b6024820152600080516020613466833981519152604482015290519081900360640190fd5b6000611fef836060015183600001516120d1876101c00151610c9c565b6126ef565b6120de613382565b6120ec826101000151612617565b90506120f6613382565b612104836101000151612617565b905061210f81612659565b1580612121575061211f82612677565b155b1561212f57611f7f83612684565b600160401b8160000151601f011061217c576040805162461bcd60e51b815260206004820152601b6024820152600080516020613466833981519152604482015290519081900360640190fd5b6000611fef83606001518360000151612199876101c00151610c9c565b61284e565b6121a6613382565b6121b4826101000151612617565b90506121be613382565b6121cc836101000151612617565b90506121d6613382565b6121e4846101000151612617565b90506121ef82612659565b158061220157506121ff81612981565b155b80612212575061221083612677565b155b156122285761222084612684565b505050610c36565b8151600160401b1161226f576040805162461bcd60e51b815260206004820152601b6024820152600080516020613466833981519152604482015290519081900360640190fd5b6000612296846060015184600001518460000151612291896101c00151610c9c565b61298c565b90506122aa8561010001516120038361184f565b5050505050565b6122b9613382565b6122c7826101000151612617565b90506122d1613382565b6122df836101000151612617565b90506122e9613382565b6122f7846101000151612617565b905061230282612659565b1580612314575061231281612981565b155b80612325575061232383612677565b155b156123335761222084612684565b600160401b826000015160070110612380576040805162461bcd60e51b815260206004820152601b6024820152600080516020613466833981519152604482015290519081900360640190fd5b60006122968460600151846000015184600001516123a2896101c00151610c9c565b6129d5565b6123af613382565b6123bd826101000151612617565b90506123c7613382565b6123d5836101000151612617565b90506123df613382565b6123ed846101000151612617565b90506123f882612659565b158061240a575061240881612981565b155b8061241b575061241983612677565b155b156124295761222084612684565b600160401b8260000151601f0110612476576040805162461bcd60e51b815260206004820152601b6024820152600080516020613466833981519152604482015290519081900360640190fd5b6000612296846060015184600001518460000151612498896101c00151610c9c565b612b1d565b600161010090910152565b600080805b60208110156124e057600882901b915084818501815181106124cb57fe5b016020015160f81c91909117906001016124ad565b509392505050565b60008160200183511015612538576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b600080602083016116df858563ffffffff6124e816565b612560613382565b6040805160c08101825284815281516060810183526000808252602082810182905284518281528082018652939490850193908301916125b6565b6125a3613382565b81526020019060019003908161259b5790505b509052815260408051600080825260208281019093529190920191906125f2565b6125df613382565b8152602001906001900390816125d75790505b50815260006020820152600260408201526060019290925250919050565b6008101590565b61261f613382565b612627613382565b826020015160018460000151038151811061263e57fe5b60209081029190910101518351600019018452915050919050565b608081015160009060ff1615801561112057505051600160401b1190565b6080015160ff16600c1490565b61268d81611474565b6101008101516000908190526101209091015152565b6000611f1e6126bb856020865b048560000151612bee565b6020855b06612d5c565b8082602001518360000151815181106126da57fe5b60209081029190910101525080516001019052565b604080516008808252818301909252600091606091906020820181803883390190505090506000612729866020875b048660000151612bee565b90506020808606600801106127fc576000612750876020885b046001018760400151612bee565b905060005b6018601f8816600803018110156127a457612776838260208a5b0601612d5c565b60f81b84828151811061278557fe5b60200101906001600160f81b031916908160001a905350600101612755565b506018601f8716600803015b60088110156127f5576127c78260208984016126bf565b60f81b8482815181106127d657fe5b60200101906001600160f81b031916908160001a9053506001016127b0565b5050612845565b60005b600881101561284357612815828260208961276f565b60f81b83828151811061282457fe5b60200101906001600160f81b031916908160001a9053506001016127ff565b505b611e9982612d69565b6040805160208082528183019092526000916060919060208201818038833901905050905060006128818660208761271e565b905060208086066020011061293a57600061289e87602088612742565b905060005b601f87166020038110156128ec576128be838260208a61276f565b60f81b8482815181106128cd57fe5b60200101906001600160f81b031916908160001a9053506001016128a3565b50601f86166008035b60208110156127f55761290c8260208984016126bf565b60f81b84828151811061291b57fe5b60200101906001600160f81b031916908160001a9053506001016128f5565b60005b602081101561284357612953828260208961276f565b60f81b83828151811061296257fe5b60200101906001600160f81b031916908160001a90535060010161293d565b6080015160ff161590565b60008061299b866020876126b0565b905060006129ad826020880687612da6565b905060006129c988602089048488600001518960200151612de5565b98975050505050505050565b600060606129e284612e8b565b905060006129f28760208861271e565b9050602080870660080110612ad35760005b6018601f881660080301811015612a4c57612a4282602089840106858460180181518110612a2e57fe5b01602001516001600160f81b031916612ef5565b9150600101612a04565b50612a66876020885b048387600001518860200151612de5565b96506000612a7688602089612742565b90506018601f8816600803015b6008811015612aaf57612aa58260208a840106868460180181518110612a2e57fe5b9150600101612a83565b50612acb88602089046001018388604001518960600151612de5565b975050612b12565b60005b6008811015612b0257612af8828260208a0601858460180181518110612a2e57fe5b9150600101612ad6565b50612b0f87602088612a55565b96505b509495945050505050565b60006060612b2a84612e8b565b90506000612b3a8760208861271e565b9050602080870660200110612bcb5760005b601f8716602003811015612b7b57612b71828260208a5b0601858481518110612a2e57fe5b9150600101612b4c565b50612b8887602088612a55565b96506000612b9888602089612742565b9050601f87166020035b6020811015612aaf57612bc18260208a840106868481518110612a2e57fe5b9150600101612ba2565b60005b6020811015612b0257612be4828260208a612b63565b9150600101612bce565b6000815160001415612c5757612c046000611bcf565b8414612c4f576040805162461bcd60e51b815260206004820152601560248201527432bc3832b1ba32b21032b6b83a3c90313ab33332b960591b604482015290519081900360640190fd5b5060006111a5565b6000612c7683600081518110612c6957fe5b6020026020010151611bcf565b905060015b8351811015612ce0578460011660011415612cb457612cad848281518110612c9f57fe5b602002602001015183612f11565b9150612cd4565b612cd182858381518110612cc457fe5b6020026020010151612f11565b91505b600194851c9401612c7b565b50848114612d2d576040805162461bcd60e51b8152602060048201526015602482015274195e1c1958dd19590818dbdc9c9958dd081c9bdbdd605a1b604482015290519081900360640190fd5b8315612d3d5750600090506111a5565b82600081518110612d4a57fe5b60200260200101519150509392505050565b601f036008021c60ff1690565b600080805b8351811015612d9f57600882901b9150838181518110612d8a57fe5b016020015160f81c9190911790600101612d6e565b5092915050565b60006060612db385612e8b565b90508260f81b818581518110612dc557fe5b60200101906001600160f81b031916908160001a9053506111a181612d69565b60008151600314612e3d576040805162461bcd60e51b815260206004820152601760248201527f4241445f4e4f524d414c495a4154494f4e5f50524f4f46000000000000000000604482015290519081900360640190fd5b611e998686868686600081518110612e5157fe5b602002602001015160001c87600181518110612e6957fe5b602002602001015188600281518110612e7e57fe5b6020026020010151612f3d565b6040805160208082528183019092526060918391839160208201818038833901905050905060005b60208110156124e0578260f81b8282601f0381518110612ecf57fe5b60200101906001600160f81b031916908160001a90535060089290921c91600101612eb3565b60006060612f0285612e8b565b905082818581518110612dc557fe5b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600080612f4987611bcf565b9050612f56898988612bee565b506060612f616131dc565b905060018751036001901b89106130335787612f815789925050506131d1565b6000612f8c8a61327d565b88519091505b60018203811015612fba57612fb08c846001840381518110612cc457fe5b9b50600101612f92565b5060015b6001820381101561301e578a60011660011415612ffc57612ff5836001830381518110612fe757fe5b602002602001015185612f11565b9350613012565b61300f84846001840381518110612cc457fe5b93505b60019a8b1c9a01612fbe565b506130298b84612f11565b93505050506131d1565b60015b87518110156130b35760008a6001166001146130525783613067565b88828151811061305e57fe5b60200260200101515b905060008b60011660011461308f5789838151811061308257fe5b6020026020010151613091565b845b905061309d8282612f11565b60019c8d1c9c9095509290920191506130369050565b5087156130c2575090506131d1565b8086815181106130ce57fe5b6020026020010151841415806130e2575085155b613133576040805162461bcd60e51b815260206004820152601c60248201527f726967687420737562747265652063616e6e6f74206265207a65726f00000000604482015290519081900360640190fd5b6000861561314a576131458686612f11565b61314c565b855b9050861561315c57600019909601955b80875b60018a51038110156131855761317b82858381518110612cc457fe5b915060010161315f565b508381146131cb576040805162461bcd60e51b815260206004820152600e60248201526d0caf0e0cac6e8cac840dac2e8c6d60931b604482015290519081900360640190fd5b50925050505b979650505050505050565b6040805181815261082081018252606091829190602082016108008038833901905050905061320b6000611bcf565b8160008151811061321857fe5b602090810291909101015260015b60408110156132775761325882600183038151811061324157fe5b6020026020010151836001840381518110612cc457fe5b82828151811061326457fe5b6020908102919091010152600101613226565b50905090565b60008161328c57506001610d8f565b613299600183901c61327d565b6001019050610d8f565b6040518060a001604052806005906020820280388339509192915050565b604051806101e001604052806132d56133bf565b81526020016132e26133bf565b81526000602082018190526040820181905260608201819052608082015260a00161330b613382565b81526000602082015260400161331f61342c565b815260200161332c61342c565b8152602001600015158152602001600060ff1681526020016060815260200160008152602001606081525090565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b6040518060c001604052806000815260200161339c613446565b815260606020820181905260006040830181905290820181905260809091015290565b60408051610120810190915260008152602081016133db613382565b81526020016133e8613382565b81526020016133f5613382565b8152602001613402613382565b8152600060208201819052604082015260600161341d613382565b8152602001600081525090565bfe5b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fe62756666657220696e646578206d7573742062652036342d6269740000000000a265627a7a7231582063ca115ba12759f55cc47b4315f20ed03520c1e7836cbaf89feace554d00cbdb64736f6c63430005110032"

// DeployOneStepProof2 deploys a new Ethereum contract, binding an instance of OneStepProof2 to it.
func DeployOneStepProof2(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof2, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProof2ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProof2Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof2{OneStepProof2Caller: OneStepProof2Caller{contract: contract}, OneStepProof2Transactor: OneStepProof2Transactor{contract: contract}, OneStepProof2Filterer: OneStepProof2Filterer{contract: contract}}, nil
}

// OneStepProof2 is an auto generated Go binding around an Ethereum contract.
type OneStepProof2 struct {
	OneStepProof2Caller     // Read-only binding to the contract
	OneStepProof2Transactor // Write-only binding to the contract
	OneStepProof2Filterer   // Log filterer for contract events
}

// OneStepProof2Caller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProof2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProof2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProof2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProof2Session struct {
	Contract     *OneStepProof2    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProof2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProof2CallerSession struct {
	Contract *OneStepProof2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// OneStepProof2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProof2TransactorSession struct {
	Contract     *OneStepProof2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// OneStepProof2Raw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProof2Raw struct {
	Contract *OneStepProof2 // Generic contract binding to access the raw methods on
}

// OneStepProof2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProof2CallerRaw struct {
	Contract *OneStepProof2Caller // Generic read-only contract binding to access the raw methods on
}

// OneStepProof2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProof2TransactorRaw struct {
	Contract *OneStepProof2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof2 creates a new instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2(address common.Address, backend bind.ContractBackend) (*OneStepProof2, error) {
	contract, err := bindOneStepProof2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2{OneStepProof2Caller: OneStepProof2Caller{contract: contract}, OneStepProof2Transactor: OneStepProof2Transactor{contract: contract}, OneStepProof2Filterer: OneStepProof2Filterer{contract: contract}}, nil
}

// NewOneStepProof2Caller creates a new read-only instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Caller(address common.Address, caller bind.ContractCaller) (*OneStepProof2Caller, error) {
	contract, err := bindOneStepProof2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Caller{contract: contract}, nil
}

// NewOneStepProof2Transactor creates a new write-only instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Transactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProof2Transactor, error) {
	contract, err := bindOneStepProof2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Transactor{contract: contract}, nil
}

// NewOneStepProof2Filterer creates a new log filterer instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Filterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProof2Filterer, error) {
	contract, err := bindOneStepProof2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Filterer{contract: contract}, nil
}

// bindOneStepProof2 binds a generic wrapper to an already deployed contract.
func bindOneStepProof2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProof2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof2 *OneStepProof2Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProof2.Contract.OneStepProof2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof2 *OneStepProof2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof2.Contract.OneStepProof2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof2 *OneStepProof2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof2.Contract.OneStepProof2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof2 *OneStepProof2CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProof2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof2 *OneStepProof2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof2 *OneStepProof2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof2.Contract.contract.Transact(opts, method, params...)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x1041c884.
//
// Solidity: function executeStep(bytes32 inboxAcc, bytes32 messagesAcc, bytes32 logsAcc, bytes proof, bytes bproof) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof2 *OneStepProof2Caller) ExecuteStep(opts *bind.CallOpts, inboxAcc [32]byte, messagesAcc [32]byte, logsAcc [32]byte, proof []byte, bproof []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	var out []interface{}
	err := _OneStepProof2.contract.Call(opts, &out, "executeStep", inboxAcc, messagesAcc, logsAcc, proof, bproof)

	outstruct := new(struct {
		Gas    uint64
		Fields [5][32]byte
	})

	outstruct.Gas = out[0].(uint64)
	outstruct.Fields = out[1].([5][32]byte)

	return *outstruct, err

}

// ExecuteStep is a free data retrieval call binding the contract method 0x1041c884.
//
// Solidity: function executeStep(bytes32 inboxAcc, bytes32 messagesAcc, bytes32 logsAcc, bytes proof, bytes bproof) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof2 *OneStepProof2Session) ExecuteStep(inboxAcc [32]byte, messagesAcc [32]byte, logsAcc [32]byte, proof []byte, bproof []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	return _OneStepProof2.Contract.ExecuteStep(&_OneStepProof2.CallOpts, inboxAcc, messagesAcc, logsAcc, proof, bproof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x1041c884.
//
// Solidity: function executeStep(bytes32 inboxAcc, bytes32 messagesAcc, bytes32 logsAcc, bytes proof, bytes bproof) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof2 *OneStepProof2CallerSession) ExecuteStep(inboxAcc [32]byte, messagesAcc [32]byte, logsAcc [32]byte, proof []byte, bproof []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	return _OneStepProof2.Contract.ExecuteStep(&_OneStepProof2.CallOpts, inboxAcc, messagesAcc, logsAcc, proof, bproof)
}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2Caller) ParseProof(opts *bind.CallOpts, proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	var out []interface{}
	err := _OneStepProof2.contract.Call(opts, &out, "parseProof", proof)

	if err != nil {
		return *new([][32]byte), *new([][32]byte), *new([][32]byte), *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)
	out1 := *abi.ConvertType(out[1], new([][32]byte)).(*[][32]byte)
	out2 := *abi.ConvertType(out[2], new([][32]byte)).(*[][32]byte)
	out3 := *abi.ConvertType(out[3], new([][32]byte)).(*[][32]byte)

	return out0, out1, out2, out3, err

}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2Session) ParseProof(proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	return _OneStepProof2.Contract.ParseProof(&_OneStepProof2.CallOpts, proof)
}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2CallerSession) ParseProof(proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	return _OneStepProof2.Contract.ParseProof(&_OneStepProof2.CallOpts, proof)
}
