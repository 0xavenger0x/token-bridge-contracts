// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgecontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProof2ABI is the input ABI used to generate the binding from.
const OneStepProof2ABI = "[{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"messagesAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"logsAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[5]\",\"name\":\"fields\",\"type\":\"bytes32[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"parseProof\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// OneStepProof2FuncSigs maps the 4-byte function signature to its string representation.
var OneStepProof2FuncSigs = map[string]string{
	"1041c884": "executeStep(bytes32,bytes32,bytes32,bytes,bytes)",
	"793deea3": "parseProof(bytes)",
}

// OneStepProof2Bin is the compiled bytecode used for deploying new contracts.
var OneStepProof2Bin = "0x608060405234801561001057600080fd5b5061353d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631041c8841461003b578063793deea314610159575b600080fd5b610110600480360360a081101561005157600080fd5b8135916020810135916040820135919081019060808101606082013564010000000081111561007f57600080fd5b82018360208201111561009157600080fd5b803590602001918460018302840111640100000000831117156100b357600080fd5b9193909290916020810190356401000000008111156100d157600080fd5b8201836020820111156100e357600080fd5b8035906020019184600183028401116401000000008311171561010557600080fd5b509092509050610322565b60405167ffffffffffffffff83168152602081018260a080838360005b8381101561014557818101518382015260200161012d565b505050509050019250505060405180910390f35b6101ff6004803603602081101561016f57600080fd5b81019060208101813564010000000081111561018a57600080fd5b82018360208201111561019c57600080fd5b803590602001918460018302840111640100000000831117156101be57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506103cf945050505050565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b8381101561024b578181015183820152602001610233565b50505050905001858103845288818151815260200191508051906020019060200280838360005b8381101561028a578181015183820152602001610272565b50505050905001858103835287818151815260200191508051906020019060200280838360005b838110156102c95781810151838201526020016102b1565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156103085781810151838201526020016102f0565b505050509050019850505050505050505060405180910390f35b600061032c613326565b610334613344565b6103aa8a8a8a8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b908190840183828082843760009201919091525061040b92505050565b90506103b5816108d1565b6103be81610c39565b925092505097509795505050505050565b6060806060806103dd6133dd565b6103e686610c9c565b80516020820151604083015160609093015191975095509093509150505b9193509193565b610413613344565b60008360008151811061042257fe5b602001015160f81c60f81b60f81c905060008460018151811061044157fe5b602001015160f81c60f81b60f81c905060006002905060608360040160ff1660405190808252806020026020018201604052801561049957816020015b610486613405565b81526020019060019003908161047e5790505b50905060608360040160ff166040519080825280602002602001820160405280156104de57816020015b6104cb613405565b8152602001906001900390816104c35790505b50905060005b8560ff1681101561051c576104f98985610d94565b845185908490811061050757fe5b602090810291909101015293506001016104e4565b5060005b8460ff16811015610558576105358985610d94565b835184908490811061054357fe5b60209081029190910101529350600101610520565b50610561613442565b61056b8985610f56565b9094509050610578613344565b604051806101e0016040528083815260200161059384611007565b81526020018e81526020018d81526020018c8152602001600067ffffffffffffffff1681526020016105c361107b565b81526020016000801b815260200160405180604001604052808a60ff16815260200187815250815260200160405180604001604052808960ff1681526020018681525081526020018b878151811061061757fe5b602001015160f81c60f81b60f81c60ff16600114151581526020018b876001018151811061064157fe5b0160209081015160f81c825281018c90526002870160408201526060018a90528a519091506000908b908790811061067557fe5b602001015160f81c60f81b60f81c905060008b876001018151811061069657fe5b01602001516002979097019660f81c905060ff821615806106ba57508160ff166001145b6040518060400160405280600b81526020016a04241445f494d4d5f5459560ac1b815250906107675760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561072c578181015183820152602001610714565b50505050905090810190601f1680156107595780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610770613405565b60ff831661078d578351516107869083906110c2565b905061082d565b6000875111604051806040016040528060068152602001654e4f5f494d4d60d01b815250906107fd5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561072c578181015183820152602001610714565b5061082a828560000151600001518960018e0360ff168151811061081d57fe5b6020026020010151611126565b90505b610836816111ac565b84515260005b838b0360ff1681101561087b5761087388828151811061085857fe5b602002602001015186600001516112f090919063ffffffff16565b60010161083c565b5060005b8960ff168110156108bc576108b487828151811061089957fe5b6020026020010151866000015161130a90919063ffffffff16565b60010161087f565b50929f9e505050505050505050505050505050565b60008060006134ad6108ea85610160015160ff16611324565b93509350935093506108fc858361140f565b1561090a5750505050610c36565b610100850151518411156109bf5761092861092361107b565b6111ac565b6109398660200151602001516111ac565b146040518060400160405280600d81526020016c535441434b5f4d495353494e4760981b815250906109ac5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561072c578181015183820152602001610714565b506109b68561147b565b50505050610c36565b61012085015151831115610a5a576109d861092361107b565b6109e98660200151604001516111ac565b146040518060400160405280600b81526020016a4155585f4d495353494e4760a81b815250906109ac5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561072c578181015183820152602001610714565b6000841180610a6c5750846101400151155b8015610a7d57506101008501515184145b80610aa557508461014001518015610a93575083155b8015610aa55750610100850151516001145b6040518060400160405280600a815260200169535441434b5f4d414e5960b01b81525090610b145760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561072c578181015183820152602001610714565b50610120850151516040805180820190915260088152674155585f4d414e5960c01b6020820152908414610b895760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561072c578181015183820152602001610714565b50610b97858263ffffffff16565b60005b61010086015151811015610be357610bdb866101000151602001518281518110610bc057fe5b602002602001015187602001516112f090919063ffffffff16565b600101610b9a565b5060005b61012086015151811015610c3057610c28866101200151602001518281518110610c0d57fe5b6020026020010151876020015161130a90919063ffffffff16565b600101610be7565b50505050505b50565b6000610c43613326565b8260a001516040518060a00160405280610c6086600001516114e4565b8152602001610c7286602001516114e4565b81526020018560400151815260200185606001518152602001856080015181525091509150915091565b610ca46133dd565b6060610ce38384600081518110610cb757fe5b602001015160f81c60f81b85600181518110610ccf57fe5b01602001516001600160f81b0319166115be565b90506060610d108485600181518110610cf857fe5b602001015160f81c60f81b86600281518110610ccf57fe5b90506060610d3d8586600281518110610d2557fe5b602001015160f81c60f81b87600381518110610ccf57fe5b90506060610d6a8687600381518110610d5257fe5b602001015160f81c60f81b88600481518110610ccf57fe5b6040805160808101825295865260208601949094529284019190915250606082015290505b919050565b6000610d9e613405565b83518310610de4576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b600080610df18686611651565b91509150610dfd611678565b60ff168160ff161415610e31576000610e16878461167d565b909350905082610e25826116f1565b94509450505050610f4f565b610e396117aa565b60ff168160ff161415610e5b57610e5086836117af565b935093505050610f4f565b610e63611851565b60ff168160ff161415610e8b576000610e7c878461167d565b909350905082610e2582611856565b610e93611913565b60ff168160ff161415610eaa57610e508683611918565b610eb26119ac565b60ff168160ff1610158015610ed35750610eca6119b1565b60ff168160ff16105b15610f0f576000610ee26119ac565b820390506060610ef38289866119b6565b909450905083610f0282611a4f565b9550955050505050610f4f565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b6000610f60613442565b610f68613442565b6000610100820181905280610f7d878761167d565b9096509150610f8c8787611918565b60208501529550610f9d8787611918565b60408501529550610fae8787610d94565b60608501529550610fbf8787610d94565b60808501529550610fd0878761167d565b60a08501529550610fe1878761167d565b9096509050610ff08787610d94565b60e085015291835260c08301529590945092505050565b61100f613442565b60405180610120016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e0015181526020018361010001518152509050919050565b611083613405565b604080516000808252602082019092526110bd916110b7565b6110a4613405565b81526020019060019003908161109c5790505b50611a4f565b905090565b6110ca613405565b6040805160608101825260ff85168152602080820185905282516000808252918101845261111d93830191611115565b611102613405565b8152602001906001900390816110fa5790505b509052611b68565b90505b92915050565b61112e613405565b604080516001808252818301909252606091816020015b61114d613405565b815260200190600190039081611145579050509050828160008151811061117057fe5b60200260200101819052506111a160405180606001604052808760ff16815260200186815260200183815250611b68565b9150505b9392505050565b60006111b6611678565b60ff16826080015160ff1614156111d95781516111d290611bd6565b9050610d8f565b6111e16117aa565b60ff16826080015160ff1614156111ff576111d28260200151611bfa565b611207611913565b60ff16826080015160ff16141561122957815160a08301516111d29190611cf7565b6112316119ac565b60ff16826080015160ff16141561126a5761124a613405565b6112578360400151611d48565b9050611262816111ac565b915050610d8f565b611272611eaa565b60ff16826080015160ff16141561128b57508051610d8f565b611293611851565b60ff16826080015160ff1614156112af57506060810151610d8f565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b6112fe826020015182611eaf565b82602001819052505050565b611318826040015182611eaf565b82604001819052505050565b600080806134ad60a085141561134857506001925060009150829050611f2d610404565b60a185141561136657506002925060009150600a9050611fa5610404565b60a285141561138457506002925060009150600a9050612088610404565b60a38514156113a257506002925060009150600a9050612150610404565b60a48514156113c05750600392506000915060649050612218610404565b60a58514156113de575060039250600091506064905061232b610404565b60a68514156113fc5750600392506000915060649050612421610404565b5060009250829150819050612517610404565b60a0808301805167ffffffffffffffff90840181169091526020840151909101516000918316111561145a57602083015160001960a0909101526114528361147b565b506001611120565b50602082015160a001805167ffffffffffffffff8316900390526000611120565b60408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051908201209082015160c0015114156114d7576114d28160200151612520565b610c36565b6020015160c08101519052565b6000600282610100015114156114fc57506000610d8f565b6001826101000151141561151257506001610d8f565b81516020830151611522906111ac565b61152f84604001516111ac565b61153c85606001516111ac565b61154986608001516111ac565b8660a001518760c001516115608960e001516111ac565b6040516020018089815260200188815260200187815260200186815260200185815260200184815260200183815260200182815260200198505050505050505050604051602081830303815290604052805190602001209050610d8f565b606060008360f81c8360f81c0360ff16905060008460f81c60ff169050606082604051908082528060200260200182016040528015611607578160200160208202803883390190505b50905060005b83811015611646576116248882850160200261252b565b60001b82828151811061163357fe5b602090810291909101015260010161160d565b509695505050505050565b6000808260010184848151811061166457fe5b016020015190925060f81c90509250929050565b600090565b60008082845110158015611695575060208385510310155b6116d2576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b602083016116e6858563ffffffff61256b16565b915091509250929050565b6116f9613405565b6040805160c081018252838152815160608101835260008082526020828101829052845182815280820186529394908501939083019161174f565b61173c613405565b8152602001906001900390816117345790505b5090528152604080516000808252602082810190935291909201919061178b565b611778613405565b8152602001906001900390816117705790505b5081526000602082018190526040820152600160609091015292915050565b600190565b60006117b9613405565b826000806117c5613405565b60006117d18986611651565b90955093506117e08986611651565b9095509250600160ff85161415611801576117fb8986610d94565b90955091505b61180b89866125c4565b9095509050600160ff851614156118365784611828848385611126565b965096505050505050610f4f565b8461184184836110c2565b9650965050505050509250929050565b600c90565b61185e613405565b6040805160c08101825260008082528251606081018452818152602081810183905284518381528082018652939490850193919290830191906118b7565b6118a4613405565b81526020019060019003908161189c5790505b509052815260408051600080825260208281019093529190920191906118f3565b6118e0613405565b8152602001906001900390816118d85790505b50815260208101849052600c604082015260016060909101529050919050565b600290565b6000611922613405565b82845110158015611937575060408385510310155b611973576040805162461bcd60e51b81526020600482015260086024820152671d1bc81cda1bdc9d60c21b604482015290519081900360640190fd5b60008061198086866125c4565b909450915061198f868561167d565b90945090508361199f83836125db565b9350935050509250929050565b600390565b600d90565b60006060600083905060608660ff166040519080825280602002602001820160405280156119fe57816020015b6119eb613405565b8152602001906001900390816119e35790505b50905060005b8760ff168160ff161015611a4257611a1c8784610d94565b8351849060ff8516908110611a2d57fe5b60209081029190910101529250600101611a04565b5090969095509350505050565b611a57613405565b611a618251612693565b611ab2576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b8351811015611ae957838181518110611acc57fe5b602002602001015160a00151820191508080600101915050611ab7565b506040805160c0810182526000808252825160608101845281815260208181018390528451838152808201865293949085019391929083019190611b43565b611b30613405565b815260200190600190039081611b285790505b5090528152602081019490945260006040850152600360608501526080909301525090565b611b70613405565b6040805160c0810182526000808252602080830186905283518281529081018452919283019190611bb7565b611ba4613405565b815260200190600190039081611b9c5790505b5081526000602082015260016040820181905260609091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b6000600282604001515110611c0b57fe5b604082015151611c7057611c1d6117aa565b8251602080850151604080516001600160f81b031960f896871b8116828601529490951b909316602185015260228085019190915282518085039091018152604290930190915281519101209050610d8f565b611c786117aa565b8260000151611c9e8460400151600081518110611c9157fe5b60200260200101516111ac565b8460200151604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b6000611d016119ac565b8383604051602001808460ff1660ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b611d50613405565b600882511115611d9e576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b60608251604051908082528060200260200182016040528015611dcb578160200160208202803883390190505b508051909150600160005b82811015611e2e57611ded868281518110611c9157fe5b848281518110611df957fe5b602002602001018181525050858181518110611e1157fe5b602002602001015160a00151820191508080600101915050611dd6565b506000835184604051602001808360ff1660ff1660f81b8152600101828051906020019060200280838360005b83811015611e73578181015183820152602001611e5b565b5050505090500192505050604051602081830303815290604052805190602001209050611ea081836125db565b9695505050505050565b606490565b611eb7613405565b6040805160028082526060828101909352816020015b611ed5613405565b815260200190600190039081611ecd5790505090508281600081518110611ef857fe5b60200260200101819052508381600181518110611f1157fe5b6020026020010181905250611f2581611d48565b949350505050565b611f35613405565b611f4382610100015161269a565b9050611f4e816126dc565b611f6157611f5b826126e7565b50610c36565b611fa1826101000151611f9c6000801b6040516020018082815260200191505060405160208183030381529060405280519060200120611856565b612706565b5050565b611fad613405565b611fbb82610100015161269a565b9050611fc5613405565b611fd383610100015161269a565b9050611fde81612730565b1580611ff05750611fee8261274e565b155b1561200557611ffe836126e7565b5050610c36565b8051600160401b1161204c576040805162461bcd60e51b815260206004820152601b60248201526000805160206134e9833981519152604482015290519081900360640190fd5b600061206e83606001518360000151612069876101c00151610c9c565b61275b565b9050612082846101000151611f9c836116f1565b50505050565b612090613405565b61209e82610100015161269a565b90506120a8613405565b6120b683610100015161269a565b90506120c181612730565b15806120d357506120d18261274e565b155b156120e157611ffe836126e7565b600160401b81600001516007011061212e576040805162461bcd60e51b815260206004820152601b60248201526000805160206134e9833981519152604482015290519081900360640190fd5b600061206e8360600151836000015161214b876101c00151610c9c565b61277d565b612158613405565b61216682610100015161269a565b9050612170613405565b61217e83610100015161269a565b905061218981612730565b158061219b57506121998261274e565b155b156121a957611ffe836126e7565b600160401b8160000151601f01106121f6576040805162461bcd60e51b815260206004820152601b60248201526000805160206134e9833981519152604482015290519081900360640190fd5b600061206e83606001518360000151612213876101c00151610c9c565b6128dc565b612220613405565b61222e82610100015161269a565b9050612238613405565b61224683610100015161269a565b9050612250613405565b61225e84610100015161269a565b905061226982612730565b158061227b5750612279816126dc565b155b8061228c575061228a8361274e565b155b156122a25761229a846126e7565b505050610c36565b8151600160401b116122e9576040805162461bcd60e51b815260206004820152601b60248201526000805160206134e9833981519152604482015290519081900360640190fd5b600061231084606001518460000151846000015161230b896101c00151610c9c565b612a0f565b9050612324856101000151611f9c83611856565b5050505050565b612333613405565b61234182610100015161269a565b905061234b613405565b61235983610100015161269a565b9050612363613405565b61237184610100015161269a565b905061237c82612730565b158061238e575061238c816126dc565b155b8061239f575061239d8361274e565b155b156123ad5761229a846126e7565b600160401b8260000151600701106123fa576040805162461bcd60e51b815260206004820152601b60248201526000805160206134e9833981519152604482015290519081900360640190fd5b600061231084606001518460000151846000015161241c896101c00151610c9c565b612a58565b612429613405565b61243782610100015161269a565b9050612441613405565b61244f83610100015161269a565b9050612459613405565b61246784610100015161269a565b905061247282612730565b15806124845750612482816126dc565b155b8061249557506124938361274e565b155b156124a35761229a846126e7565b600160401b8260000151601f01106124f0576040805162461bcd60e51b815260206004820152601b60248201526000805160206134e9833981519152604482015290519081900360640190fd5b6000612310846060015184600001518460000151612512896101c00151610c9c565b612ba0565b610c36816126e7565b600161010090910152565b600080805b602081101561256357600882901b9150848185018151811061254e57fe5b016020015160f81c9190911790600101612530565b509392505050565b600081602001835110156125bb576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b600080602083016116e6858563ffffffff61256b16565b6125e3613405565b6040805160c0810182528481528151606081018352600080825260208281018290528451828152808201865293949085019390830191612639565b612626613405565b81526020019060019003908161261e5790505b50905281526040805160008082526020828101909352919092019190612675565b612662613405565b81526020019060019003908161265a5790505b50815260006020820152600260408201526060019290925250919050565b6008101590565b6126a2613405565b6126aa613405565b82602001516001846000015103815181106126c157fe5b60209081029190910101518351600019018452915050919050565b6080015160ff161590565b6126f08161147b565b6101008101516000908190526101209091015152565b80826020015183600001518151811061271b57fe5b60209081029190910101525080516001019052565b608081015160009060ff1615801561112057505051600160401b1190565b6080015160ff16600c1490565b6000611f25612773856020865b048560000151612c71565b6020855b06612ddf565b6040805160088082528183019092526000916060919060208201818038833901905050905060006127b7866020875b048660000151612c71565b905060208086066008011061288a5760006127de876020885b046001018760400151612c71565b905060005b6018601f88166008030181101561283257612804838260208a5b0601612ddf565b60f81b84828151811061281357fe5b60200101906001600160f81b031916908160001a9053506001016127e3565b506018601f8716600803015b600881101561288357612855826020898401612777565b60f81b84828151811061286457fe5b60200101906001600160f81b031916908160001a90535060010161283e565b50506128d3565b60005b60088110156128d1576128a382826020896127fd565b60f81b8382815181106128b257fe5b60200101906001600160f81b031916908160001a90535060010161288d565b505b611ea082612dec565b60408051602080825281830190925260009160609190602082018180388339019050509050600061290f866020876127ac565b90506020808606602001106129c857600061292c876020886127d0565b905060005b601f871660200381101561297a5761294c838260208a6127fd565b60f81b84828151811061295b57fe5b60200101906001600160f81b031916908160001a905350600101612931565b50601f86166008035b60208110156128835761299a826020898401612777565b60f81b8482815181106129a957fe5b60200101906001600160f81b031916908160001a905350600101612983565b60005b60208110156128d1576129e182826020896127fd565b60f81b8382815181106129f057fe5b60200101906001600160f81b031916908160001a9053506001016129cb565b600080612a1e86602087612768565b90506000612a30826020880687612e29565b90506000612a4c88602089048488600001518960200151612e68565b98975050505050505050565b60006060612a6584612f0e565b90506000612a75876020886127ac565b9050602080870660080110612b565760005b6018601f881660080301811015612acf57612ac582602089840106858460180181518110612ab157fe5b01602001516001600160f81b031916612f78565b9150600101612a87565b50612ae9876020885b048387600001518860200151612e68565b96506000612af9886020896127d0565b90506018601f8816600803015b6008811015612b3257612b288260208a840106868460180181518110612ab157fe5b9150600101612b06565b50612b4e88602089046001018388604001518960600151612e68565b975050612b95565b60005b6008811015612b8557612b7b828260208a0601858460180181518110612ab157fe5b9150600101612b59565b50612b9287602088612ad8565b96505b509495945050505050565b60006060612bad84612f0e565b90506000612bbd876020886127ac565b9050602080870660200110612c4e5760005b601f8716602003811015612bfe57612bf4828260208a5b0601858481518110612ab157fe5b9150600101612bcf565b50612c0b87602088612ad8565b96506000612c1b886020896127d0565b9050601f87166020035b6020811015612b3257612c448260208a840106868481518110612ab157fe5b9150600101612c25565b60005b6020811015612b8557612c67828260208a612be6565b9150600101612c51565b6000815160001415612cda57612c876000611bd6565b8414612cd2576040805162461bcd60e51b815260206004820152601560248201527432bc3832b1ba32b21032b6b83a3c90313ab33332b960591b604482015290519081900360640190fd5b5060006111a5565b6000612cf983600081518110612cec57fe5b6020026020010151611bd6565b905060015b8351811015612d63578460011660011415612d3757612d30848281518110612d2257fe5b602002602001015183612f94565b9150612d57565b612d5482858381518110612d4757fe5b6020026020010151612f94565b91505b600194851c9401612cfe565b50848114612db0576040805162461bcd60e51b8152602060048201526015602482015274195e1c1958dd19590818dbdc9c9958dd081c9bdbdd605a1b604482015290519081900360640190fd5b8315612dc05750600090506111a5565b82600081518110612dcd57fe5b60200260200101519150509392505050565b601f036008021c60ff1690565b600080805b8351811015612e2257600882901b9150838181518110612e0d57fe5b016020015160f81c9190911790600101612df1565b5092915050565b60006060612e3685612f0e565b90508260f81b818581518110612e4857fe5b60200101906001600160f81b031916908160001a9053506111a181612dec565b60008151600314612ec0576040805162461bcd60e51b815260206004820152601760248201527f4241445f4e4f524d414c495a4154494f4e5f50524f4f46000000000000000000604482015290519081900360640190fd5b611ea08686868686600081518110612ed457fe5b602002602001015160001c87600181518110612eec57fe5b602002602001015188600281518110612f0157fe5b6020026020010151612fc0565b6040805160208082528183019092526060918391839160208201818038833901905050905060005b6020811015612563578260f81b8282601f0381518110612f5257fe5b60200101906001600160f81b031916908160001a90535060089290921c91600101612f36565b60006060612f8585612f0e565b905082818581518110612e4857fe5b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600080612fcc87611bd6565b9050612fd9898988612c71565b506060612fe461325f565b905060018751036001901b89106130b65787613004578992505050613254565b600061300f8a613300565b88519091505b6001820381101561303d576130338c846001840381518110612d4757fe5b9b50600101613015565b5060015b600182038110156130a1578a6001166001141561307f5761307883600183038151811061306a57fe5b602002602001015185612f94565b9350613095565b61309284846001840381518110612d4757fe5b93505b60019a8b1c9a01613041565b506130ac8b84612f94565b9350505050613254565b60015b87518110156131365760008a6001166001146130d557836130ea565b8882815181106130e157fe5b60200260200101515b905060008b6001166001146131125789838151811061310557fe5b6020026020010151613114565b845b90506131208282612f94565b60019c8d1c9c9095509290920191506130b99050565b50871561314557509050613254565b80868151811061315157fe5b602002602001015184141580613165575085155b6131b6576040805162461bcd60e51b815260206004820152601c60248201527f726967687420737562747265652063616e6e6f74206265207a65726f00000000604482015290519081900360640190fd5b600086156131cd576131c88686612f94565b6131cf565b855b905086156131df57600019909601955b80875b60018a5103811015613208576131fe82858381518110612d4757fe5b91506001016131e2565b5083811461324e576040805162461bcd60e51b815260206004820152600e60248201526d0caf0e0cac6e8cac840dac2e8c6d60931b604482015290519081900360640190fd5b50925050505b979650505050505050565b6040805181815261082081018252606091829190602082016108008038833901905050905061328e6000611bd6565b8160008151811061329b57fe5b602090810291909101015260015b60408110156132fa576132db8260018303815181106132c457fe5b6020026020010151836001840381518110612d4757fe5b8282815181106132e757fe5b60209081029190910101526001016132a9565b50905090565b60008161330f57506001610d8f565b61331c600183901c613300565b6001019050610d8f565b6040518060a001604052806005906020820280388339509192915050565b604051806101e00160405280613358613442565b8152602001613365613442565b81526000602082018190526040820181905260608201819052608082015260a00161338e613405565b8152600060208201526040016133a26134af565b81526020016133af6134af565b8152602001600015158152602001600060ff1681526020016060815260200160008152602001606081525090565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b6040518060c001604052806000815260200161341f6134c9565b815260606020820181905260006040830181905290820181905260809091015290565b604080516101208101909152600081526020810161345e613405565b815260200161346b613405565b8152602001613478613405565b8152602001613485613405565b815260006020820181905260408201526060016134a0613405565b8152602001600081525090565bfe5b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fe62756666657220696e646578206d7573742062652036342d6269740000000000a265627a7a72315820e687c4de8f62ccb270333b120181da3cd69e25872e35859caee97155d57e4c8c64736f6c63430005110032"

// DeployOneStepProof2 deploys a new Ethereum contract, binding an instance of OneStepProof2 to it.
func DeployOneStepProof2(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof2, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProof2ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProof2Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof2{OneStepProof2Caller: OneStepProof2Caller{contract: contract}, OneStepProof2Transactor: OneStepProof2Transactor{contract: contract}, OneStepProof2Filterer: OneStepProof2Filterer{contract: contract}}, nil
}

// OneStepProof2 is an auto generated Go binding around an Ethereum contract.
type OneStepProof2 struct {
	OneStepProof2Caller     // Read-only binding to the contract
	OneStepProof2Transactor // Write-only binding to the contract
	OneStepProof2Filterer   // Log filterer for contract events
}

// OneStepProof2Caller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProof2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProof2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProof2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProof2Session struct {
	Contract     *OneStepProof2    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProof2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProof2CallerSession struct {
	Contract *OneStepProof2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// OneStepProof2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProof2TransactorSession struct {
	Contract     *OneStepProof2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// OneStepProof2Raw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProof2Raw struct {
	Contract *OneStepProof2 // Generic contract binding to access the raw methods on
}

// OneStepProof2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProof2CallerRaw struct {
	Contract *OneStepProof2Caller // Generic read-only contract binding to access the raw methods on
}

// OneStepProof2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProof2TransactorRaw struct {
	Contract *OneStepProof2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof2 creates a new instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2(address common.Address, backend bind.ContractBackend) (*OneStepProof2, error) {
	contract, err := bindOneStepProof2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2{OneStepProof2Caller: OneStepProof2Caller{contract: contract}, OneStepProof2Transactor: OneStepProof2Transactor{contract: contract}, OneStepProof2Filterer: OneStepProof2Filterer{contract: contract}}, nil
}

// NewOneStepProof2Caller creates a new read-only instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Caller(address common.Address, caller bind.ContractCaller) (*OneStepProof2Caller, error) {
	contract, err := bindOneStepProof2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Caller{contract: contract}, nil
}

// NewOneStepProof2Transactor creates a new write-only instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Transactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProof2Transactor, error) {
	contract, err := bindOneStepProof2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Transactor{contract: contract}, nil
}

// NewOneStepProof2Filterer creates a new log filterer instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Filterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProof2Filterer, error) {
	contract, err := bindOneStepProof2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Filterer{contract: contract}, nil
}

// bindOneStepProof2 binds a generic wrapper to an already deployed contract.
func bindOneStepProof2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProof2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof2 *OneStepProof2Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProof2.Contract.OneStepProof2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof2 *OneStepProof2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof2.Contract.OneStepProof2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof2 *OneStepProof2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof2.Contract.OneStepProof2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof2 *OneStepProof2CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProof2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof2 *OneStepProof2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof2 *OneStepProof2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof2.Contract.contract.Transact(opts, method, params...)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x1041c884.
//
// Solidity: function executeStep(bytes32 inboxAcc, bytes32 messagesAcc, bytes32 logsAcc, bytes proof, bytes bproof) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof2 *OneStepProof2Caller) ExecuteStep(opts *bind.CallOpts, inboxAcc [32]byte, messagesAcc [32]byte, logsAcc [32]byte, proof []byte, bproof []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	var out []interface{}
	err := _OneStepProof2.contract.Call(opts, &out, "executeStep", inboxAcc, messagesAcc, logsAcc, proof, bproof)

	outstruct := new(struct {
		Gas    uint64
		Fields [5][32]byte
	})

	outstruct.Gas = out[0].(uint64)
	outstruct.Fields = out[1].([5][32]byte)

	return *outstruct, err

}

// ExecuteStep is a free data retrieval call binding the contract method 0x1041c884.
//
// Solidity: function executeStep(bytes32 inboxAcc, bytes32 messagesAcc, bytes32 logsAcc, bytes proof, bytes bproof) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof2 *OneStepProof2Session) ExecuteStep(inboxAcc [32]byte, messagesAcc [32]byte, logsAcc [32]byte, proof []byte, bproof []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	return _OneStepProof2.Contract.ExecuteStep(&_OneStepProof2.CallOpts, inboxAcc, messagesAcc, logsAcc, proof, bproof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x1041c884.
//
// Solidity: function executeStep(bytes32 inboxAcc, bytes32 messagesAcc, bytes32 logsAcc, bytes proof, bytes bproof) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof2 *OneStepProof2CallerSession) ExecuteStep(inboxAcc [32]byte, messagesAcc [32]byte, logsAcc [32]byte, proof []byte, bproof []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	return _OneStepProof2.Contract.ExecuteStep(&_OneStepProof2.CallOpts, inboxAcc, messagesAcc, logsAcc, proof, bproof)
}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2Caller) ParseProof(opts *bind.CallOpts, proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	var out []interface{}
	err := _OneStepProof2.contract.Call(opts, &out, "parseProof", proof)

	if err != nil {
		return *new([][32]byte), *new([][32]byte), *new([][32]byte), *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)
	out1 := *abi.ConvertType(out[1], new([][32]byte)).(*[][32]byte)
	out2 := *abi.ConvertType(out[2], new([][32]byte)).(*[][32]byte)
	out3 := *abi.ConvertType(out[3], new([][32]byte)).(*[][32]byte)

	return out0, out1, out2, out3, err

}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2Session) ParseProof(proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	return _OneStepProof2.Contract.ParseProof(&_OneStepProof2.CallOpts, proof)
}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2CallerSession) ParseProof(proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	return _OneStepProof2.Contract.ParseProof(&_OneStepProof2.CallOpts, proof)
}
