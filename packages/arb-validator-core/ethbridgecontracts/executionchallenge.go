// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgecontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ExecutionChallengeABI is the input ABI used to generate the binding from.
const ExecutionChallengeABI = "[{\"anonymous\":false,\"inputs\":[],\"name\":\"AsserterTimedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"machineHashes\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"inboxInsnIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"messageAccs\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"logAccs\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"outCounts\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"gases\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"totalSteps\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadlineTicks\",\"type\":\"uint256\"}],\"name\":\"BisectedAssertion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ChallengerTimedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"segmentIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadlineTicks\",\"type\":\"uint256\"}],\"name\":\"Continued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadlineTicks\",\"type\":\"uint256\"}],\"name\":\"InitiatedChallenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OneStepProofCompleted\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_beforeInbox\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_machineHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint32\",\"name\":\"inboxInsnIndex\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_messageAccs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_logAccs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_outCounts\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_gases\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64\",\"name\":\"_totalSteps\",\"type\":\"uint64\"}],\"name\":\"bisectAssertion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segmentToChallenge\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_bisectionRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_bisectionHash\",\"type\":\"bytes32\"}],\"name\":\"chooseSegment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rollupAddress\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_asserter\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_challenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_challengePeriodTicks\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_challengeState\",\"type\":\"bytes32\"}],\"name\":\"initializeBisection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_beforeInbox\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_beforeInboxValueSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_firstMessage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_firstLog\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"oneStepProof\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"timeoutChallenge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ExecutionChallengeFuncSigs maps the 4-byte function signature to its string representation.
var ExecutionChallengeFuncSigs = map[string]string{
	"6f537a39": "bisectAssertion(bytes32,bytes32[],uint32,bytes32[],bytes32[],uint64[],uint64[],uint64)",
	"79a9ad85": "chooseSegment(uint256,bytes,bytes32,bytes32)",
	"02ad1e4e": "initializeBisection(address,address,address,uint256,bytes32)",
	"4f524e7a": "oneStepProof(bytes32,uint256,bytes32,bytes32,bytes)",
	"ced5c1bf": "timeoutChallenge()",
}

// ExecutionChallengeBin is the compiled bytecode used for deploying new contracts.
var ExecutionChallengeBin = "0x608060405234801561001057600080fd5b50615e8180620000216000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806302ad1e4e1461005c5780634f524e7a146100a05780636f537a391461015c57806379a9ad8514610426578063ced5c1bf146104d6575b600080fd5b61009e600480360360a081101561007257600080fd5b506001600160a01b038135811691602081013582169160408201351690606081013590608001356104de565b005b61009e600480360360a08110156100b657600080fd5b81359160208101359160408201359160608101359181019060a081016080820135600160201b8111156100e857600080fd5b8201836020820111156100fa57600080fd5b803590602001918460018302840111600160201b8311171561011b57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506104f3945050505050565b61009e600480360361010081101561017357600080fd5b81359190810190604081016020820135600160201b81111561019457600080fd5b8201836020820111156101a657600080fd5b803590602001918460208302840111600160201b831117156101c757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929563ffffffff853516959094909350604081019250602001359050600160201b81111561022457600080fd5b82018360208201111561023657600080fd5b803590602001918460208302840111600160201b8311171561025757600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156102a657600080fd5b8201836020820111156102b857600080fd5b803590602001918460208302840111600160201b831117156102d957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561032857600080fd5b82018360208201111561033a57600080fd5b803590602001918460208302840111600160201b8311171561035b57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156103aa57600080fd5b8201836020820111156103bc57600080fd5b803590602001918460208302840111600160201b831117156103dd57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160401b031691506108059050565b61009e6004803603608081101561043c57600080fd5b81359190810190604081016020820135600160201b81111561045d57600080fd5b82018360208201111561046f57600080fd5b803590602001918460018302840111600160201b8311171561049057600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050823593505050602001356109eb565b61009e610cac565b6104ea85858585610d8c565b60065550505050565b60055460ff16600281111561050457fe5b600114604051806040016040528060098152602001684249535f535441544560b81b815250906105b25760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561057757818101518382015260200161055f565b50505050905090810190601f1680156105a45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506003546105bf43610ea7565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b815250906106325760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b5060015460408051808201909152600a8152692124a9afa9a2a72222a960b11b6020820152906001600160a01b031633146106ae5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b506106b7615bd1565b6106c18686610eb2565b90506106cb615c05565b6106d782868686610f63565b90506106e281611357565b6106ea615c7d565b60405180610180016040528060016001600160401b031681526020016107138460000151611664565b815260200161072185611728565b81526020016107338460200151611664565b81526020018360600151151581526020018360c001516001600160401b03168152602001878152602001836080015181526020018360800151881461077957600161077c565b60005b60ff166001600160401b031681526020018681526020018360a0015181526020018360a0015187146107af5760016107b2565b60005b60ff16905290506107ca6107c582611848565b611918565b6040517f117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f590600090a16107fb61198e565b5050505050505050565b60055460ff16600281111561081657fe5b600114604051806040016040528060098152602001684249535f535441544560b81b815250906108875760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b5060035461089443610ea7565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b815250906109075760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b5060015460408051808201909152600a8152692124a9afa9a2a72222a960b11b6020820152906001600160a01b031633146109835760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b5061098c615ce1565b6040518061010001604052808a81526020018981526020018863ffffffff168152602001878152602001868152602001858152602001848152602001836001600160401b031681525090506109e081611a02565b505050505050505050565b60055460ff1660028111156109fc57fe5b60021460405180604001604052806009815260200168434f4e5f535441544560b81b81525090610a6d5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b50600354610a7a43610ea7565b11156040518060400160405280600c81526020016b434f4e5f444541444c494e4560a01b81525090610aed5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b5060025460408051808201909152600a81526921a7a72fa9a2a72222a960b11b6020820152906001600160a01b03163314610b695760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b5060065482146040518060400160405280600881526020016721a7a72fa82922ab60c11b81525090610bdc5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b50610bec83838387600101611b0b565b6040518060400160405280600981526020016821a7a72fa82927a7a360b91b81525090610c5a5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b506006819055610c68611c0c565b60035460408051868152602081019290925280517f1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e49281900390910190a150505050565b600354610cb843610ea7565b11610d0a576040805162461bcd60e51b815260206004820152601760248201527f446561646c696e65206861736e27742065787069726564000000000000000000604482015290519081900360640190fd5b600160055460ff166002811115610d1d57fe5b1415610d59576040517f2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f090600090a1610d54611c28565b610d8a565b6040517f4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a90600090a1610d8a61198e565b565b600060055460ff166002811115610d9f57fe5b146040518060400160405280600f81526020016e4348414c5f494e49545f535441544560881b81525090610e145760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b50600080546001600160a01b038681166001600160a01b03199283161790925560018054868416908316178155600280549386169390921692909217905560048290556005805460ff19169091179055610e6c611c80565b60035460408051918252517fe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc679181900360200190a150505050565b6103e881025b919050565b610eba615bd1565b6040805160a0810182528481528151606081018352600080825260208281018290528451828152808201865293949085019390830191610f10565b610efd615bd1565b815260200190600190039081610ef55790505b50905281526040805160008082526020828101909352919092019190610f4c565b610f39615bd1565b815260200190600190039081610f315790505b508152600260208201526040019290925250919050565b610f6b615c05565b600082600081518110610f7a57fe5b602001015160f81c60f81b60f81c9050600083600181518110610f9957fe5b602001015160f81c60f81b60f81c905060006002905060608360040160ff16604051908082528060200260200182016040528015610ff157816020015b610fde615bd1565b815260200190600190039081610fd65790505b50905060608360040160ff1660405190808252806020026020018201604052801561103657816020015b611023615bd1565b81526020019060019003908161101b5790505b50905060005b8560ff16811015611074576110518885611c92565b845185908490811061105f57fe5b6020908102919091010152935060010161103c565b5060005b8460ff168110156110b05761108d8885611c92565b835184908490811061109b57fe5b60209081029190910101529350600101611078565b506110b9615d38565b6110c38885611e24565b809250819550505060008885815181106110d957fe5b602001015160f81c60f81b60f81c905060008986600101815181106110fa57fe5b01602001516002969096019560f81c9050611113615c05565b60405180610160016040528085815260200161112e86611ec4565b81526020018f81526020016000151581526020018e81526020018d815260200160006001600160401b0316815260200160405180604001604052808c60ff16815260200189815250815260200160405180604001604052808b60ff1681526020018881525081526020018460ff16600114151581526020018360ff1681525090508260ff16600014806111c457508260ff166001145b611215576040805162461bcd60e51b815260206004820152601c60248201527f50726f6f662068616420626164206f7065726174696f6e207479706500000000604482015290519081900360640190fd5b61121d615bd1565b60ff841661123a57815151611233908490611f2d565b90506112b4565b6000875111611285576040805162461bcd60e51b81526020600482015260126024820152716e6f20696d6d6564696174652076616c756560701b604482015290519081900360640190fd5b6112b1838360000151600001518960018e0360ff16815181106112a457fe5b6020026020010151611f8f565b90505b6112bd81611728565b82515260005b848b0360ff16811015611302576112fa8882815181106112df57fe5b6020026020010151846000015161201390919063ffffffff16565b6001016112c3565b5060005b8960ff168110156113435761133b87828151811061132057fe5b6020026020010151846000015161202d90919063ffffffff16565b600101611306565b50909e9d5050505050505050505050505050565b6000806000613a4a61137085610140015160ff16612047565b6001600160401b03821660c08a0181905260208a015160a0908101805183900390528a510151949850929650909450925011156113c757602085015160001960a0909101526113be85612802565b50505050611661565b60e085015151841115611450576113e46113df61286b565b611728565b6113f5866020015160200151611728565b14611447576040805162461bcd60e51b815260206004820152601d60248201527f737461636b206974656d206d697373696e672066726f6d2070726f6f66000000604482015290519081900360640190fd5b6113be85612802565b610100850151518311156114cc576114696113df61286b565b61147a866020015160400151611728565b14611447576040805162461bcd60e51b815260206004820181905260248201527f617578737461636b206974656d206d697373696e672066726f6d2070726f6f66604482015290519081900360640190fd5b60008411806114de5750846101200151155b80156114ee575060e08501515184145b8061151557508461012001518015611504575083155b8015611515575060e0850151516001145b61155d576040805162461bcd60e51b8152602060048201526014602482015273746f6f206d616e7920737461636b206974656d7360601b604482015290519081900360640190fd5b6101008501515183146115b7576040805162461bcd60e51b815260206004820152601760248201527f746f6f206d616e7920617578737461636b206974656d73000000000000000000604482015290519081900360640190fd5b6115c4858263ffffffff16565b60005b60e08601515181101561160e576116068660e001516020015182815181106115eb57fe5b6020026020010151876020015161201390919063ffffffff16565b6001016115c7565b5060005b6101008601515181101561165b5761165386610100015160200151828151811061163857fe5b6020026020010151876020015161202d90919063ffffffff16565b600101611612565b50505050505b50565b600060028260e00151141561167b57506000610ead565b60018260e00151141561169057506001610ead565b815160208301516116a090611728565b6116ad8460400151611728565b6116ba8560600151611728565b6116c78660800151611728565b8660a001518760c0015160405160200180888152602001878152602001868152602001858152602001848152602001838152602001828152602001975050505050505050604051602081830303815290604052805190602001209050610ead565b60006117326128b2565b60ff16826060015160ff16141561175557815161174e906128b7565b9050610ead565b61175d6128db565b60ff16826060015160ff16141561177b5761174e82602001516128e0565b6117836129dd565b60ff16826060015160ff1614156117a5578151608083015161174e91906129e2565b6117ad612a33565b60ff16826060015160ff1614156117e6576117c6615bd1565b6117d38360400151612a38565b90506117de81611728565b915050610ead565b6117ee612b9a565b60ff16826060015160ff16141561180757508051610ead565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b80516020808301516040808501516060860151608087015160a088015160c0808a015160e08b01516101008c01516101208d01516101408e0151610160909e01518a519d861b6001600160c01b03199081168f8f015260288f019c909c5260488e019990995260688d019790975294151560f81b60888c015292821b881660898b015260918a015260b189019190915290811b851660d188015260d987019190915260f986019690965290941b166101198301528251808303610101018152610121909201909252805191012090565b6006548114604051806040016040528060088152602001672124a9afa82922ab60c11b8152509061198a5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b5050565b600080546001546002546040805163396f51cf60e01b81526001600160a01b039384166004820152918316602483015251919092169263396f51cf926044808201939182900301818387803b1580156119e657600080fd5b505af11580156119fa573d6000803e3d6000fd5b503392505050ff5b60208101515160001901611a1582612b9f565b606081604051908082528060200260200182016040528015611a41578160200160208202803883390190505b509050611a6783611a5f8560e001516001600160401b031685612f41565b846000612f5f565b81600081518110611a7457fe5b602090810291909101015260015b82811015611aeb5780846040015163ffffffff161415611aaa57611aa76113df61286b565b84525b611acc84611ac58660e001516001600160401b0316866130d4565b8584612f5f565b828281518110611ad857fe5b6020908102919091010152600101611a82565b50611af5816130e7565b611afd6130f6565b611b068361310a565b505050565b600080838160205b88518111611bfe578089015193506020818a510360200181611b3157fe5b0491505b600082118015611b485750600286066001145b8015611b5657508160020a86115b15611b6957600286046001019550611b35565b60028606611bb4578383604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120925060028681611bac57fe5b049550611bf6565b8284604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120925060028681611bef57fe5b0460010195505b602001611b13565b505090941495945050505050565b600580546001919060ff191682805b0217905550610d8a611c80565b600080546002546001546040805163396f51cf60e01b81526001600160a01b039384166004820152918316602483015251919092169263396f51cf926044808201939182900301818387803b1580156119e657600080fd5b600454611c8c43610ea7565b01600355565b6000611c9c615bd1565b83518310611ce2576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b600080611cef86866132ee565b91509150611cfb6128b2565b60ff168160ff161415611d2f576000611d148784613315565b909350905082611d2382613389565b94509450505050611e1d565b611d376128db565b60ff168160ff161415611d5957611d4e868361343b565b935093505050611e1d565b611d616129dd565b60ff168160ff161415611d7857611d4e86836134dd565b611d80612a33565b60ff168160ff1610158015611da15750611d98613571565b60ff168160ff16105b15611ddd576000611db0612a33565b820390506060611dc1828986613576565b909450905083611dd08261360f565b9550955050505050611e1d565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b6000611e2e615d38565b611e36615d38565b600060e0820181905280611e4a8787613315565b9096509150611e5987876134dd565b60208501529550611e6a87876134dd565b60408501529550611e7b8787611c92565b60608501529550611e8c8787611c92565b60808501529550611e9d8787613315565b60a08501529550611eae8787613315565b92845260c0840192909252509590945092505050565b611ecc615d38565b60405180610100016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e001518152509050919050565b611f35615bd1565b6040805160608101825260ff851681526020808201859052825160008082529181018452611f8893830191611f80565b611f6d615bd1565b815260200190600190039081611f655790505b509052613721565b9392505050565b611f97615bd1565b604080516001808252818301909252606091816020015b611fb6615bd1565b815260200190600190039081611fae5790505090508281600081518110611fd957fe5b602002602001018190525061200a60405180606001604052808760ff16815260200186815260200183815250613721565b95945050505050565b612021826020015182613788565b82602001819052505050565b61203b826040015182613788565b82604001819052505050565b60008080613a4a600185141561206c57506002925060009150600390506138066127fb565b600285141561208a57506002925060009150600390506138066127fb565b60038514156120a857506002925060009150600390506138066127fb565b60048514156120c65750600292506000915060049050613a696127fb565b60058514156120e45750600292506000915060079050613a696127fb565b60068514156121025750600292506000915060049050613a696127fb565b60078514156121205750600292506000915060079050613a696127fb565b600885141561213e5750600392506000915060049050613b396127fb565b600985141561215c5750600392506000915060049050613b396127fb565b600a85141561217a57506002925060009150601990506138066127fb565b600b85141561219857506002925060009150600790506138066127fb565b60108514156121b5575060029250600091508290506138066127fb565b60118514156121d2575060029250600091508290506138066127fb565b60128514156121ef575060029250600091508290506138066127fb565b601385141561220c575060029250600091508290506138066127fb565b601485141561222957506002925060009150829050613c246127fb565b601585141561224657506001925060009150829050613c816127fb565b6016851415612263575060029250600091508290506138066127fb565b6017851415612280575060029250600091508290506138066127fb565b601885141561229d575060029250600091508290506138066127fb565b60198514156122ba57506001925060009150829050613cef6127fb565b601a8514156122d857506002925060009150600490506138066127fb565b601b8514156122f657506002925060009150600490506138066127fb565b601c85141561231457506002925060009150600490506138066127fb565b601d85141561233257506002925060009150600490506138066127fb565b60208514156123505750600192506000915060079050613d326127fb565b602185141561236e5750600192506000915060039050613d5d6127fb565b602285141561238c57506002925060009150600890506138066127fb565b60238514156123ab575060019250600091506102589050613d806127fb565b60308514156123c857506001925060009150829050613f616127fb565b60318514156123e557506000925082915060019050613f6e6127fb565b603285141561240257506000925082915060019050613f8b6127fb565b60338514156124205750600192506000915060029050613fa86127fb565b603485141561243e5750600192506000915060049050613fc16127fb565b603585141561245c57506002925060009150600490506140016127fb565b6036851415612479575060009250829150600290506140736127fb565b6037851415612496575060009250829150600190506140b06127fb565b60388514156124b3575060019250600091508290506140d36127fb565b60398514156124d0575060009250600191508190506140f56127fb565b603a8514156124ed575060009250829150600290506141066127fb565b603b85141561250a575060009250829150600190506116616127fb565b603c851415612527575060009250829150600190506141346127fb565b603d8514156125445750600192506000915082905061414a6127fb565b60408514156125615750600192506000915082905061418d6127fb565b604185141561257f57506002925060009150600190506141cf6127fb565b604285141561259d575060039250600091506001905061423d6127fb565b60438514156125bb57506002925060009150600190506142d76127fb565b60448514156125d9575060039250600091506001905061431b6127fb565b60508514156125f65750600292506000915082905061438b6127fb565b6051851415612614575060039250600091506028905061442e6127fb565b605285141561263257506001925060009150600290506144e26127fb565b605385141561264f575060019250829150600390506145266127fb565b605485141561266d57506002925060019150602990506145ae6127fb565b606085141561268a575060009250829150606490506116616127fb565b60618514156126a857506001925060009150606490506146756127fb565b60708514156126c657506001925060009150606490506146bb6127fb565b60728514156126e35750600092508291506028905061473a6127fb565b6073851415612700575060009250829150600590506147d56127fb565b607485141561271d575060009250829150600a90506147de6127fb565b607585141561273a575060019250600091508190506147eb6127fb565b6076851415612757575060009250829150600190506148256127fb565b6077851415612774575060009250829150601990506148396127fb565b607885141561279257506002925060009150601990506148836127fb565b60798514156127b057506003925060009150601990506148f36127fb565b607b8514156127cd575060009250829150600a905061497b6127fb565b60808514156127ec57506004925060009150614e2090506149bd6127fb565b50600092508291508190506147d55b9193509193565b60408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051908201209082015160c00151141561285e576128598160200151614b48565b611661565b6020015160c08101519052565b612873615bd1565b604080516000808252602082019092526128ad916128a7565b612894615bd1565b81526020019060019003908161288c5790505b5061360f565b905090565b600090565b60408051602080820193909352815180820384018152908201909152805191012090565b600190565b60006002826040015151106128f157fe5b604082015151612956576129036128db565b8251602080850151604080516001600160f81b031960f896871b8116828601529490951b909316602185015260228085019190915282518085039091018152604290930190915281519101209050610ead565b61295e6128db565b8260000151612984846040015160008151811061297757fe5b6020026020010151611728565b8460200151604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b600290565b60006129ec612a33565b8383604051602001808460ff1660ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b600390565b612a40615bd1565b600882511115612a8e576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b60608251604051908082528060200260200182016040528015612abb578160200160208202803883390190505b508051909150600160005b82811015612b1e57612add86828151811061297757fe5b848281518110612ae957fe5b602002602001018181525050858181518110612b0157fe5b602002602001015160800151820191508080600101915050612ac6565b506000835184604051602001808360ff1660ff1660f81b8152600101828051906020019060200280838360005b83811015612b63578181015183820152602001612b4b565b5050505090500192505050604051602081830303815290604052805190602001209050612b908183610eb2565b9695505050505050565b606490565b6000600182602001515103905081606001515181600101146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b81525090612c265760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b5081608001515181600101146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b81525090612ca15760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b508160c001515181146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b81525090612d195760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b508160a001515181600202146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b81525090612d945760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b5060008080805b84811015612e06578560c001518181518110612db357fe5b6020026020010151840193508560a001518181518110612dcf57fe5b6020026020010151830192508560a0015181860181518110612ded57fe5b6020026020010151820191508080600101915050612d9b565b50612f3a6107c56040518061018001604052808860e001516001600160401b031681526020018860200151600081518110612e3d57fe5b602002602001015181526020018860000151815260200188602001518881518110612e6457fe5b602002602001015181526020016000896040015163ffffffff1611612e8a576000612e8d565b60015b15158152602001866001600160401b031681526020018860600151600081518110612eb457fe5b6020026020010151815260200188606001518881518110612ed157fe5b60200260200101518152602001856001600160401b031681526020018860800151600081518110612efe57fe5b6020026020010151815260200188608001518881518110612f1b57fe5b60200260200101518152602001846001600160401b0316815250611848565b5050505050565b6000818381612f4c57fe5b06828481612f5657fe5b04019392505050565b600061200a6040518061018001604052808663ffffffff166001600160401b0316815260200187602001518581518110612f9557fe5b602002602001015181526020018760000151815260200187602001518560010181518110612fbf57fe5b6020026020010151815260200184600101886040015163ffffffff1614151581526020018760c001518581518110612ff357fe5b60200260200101516001600160401b031681526020018760600151858151811061301957fe5b602002602001015181526020018760600151856001018151811061303957fe5b602002602001015181526020018760a00151858151811061305657fe5b60200260200101516001600160401b031681526020018760800151858151811061307c57fe5b602002602001015181526020018760800151856001018151811061309c57fe5b602002602001015181526020018760a00151858701815181106130bb57fe5b60200260200101516001600160401b0316815250611848565b60008183816130df57fe5b049392505050565b6130f081614b52565b60065550565b600580546002919060ff1916600183611c1b565b7ffdfc7d7356ac103488916cfffd6e537843dadc44dc71695a7ed504d9f668528781602001518260400151836060015184608001518560a001518660c001518760e0015160035460405180806020018963ffffffff1663ffffffff16815260200180602001806020018060200180602001886001600160401b03166001600160401b0316815260200187815260200186810386528e818151815260200191508051906020019060200280838360005b838110156131d15781810151838201526020016131b9565b5050505090500186810385528c818151815260200191508051906020019060200280838360005b838110156132105781810151838201526020016131f8565b5050505090500186810384528b818151815260200191508051906020019060200280838360005b8381101561324f578181015183820152602001613237565b5050505090500186810383528a818151815260200191508051906020019060200280838360005b8381101561328e578181015183820152602001613276565b50505050905001868103825289818151815260200191508051906020019060200280838360005b838110156132cd5781810151838201526020016132b5565b505050509050019d505050505050505050505050505060405180910390a150565b6000808260010184848151811061330157fe5b016020015190925060f81c90509250929050565b6000808284511015801561332d575060208385510310155b61336a576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b6020830161337e858563ffffffff614c9016565b915091509250929050565b613391615bd1565b6040805160a08101825283815281516060810183526000808252602082810182905284518281528082018652939490850193908301916133e7565b6133d4615bd1565b8152602001906001900390816133cc5790505b50905281526040805160008082526020828101909352919092019190613423565b613410615bd1565b8152602001906001900390816134085790505b50815260006020820152600160409091015292915050565b6000613445615bd1565b82600080613451615bd1565b600061345d89866132ee565b909550935061346c89866132ee565b9095509250600160ff8516141561348d576134878986611c92565b90955091505b6134978986614cac565b9095509050600160ff851614156134c257846134b4848385611f8f565b965096505050505050611e1d565b846134cd8483611f2d565b9650965050505050509250929050565b60006134e7615bd1565b828451101580156134fc575060408385510310155b613538576040805162461bcd60e51b81526020600482015260086024820152671d1bc81cda1bdc9d60c21b604482015290519081900360640190fd5b6000806135458686614cac565b90945091506135548685613315565b9094509050836135648383610eb2565b9350935050509250929050565b600c90565b60006060600083905060608660ff166040519080825280602002602001820160405280156135be57816020015b6135ab615bd1565b8152602001906001900390816135a35790505b50905060005b8760ff168160ff161015613602576135dc8784611c92565b8351849060ff85169081106135ed57fe5b602090810291909101015292506001016135c4565b5090969095509350505050565b613617615bd1565b6136218251614cc3565b613672576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b83518110156136a95783818151811061368c57fe5b602002602001015160800151820191508080600101915050613677565b506040805160a0810182526000808252825160608101845281815260208181018390528451838152808201865293949085019391929083019190613703565b6136f0615bd1565b8152602001906001900390816136e85790505b50905281526020810194909452600360408501526060909301525090565b613729615bd1565b6040805160a0810182526000808252602080830186905283518281529081018452919283019190613770565b61375d615bd1565b8152602001906001900390816137555790505b50815260016020820181905260409091015292915050565b613790615bd1565b6040805160028082526060828101909352816020015b6137ae615bd1565b8152602001906001900390816137a657905050905082816000815181106137d157fe5b602002602001018190525083816001815181106137ea57fe5b60200260200101819052506137fe81612a38565b949350505050565b61380e615bd1565b61381b8260e00151614cca565b9050613825615bd1565b6138328360e00151614cca565b905061383d82614d0c565b158061384f575061384d81614d0c565b155b156138645761385d83614d17565b5050611661565b8151815161014085015160009060ff16600114156138855750818101613a4c565b61014086015160ff166002141561389f5750818102613a4c565b61014086015160ff16600314156138b95750808203613a4c565b61014086015160ff16600a14156138d3575080820a613a4c565b61014086015160ff16600b14156138ed575080820b613a4c565b61014086015160ff16601014156139075750808210613a4c565b61014086015160ff16601114156139215750808211613a4c565b61014086015160ff166012141561393b5750808212613a4c565b61014086015160ff16601314156139555750808213613a4c565b61014086015160ff166016141561396f5750818116613a4c565b61014086015160ff16601714156139895750818117613a4c565b61014086015160ff16601814156139a35750818118613a4c565b61014086015160ff16601a14156139bd575080821a613a4c565b61014086015160ff16601b14156139d7575080821b613a4c565b61014086015160ff16601c14156139f1575080821c613a4c565b61014086015160ff16601d1415613a0b575080821d613a4c565b61014086015160ff1660221415613a4a575060408051602080820185905281830184905282518083038401815260609092019092528051910120613a4c565bfe5b61165b613a5882613389565b60e08801519063ffffffff614d3516565b613a71615bd1565b613a7e8260e00151614cca565b9050613a88615bd1565b613a958360e00151614cca565b9050613aa082614d0c565b1580613ab25750613ab081614d0c565b155b80613abc57508051155b15613aca5761385d83614d17565b8151815161014085015160009060ff1660041415613aeb5750808204613a4c565b61014086015160ff1660051415613b055750808205613a4c565b61014086015160ff1660061415613b1f5750808206613a4c565b61014086015160ff1660071415613a4a5750808207613a4c565b613b41615bd1565b613b4e8260e00151614cca565b9050613b58615bd1565b613b658360e00151614cca565b9050613b6f615bd1565b613b7c8460e00151614cca565b9050613b8783614d0c565b1580613b995750613b9782614d0c565b155b80613baa5750613ba881614d0c565b155b80613bb457508051155b15613bca57613bc284614d17565b505050611661565b82518251825161014087015160009060ff1660081415613bef57818385089050613c07565b61014088015160ff1660091415613a4a578183850990505b6107fb613c1382613389565b60e08a01519063ffffffff614d3516565b613c2c615bd1565b613c398260e00151614cca565b9050613c43615bd1565b613c508360e00151614cca565b9050611b06613c70613c6183611728565b613c6a85611728565b14614d5f565b60e08501519063ffffffff614d3516565b613c89615bd1565b613c968260e00151614cca565b9050613ca181614d0c565b613cc857613cc3613cb26000613389565b60e08401519063ffffffff614d3516565b61198a565b80518015613ce9613cd882613389565b60e08601519063ffffffff614d3516565b50505050565b613cf7615bd1565b613d048260e00151614cca565b9050613d0f81614d0c565b613d2257613d1c82614d17565b50611661565b80518019613ce9613cd882613389565b613d3a615bd1565b613d478260e00151614cca565b905061198a613cb2613d5883611728565b613389565b613d65615bd1565b613d728260e00151614cca565b905061198a613cb282614d81565b613d88615bd1565b613d958260e00151614cca565b9050613da081614de6565b1580613db25750806040015151600714155b15613dc057613d1c82614d17565b604081015160005b6007811015613e0257613ded828281518110613de057fe5b6020026020010151614d0c565b613dfa57613bc284614d17565b600101613dc8565b50613e0b615d96565b60005b6019811015613e6f5760406003821602836004830481518110613e2d57fe5b602002602001015160000151901c6001600160401b03168260058381613e4f57fe5b04600584066005020160198110613e6257fe5b6020020152600101613e0e565b50613e7981614df3565b604080516007808252610100820190925291925060609190816020015b613e9e615bd1565b815260200190600190039081613e9657905050905060005b6007811015613ee857613ec96000613389565b828281518110613ed557fe5b6020908102919091010152600101613eb6565b5060005b6019811015613f4357604060038216028360058304600584066005020160198110613f1357fe5b6020020151901b826004830481518110613f2957fe5b602090810291909101015180519091179052600101613eec565b50612f3a613f508261360f565b60e08701519063ffffffff614d3516565b61198a8160e00151614cca565b60208101516080015160e08201516116619163ffffffff614d3516565b60208101516060015160e08201516116619163ffffffff614d3516565b613fb58160e00151614cca565b60209091015160600152565b613fc9615bd1565b613fd68260e00151614cca565b9050613fe1816159e4565b613fee57613d1c82614d17565b613ff781611728565b6020830151525050565b614009615bd1565b6140168260e00151614cca565b9050614020615bd1565b61402d8360e00151614cca565b9050614038826159e4565b158061404a575061404881614d0c565b155b156140585761385d83614d17565b805115611b065761406882611728565b602084015152505050565b60e0810151516000901580156140a2575061408f6113df61286b565b6140a0836020015160200151611728565b145b905061198a613cb282614d5f565b805151611661906140c29060016159f1565b60e08301519063ffffffff614d3516565b6116616140e38260e00151614cca565b6101008301519063ffffffff614d3516565b6116616140c2826101000151614cca565b610100810151516000901580156140a257506141236113df61286b565b6140a0836020015160400151611728565b6116616140c2826020015160c0015160016159f1565b614152615bd1565b61415f8260e00151614cca565b905061416a816159e4565b61417757613d1c82614d17565b61418081611728565b602083015160c001525050565b614195615bd1565b6141a28260e00151614cca565b60e08301519091506141ba908263ffffffff614d3516565b60e082015161198a908263ffffffff614d3516565b6141d7615bd1565b6141e48260e00151614cca565b90506141ee615bd1565b6141fb8360e00151614cca565b60e0840151909150614213908263ffffffff614d3516565b60e0830151614228908363ffffffff614d3516565b60e0830151611b06908263ffffffff614d3516565b614245615bd1565b6142528260e00151614cca565b905061425c615bd1565b6142698360e00151614cca565b9050614273615bd1565b6142808460e00151614cca565b60e0850151909150614298908263ffffffff614d3516565b60e08401516142ad908363ffffffff614d3516565b60e08401516142c2908463ffffffff614d3516565b60e0840151613ce9908263ffffffff614d3516565b6142df615bd1565b6142ec8260e00151614cca565b90506142f6615bd1565b6143038360e00151614cca565b60e0840151909150614228908363ffffffff614d3516565b614323615bd1565b6143308260e00151614cca565b905061433a615bd1565b6143478360e00151614cca565b9050614351615bd1565b61435e8460e00151614cca565b60e0850151909150614376908463ffffffff614d3516565b60e08401516142c2908363ffffffff614d3516565b614393615bd1565b6143a08260e00151614cca565b90506143aa615bd1565b6143b78360e00151614cca565b90506143c282614d0c565b15806143d457506143d281614de6565b155b806143ee57506143e381615aa2565b60ff16826000015110155b156143fc5761385d83614d17565b611b06816040015183600001518151811061441357fe5b60200260200101518460e00151614d3590919063ffffffff16565b614436615bd1565b6144438260e00151614cca565b905061444d615bd1565b61445a8360e00151614cca565b9050614464615bd1565b6144718460e00151614cca565b905061447c83614d0c565b158061448e575061448c82614de6565b155b806144a8575061449d82615aa2565b60ff16836000015110155b156144b657613bc284614d17565b6040820151835181518391839181106144cb57fe5b6020026020010181905250612f3a613f508261360f565b6144ea615bd1565b6144f78260e00151614cca565b905061450281614de6565b61450f57613d1c82614d17565b61198a613cb261451e83615aa2565b60ff16613389565b61452e615bd1565b61453b8260e00151614cca565b9050614545615bd1565b614553836101000151614cca565b905061455e82614d0c565b1580614570575061456e81614de6565b155b8061458a575061457f81615aa2565b60ff16826000015110155b156145985761385d83614d17565b6101008301516143fc908263ffffffff614d3516565b6145b6615bd1565b6145c38260e00151614cca565b90506145cd615bd1565b6145da8360e00151614cca565b90506145e4615bd1565b6145f2846101000151614cca565b90506145fd81614de6565b158061460f575061460d83614d0c565b155b80614629575061461e81615aa2565b60ff16836000015110155b1561463757613bc284614d17565b60408101518351815184918391811061464c57fe5b6020026020010181905250612f3a6146638261360f565b6101008701519063ffffffff614d3516565b8060a0015161468a6113df8360e00151614cca565b604080516020808201949094528082019290925280518083038201815260609092019052805191012060a090910152565b6146c3615bd1565b6146d08260e00151614cca565b9050612710816080015111806146ec57506146ea81615ac9565b155b156146fa57613d1c82614d17565b816080015161470882611728565b604080516020808201949094528082019290925280518083038201815260609092019052805191012060808301525050565b6147456113df61286b565b6147528260400151611728565b14156147a5576040805162461bcd60e51b815260206004820152601d60248201527f496e626f7820696e737472756374696f6e2077617320626c6f636b6564000000604482015290519081900360640190fd5b604081015160e08201516147be9163ffffffff614d3516565b6147c661286b565b60408201526001606090910152565b61166181614d17565b6116618160200151615bc7565b6147f3615bd1565b6148008260e00151614cca565b905061480b81614d0c565b61481857613d1c82614d17565b51602082015160a0015250565b6116616140c2826020015160a00151613389565b60408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051910120611661906140c29060016159f1565b61488b615bd1565b6148988260e00151614cca565b90506148a2615bd1565b6148af8360e00151614cca565b90506148ba82614d0c565b15806148cc57506148ca816159e4565b155b156148da5761385d83614d17565b611b06613c7083600001516148ee84611728565b611f2d565b6148fb615bd1565b6149088260e00151614cca565b9050614912615bd1565b61491f8360e00151614cca565b9050614929615bd1565b6149368460e00151614cca565b905061494183614d0c565b15806149535750614951816159e4565b155b1561496157613bc284614d17565b613ce9613cd8846000015161497584611728565b85611f8f565b604080516000808252602082019092526060916149ae565b61499b615bd1565b8152602001906001900390816149935790505b50905061198a613cb28261360f565b6149c5615bd1565b6149d28260e00151614cca565b90506149dc615bd1565b6149e98360e00151614cca565b90506149f3615bd1565b614a008460e00151614cca565b9050614a0a615bd1565b614a178560e00151614cca565b9050614a2284614d0c565b1580614a345750614a3283614d0c565b155b80614a455750614a4382614d0c565b155b80614a565750614a5481614d0c565b155b15614a64576113be85614d17565b83518351835115801590614a7a57508351600114155b15614aa857614a9d614a8c6000613389565b60e08901519063ffffffff614d3516565b505050505050611661565b83518351604080516000808252602080830180855285905260ff601b9096019586168385015260608301889052608083018790529251909260019260a080820193601f1981019281900390910190855afa158015614b0a573d6000803e3d6000fd5b505050602060405103519050614b3c614b2b826001600160a01b0316613389565b60e08c01519063ffffffff614d3516565b50505050505050505050565b600160e090910152565b6000815b600181511115614c735760606002825160010181614b7057fe5b04604051908082528060200260200182016040528015614b9a578160200160208202803883390190505b50905060005b8151811015614c6b578251816002026001011015614c3357828160020281518110614bc757fe5b6020026020010151838260020260010181518110614be157fe5b6020026020010151604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120828281518110614c2257fe5b602002602001018181525050614c63565b828160020281518110614c4257fe5b6020026020010151828281518110614c5657fe5b6020026020010181815250505b600101614ba0565b509050614b56565b80600081518110614c8057fe5b6020026020010151915050919050565b60008160200183511015614ca357600080fd5b50016020015190565b6000806020830161337e858563ffffffff614c9016565b6008101590565b614cd2615bd1565b614cda615bd1565b8260200151600184600001510381518110614cf157fe5b60209081029190910101518351600019018452915050919050565b6060015160ff161590565b614d2081612802565b60e08101516000908190526101009091015152565b808260200151836000015181518110614d4a57fe5b60209081029190910101525080516001019052565b614d67615bd1565b8115614d775761174e6001613389565b61174e6000613389565b614d89615bd1565b816060015160ff1660021415614dd05760405162461bcd60e51b8152600401808060200182810382526021815260200180615e2c6021913960400191505060405180910390fd5b614de0826060015160ff16613389565b92915050565b6060015160ff1660031490565b614dfb615d96565b614e03615db5565b614e0b615db5565b614e13615d96565b614e1b615dd3565b60405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060008090505b60188110156159d9576080878101516060808a01516040808c01516020808e01518e511890911890921890931889526101208b01516101008c015160e08d015160c08e015160a08f0151181818189089018190526101c08b01516101a08c01516101808d01516101608e01516101408f0151181818189289019283526102608b01516102408c01516102208d01516102008e01516101e08f015118181818918901919091526103008a01516102e08b01516102c08c01516102a08d01516102808e0151181818189288018390526001600160401b0360028202166001603f1b91829004179092188652510485600260200201516002026001600160401b03161785600060200201511884600160200201526001603f1b85600360200201518161506757fe5b0485600360200201516002026001600160401b03161785600160200201511884600260200201526001603f1b8560046020020151816150a257fe5b0485600460200201516002026001600160401b031617856002600581106150c557fe5b602002015118606085015284516001603f1b9086516060808901519390920460029091026001600160401b031617909118608086810191825286518a5118808b5287516020808d018051909218825289516040808f0180519092189091528a518e8801805190911890528a51948e0180519095189094528901805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291880180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292870180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a01805190911890529084525163100000009060208901516001600160401b03641000000000909102169190041761010084015260408701516001603d1b9060408901516001600160401b03600890910216919004176101608401526060870151628000009060608901516001600160401b036502000000000090910216919004176102608401526080870151654000000000009060808901516001600160401b036204000090910216919004176102c084015260a08701516001603f1b900487600560200201516002026001600160401b0316178360026019811061532f57fe5b602002015260c0870151621000008104651000000000009091026001600160401b039081169190911760a085015260e0880151664000000000000081046104009091028216176101a08501526101008801516208000081046520000000000090910282161761020085015261012088015160048082029092166001603e1b909104176103008501526101408801516101408901516001600160401b036001603e1b90910216919004176080840152610160870151670400000000000000906101608901516001600160401b036040909102169190041760e084015261018087015162200000906101808901516001600160401b036508000000000090910216919004176101408401526101a08701516602000000000000906101a08901516001600160401b0361800090910216919004176102408401526101c08701516008906101c08901516001600160401b036001603d1b90910216919004176102a08401526101e0870151641000000000906101e08901516001600160401b03631000000090910216919004176020840152610200808801516102008901516001600160401b0366800000000000009091021691900417610120840152610220870151648000000000906102208901516001600160401b036302000000909102169190041761018084015261024087015165080000000000906102408901516001600160401b036220000090910216919004176101e0840152610260870151610100906102608901516001600160401b03600160381b90910216919004176102e0840152610280870151642000000000906102808901516001600160401b036308000000909102169190041760608401526102a087015165100000000000906102a08901516001600160401b0362100000909102169190041760c08401526102c08701516302000000906102c08901516001600160401b0364800000000090910216919004176101c08401526102e0870151600160381b906102e08901516001600160401b036101009091021691900417610220840152610300870151660400000000000090048760186020020151614000026001600160401b031617836014602002015282600a602002015183600560200201511916836000602002015118876000602002015282600b602002015183600660200201511916836001602002015118876001602002015282600c602002015183600760200201511916836002602002015118876002602002015282600d602002015183600860200201511916836003602002015118876003602002015282600e602002015183600960200201511916836004602002015118876004602002015282600f602002015183600a602002015119168360056020020151188760056020020152826010602002015183600b602002015119168360066020020151188760066020020152826011602002015183600c602002015119168360076020020151188760076020020152826012602002015183600d602002015119168360086020020151188760086020020152826013602002015183600e602002015119168360096020020151188760096020020152826014602002015183600f6020020151191683600a60200201511887600a602002015282601560200201518360106020020151191683600b60200201511887600b602002015282601660200201518360116020020151191683600c60200201511887600c602002015282601760200201518360126020020151191683600d60200201511887600d602002015282601860200201518360136020020151191683600e60200201511887600e602002015282600060200201518360146020020151191683600f60200201511887600fc757fe5b60200201518751188752600101614f42565b509495945050505050565b6060015160ff1660011490565b6159f9615bd1565b6040805160a0810182528481528151606081018352600080825260208281018290528451828152808201865293949085019390830191615a4f565b615a3c615bd1565b815260200190600190039081615a345790505b50905281526040805160008082526020828101909352919092019190615a8b565b615a78615bd1565b815260200190600190039081615a705790505b508152606460208201526040019290925250919050565b606081015160009060ff1660031415615ac15750604081015151610ead565b506001610ead565b606081015160009060ff16615ae057506001610ead565b606082015160ff1660011415615af857506000610ead565b606082015160ff1660021415615b4c576040805162461bcd60e51b81526020600482015260146024820152736d75737420686176652066756c6c2076616c756560601b604482015290519081900360640190fd5b606082015160ff1660031415615baf5760408201515160005b81811015615ba457615b8d84604001518281518110615b8057fe5b6020026020010151615ac9565b615b9c57600092505050610ead565b600101615b65565b506001915050610ead565b606082015160ff166064141561180757506000610ead565b600260e090910152565b6040518060a0016040528060008152602001615beb615df2565b815260606020820181905260006040830181905291015290565b604051806101600160405280615c19615d38565b8152602001615c26615d38565b8152602001615c33615bd1565b81526000602082018190526040820181905260608201819052608082015260a001615c5c615e11565b8152602001615c69615e11565b815260006020820181905260409091015290565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081019190915290565b6040518061010001604052806000801916815260200160608152602001600063ffffffff1681526020016060815260200160608152602001606081526020016060815260200160006001600160401b031681525090565b6040805161010081019091526000815260208101615d54615bd1565b8152602001615d61615bd1565b8152602001615d6e615bd1565b8152602001615d7b615bd1565b81526000602082018190526040820181905260609091015290565b6040518061032001604052806019906020820280388339509192915050565b6040518060a001604052806005906020820280388339509192915050565b6040518061030001604052806018906020820280388339509192915050565b6040805160608082018352600080835260208301529181019190915290565b60405180604001604052806000815260200160608152509056fe56616c7565206d757374206861766520612076616c6964207479706520636f6465a265627a7a7231582001936bb666b7e0f93519e1e072c796eaf0e55b79de789f56f478d14b38904b7864736f6c634300050f0032"

// DeployExecutionChallenge deploys a new Ethereum contract, binding an instance of ExecutionChallenge to it.
func DeployExecutionChallenge(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ExecutionChallenge, error) {
	parsed, err := abi.JSON(strings.NewReader(ExecutionChallengeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ExecutionChallengeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ExecutionChallenge{ExecutionChallengeCaller: ExecutionChallengeCaller{contract: contract}, ExecutionChallengeTransactor: ExecutionChallengeTransactor{contract: contract}, ExecutionChallengeFilterer: ExecutionChallengeFilterer{contract: contract}}, nil
}

// ExecutionChallenge is an auto generated Go binding around an Ethereum contract.
type ExecutionChallenge struct {
	ExecutionChallengeCaller     // Read-only binding to the contract
	ExecutionChallengeTransactor // Write-only binding to the contract
	ExecutionChallengeFilterer   // Log filterer for contract events
}

// ExecutionChallengeCaller is an auto generated read-only Go binding around an Ethereum contract.
type ExecutionChallengeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExecutionChallengeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ExecutionChallengeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExecutionChallengeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ExecutionChallengeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExecutionChallengeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ExecutionChallengeSession struct {
	Contract     *ExecutionChallenge // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ExecutionChallengeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ExecutionChallengeCallerSession struct {
	Contract *ExecutionChallengeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ExecutionChallengeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ExecutionChallengeTransactorSession struct {
	Contract     *ExecutionChallengeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ExecutionChallengeRaw is an auto generated low-level Go binding around an Ethereum contract.
type ExecutionChallengeRaw struct {
	Contract *ExecutionChallenge // Generic contract binding to access the raw methods on
}

// ExecutionChallengeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ExecutionChallengeCallerRaw struct {
	Contract *ExecutionChallengeCaller // Generic read-only contract binding to access the raw methods on
}

// ExecutionChallengeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ExecutionChallengeTransactorRaw struct {
	Contract *ExecutionChallengeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewExecutionChallenge creates a new instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallenge(address common.Address, backend bind.ContractBackend) (*ExecutionChallenge, error) {
	contract, err := bindExecutionChallenge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallenge{ExecutionChallengeCaller: ExecutionChallengeCaller{contract: contract}, ExecutionChallengeTransactor: ExecutionChallengeTransactor{contract: contract}, ExecutionChallengeFilterer: ExecutionChallengeFilterer{contract: contract}}, nil
}

// NewExecutionChallengeCaller creates a new read-only instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallengeCaller(address common.Address, caller bind.ContractCaller) (*ExecutionChallengeCaller, error) {
	contract, err := bindExecutionChallenge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeCaller{contract: contract}, nil
}

// NewExecutionChallengeTransactor creates a new write-only instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallengeTransactor(address common.Address, transactor bind.ContractTransactor) (*ExecutionChallengeTransactor, error) {
	contract, err := bindExecutionChallenge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeTransactor{contract: contract}, nil
}

// NewExecutionChallengeFilterer creates a new log filterer instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallengeFilterer(address common.Address, filterer bind.ContractFilterer) (*ExecutionChallengeFilterer, error) {
	contract, err := bindExecutionChallenge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeFilterer{contract: contract}, nil
}

// bindExecutionChallenge binds a generic wrapper to an already deployed contract.
func bindExecutionChallenge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ExecutionChallengeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ExecutionChallenge *ExecutionChallengeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ExecutionChallenge.Contract.ExecutionChallengeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ExecutionChallenge *ExecutionChallengeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ExecutionChallengeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ExecutionChallenge *ExecutionChallengeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ExecutionChallengeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ExecutionChallenge *ExecutionChallengeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ExecutionChallenge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ExecutionChallenge *ExecutionChallengeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ExecutionChallenge *ExecutionChallengeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.contract.Transact(opts, method, params...)
}

// BisectAssertion is a paid mutator transaction binding the contract method 0x6f537a39.
//
// Solidity: function bisectAssertion(bytes32 _beforeInbox, bytes32[] _machineHashes, uint32 inboxInsnIndex, bytes32[] _messageAccs, bytes32[] _logAccs, uint64[] _outCounts, uint64[] _gases, uint64 _totalSteps) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) BisectAssertion(opts *bind.TransactOpts, _beforeInbox [32]byte, _machineHashes [][32]byte, inboxInsnIndex uint32, _messageAccs [][32]byte, _logAccs [][32]byte, _outCounts []uint64, _gases []uint64, _totalSteps uint64) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "bisectAssertion", _beforeInbox, _machineHashes, inboxInsnIndex, _messageAccs, _logAccs, _outCounts, _gases, _totalSteps)
}

// BisectAssertion is a paid mutator transaction binding the contract method 0x6f537a39.
//
// Solidity: function bisectAssertion(bytes32 _beforeInbox, bytes32[] _machineHashes, uint32 inboxInsnIndex, bytes32[] _messageAccs, bytes32[] _logAccs, uint64[] _outCounts, uint64[] _gases, uint64 _totalSteps) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) BisectAssertion(_beforeInbox [32]byte, _machineHashes [][32]byte, inboxInsnIndex uint32, _messageAccs [][32]byte, _logAccs [][32]byte, _outCounts []uint64, _gases []uint64, _totalSteps uint64) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.BisectAssertion(&_ExecutionChallenge.TransactOpts, _beforeInbox, _machineHashes, inboxInsnIndex, _messageAccs, _logAccs, _outCounts, _gases, _totalSteps)
}

// BisectAssertion is a paid mutator transaction binding the contract method 0x6f537a39.
//
// Solidity: function bisectAssertion(bytes32 _beforeInbox, bytes32[] _machineHashes, uint32 inboxInsnIndex, bytes32[] _messageAccs, bytes32[] _logAccs, uint64[] _outCounts, uint64[] _gases, uint64 _totalSteps) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) BisectAssertion(_beforeInbox [32]byte, _machineHashes [][32]byte, inboxInsnIndex uint32, _messageAccs [][32]byte, _logAccs [][32]byte, _outCounts []uint64, _gases []uint64, _totalSteps uint64) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.BisectAssertion(&_ExecutionChallenge.TransactOpts, _beforeInbox, _machineHashes, inboxInsnIndex, _messageAccs, _logAccs, _outCounts, _gases, _totalSteps)
}

// ChooseSegment is a paid mutator transaction binding the contract method 0x79a9ad85.
//
// Solidity: function chooseSegment(uint256 _segmentToChallenge, bytes _proof, bytes32 _bisectionRoot, bytes32 _bisectionHash) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) ChooseSegment(opts *bind.TransactOpts, _segmentToChallenge *big.Int, _proof []byte, _bisectionRoot [32]byte, _bisectionHash [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "chooseSegment", _segmentToChallenge, _proof, _bisectionRoot, _bisectionHash)
}

// ChooseSegment is a paid mutator transaction binding the contract method 0x79a9ad85.
//
// Solidity: function chooseSegment(uint256 _segmentToChallenge, bytes _proof, bytes32 _bisectionRoot, bytes32 _bisectionHash) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) ChooseSegment(_segmentToChallenge *big.Int, _proof []byte, _bisectionRoot [32]byte, _bisectionHash [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ChooseSegment(&_ExecutionChallenge.TransactOpts, _segmentToChallenge, _proof, _bisectionRoot, _bisectionHash)
}

// ChooseSegment is a paid mutator transaction binding the contract method 0x79a9ad85.
//
// Solidity: function chooseSegment(uint256 _segmentToChallenge, bytes _proof, bytes32 _bisectionRoot, bytes32 _bisectionHash) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) ChooseSegment(_segmentToChallenge *big.Int, _proof []byte, _bisectionRoot [32]byte, _bisectionHash [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ChooseSegment(&_ExecutionChallenge.TransactOpts, _segmentToChallenge, _proof, _bisectionRoot, _bisectionHash)
}

// InitializeBisection is a paid mutator transaction binding the contract method 0x02ad1e4e.
//
// Solidity: function initializeBisection(address _rollupAddress, address _asserter, address _challenger, uint256 _challengePeriodTicks, bytes32 _challengeState) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) InitializeBisection(opts *bind.TransactOpts, _rollupAddress common.Address, _asserter common.Address, _challenger common.Address, _challengePeriodTicks *big.Int, _challengeState [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "initializeBisection", _rollupAddress, _asserter, _challenger, _challengePeriodTicks, _challengeState)
}

// InitializeBisection is a paid mutator transaction binding the contract method 0x02ad1e4e.
//
// Solidity: function initializeBisection(address _rollupAddress, address _asserter, address _challenger, uint256 _challengePeriodTicks, bytes32 _challengeState) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) InitializeBisection(_rollupAddress common.Address, _asserter common.Address, _challenger common.Address, _challengePeriodTicks *big.Int, _challengeState [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.InitializeBisection(&_ExecutionChallenge.TransactOpts, _rollupAddress, _asserter, _challenger, _challengePeriodTicks, _challengeState)
}

// InitializeBisection is a paid mutator transaction binding the contract method 0x02ad1e4e.
//
// Solidity: function initializeBisection(address _rollupAddress, address _asserter, address _challenger, uint256 _challengePeriodTicks, bytes32 _challengeState) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) InitializeBisection(_rollupAddress common.Address, _asserter common.Address, _challenger common.Address, _challengePeriodTicks *big.Int, _challengeState [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.InitializeBisection(&_ExecutionChallenge.TransactOpts, _rollupAddress, _asserter, _challenger, _challengePeriodTicks, _challengeState)
}

// OneStepProof is a paid mutator transaction binding the contract method 0x4f524e7a.
//
// Solidity: function oneStepProof(bytes32 _beforeInbox, uint256 _beforeInboxValueSize, bytes32 _firstMessage, bytes32 _firstLog, bytes _proof) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) OneStepProof(opts *bind.TransactOpts, _beforeInbox [32]byte, _beforeInboxValueSize *big.Int, _firstMessage [32]byte, _firstLog [32]byte, _proof []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "oneStepProof", _beforeInbox, _beforeInboxValueSize, _firstMessage, _firstLog, _proof)
}

// OneStepProof is a paid mutator transaction binding the contract method 0x4f524e7a.
//
// Solidity: function oneStepProof(bytes32 _beforeInbox, uint256 _beforeInboxValueSize, bytes32 _firstMessage, bytes32 _firstLog, bytes _proof) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) OneStepProof(_beforeInbox [32]byte, _beforeInboxValueSize *big.Int, _firstMessage [32]byte, _firstLog [32]byte, _proof []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.OneStepProof(&_ExecutionChallenge.TransactOpts, _beforeInbox, _beforeInboxValueSize, _firstMessage, _firstLog, _proof)
}

// OneStepProof is a paid mutator transaction binding the contract method 0x4f524e7a.
//
// Solidity: function oneStepProof(bytes32 _beforeInbox, uint256 _beforeInboxValueSize, bytes32 _firstMessage, bytes32 _firstLog, bytes _proof) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) OneStepProof(_beforeInbox [32]byte, _beforeInboxValueSize *big.Int, _firstMessage [32]byte, _firstLog [32]byte, _proof []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.OneStepProof(&_ExecutionChallenge.TransactOpts, _beforeInbox, _beforeInboxValueSize, _firstMessage, _firstLog, _proof)
}

// TimeoutChallenge is a paid mutator transaction binding the contract method 0xced5c1bf.
//
// Solidity: function timeoutChallenge() returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) TimeoutChallenge(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "timeoutChallenge")
}

// TimeoutChallenge is a paid mutator transaction binding the contract method 0xced5c1bf.
//
// Solidity: function timeoutChallenge() returns()
func (_ExecutionChallenge *ExecutionChallengeSession) TimeoutChallenge() (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.TimeoutChallenge(&_ExecutionChallenge.TransactOpts)
}

// TimeoutChallenge is a paid mutator transaction binding the contract method 0xced5c1bf.
//
// Solidity: function timeoutChallenge() returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) TimeoutChallenge() (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.TimeoutChallenge(&_ExecutionChallenge.TransactOpts)
}

// ExecutionChallengeAsserterTimedOutIterator is returned from FilterAsserterTimedOut and is used to iterate over the raw logs and unpacked data for AsserterTimedOut events raised by the ExecutionChallenge contract.
type ExecutionChallengeAsserterTimedOutIterator struct {
	Event *ExecutionChallengeAsserterTimedOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeAsserterTimedOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeAsserterTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeAsserterTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeAsserterTimedOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeAsserterTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeAsserterTimedOut represents a AsserterTimedOut event raised by the ExecutionChallenge contract.
type ExecutionChallengeAsserterTimedOut struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAsserterTimedOut is a free log retrieval operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterAsserterTimedOut(opts *bind.FilterOpts) (*ExecutionChallengeAsserterTimedOutIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "AsserterTimedOut")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeAsserterTimedOutIterator{contract: _ExecutionChallenge.contract, event: "AsserterTimedOut", logs: logs, sub: sub}, nil
}

// WatchAsserterTimedOut is a free log subscription operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchAsserterTimedOut(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeAsserterTimedOut) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "AsserterTimedOut")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeAsserterTimedOut)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "AsserterTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAsserterTimedOut is a log parse operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseAsserterTimedOut(log types.Log) (*ExecutionChallengeAsserterTimedOut, error) {
	event := new(ExecutionChallengeAsserterTimedOut)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "AsserterTimedOut", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeBisectedAssertionIterator is returned from FilterBisectedAssertion and is used to iterate over the raw logs and unpacked data for BisectedAssertion events raised by the ExecutionChallenge contract.
type ExecutionChallengeBisectedAssertionIterator struct {
	Event *ExecutionChallengeBisectedAssertion // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeBisectedAssertionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeBisectedAssertion)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeBisectedAssertion)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeBisectedAssertionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeBisectedAssertionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeBisectedAssertion represents a BisectedAssertion event raised by the ExecutionChallenge contract.
type ExecutionChallengeBisectedAssertion struct {
	MachineHashes  [][32]byte
	InboxInsnIndex uint32
	MessageAccs    [][32]byte
	LogAccs        [][32]byte
	OutCounts      []uint64
	Gases          []uint64
	TotalSteps     uint64
	DeadlineTicks  *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterBisectedAssertion is a free log retrieval operation binding the contract event 0xfdfc7d7356ac103488916cfffd6e537843dadc44dc71695a7ed504d9f6685287.
//
// Solidity: event BisectedAssertion(bytes32[] machineHashes, uint32 inboxInsnIndex, bytes32[] messageAccs, bytes32[] logAccs, uint64[] outCounts, uint64[] gases, uint64 totalSteps, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterBisectedAssertion(opts *bind.FilterOpts) (*ExecutionChallengeBisectedAssertionIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "BisectedAssertion")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeBisectedAssertionIterator{contract: _ExecutionChallenge.contract, event: "BisectedAssertion", logs: logs, sub: sub}, nil
}

// WatchBisectedAssertion is a free log subscription operation binding the contract event 0xfdfc7d7356ac103488916cfffd6e537843dadc44dc71695a7ed504d9f6685287.
//
// Solidity: event BisectedAssertion(bytes32[] machineHashes, uint32 inboxInsnIndex, bytes32[] messageAccs, bytes32[] logAccs, uint64[] outCounts, uint64[] gases, uint64 totalSteps, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchBisectedAssertion(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeBisectedAssertion) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "BisectedAssertion")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeBisectedAssertion)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "BisectedAssertion", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBisectedAssertion is a log parse operation binding the contract event 0xfdfc7d7356ac103488916cfffd6e537843dadc44dc71695a7ed504d9f6685287.
//
// Solidity: event BisectedAssertion(bytes32[] machineHashes, uint32 inboxInsnIndex, bytes32[] messageAccs, bytes32[] logAccs, uint64[] outCounts, uint64[] gases, uint64 totalSteps, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseBisectedAssertion(log types.Log) (*ExecutionChallengeBisectedAssertion, error) {
	event := new(ExecutionChallengeBisectedAssertion)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "BisectedAssertion", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeChallengerTimedOutIterator is returned from FilterChallengerTimedOut and is used to iterate over the raw logs and unpacked data for ChallengerTimedOut events raised by the ExecutionChallenge contract.
type ExecutionChallengeChallengerTimedOutIterator struct {
	Event *ExecutionChallengeChallengerTimedOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeChallengerTimedOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeChallengerTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeChallengerTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeChallengerTimedOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeChallengerTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeChallengerTimedOut represents a ChallengerTimedOut event raised by the ExecutionChallenge contract.
type ExecutionChallengeChallengerTimedOut struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterChallengerTimedOut is a free log retrieval operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterChallengerTimedOut(opts *bind.FilterOpts) (*ExecutionChallengeChallengerTimedOutIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "ChallengerTimedOut")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeChallengerTimedOutIterator{contract: _ExecutionChallenge.contract, event: "ChallengerTimedOut", logs: logs, sub: sub}, nil
}

// WatchChallengerTimedOut is a free log subscription operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchChallengerTimedOut(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeChallengerTimedOut) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "ChallengerTimedOut")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeChallengerTimedOut)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengerTimedOut is a log parse operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseChallengerTimedOut(log types.Log) (*ExecutionChallengeChallengerTimedOut, error) {
	event := new(ExecutionChallengeChallengerTimedOut)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeContinuedIterator is returned from FilterContinued and is used to iterate over the raw logs and unpacked data for Continued events raised by the ExecutionChallenge contract.
type ExecutionChallengeContinuedIterator struct {
	Event *ExecutionChallengeContinued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeContinuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeContinued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeContinued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeContinuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeContinuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeContinued represents a Continued event raised by the ExecutionChallenge contract.
type ExecutionChallengeContinued struct {
	SegmentIndex  *big.Int
	DeadlineTicks *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterContinued is a free log retrieval operation binding the contract event 0x1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e4.
//
// Solidity: event Continued(uint256 segmentIndex, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterContinued(opts *bind.FilterOpts) (*ExecutionChallengeContinuedIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "Continued")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeContinuedIterator{contract: _ExecutionChallenge.contract, event: "Continued", logs: logs, sub: sub}, nil
}

// WatchContinued is a free log subscription operation binding the contract event 0x1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e4.
//
// Solidity: event Continued(uint256 segmentIndex, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchContinued(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeContinued) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "Continued")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeContinued)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "Continued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContinued is a log parse operation binding the contract event 0x1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e4.
//
// Solidity: event Continued(uint256 segmentIndex, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseContinued(log types.Log) (*ExecutionChallengeContinued, error) {
	event := new(ExecutionChallengeContinued)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "Continued", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeInitiatedChallengeIterator is returned from FilterInitiatedChallenge and is used to iterate over the raw logs and unpacked data for InitiatedChallenge events raised by the ExecutionChallenge contract.
type ExecutionChallengeInitiatedChallengeIterator struct {
	Event *ExecutionChallengeInitiatedChallenge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeInitiatedChallengeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeInitiatedChallenge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeInitiatedChallenge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeInitiatedChallengeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeInitiatedChallengeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeInitiatedChallenge represents a InitiatedChallenge event raised by the ExecutionChallenge contract.
type ExecutionChallengeInitiatedChallenge struct {
	DeadlineTicks *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterInitiatedChallenge is a free log retrieval operation binding the contract event 0xe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc67.
//
// Solidity: event InitiatedChallenge(uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterInitiatedChallenge(opts *bind.FilterOpts) (*ExecutionChallengeInitiatedChallengeIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "InitiatedChallenge")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeInitiatedChallengeIterator{contract: _ExecutionChallenge.contract, event: "InitiatedChallenge", logs: logs, sub: sub}, nil
}

// WatchInitiatedChallenge is a free log subscription operation binding the contract event 0xe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc67.
//
// Solidity: event InitiatedChallenge(uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchInitiatedChallenge(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeInitiatedChallenge) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "InitiatedChallenge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeInitiatedChallenge)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiatedChallenge is a log parse operation binding the contract event 0xe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc67.
//
// Solidity: event InitiatedChallenge(uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseInitiatedChallenge(log types.Log) (*ExecutionChallengeInitiatedChallenge, error) {
	event := new(ExecutionChallengeInitiatedChallenge)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeOneStepProofCompletedIterator is returned from FilterOneStepProofCompleted and is used to iterate over the raw logs and unpacked data for OneStepProofCompleted events raised by the ExecutionChallenge contract.
type ExecutionChallengeOneStepProofCompletedIterator struct {
	Event *ExecutionChallengeOneStepProofCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeOneStepProofCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeOneStepProofCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeOneStepProofCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeOneStepProofCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeOneStepProofCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeOneStepProofCompleted represents a OneStepProofCompleted event raised by the ExecutionChallenge contract.
type ExecutionChallengeOneStepProofCompleted struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOneStepProofCompleted is a free log retrieval operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterOneStepProofCompleted(opts *bind.FilterOpts) (*ExecutionChallengeOneStepProofCompletedIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "OneStepProofCompleted")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeOneStepProofCompletedIterator{contract: _ExecutionChallenge.contract, event: "OneStepProofCompleted", logs: logs, sub: sub}, nil
}

// WatchOneStepProofCompleted is a free log subscription operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchOneStepProofCompleted(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeOneStepProofCompleted) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "OneStepProofCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeOneStepProofCompleted)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOneStepProofCompleted is a log parse operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseOneStepProofCompleted(log types.Log) (*ExecutionChallengeOneStepProofCompleted, error) {
	event := new(ExecutionChallengeOneStepProofCompleted)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// KeccakABI is the input ABI used to generate the binding from.
const KeccakABI = "[]"

// KeccakBin is the compiled bytecode used for deploying new contracts.
var KeccakBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820d4a233b89a55dcee062a03a128e7285192f6cd8295098fdb2c6bb2b439057d1164736f6c634300050f0032"

// DeployKeccak deploys a new Ethereum contract, binding an instance of Keccak to it.
func DeployKeccak(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Keccak, error) {
	parsed, err := abi.JSON(strings.NewReader(KeccakABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(KeccakBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Keccak{KeccakCaller: KeccakCaller{contract: contract}, KeccakTransactor: KeccakTransactor{contract: contract}, KeccakFilterer: KeccakFilterer{contract: contract}}, nil
}

// Keccak is an auto generated Go binding around an Ethereum contract.
type Keccak struct {
	KeccakCaller     // Read-only binding to the contract
	KeccakTransactor // Write-only binding to the contract
	KeccakFilterer   // Log filterer for contract events
}

// KeccakCaller is an auto generated read-only Go binding around an Ethereum contract.
type KeccakCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeccakTransactor is an auto generated write-only Go binding around an Ethereum contract.
type KeccakTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeccakFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type KeccakFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeccakSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type KeccakSession struct {
	Contract     *Keccak           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KeccakCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type KeccakCallerSession struct {
	Contract *KeccakCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// KeccakTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type KeccakTransactorSession struct {
	Contract     *KeccakTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KeccakRaw is an auto generated low-level Go binding around an Ethereum contract.
type KeccakRaw struct {
	Contract *Keccak // Generic contract binding to access the raw methods on
}

// KeccakCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type KeccakCallerRaw struct {
	Contract *KeccakCaller // Generic read-only contract binding to access the raw methods on
}

// KeccakTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type KeccakTransactorRaw struct {
	Contract *KeccakTransactor // Generic write-only contract binding to access the raw methods on
}

// NewKeccak creates a new instance of Keccak, bound to a specific deployed contract.
func NewKeccak(address common.Address, backend bind.ContractBackend) (*Keccak, error) {
	contract, err := bindKeccak(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Keccak{KeccakCaller: KeccakCaller{contract: contract}, KeccakTransactor: KeccakTransactor{contract: contract}, KeccakFilterer: KeccakFilterer{contract: contract}}, nil
}

// NewKeccakCaller creates a new read-only instance of Keccak, bound to a specific deployed contract.
func NewKeccakCaller(address common.Address, caller bind.ContractCaller) (*KeccakCaller, error) {
	contract, err := bindKeccak(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &KeccakCaller{contract: contract}, nil
}

// NewKeccakTransactor creates a new write-only instance of Keccak, bound to a specific deployed contract.
func NewKeccakTransactor(address common.Address, transactor bind.ContractTransactor) (*KeccakTransactor, error) {
	contract, err := bindKeccak(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &KeccakTransactor{contract: contract}, nil
}

// NewKeccakFilterer creates a new log filterer instance of Keccak, bound to a specific deployed contract.
func NewKeccakFilterer(address common.Address, filterer bind.ContractFilterer) (*KeccakFilterer, error) {
	contract, err := bindKeccak(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &KeccakFilterer{contract: contract}, nil
}

// bindKeccak binds a generic wrapper to an already deployed contract.
func bindKeccak(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(KeccakABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Keccak *KeccakRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Keccak.Contract.KeccakCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Keccak *KeccakRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Keccak.Contract.KeccakTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Keccak *KeccakRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Keccak.Contract.KeccakTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Keccak *KeccakCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Keccak.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Keccak *KeccakTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Keccak.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Keccak *KeccakTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Keccak.Contract.contract.Transact(opts, method, params...)
}

// OneStepProofABI is the input ABI used to generate the binding from.
const OneStepProofABI = "[]"

// OneStepProofBin is the compiled bytecode used for deploying new contracts.
var OneStepProofBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723158203efaf10772e81ec026df4441ebed63f10bdf463ab1ffad5eefd8ccc06c9cc61a64736f6c634300050f0032"

// DeployOneStepProof deploys a new Ethereum contract, binding an instance of OneStepProof to it.
func DeployOneStepProof(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// OneStepProof is an auto generated Go binding around an Ethereum contract.
type OneStepProof struct {
	OneStepProofCaller     // Read-only binding to the contract
	OneStepProofTransactor // Write-only binding to the contract
	OneStepProofFilterer   // Log filterer for contract events
}

// OneStepProofCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofSession struct {
	Contract     *OneStepProof     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProofCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofCallerSession struct {
	Contract *OneStepProofCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// OneStepProofTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTransactorSession struct {
	Contract     *OneStepProofTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// OneStepProofRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofRaw struct {
	Contract *OneStepProof // Generic contract binding to access the raw methods on
}

// OneStepProofCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofCallerRaw struct {
	Contract *OneStepProofCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTransactorRaw struct {
	Contract *OneStepProofTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof creates a new instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProof(address common.Address, backend bind.ContractBackend) (*OneStepProof, error) {
	contract, err := bindOneStepProof(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// NewOneStepProofCaller creates a new read-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofCaller, error) {
	contract, err := bindOneStepProof(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofCaller{contract: contract}, nil
}

// NewOneStepProofTransactor creates a new write-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTransactor, error) {
	contract, err := bindOneStepProof(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTransactor{contract: contract}, nil
}

// NewOneStepProofFilterer creates a new log filterer instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofFilterer, error) {
	contract, err := bindOneStepProof(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofFilterer{contract: contract}, nil
}

// bindOneStepProof binds a generic wrapper to an already deployed contract.
func bindOneStepProof(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.OneStepProofCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transact(opts, method, params...)
}
