// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgecontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ExecutionChallengeABI is the input ABI used to generate the binding from.
const ExecutionChallengeABI = "[{\"anonymous\":false,\"inputs\":[],\"name\":\"AsserterTimedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"machineHashes\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"inboxAccs\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"messageAccs\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"logAccs\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"outCounts\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"gases\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"totalSteps\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadlineTicks\",\"type\":\"uint256\"}],\"name\":\"BisectedAssertion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ChallengerTimedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"segmentIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadlineTicks\",\"type\":\"uint256\"}],\"name\":\"Continued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadlineTicks\",\"type\":\"uint256\"}],\"name\":\"InitiatedChallenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OneStepProofCompleted\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_machineHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_inboxAccs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_messageAccs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_logAccs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_outCounts\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_gases\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64\",\"name\":\"_totalSteps\",\"type\":\"uint64\"}],\"name\":\"bisectAssertion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segmentToChallenge\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_bisectionRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_bisectionHash\",\"type\":\"bytes32\"}],\"name\":\"chooseSegment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rollupAddress\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_asserter\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_challenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_challengePeriodTicks\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_challengeState\",\"type\":\"bytes32\"}],\"name\":\"initializeBisection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_firstInbox\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_firstMessage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_firstLog\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"oneStepProof\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_firstInbox\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_firstMessage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_firstLog\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"_kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inboxSeqNum\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_msgData\",\"type\":\"bytes\"}],\"name\":\"oneStepProofInbox\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"timeoutChallenge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ExecutionChallengeFuncSigs maps the 4-byte function signature to its string representation.
var ExecutionChallengeFuncSigs = map[string]string{
	"efaa0772": "bisectAssertion(bytes32[],bytes32[],bytes32[],bytes32[],uint64[],uint64[],uint64)",
	"79a9ad85": "chooseSegment(uint256,bytes,bytes32,bytes32)",
	"02ad1e4e": "initializeBisection(address,address,address,uint256,bytes32)",
	"082379bb": "oneStepProof(bytes32,bytes32,bytes32,bytes)",
	"a8a4e532": "oneStepProofInbox(bytes32,bytes32,bytes32,bytes,uint8,uint256,uint256,address,uint256,bytes)",
	"ced5c1bf": "timeoutChallenge()",
}

// ExecutionChallengeBin is the compiled bytecode used for deploying new contracts.
var ExecutionChallengeBin = "0x608060405234801561001057600080fd5b5061670580620000216000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806302ad1e4e14610067578063082379bb146100ab57806379a9ad8514610162578063a8a4e53214610212578063ced5c1bf14610376578063efaa07721461037e575b600080fd5b6100a9600480360360a081101561007d57600080fd5b506001600160a01b038135811691602081013582169160408201351690606081013590608001356106b4565b005b6100a9600480360360808110156100c157600080fd5b81359160208101359160408201359190810190608081016060820135600160201b8111156100ee57600080fd5b82018360208201111561010057600080fd5b803590602001918460018302840111600160201b8311171561012157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506106c9945050505050565b6100a96004803603608081101561017857600080fd5b81359190810190604081016020820135600160201b81111561019957600080fd5b8201836020820111156101ab57600080fd5b803590602001918460018302840111600160201b831117156101cc57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050823593505050602001356108ab565b6100a9600480360361014081101561022957600080fd5b81359160208101359160408201359190810190608081016060820135600160201b81111561025657600080fd5b82018360208201111561026857600080fd5b803590602001918460018302840111600160201b8311171561028957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929560ff85351695602086013595604081013595506001600160a01b0360608201351694506080810135935060c081019060a00135600160201b81111561030257600080fd5b82018360208201111561031457600080fd5b803590602001918460018302840111600160201b8311171561033557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610b6c945050505050565b6100a9610d1d565b6100a9600480360360e081101561039457600080fd5b810190602081018135600160201b8111156103ae57600080fd5b8201836020820111156103c057600080fd5b803590602001918460208302840111600160201b831117156103e157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561043057600080fd5b82018360208201111561044257600080fd5b803590602001918460208302840111600160201b8311171561046357600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156104b257600080fd5b8201836020820111156104c457600080fd5b803590602001918460208302840111600160201b831117156104e557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561053457600080fd5b82018360208201111561054657600080fd5b803590602001918460208302840111600160201b8311171561056757600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156105b657600080fd5b8201836020820111156105c857600080fd5b803590602001918460208302840111600160201b831117156105e957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561063857600080fd5b82018360208201111561064a57600080fd5b803590602001918460208302840111600160201b8311171561066b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160401b03169150610dfd9050565b6106c085858585610fd5565b60065550505050565b60055460ff1660028111156106da57fe5b600114604051806040016040528060098152602001684249535f535441544560b81b815250906107885760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561074d578181015183820152602001610735565b50505050905090810190601f16801561077a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600354610795436110f0565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b815250906108085760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b5060015460408051808201909152600a8152692124a9afa9a2a72222a960b11b6020820152906001600160a01b031633146108845760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b5061088d616452565b610899858585856110fb565b90506108a481611508565b5050505050565b60055460ff1660028111156108bc57fe5b60021460405180604001604052806009815260200168434f4e5f535441544560b81b8152509061092d5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b5060035461093a436110f0565b11156040518060400160405280600c81526020016b434f4e5f444541444c494e4560a01b815250906109ad5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b5060025460408051808201909152600a81526921a7a72fa9a2a72222a960b11b6020820152906001600160a01b03163314610a295760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b5060065482146040518060400160405280600881526020016721a7a72fa82922ab60c11b81525090610a9c5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b50610aac8383838760010161162f565b6040518060400160405280600981526020016821a7a72fa82927a7a360b91b81525090610b1a5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b506006819055610b28611730565b60035460408051868152602081019290925280517f1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e49281900390910190a150505050565b60055460ff166002811115610b7d57fe5b600114604051806040016040528060098152602001684249535f535441544560b81b81525090610bee5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b50600354610bfb436110f0565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b81525090610c6e5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b5060015460408051808201909152600a8152692124a9afa9a2a72222a960b11b6020820152906001600160a01b03163314610cea5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b50610cf3616452565b610d058b8b8b8b8b8b8b8b8b8b61174c565b9050610d1081611508565b5050505050505050505050565b600354610d29436110f0565b11610d7b576040805162461bcd60e51b815260206004820152601760248201527f446561646c696e65206861736e27742065787069726564000000000000000000604482015290519081900360640190fd5b600160055460ff166002811115610d8e57fe5b1415610dca576040517f2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f090600090a1610dc56117a6565b610dfb565b6040517f4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a90600090a1610dfb61181a565b565b60055460ff166002811115610e0e57fe5b600114604051806040016040528060098152602001684249535f535441544560b81b81525090610e7f5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b50600354610e8c436110f0565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b81525090610eff5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b5060015460408051808201909152600a8152692124a9afa9a2a72222a960b11b6020820152906001600160a01b03163314610f7b5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b50610f846164de565b6040518060e00160405280898152602001888152602001878152602001868152602001858152602001848152602001836001600160401b03168152509050610fcb81611872565b5050505050505050565b600060055460ff166002811115610fe857fe5b146040518060400160405280600f81526020016e4348414c5f494e49545f535441544560881b8152509061105d5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b50600080546001600160a01b038681166001600160a01b03199283161790925560018054868416908316178155600280549386169390921692909217905560048290556005805460ff191690911790556110b5611958565b60035460408051918252517fe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc679181900360200190a150505050565b6103e881025b919050565b611103616452565b60008260008151811061111257fe5b602001015160f81c60f81b60f81c905060008360018151811061113157fe5b602001015160f81c60f81b60f81c905060006002905060608360040160ff1660405190808252806020026020018201604052801561118957816020015b611176616524565b81526020019060019003908161116e5790505b50905060608360040160ff166040519080825280602002602001820160405280156111ce57816020015b6111bb616524565b8152602001906001900390816111b35790505b50905060005b8560ff1681101561120c576111e9888561196a565b84518590849081106111f757fe5b602090810291909101015293506001016111d4565b5060005b8460ff1681101561124857611225888561196a565b835184908490811061123357fe5b60209081029190910101529350600101611210565b50611251616558565b61125b8885611afc565b8092508195505050600088858151811061127157fe5b602001015160f81c60f81b60f81c9050600089866001018151811061129257fe5b01602001516002969096019560f81c90506112ab616452565b604051806101c001604052808581526020016112c686611b9c565b81526020018f81526020018e81526020018d815260200160006001600160401b031681526020016112f5611c05565b81526020016000801b815260200160405180604001604052808c60ff16815260200189815250815260200160405180604001604052808b60ff1681526020018881525081526020018460ff16600114151581526020018360ff1681526020018c81526020018881525090508260ff166000148061137557508260ff166001145b6113c6576040805162461bcd60e51b815260206004820152601c60248201527f50726f6f662068616420626164206f7065726174696f6e207479706500000000604482015290519081900360640190fd5b6113ce616524565b60ff84166113eb578151516113e4908490611c4c565b9050611465565b6000875111611436576040805162461bcd60e51b81526020600482015260126024820152716e6f20696d6d6564696174652076616c756560701b604482015290519081900360640190fd5b611462838360000151600001518960018e0360ff168151811061145557fe5b6020026020010151611cae565b90505b61146e81611d32565b82515260005b848b0360ff168110156114b3576114ab88828151811061149057fe5b60200260200101518460000151611e5290919063ffffffff16565b600101611474565b5060005b8960ff168110156114f4576114ec8782815181106114d157fe5b60200260200101518460000151611e6c90919063ffffffff16565b6001016114b7565b50909e9d5050505050505050505050505050565b60408101516060820151608083015161152084611e86565b6115286165b6565b60405180610180016040528060016001600160401b031681526020018660a001516001600160401b031681526020016115648760000151612196565b81526020016115768760200151612196565b81526020018581526020018660400151815260200184815260200186606001518152602001866060015185146115ad5760016115b0565b60005b60ff166001600160401b0316815260200183815260200186608001518152602001866080015184146115e35760016115e6565b60005b60ff16905290506115fe6115f98261225a565b61236a565b6040517f117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f590600090a16108a461181a565b600080838160205b88518111611722578089015193506020818a51036020018161165557fe5b0491505b60008211801561166c5750600286066001145b801561167a57508160020a86115b1561168d57600286046001019550611659565b600286066116d85783836040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209250600286816116d057fe5b04955061171a565b828460405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092506002868161171357fe5b0460010195505b602001611637565b505090941495945050505050565b600580546001919060ff191682805b0217905550610dfb611958565b611754616452565b61175c616452565b6117688c8c8c8c6110fb565b905061177f888689898888805190602001206123e0565b60e082015261179288888888888861244e565b60c0909101529a9950505050505050505050565b600080546002546001546040805163396f51cf60e01b81526001600160a01b039384166004820152918316602483015251919092169263396f51cf926044808201939182900301818387803b1580156117fe57600080fd5b505af1158015611812573d6000803e3d6000fd5b503392505050ff5b600080546001546002546040805163396f51cf60e01b81526001600160a01b039384166004820152918316602483015251919092169263396f51cf926044808201939182900301818387803b1580156117fe57600080fd5b8051516000190161188282612576565b6060816040519080825280602002602001820160405280156118ae578160200160208202803883390190505b5090506118d4836118cc8560c001516001600160401b03168561298e565b8460006129ac565b816000815181106118e157fe5b602090810291909101015260015b8281101561193857611919846119128660c001516001600160401b031686612b3d565b85846129ac565b82828151811061192557fe5b60209081029190910101526001016118ef565b5061194281612b50565b61194a612b5f565b61195383612b73565b505050565b600454611964436110f0565b01600355565b6000611974616524565b835183106119ba576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b6000806119c78686612d89565b915091506119d3612db0565b60ff168160ff161415611a075760006119ec8784612db5565b9093509050826119fb82612e29565b94509450505050611af5565b611a0f612edb565b60ff168160ff161415611a3157611a268683612ee0565b935093505050611af5565b611a39612f82565b60ff168160ff161415611a5057611a268683612f87565b611a5861301b565b60ff168160ff1610158015611a795750611a70613020565b60ff168160ff16105b15611ab5576000611a8861301b565b820390506060611a99828986613025565b909450905083611aa8826130be565b9550955050505050611af5565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b6000611b06616558565b611b0e616558565b600060e0820181905280611b228787612db5565b9096509150611b318787612f87565b60208501529550611b428787612f87565b60408501529550611b53878761196a565b60608501529550611b64878761196a565b60808501529550611b758787612db5565b60a08501529550611b868787612db5565b92845260c0840192909252509590945092505050565b611ba4616558565b60405180610100016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e001518152509050919050565b611c0d616524565b60408051600080825260208201909252611c4791611c41565b611c2e616524565b815260200190600190039081611c265790505b506130be565b905090565b611c54616524565b6040805160608101825260ff851681526020808201859052825160008082529181018452611ca793830191611c9f565b611c8c616524565b815260200190600190039081611c845790505b5090526131d0565b9392505050565b611cb6616524565b604080516001808252818301909252606091816020015b611cd5616524565b815260200190600190039081611ccd5790505090508281600081518110611cf857fe5b6020026020010181905250611d2960405180606001604052808760ff168152602001868152602001838152506131d0565b95945050505050565b6000611d3c612db0565b60ff16826060015160ff161415611d5f578151611d5890613237565b90506110f6565b611d67612edb565b60ff16826060015160ff161415611d8557611d58826020015161325b565b611d8d612f82565b60ff16826060015160ff161415611daf5781516080830151611d589190613358565b611db761301b565b60ff16826060015160ff161415611df057611dd0616524565b611ddd83604001516133a9565b9050611de881611d32565b9150506110f6565b611df861350b565b60ff16826060015160ff161415611e11575080516110f6565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b611e60826020015182613510565b82602001819052505050565b611e7a826040015182613510565b82604001819052505050565b60008060006143e2611e9f85610160015160ff1661358e565b6001600160401b03821660a0808b0182905260208b01518101805183900390528a51015194985092965090945092501115611ef457602085015160001960a090910152611eeb85613d49565b50505050612193565b61010085015151841115611f7e57611f12611f0d611c05565b611d32565b611f23866020015160200151611d32565b14611f75576040805162461bcd60e51b815260206004820152601d60248201527f737461636b206974656d206d697373696e672066726f6d2070726f6f66000000604482015290519081900360640190fd5b611eeb85613d49565b61012085015151831115611ffa57611f97611f0d611c05565b611fa8866020015160400151611d32565b14611f75576040805162461bcd60e51b815260206004820181905260248201527f617578737461636b206974656d206d697373696e672066726f6d2070726f6f66604482015290519081900360640190fd5b600084118061200c5750846101400151155b801561201d57506101008501515184145b8061204557508461014001518015612033575083155b80156120455750610100850151516001145b61208d576040805162461bcd60e51b8152602060048201526014602482015273746f6f206d616e7920737461636b206974656d7360601b604482015290519081900360640190fd5b6101208501515183146120e7576040805162461bcd60e51b815260206004820152601760248201527f746f6f206d616e7920617578737461636b206974656d73000000000000000000604482015290519081900360640190fd5b6120f4858263ffffffff16565b60005b610100860151518110156121405761213886610100015160200151828151811061211d57fe5b60200260200101518760200151611e5290919063ffffffff16565b6001016120f7565b5060005b6101208601515181101561218d5761218586610120015160200151828151811061216a57fe5b60200260200101518760200151611e6c90919063ffffffff16565b600101612144565b50505050505b50565b600060028260e0015114156121ad575060006110f6565b60018260e0015114156121c2575060016110f6565b815160208301516121d290611d32565b6121df8460400151611d32565b6121ec8560600151611d32565b6121f98660800151611d32565b8660a001518760c00151604051602001808881526020018781526020018681526020018581526020018481526020018381526020018281526020019750505050505050506040516020818303038152906040528051906020012090506110f6565b6000816000015182602001518360400151846060015185608001518660a001518760c001518860e001518961010001518a61012001518b61014001518c6101600151604051602001808d6001600160401b03166001600160401b031660c01b81526008018c6001600160401b03166001600160401b031660c01b81526008018b81526020018a8152602001898152602001888152602001878152602001868152602001856001600160401b03166001600160401b031660c01b8152600801848152602001838152602001826001600160401b03166001600160401b031660c01b81526008019c50505050505050505050505050604051602081830303815290604052805190602001209050919050565b6006548114604051806040016040528060088152602001672124a9afa82922ab60c11b815250906123dc5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b5050565b6040805160f89790971b6001600160f81b03191660208089019190915260609690961b6bffffffffffffffffffffffff191660218801526035870194909452605586019290925260758501526095808501919091528151808503909101815260b59093019052815191012090565b612456616524565b60408051600680825260e08201909252606091816020015b612476616524565b81526020019060019003908161246e5790505090506124978860ff16612e29565b816000815181106124a457fe5b60200260200101819052506124b887612e29565b816001815181106124c557fe5b60200260200101819052506124d986612e29565b816002815181106124e657fe5b6020026020010181905250612503856001600160a01b0316612e29565b8160038151811061251057fe5b602002602001018190525061252484612e29565b8160048151811061253157fe5b60200260200101819052506125498360008551613db2565b8160058151811061255657fe5b602002602001018190525061256a816130be565b98975050505050505050565b8051516020808301515160408051808201909152600a8152692124a9afa4a7282622a760b11b92810192909252600019830192146125f55760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b50604080830151518151808301909252600a8252692124a9afa4a7282622a760b11b6020830152600183011461266c5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b5081606001515181600101146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b815250906126e75760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b508160a001515181146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b8152509061275f5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b5081608001515181600202146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b815250906127da5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b5060008080805b8481101561284c578560a0015181815181106127f957fe5b6020026020010151840193508560800151818151811061281557fe5b60200260200101518301925085608001518186018151811061283357fe5b60200260200101518201915080806001019150506127e1565b506108a46115f96040518061018001604052808860c001516001600160401b03168152602001866001600160401b03168152602001886000015160008151811061289257fe5b60200260200101518152602001886000015188815181106128af57fe5b6020026020010151815260200188602001516000815181106128cd57fe5b60200260200101518152602001886020015188815181106128ea57fe5b60200260200101518152602001886040015160008151811061290857fe5b602002602001015181526020018860400151888151811061292557fe5b60200260200101518152602001856001600160401b03168152602001886060015160008151811061295257fe5b602002602001015181526020018860600151888151811061296f57fe5b60200260200101518152602001846001600160401b031681525061225a565b600081838161299957fe5b068284816129a357fe5b04019392505050565b6000611d296040518061018001604052808663ffffffff166001600160401b031681526020018760a0015185815181106129e257fe5b60200260200101516001600160401b0316815260200187600001518581518110612a0857fe5b6020026020010151815260200187600001518560010181518110612a2857fe5b6020026020010151815260200187602001518581518110612a4557fe5b6020026020010151815260200187602001518560010181518110612a6557fe5b6020026020010151815260200187604001518581518110612a8257fe5b6020026020010151815260200187604001518560010181518110612aa257fe5b6020026020010151815260200187608001518581518110612abf57fe5b60200260200101516001600160401b0316815260200187606001518581518110612ae557fe5b6020026020010151815260200187606001518560010181518110612b0557fe5b60200260200101518152602001876080015185870181518110612b2457fe5b60200260200101516001600160401b031681525061225a565b6000818381612b4857fe5b049392505050565b612b5981613f36565b60065550565b600580546002919060ff191660018361173f565b7f6b9d7e7b7a60864e1b42794359b85e4b2477cda53bc2fb9bc2f8a71c1caf1c69816000015182602001518360400151846060015185608001518660a001518760c0015160035460405180806020018060200180602001806020018060200180602001896001600160401b03166001600160401b0316815260200188815260200187810387528f818151815260200191508051906020019060200280838360005b83811015612c2c578181015183820152602001612c14565b5050505090500187810386528e818151815260200191508051906020019060200280838360005b83811015612c6b578181015183820152602001612c53565b5050505090500187810385528d818151815260200191508051906020019060200280838360005b83811015612caa578181015183820152602001612c92565b5050505090500187810384528c818151815260200191508051906020019060200280838360005b83811015612ce9578181015183820152602001612cd1565b5050505090500187810383528b818151815260200191508051906020019060200280838360005b83811015612d28578181015183820152602001612d10565b5050505090500187810382528a818151815260200191508051906020019060200280838360005b83811015612d67578181015183820152602001612d4f565b505050509050019e50505050505050505050505050505060405180910390a150565b60008082600101848481518110612d9c57fe5b016020015190925060f81c90509250929050565b600090565b60008082845110158015612dcd575060208385510310155b612e0a576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b60208301612e1e858563ffffffff61407416565b915091509250929050565b612e31616524565b6040805160a0810182528381528151606081018352600080825260208281018290528451828152808201865293949085019390830191612e87565b612e74616524565b815260200190600190039081612e6c5790505b50905281526040805160008082526020828101909352919092019190612ec3565b612eb0616524565b815260200190600190039081612ea85790505b50815260006020820152600160409091015292915050565b600190565b6000612eea616524565b82600080612ef6616524565b6000612f028986612d89565b9095509350612f118986612d89565b9095509250600160ff85161415612f3257612f2c898661196a565b90955091505b612f3c89866140cd565b9095509050600160ff85161415612f675784612f59848385611cae565b965096505050505050611af5565b84612f728483611c4c565b9650965050505050509250929050565b600290565b6000612f91616524565b82845110158015612fa6575060408385510310155b612fe2576040805162461bcd60e51b81526020600482015260086024820152671d1bc81cda1bdc9d60c21b604482015290519081900360640190fd5b600080612fef86866140cd565b9094509150612ffe8685612db5565b90945090508361300e83836140e4565b9350935050509250929050565b600390565b600c90565b60006060600083905060608660ff1660405190808252806020026020018201604052801561306d57816020015b61305a616524565b8152602001906001900390816130525790505b50905060005b8760ff168160ff1610156130b15761308b878461196a565b8351849060ff851690811061309c57fe5b60209081029190910101529250600101613073565b5090969095509350505050565b6130c6616524565b6130d08251614195565b613121576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b83518110156131585783818151811061313b57fe5b602002602001015160800151820191508080600101915050613126565b506040805160a08101825260008082528251606081018452818152602081810183905284518381528082018652939490850193919290830191906131b2565b61319f616524565b8152602001906001900390816131975790505b50905281526020810194909452600360408501526060909301525090565b6131d8616524565b6040805160a081018252600080825260208083018690528351828152908101845291928301919061321f565b61320c616524565b8152602001906001900390816132045790505b50815260016020820181905260409091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b600060028260400151511061326c57fe5b6040820151516132d15761327e612edb565b8251602080850151604080516001600160f81b031960f896871b8116828601529490951b9093166021850152602280850191909152825180850390910181526042909301909152815191012090506110f6565b6132d9612edb565b82600001516132ff84604001516000815181106132f257fe5b6020026020010151611d32565b8460200151604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b600061336261301b565b8383604051602001808460ff1660ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b6133b1616524565b6008825111156133ff576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b6060825160405190808252806020026020018201604052801561342c578160200160208202803883390190505b508051909150600160005b8281101561348f5761344e8682815181106132f257fe5b84828151811061345a57fe5b60200260200101818152505085818151811061347257fe5b602002602001015160800151820191508080600101915050613437565b506000835184604051602001808360ff1660ff1660f81b8152600101828051906020019060200280838360005b838110156134d45781810151838201526020016134bc565b505050509050019250505060405160208183030381529060405280519060200120905061350181836140e4565b9695505050505050565b606490565b613518616524565b6040805160028082526060828101909352816020015b613536616524565b81526020019060019003908161352e579050509050828160008151811061355957fe5b6020026020010181905250838160018151811061357257fe5b6020026020010181905250613586816133a9565b949350505050565b600080806143e260018514156135b3575060029250600091506003905061419c613d42565b60028514156135d1575060029250600091506003905061419c613d42565b60038514156135ef575060029250600091506003905061419c613d42565b600485141561360d5750600292506000915060049050614402613d42565b600585141561362b5750600292506000915060079050614402613d42565b60068514156136495750600292506000915060049050614402613d42565b60078514156136675750600292506000915060079050614402613d42565b600885141561368557506003925060009150600490506144d4613d42565b60098514156136a357506003925060009150600490506144d4613d42565b600a8514156136c1575060029250600091506019905061419c613d42565b600b8514156136df575060029250600091506007905061419c613d42565b60108514156136fc5750600292506000915082905061419c613d42565b60118514156137195750600292506000915082905061419c613d42565b60128514156137365750600292506000915082905061419c613d42565b60138514156137535750600292506000915082905061419c613d42565b6014851415613770575060029250600091508290506145c3613d42565b601585141561378d57506001925060009150829050614623613d42565b60168514156137aa5750600292506000915082905061419c613d42565b60178514156137c75750600292506000915082905061419c613d42565b60188514156137e45750600292506000915082905061419c613d42565b601985141561380157506001925060009150829050614694613d42565b601a85141561381f575060029250600091506004905061419c613d42565b601b85141561383d575060029250600091506004905061419c613d42565b601c85141561385b575060029250600091506004905061419c613d42565b601d851415613879575060029250600091506004905061419c613d42565b602085141561389757506001925060009150600790506146d8613d42565b60218514156138b557506001925060009150600390506146ff613d42565b60228514156138d3575060029250600091506008905061419c613d42565b60238514156138f2575060019250600091506102589050614723613d42565b603085141561390f57506001925060009150829050614906613d42565b603185141561392c57506000925082915060019050614914613d42565b603285141561394957506000925082915060019050614932613d42565b60338514156139675750600192506000915060029050614950613d42565b6034851415613985575060019250600091506004905061496a613d42565b60358514156139a357506002925060009150600490506149ab613d42565b60368514156139c057506000925082915060029050614a1f613d42565b60378514156139dd57506000925082915060019050614a5d613d42565b60388514156139fa57506001925060009150829050614a81613d42565b6039851415613a1757506000925060019150819050614aa4613d42565b603a851415613a3457506000925082915060029050614ab5613d42565b603b851415613a5157506000925082915060019050612193613d42565b603c851415613a6e57506000925082915060019050614ae3613d42565b603d851415613a8b57506001925060009150829050614af9613d42565b6040851415613aa857506001925060009150829050614b3d613d42565b6041851415613ac65750600292506000915060019050614b82613d42565b6042851415613ae45750600392506000915060019050614bf5613d42565b6043851415613b025750600292506000915060019050614c96613d42565b6044851415613b205750600392506000915060019050614cdd613d42565b6050851415613b3d57506002925060009150829050614d52613d42565b6051851415613b5b5750600392506000915060289050614df8613d42565b6052851415613b795750600192506000915060029050614eaf613d42565b6053851415613b9657506001925082915060039050614ef4613d42565b6054851415613bb45750600292506001915060299050614f7d613d42565b6060851415613bd157506000925082915060649050612193613d42565b6061851415613bef5750600192506000915060649050615046613d42565b6070851415613c0d575060019250600091506064905061508d613d42565b6072851415613c2a57506000925082915060289050615115613d42565b6073851415613c4757506000925082915060059050615195613d42565b6074851415613c64575060009250829150600a905061519e613d42565b6075851415613c81575060019250600091508190506151ab613d42565b6076851415613c9e575060009250829150600190506151e6613d42565b6077851415613cbb575060009250829150601990506151fa613d42565b6078851415613cd95750600292506000915060199050615244613d42565b6079851415613cf757506003925060009150601990506152b6613d42565b607b851415613d14575060009250829150600a9050615341613d42565b6080851415613d3357506004925060009150614e209050615383613d42565b50600092508291508190506151955b9193509193565b60408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051908201209082015160c001511415613da557613da08160200151615514565b612193565b6020015160c08101519052565b613dba616524565b60208204613dc6616524565b613dce611c05565b60408051600280825260608281019093529293509091816020015b613df1616524565b815260200190600190039081613de957905050905060005b83811015613e7257613e2e613e2989602084028a0163ffffffff61407416565b612e29565b82600081518110613e3b57fe5b60200260200101819052508282600181518110613e5457fe5b6020026020010181905250613e68826133a9565b9250600101613e09565b506020850615613ee8576000613e9488601f198989010163ffffffff61407416565b9050602086066020036008021b613eaa81612e29565b82600081518110613eb757fe5b60200260200101819052508282600181518110613ed057fe5b6020026020010181905250613ee4826133a9565b9250505b613ef185612e29565b81600081518110613efe57fe5b60200260200101819052508181600181518110613f1757fe5b6020026020010181905250613f2b816133a9565b979650505050505050565b6000815b6001815111156140575760606002825160010181613f5457fe5b04604051908082528060200260200182016040528015613f7e578160200160208202803883390190505b50905060005b815181101561404f57825181600202600101101561401757828160020281518110613fab57fe5b6020026020010151838260020260010181518110613fc557fe5b602002602001015160405160200180838152602001828152602001925050506040516020818303038152906040528051906020012082828151811061400657fe5b602002602001018181525050614047565b82816002028151811061402657fe5b602002602001015182828151811061403a57fe5b6020026020010181815250505b600101613f84565b509050613f3a565b8060008151811061406457fe5b6020026020010151915050919050565b600081602001835110156140c4576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b60008060208301612e1e858563ffffffff61407416565b6140ec616524565b6040805160a0810182528481528151606081018352600080825260208281018290528451828152808201865293949085019390830191614142565b61412f616524565b8152602001906001900390816141275790505b5090528152604080516000808252602082810190935291909201919061417e565b61416b616524565b8152602001906001900390816141635790505b508152600260208201526040019290925250919050565b6008101590565b6141a4616524565b6141b282610100015161551e565b90506141bc616524565b6141ca83610100015161551e565b90506141d582615560565b15806141e757506141e581615560565b155b156141fc576141f58361556b565b5050612193565b8151815161016085015160009060ff166001141561421d57508181016143e4565b61016086015160ff166002141561423757508181026143e4565b61016086015160ff166003141561425157508082036143e4565b61016086015160ff16600a141561426b575080820a6143e4565b61016086015160ff16600b1415614285575080820b6143e4565b61016086015160ff166010141561429f57508082106143e4565b61016086015160ff16601114156142b957508082116143e4565b61016086015160ff16601214156142d357508082126143e4565b61016086015160ff16601314156142ed57508082136143e4565b61016086015160ff166016141561430757508181166143e4565b61016086015160ff166017141561432157508181176143e4565b61016086015160ff166018141561433b57508181186143e4565b61016086015160ff16601a1415614355575080821a6143e4565b61016086015160ff16601b141561436f575080821b6143e4565b61016086015160ff16601c1415614389575080821c6143e4565b61016086015160ff16601d14156143a3575080821d6143e4565b61016086015160ff16602214156143e25750604080516020808201859052818301849052825180830384018152606090920190925280519101206143e4565bfe5b61218d6143f082612e29565b6101008801519063ffffffff61558a16565b61440a616524565b61441882610100015161551e565b9050614422616524565b61443083610100015161551e565b905061443b82615560565b158061444d575061444b81615560565b155b8061445757508051155b15614465576141f58361556b565b8151815161016085015160009060ff166004141561448657508082046143e4565b61016086015160ff16600514156144a057508082056143e4565b61016086015160ff16600614156144ba57508082066143e4565b61016086015160ff16600714156143e257508082076143e4565b6144dc616524565b6144ea82610100015161551e565b90506144f4616524565b61450283610100015161551e565b905061450c616524565b61451a84610100015161551e565b905061452583615560565b1580614537575061453582615560565b155b80614548575061454681615560565b155b8061455257508051155b15614568576145608461556b565b505050612193565b82518251825161016087015160009060ff166008141561458d578183850890506145a5565b61016088015160ff16600914156143e2578183850990505b610fcb6145b182612e29565b6101008a01519063ffffffff61558a16565b6145cb616524565b6145d982610100015161551e565b90506145e3616524565b6145f183610100015161551e565b905061195361461161460283611d32565b61460b85611d32565b146155b4565b6101008501519063ffffffff61558a16565b61462b616524565b61463982610100015161551e565b905061464481615560565b61466c576146676146556000612e29565b6101008401519063ffffffff61558a16565b6123dc565b8051801561468e61467c82612e29565b6101008601519063ffffffff61558a16565b50505050565b61469c616524565b6146aa82610100015161551e565b90506146b581615560565b6146c8576146c28261556b565b50612193565b8051801961468e61467c82612e29565b6146e0616524565b6146ee82610100015161551e565b90506123dc614655613e2983611d32565b614707616524565b61471582610100015161551e565b90506123dc614655826155d6565b61472b616524565b61473982610100015161551e565b90506147448161563b565b15806147565750806040015151600714155b15614764576146c28261556b565b604081015160005b60078110156147a65761479182828151811061478457fe5b6020026020010151615560565b61479e576145608461556b565b60010161476c565b506147af61661a565b60005b601981101561481357604060038216028360048304815181106147d157fe5b602002602001015160000151901c6001600160401b031682600583816147f357fe5b0460058406600502016019811061480657fe5b60200201526001016147b2565b5061481d81615648565b604080516007808252610100820190925291925060609190816020015b614842616524565b81526020019060019003908161483a57905050905060005b600781101561488c5761486d6000612e29565b82828151811061487957fe5b602090810291909101015260010161485a565b5060005b60198110156148e7576040600382160283600583046005840660050201601981106148b757fe5b6020020151901b8260048304815181106148cd57fe5b602090810291909101015180519091179052600101614890565b506108a46148f4826130be565b6101008701519063ffffffff61558a16565b6123dc81610100015161551e565b6020810151608001516101008201516121939163ffffffff61558a16565b6020810151606001516101008201516121939163ffffffff61558a16565b61495e81610100015161551e565b60209091015160600152565b614972616524565b61498082610100015161551e565b905061498b81616239565b614998576146c28261556b565b6149a181611d32565b6020830151525050565b6149b3616524565b6149c182610100015161551e565b90506149cb616524565b6149d983610100015161551e565b90506149e482616239565b15806149f657506149f481615560565b155b15614a04576141f58361556b565b80511561195357614a1482611d32565b602084015152505050565b61010081015151600090158015614a4f5750614a3c611f0d611c05565b614a4d836020015160200151611d32565b145b90506123dc614655826155b4565b80515161219390614a6f906001616246565b6101008301519063ffffffff61558a16565b612193614a9282610100015161551e565b6101208301519063ffffffff61558a16565b612193614a6f82610120015161551e565b61012081015151600090158015614a4f5750614ad2611f0d611c05565b614a4d836020015160400151611d32565b612193614a6f826020015160c001516001616246565b614b01616524565b614b0f82610100015161551e565b9050614b1a81616239565b614b27576146c28261556b565b614b3081611d32565b602083015160c001525050565b614b45616524565b614b5382610100015161551e565b610100830151909150614b6c908263ffffffff61558a16565b6101008201516123dc908263ffffffff61558a16565b614b8a616524565b614b9882610100015161551e565b9050614ba2616524565b614bb083610100015161551e565b610100840151909150614bc9908263ffffffff61558a16565b610100830151614bdf908363ffffffff61558a16565b610100830151611953908263ffffffff61558a16565b614bfd616524565b614c0b82610100015161551e565b9050614c15616524565b614c2383610100015161551e565b9050614c2d616524565b614c3b84610100015161551e565b610100850151909150614c54908263ffffffff61558a16565b610100840151614c6a908363ffffffff61558a16565b610100840151614c80908463ffffffff61558a16565b61010084015161468e908263ffffffff61558a16565b614c9e616524565b614cac82610100015161551e565b9050614cb6616524565b614cc483610100015161551e565b610100840151909150614bdf908363ffffffff61558a16565b614ce5616524565b614cf382610100015161551e565b9050614cfd616524565b614d0b83610100015161551e565b9050614d15616524565b614d2384610100015161551e565b610100850151909150614d3c908463ffffffff61558a16565b610100840151614c80908363ffffffff61558a16565b614d5a616524565b614d6882610100015161551e565b9050614d72616524565b614d8083610100015161551e565b9050614d8b82615560565b1580614d9d5750614d9b8161563b565b155b80614db75750614dac816162f7565b60ff16826000015110155b15614dc5576141f58361556b565b6119538160400151836000015181518110614ddc57fe5b602002602001015184610100015161558a90919063ffffffff16565b614e00616524565b614e0e82610100015161551e565b9050614e18616524565b614e2683610100015161551e565b9050614e30616524565b614e3e84610100015161551e565b9050614e4983615560565b1580614e5b5750614e598261563b565b155b80614e755750614e6a826162f7565b60ff16836000015110155b15614e83576145608461556b565b604082015183518151839183918110614e9857fe5b60200260200101819052506108a46148f4826130be565b614eb7616524565b614ec582610100015161551e565b9050614ed08161563b565b614edd576146c28261556b565b6123dc614655614eec836162f7565b60ff16612e29565b614efc616524565b614f0a82610100015161551e565b9050614f14616524565b614f2283610120015161551e565b9050614f2d82615560565b1580614f3f5750614f3d8161563b565b155b80614f595750614f4e816162f7565b60ff16826000015110155b15614f67576141f58361556b565b610120830151614dc5908263ffffffff61558a16565b614f85616524565b614f9382610100015161551e565b9050614f9d616524565b614fab83610100015161551e565b9050614fb5616524565b614fc384610120015161551e565b9050614fce8161563b565b1580614fe05750614fde83615560565b155b80614ffa5750614fef816162f7565b60ff16836000015110155b15615008576145608461556b565b60408101518351815184918391811061501d57fe5b60200260200101819052506108a4615034826130be565b6101208701519063ffffffff61558a16565b806080015161505c611f0d83610100015161551e565b6040805160208082019490945280820192909252805180830382018152606090920190528051910120608090910152565b615095616524565b6150a382610100015161551e565b9050612710816080015111806150bf57506150bd8161631e565b155b156150cd576146c28261556b565b81606001516150db82611d32565b6040516020018083815260200182815260200192505050604051602081830303815290604052805190602001208260600181815250505050565b60e0810151615161576040805162461bcd60e51b81526020600482015260136024820152726d75737420737570706c79206d65737361676560681b604482015290519081900360640190fd5b60c081015161010082015161517b9163ffffffff61558a16565b61518d81604001518260e0015161641c565b604090910152565b6121938161556b565b6121938160200151616448565b6151b3616524565b6151c182610100015161551e565b90506151cc81615560565b6151d9576146c28261556b565b51602082015160a0015250565b612193614a6f826020015160a00151612e29565b60408051600160f81b602080830191909152600060218301819052602280840191909152835180840390910181526042909201909252805191012061219390614a6f906001616246565b61524c616524565b61525a82610100015161551e565b9050615264616524565b61527283610100015161551e565b905061527d82615560565b158061528f575061528d81616239565b155b1561529d576141f58361556b565b61195361461183600001516152b184611d32565b611c4c565b6152be616524565b6152cc82610100015161551e565b90506152d6616524565b6152e483610100015161551e565b90506152ee616524565b6152fc84610100015161551e565b905061530783615560565b1580615319575061531781616239565b155b15615327576145608461556b565b61468e61467c846000015161533b84611d32565b85611cae565b60408051600080825260208201909252606091615374565b615361616524565b8152602001906001900390816153595790505b5090506123dc614655826130be565b61538b616524565b61539982610100015161551e565b90506153a3616524565b6153b183610100015161551e565b90506153bb616524565b6153c984610100015161551e565b90506153d3616524565b6153e185610100015161551e565b90506153ec84615560565b15806153fe57506153fc83615560565b155b8061540f575061540d82615560565b155b80615420575061541e81615560565b155b1561542e57611eeb8561556b565b8351835183511580159061544457508351600114155b15615473576154686154566000612e29565b6101008901519063ffffffff61558a16565b505050505050612193565b83518351604080516000808252602080830180855285905260ff601b9096019586168385015260608301889052608083018790529251909260019260a080820193601f1981019281900390910190855afa1580156154d5573d6000803e3d6000fd5b5050506020604051035190506155086154f6826001600160a01b0316612e29565b6101008c01519063ffffffff61558a16565b50505050505050505050565b600160e090910152565b615526616524565b61552e616524565b826020015160018460000151038151811061554557fe5b60209081029190910101518351600019018452915050919050565b6060015160ff161590565b61557481613d49565b6101008101516000908190526101209091015152565b80826020015183600001518151811061559f57fe5b60209081029190910101525080516001019052565b6155bc616524565b81156155cc57611d586001612e29565b611d586000612e29565b6155de616524565b816060015160ff16600214156156255760405162461bcd60e51b81526004018080602001828103825260218152602001806166b06021913960400191505060405180910390fd5b615635826060015160ff16612e29565b92915050565b6060015160ff1660031490565b61565061661a565b615658616639565b615660616639565b61566861661a565b615670616657565b60405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060008090505b601881101561622e576080878101516060808a01516040808c01516020808e01518e511890911890921890931889526101208b01516101008c015160e08d015160c08e015160a08f0151181818189089018190526101c08b01516101a08c01516101808d01516101608e01516101408f0151181818189289019283526102608b01516102408c01516102208d01516102008e01516101e08f015118181818918901919091526103008a01516102e08b01516102c08c01516102a08d01516102808e0151181818189288018390526001600160401b0360028202166001603f1b91829004179092188652510485600260200201516002026001600160401b03161785600060200201511884600160200201526001603f1b8560036020020151816158bc57fe5b0485600360200201516002026001600160401b03161785600160200201511884600260200201526001603f1b8560046020020151816158f757fe5b0485600460200201516002026001600160401b0316178560026005811061591a57fe5b602002015118606085015284516001603f1b9086516060808901519390920460029091026001600160401b031617909118608086810191825286518a5118808b5287516020808d018051909218825289516040808f0180519092189091528a518e8801805190911890528a51948e0180519095189094528901805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291880180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292870180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a01805190911890529084525163100000009060208901516001600160401b03641000000000909102169190041761010084015260408701516001603d1b9060408901516001600160401b03600890910216919004176101608401526060870151628000009060608901516001600160401b036502000000000090910216919004176102608401526080870151654000000000009060808901516001600160401b036204000090910216919004176102c084015260a08701516001603f1b900487600560200201516002026001600160401b03161783600260198110615b8457fe5b602002015260c0870151621000008104651000000000009091026001600160401b039081169190911760a085015260e0880151664000000000000081046104009091028216176101a08501526101008801516208000081046520000000000090910282161761020085015261012088015160048082029092166001603e1b909104176103008501526101408801516101408901516001600160401b036001603e1b90910216919004176080840152610160870151670400000000000000906101608901516001600160401b036040909102169190041760e084015261018087015162200000906101808901516001600160401b036508000000000090910216919004176101408401526101a08701516602000000000000906101a08901516001600160401b0361800090910216919004176102408401526101c08701516008906101c08901516001600160401b036001603d1b90910216919004176102a08401526101e0870151641000000000906101e08901516001600160401b03631000000090910216919004176020840152610200808801516102008901516001600160401b0366800000000000009091021691900417610120840152610220870151648000000000906102208901516001600160401b036302000000909102169190041761018084015261024087015165080000000000906102408901516001600160401b036220000090910216919004176101e0840152610260870151610100906102608901516001600160401b03600160381b90910216919004176102e0840152610280870151642000000000906102808901516001600160401b036308000000909102169190041760608401526102a087015165100000000000906102a08901516001600160401b0362100000909102169190041760c08401526102c08701516302000000906102c08901516001600160401b0364800000000090910216919004176101c08401526102e0870151600160381b906102e08901516001600160401b036101009091021691900417610220840152610300870151660400000000000090048760186020020151614000026001600160401b031617836014602002015282600a602002015183600560200201511916836000602002015118876000602002015282600b602002015183600660200201511916836001602002015118876001602002015282600c602002015183600760200201511916836002602002015118876002602002015282600d602002015183600860200201511916836003602002015118876003602002015282600e602002015183600960200201511916836004602002015118876004602002015282600f602002015183600a602002015119168360056020020151188760056020020152826010602002015183600b602002015119168360066020020151188760066020020152826011602002015183600c602002015119168360076020020151188760076020020152826012602002015183600d602002015119168360086020020151188760086020020152826013602002015183600e602002015119168360096020020151188760096020020152826014602002015183600f6020020151191683600a60200201511887600a602002015282601560200201518360106020020151191683600b60200201511887600b602002015282601660200201518360116020020151191683600c60200201511887600c602002015282601760200201518360126020020151191683600d60200201511887600d602002015282601860200201518360136020020151191683600e60200201511887600e602002015282600060200201518360146020020151191683600f60200201511887600fc57fe5b60200201518751188752600101615797565b509495945050505050565b6060015160ff1660011490565b61624e616524565b6040805160a08101825284815281516060810183526000808252602082810182905284518281528082018652939490850193908301916162a4565b616291616524565b8152602001906001900390816162895790505b509052815260408051600080825260208281019093529190920191906162e0565b6162cd616524565b8152602001906001900390816162c55790505b508152606460208201526040019290925250919050565b606081015160009060ff166003141561631657506040810151516110f6565b5060016110f6565b606081015160009060ff16616335575060016110f6565b606082015160ff166001141561634d575060006110f6565b606082015160ff16600214156163a1576040805162461bcd60e51b81526020600482015260146024820152736d75737420686176652066756c6c2076616c756560601b604482015290519081900360640190fd5b606082015160ff16600314156164045760408201515160005b818110156163f9576163e2846040015182815181106163d557fe5b602002602001015161631e565b6163f1576000925050506110f6565b6001016163ba565b5060019150506110f6565b606082015160ff1660641415611e11575060006110f6565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600260e090910152565b604051806101c00160405280616466616558565b8152602001616473616558565b81526000602082018190526040820181905260608201819052608082015260a00161649c616524565b8152600060208201526040016164b0616676565b81526020016164bd616676565b81526000602082018190526040820181905260608083015260809091015290565b6040518060e0016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160006001600160401b031681525090565b6040518060a001604052806000815260200161653e616690565b815260606020820181905260006040830181905291015290565b6040805161010081019091526000815260208101616574616524565b8152602001616581616524565b815260200161658e616524565b815260200161659b616524565b81526000602082018190526040820181905260609091015290565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081019190915290565b6040518061032001604052806019906020820280388339509192915050565b6040518060a001604052806005906020820280388339509192915050565b6040518061030001604052806018906020820280388339509192915050565b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fe56616c7565206d757374206861766520612076616c6964207479706520636f6465a265627a7a7231582063d4dcca0298cc37b354acef67651e3f5dda73b60d123ad59cf94b0275a8b8e664736f6c63430005110032"

// DeployExecutionChallenge deploys a new Ethereum contract, binding an instance of ExecutionChallenge to it.
func DeployExecutionChallenge(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ExecutionChallenge, error) {
	parsed, err := abi.JSON(strings.NewReader(ExecutionChallengeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ExecutionChallengeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ExecutionChallenge{ExecutionChallengeCaller: ExecutionChallengeCaller{contract: contract}, ExecutionChallengeTransactor: ExecutionChallengeTransactor{contract: contract}, ExecutionChallengeFilterer: ExecutionChallengeFilterer{contract: contract}}, nil
}

// ExecutionChallenge is an auto generated Go binding around an Ethereum contract.
type ExecutionChallenge struct {
	ExecutionChallengeCaller     // Read-only binding to the contract
	ExecutionChallengeTransactor // Write-only binding to the contract
	ExecutionChallengeFilterer   // Log filterer for contract events
}

// ExecutionChallengeCaller is an auto generated read-only Go binding around an Ethereum contract.
type ExecutionChallengeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExecutionChallengeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ExecutionChallengeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExecutionChallengeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ExecutionChallengeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExecutionChallengeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ExecutionChallengeSession struct {
	Contract     *ExecutionChallenge // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ExecutionChallengeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ExecutionChallengeCallerSession struct {
	Contract *ExecutionChallengeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ExecutionChallengeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ExecutionChallengeTransactorSession struct {
	Contract     *ExecutionChallengeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ExecutionChallengeRaw is an auto generated low-level Go binding around an Ethereum contract.
type ExecutionChallengeRaw struct {
	Contract *ExecutionChallenge // Generic contract binding to access the raw methods on
}

// ExecutionChallengeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ExecutionChallengeCallerRaw struct {
	Contract *ExecutionChallengeCaller // Generic read-only contract binding to access the raw methods on
}

// ExecutionChallengeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ExecutionChallengeTransactorRaw struct {
	Contract *ExecutionChallengeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewExecutionChallenge creates a new instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallenge(address common.Address, backend bind.ContractBackend) (*ExecutionChallenge, error) {
	contract, err := bindExecutionChallenge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallenge{ExecutionChallengeCaller: ExecutionChallengeCaller{contract: contract}, ExecutionChallengeTransactor: ExecutionChallengeTransactor{contract: contract}, ExecutionChallengeFilterer: ExecutionChallengeFilterer{contract: contract}}, nil
}

// NewExecutionChallengeCaller creates a new read-only instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallengeCaller(address common.Address, caller bind.ContractCaller) (*ExecutionChallengeCaller, error) {
	contract, err := bindExecutionChallenge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeCaller{contract: contract}, nil
}

// NewExecutionChallengeTransactor creates a new write-only instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallengeTransactor(address common.Address, transactor bind.ContractTransactor) (*ExecutionChallengeTransactor, error) {
	contract, err := bindExecutionChallenge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeTransactor{contract: contract}, nil
}

// NewExecutionChallengeFilterer creates a new log filterer instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallengeFilterer(address common.Address, filterer bind.ContractFilterer) (*ExecutionChallengeFilterer, error) {
	contract, err := bindExecutionChallenge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeFilterer{contract: contract}, nil
}

// bindExecutionChallenge binds a generic wrapper to an already deployed contract.
func bindExecutionChallenge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ExecutionChallengeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ExecutionChallenge *ExecutionChallengeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ExecutionChallenge.Contract.ExecutionChallengeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ExecutionChallenge *ExecutionChallengeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ExecutionChallengeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ExecutionChallenge *ExecutionChallengeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ExecutionChallengeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ExecutionChallenge *ExecutionChallengeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ExecutionChallenge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ExecutionChallenge *ExecutionChallengeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ExecutionChallenge *ExecutionChallengeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.contract.Transact(opts, method, params...)
}

// BisectAssertion is a paid mutator transaction binding the contract method 0xefaa0772.
//
// Solidity: function bisectAssertion(bytes32[] _machineHashes, bytes32[] _inboxAccs, bytes32[] _messageAccs, bytes32[] _logAccs, uint64[] _outCounts, uint64[] _gases, uint64 _totalSteps) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) BisectAssertion(opts *bind.TransactOpts, _machineHashes [][32]byte, _inboxAccs [][32]byte, _messageAccs [][32]byte, _logAccs [][32]byte, _outCounts []uint64, _gases []uint64, _totalSteps uint64) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "bisectAssertion", _machineHashes, _inboxAccs, _messageAccs, _logAccs, _outCounts, _gases, _totalSteps)
}

// BisectAssertion is a paid mutator transaction binding the contract method 0xefaa0772.
//
// Solidity: function bisectAssertion(bytes32[] _machineHashes, bytes32[] _inboxAccs, bytes32[] _messageAccs, bytes32[] _logAccs, uint64[] _outCounts, uint64[] _gases, uint64 _totalSteps) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) BisectAssertion(_machineHashes [][32]byte, _inboxAccs [][32]byte, _messageAccs [][32]byte, _logAccs [][32]byte, _outCounts []uint64, _gases []uint64, _totalSteps uint64) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.BisectAssertion(&_ExecutionChallenge.TransactOpts, _machineHashes, _inboxAccs, _messageAccs, _logAccs, _outCounts, _gases, _totalSteps)
}

// BisectAssertion is a paid mutator transaction binding the contract method 0xefaa0772.
//
// Solidity: function bisectAssertion(bytes32[] _machineHashes, bytes32[] _inboxAccs, bytes32[] _messageAccs, bytes32[] _logAccs, uint64[] _outCounts, uint64[] _gases, uint64 _totalSteps) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) BisectAssertion(_machineHashes [][32]byte, _inboxAccs [][32]byte, _messageAccs [][32]byte, _logAccs [][32]byte, _outCounts []uint64, _gases []uint64, _totalSteps uint64) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.BisectAssertion(&_ExecutionChallenge.TransactOpts, _machineHashes, _inboxAccs, _messageAccs, _logAccs, _outCounts, _gases, _totalSteps)
}

// ChooseSegment is a paid mutator transaction binding the contract method 0x79a9ad85.
//
// Solidity: function chooseSegment(uint256 _segmentToChallenge, bytes _proof, bytes32 _bisectionRoot, bytes32 _bisectionHash) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) ChooseSegment(opts *bind.TransactOpts, _segmentToChallenge *big.Int, _proof []byte, _bisectionRoot [32]byte, _bisectionHash [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "chooseSegment", _segmentToChallenge, _proof, _bisectionRoot, _bisectionHash)
}

// ChooseSegment is a paid mutator transaction binding the contract method 0x79a9ad85.
//
// Solidity: function chooseSegment(uint256 _segmentToChallenge, bytes _proof, bytes32 _bisectionRoot, bytes32 _bisectionHash) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) ChooseSegment(_segmentToChallenge *big.Int, _proof []byte, _bisectionRoot [32]byte, _bisectionHash [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ChooseSegment(&_ExecutionChallenge.TransactOpts, _segmentToChallenge, _proof, _bisectionRoot, _bisectionHash)
}

// ChooseSegment is a paid mutator transaction binding the contract method 0x79a9ad85.
//
// Solidity: function chooseSegment(uint256 _segmentToChallenge, bytes _proof, bytes32 _bisectionRoot, bytes32 _bisectionHash) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) ChooseSegment(_segmentToChallenge *big.Int, _proof []byte, _bisectionRoot [32]byte, _bisectionHash [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ChooseSegment(&_ExecutionChallenge.TransactOpts, _segmentToChallenge, _proof, _bisectionRoot, _bisectionHash)
}

// InitializeBisection is a paid mutator transaction binding the contract method 0x02ad1e4e.
//
// Solidity: function initializeBisection(address _rollupAddress, address _asserter, address _challenger, uint256 _challengePeriodTicks, bytes32 _challengeState) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) InitializeBisection(opts *bind.TransactOpts, _rollupAddress common.Address, _asserter common.Address, _challenger common.Address, _challengePeriodTicks *big.Int, _challengeState [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "initializeBisection", _rollupAddress, _asserter, _challenger, _challengePeriodTicks, _challengeState)
}

// InitializeBisection is a paid mutator transaction binding the contract method 0x02ad1e4e.
//
// Solidity: function initializeBisection(address _rollupAddress, address _asserter, address _challenger, uint256 _challengePeriodTicks, bytes32 _challengeState) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) InitializeBisection(_rollupAddress common.Address, _asserter common.Address, _challenger common.Address, _challengePeriodTicks *big.Int, _challengeState [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.InitializeBisection(&_ExecutionChallenge.TransactOpts, _rollupAddress, _asserter, _challenger, _challengePeriodTicks, _challengeState)
}

// InitializeBisection is a paid mutator transaction binding the contract method 0x02ad1e4e.
//
// Solidity: function initializeBisection(address _rollupAddress, address _asserter, address _challenger, uint256 _challengePeriodTicks, bytes32 _challengeState) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) InitializeBisection(_rollupAddress common.Address, _asserter common.Address, _challenger common.Address, _challengePeriodTicks *big.Int, _challengeState [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.InitializeBisection(&_ExecutionChallenge.TransactOpts, _rollupAddress, _asserter, _challenger, _challengePeriodTicks, _challengeState)
}

// OneStepProof is a paid mutator transaction binding the contract method 0x082379bb.
//
// Solidity: function oneStepProof(bytes32 _firstInbox, bytes32 _firstMessage, bytes32 _firstLog, bytes _proof) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) OneStepProof(opts *bind.TransactOpts, _firstInbox [32]byte, _firstMessage [32]byte, _firstLog [32]byte, _proof []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "oneStepProof", _firstInbox, _firstMessage, _firstLog, _proof)
}

// OneStepProof is a paid mutator transaction binding the contract method 0x082379bb.
//
// Solidity: function oneStepProof(bytes32 _firstInbox, bytes32 _firstMessage, bytes32 _firstLog, bytes _proof) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) OneStepProof(_firstInbox [32]byte, _firstMessage [32]byte, _firstLog [32]byte, _proof []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.OneStepProof(&_ExecutionChallenge.TransactOpts, _firstInbox, _firstMessage, _firstLog, _proof)
}

// OneStepProof is a paid mutator transaction binding the contract method 0x082379bb.
//
// Solidity: function oneStepProof(bytes32 _firstInbox, bytes32 _firstMessage, bytes32 _firstLog, bytes _proof) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) OneStepProof(_firstInbox [32]byte, _firstMessage [32]byte, _firstLog [32]byte, _proof []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.OneStepProof(&_ExecutionChallenge.TransactOpts, _firstInbox, _firstMessage, _firstLog, _proof)
}

// OneStepProofInbox is a paid mutator transaction binding the contract method 0xa8a4e532.
//
// Solidity: function oneStepProofInbox(bytes32 _firstInbox, bytes32 _firstMessage, bytes32 _firstLog, bytes _proof, uint8 _kind, uint256 _blockNumber, uint256 _timestamp, address _sender, uint256 _inboxSeqNum, bytes _msgData) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) OneStepProofInbox(opts *bind.TransactOpts, _firstInbox [32]byte, _firstMessage [32]byte, _firstLog [32]byte, _proof []byte, _kind uint8, _blockNumber *big.Int, _timestamp *big.Int, _sender common.Address, _inboxSeqNum *big.Int, _msgData []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "oneStepProofInbox", _firstInbox, _firstMessage, _firstLog, _proof, _kind, _blockNumber, _timestamp, _sender, _inboxSeqNum, _msgData)
}

// OneStepProofInbox is a paid mutator transaction binding the contract method 0xa8a4e532.
//
// Solidity: function oneStepProofInbox(bytes32 _firstInbox, bytes32 _firstMessage, bytes32 _firstLog, bytes _proof, uint8 _kind, uint256 _blockNumber, uint256 _timestamp, address _sender, uint256 _inboxSeqNum, bytes _msgData) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) OneStepProofInbox(_firstInbox [32]byte, _firstMessage [32]byte, _firstLog [32]byte, _proof []byte, _kind uint8, _blockNumber *big.Int, _timestamp *big.Int, _sender common.Address, _inboxSeqNum *big.Int, _msgData []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.OneStepProofInbox(&_ExecutionChallenge.TransactOpts, _firstInbox, _firstMessage, _firstLog, _proof, _kind, _blockNumber, _timestamp, _sender, _inboxSeqNum, _msgData)
}

// OneStepProofInbox is a paid mutator transaction binding the contract method 0xa8a4e532.
//
// Solidity: function oneStepProofInbox(bytes32 _firstInbox, bytes32 _firstMessage, bytes32 _firstLog, bytes _proof, uint8 _kind, uint256 _blockNumber, uint256 _timestamp, address _sender, uint256 _inboxSeqNum, bytes _msgData) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) OneStepProofInbox(_firstInbox [32]byte, _firstMessage [32]byte, _firstLog [32]byte, _proof []byte, _kind uint8, _blockNumber *big.Int, _timestamp *big.Int, _sender common.Address, _inboxSeqNum *big.Int, _msgData []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.OneStepProofInbox(&_ExecutionChallenge.TransactOpts, _firstInbox, _firstMessage, _firstLog, _proof, _kind, _blockNumber, _timestamp, _sender, _inboxSeqNum, _msgData)
}

// TimeoutChallenge is a paid mutator transaction binding the contract method 0xced5c1bf.
//
// Solidity: function timeoutChallenge() returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) TimeoutChallenge(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "timeoutChallenge")
}

// TimeoutChallenge is a paid mutator transaction binding the contract method 0xced5c1bf.
//
// Solidity: function timeoutChallenge() returns()
func (_ExecutionChallenge *ExecutionChallengeSession) TimeoutChallenge() (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.TimeoutChallenge(&_ExecutionChallenge.TransactOpts)
}

// TimeoutChallenge is a paid mutator transaction binding the contract method 0xced5c1bf.
//
// Solidity: function timeoutChallenge() returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) TimeoutChallenge() (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.TimeoutChallenge(&_ExecutionChallenge.TransactOpts)
}

// ExecutionChallengeAsserterTimedOutIterator is returned from FilterAsserterTimedOut and is used to iterate over the raw logs and unpacked data for AsserterTimedOut events raised by the ExecutionChallenge contract.
type ExecutionChallengeAsserterTimedOutIterator struct {
	Event *ExecutionChallengeAsserterTimedOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeAsserterTimedOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeAsserterTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeAsserterTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeAsserterTimedOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeAsserterTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeAsserterTimedOut represents a AsserterTimedOut event raised by the ExecutionChallenge contract.
type ExecutionChallengeAsserterTimedOut struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAsserterTimedOut is a free log retrieval operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterAsserterTimedOut(opts *bind.FilterOpts) (*ExecutionChallengeAsserterTimedOutIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "AsserterTimedOut")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeAsserterTimedOutIterator{contract: _ExecutionChallenge.contract, event: "AsserterTimedOut", logs: logs, sub: sub}, nil
}

// WatchAsserterTimedOut is a free log subscription operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchAsserterTimedOut(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeAsserterTimedOut) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "AsserterTimedOut")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeAsserterTimedOut)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "AsserterTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAsserterTimedOut is a log parse operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseAsserterTimedOut(log types.Log) (*ExecutionChallengeAsserterTimedOut, error) {
	event := new(ExecutionChallengeAsserterTimedOut)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "AsserterTimedOut", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeBisectedAssertionIterator is returned from FilterBisectedAssertion and is used to iterate over the raw logs and unpacked data for BisectedAssertion events raised by the ExecutionChallenge contract.
type ExecutionChallengeBisectedAssertionIterator struct {
	Event *ExecutionChallengeBisectedAssertion // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeBisectedAssertionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeBisectedAssertion)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeBisectedAssertion)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeBisectedAssertionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeBisectedAssertionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeBisectedAssertion represents a BisectedAssertion event raised by the ExecutionChallenge contract.
type ExecutionChallengeBisectedAssertion struct {
	MachineHashes [][32]byte
	InboxAccs     [][32]byte
	MessageAccs   [][32]byte
	LogAccs       [][32]byte
	OutCounts     []uint64
	Gases         []uint64
	TotalSteps    uint64
	DeadlineTicks *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterBisectedAssertion is a free log retrieval operation binding the contract event 0x6b9d7e7b7a60864e1b42794359b85e4b2477cda53bc2fb9bc2f8a71c1caf1c69.
//
// Solidity: event BisectedAssertion(bytes32[] machineHashes, bytes32[] inboxAccs, bytes32[] messageAccs, bytes32[] logAccs, uint64[] outCounts, uint64[] gases, uint64 totalSteps, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterBisectedAssertion(opts *bind.FilterOpts) (*ExecutionChallengeBisectedAssertionIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "BisectedAssertion")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeBisectedAssertionIterator{contract: _ExecutionChallenge.contract, event: "BisectedAssertion", logs: logs, sub: sub}, nil
}

// WatchBisectedAssertion is a free log subscription operation binding the contract event 0x6b9d7e7b7a60864e1b42794359b85e4b2477cda53bc2fb9bc2f8a71c1caf1c69.
//
// Solidity: event BisectedAssertion(bytes32[] machineHashes, bytes32[] inboxAccs, bytes32[] messageAccs, bytes32[] logAccs, uint64[] outCounts, uint64[] gases, uint64 totalSteps, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchBisectedAssertion(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeBisectedAssertion) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "BisectedAssertion")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeBisectedAssertion)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "BisectedAssertion", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBisectedAssertion is a log parse operation binding the contract event 0x6b9d7e7b7a60864e1b42794359b85e4b2477cda53bc2fb9bc2f8a71c1caf1c69.
//
// Solidity: event BisectedAssertion(bytes32[] machineHashes, bytes32[] inboxAccs, bytes32[] messageAccs, bytes32[] logAccs, uint64[] outCounts, uint64[] gases, uint64 totalSteps, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseBisectedAssertion(log types.Log) (*ExecutionChallengeBisectedAssertion, error) {
	event := new(ExecutionChallengeBisectedAssertion)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "BisectedAssertion", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeChallengerTimedOutIterator is returned from FilterChallengerTimedOut and is used to iterate over the raw logs and unpacked data for ChallengerTimedOut events raised by the ExecutionChallenge contract.
type ExecutionChallengeChallengerTimedOutIterator struct {
	Event *ExecutionChallengeChallengerTimedOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeChallengerTimedOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeChallengerTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeChallengerTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeChallengerTimedOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeChallengerTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeChallengerTimedOut represents a ChallengerTimedOut event raised by the ExecutionChallenge contract.
type ExecutionChallengeChallengerTimedOut struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterChallengerTimedOut is a free log retrieval operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterChallengerTimedOut(opts *bind.FilterOpts) (*ExecutionChallengeChallengerTimedOutIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "ChallengerTimedOut")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeChallengerTimedOutIterator{contract: _ExecutionChallenge.contract, event: "ChallengerTimedOut", logs: logs, sub: sub}, nil
}

// WatchChallengerTimedOut is a free log subscription operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchChallengerTimedOut(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeChallengerTimedOut) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "ChallengerTimedOut")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeChallengerTimedOut)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengerTimedOut is a log parse operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseChallengerTimedOut(log types.Log) (*ExecutionChallengeChallengerTimedOut, error) {
	event := new(ExecutionChallengeChallengerTimedOut)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeContinuedIterator is returned from FilterContinued and is used to iterate over the raw logs and unpacked data for Continued events raised by the ExecutionChallenge contract.
type ExecutionChallengeContinuedIterator struct {
	Event *ExecutionChallengeContinued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeContinuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeContinued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeContinued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeContinuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeContinuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeContinued represents a Continued event raised by the ExecutionChallenge contract.
type ExecutionChallengeContinued struct {
	SegmentIndex  *big.Int
	DeadlineTicks *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterContinued is a free log retrieval operation binding the contract event 0x1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e4.
//
// Solidity: event Continued(uint256 segmentIndex, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterContinued(opts *bind.FilterOpts) (*ExecutionChallengeContinuedIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "Continued")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeContinuedIterator{contract: _ExecutionChallenge.contract, event: "Continued", logs: logs, sub: sub}, nil
}

// WatchContinued is a free log subscription operation binding the contract event 0x1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e4.
//
// Solidity: event Continued(uint256 segmentIndex, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchContinued(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeContinued) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "Continued")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeContinued)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "Continued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContinued is a log parse operation binding the contract event 0x1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e4.
//
// Solidity: event Continued(uint256 segmentIndex, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseContinued(log types.Log) (*ExecutionChallengeContinued, error) {
	event := new(ExecutionChallengeContinued)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "Continued", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeInitiatedChallengeIterator is returned from FilterInitiatedChallenge and is used to iterate over the raw logs and unpacked data for InitiatedChallenge events raised by the ExecutionChallenge contract.
type ExecutionChallengeInitiatedChallengeIterator struct {
	Event *ExecutionChallengeInitiatedChallenge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeInitiatedChallengeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeInitiatedChallenge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeInitiatedChallenge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeInitiatedChallengeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeInitiatedChallengeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeInitiatedChallenge represents a InitiatedChallenge event raised by the ExecutionChallenge contract.
type ExecutionChallengeInitiatedChallenge struct {
	DeadlineTicks *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterInitiatedChallenge is a free log retrieval operation binding the contract event 0xe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc67.
//
// Solidity: event InitiatedChallenge(uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterInitiatedChallenge(opts *bind.FilterOpts) (*ExecutionChallengeInitiatedChallengeIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "InitiatedChallenge")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeInitiatedChallengeIterator{contract: _ExecutionChallenge.contract, event: "InitiatedChallenge", logs: logs, sub: sub}, nil
}

// WatchInitiatedChallenge is a free log subscription operation binding the contract event 0xe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc67.
//
// Solidity: event InitiatedChallenge(uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchInitiatedChallenge(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeInitiatedChallenge) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "InitiatedChallenge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeInitiatedChallenge)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiatedChallenge is a log parse operation binding the contract event 0xe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc67.
//
// Solidity: event InitiatedChallenge(uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseInitiatedChallenge(log types.Log) (*ExecutionChallengeInitiatedChallenge, error) {
	event := new(ExecutionChallengeInitiatedChallenge)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeOneStepProofCompletedIterator is returned from FilterOneStepProofCompleted and is used to iterate over the raw logs and unpacked data for OneStepProofCompleted events raised by the ExecutionChallenge contract.
type ExecutionChallengeOneStepProofCompletedIterator struct {
	Event *ExecutionChallengeOneStepProofCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeOneStepProofCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeOneStepProofCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeOneStepProofCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeOneStepProofCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeOneStepProofCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeOneStepProofCompleted represents a OneStepProofCompleted event raised by the ExecutionChallenge contract.
type ExecutionChallengeOneStepProofCompleted struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOneStepProofCompleted is a free log retrieval operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterOneStepProofCompleted(opts *bind.FilterOpts) (*ExecutionChallengeOneStepProofCompletedIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "OneStepProofCompleted")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeOneStepProofCompletedIterator{contract: _ExecutionChallenge.contract, event: "OneStepProofCompleted", logs: logs, sub: sub}, nil
}

// WatchOneStepProofCompleted is a free log subscription operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchOneStepProofCompleted(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeOneStepProofCompleted) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "OneStepProofCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeOneStepProofCompleted)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOneStepProofCompleted is a log parse operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseOneStepProofCompleted(log types.Log) (*ExecutionChallengeOneStepProofCompleted, error) {
	event := new(ExecutionChallengeOneStepProofCompleted)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// KeccakABI is the input ABI used to generate the binding from.
const KeccakABI = "[]"

// KeccakBin is the compiled bytecode used for deploying new contracts.
var KeccakBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820c07ae5b3a4de3b843e4ad0fe343fe545017077f4b66197a567534adf7bf6c06864736f6c63430005110032"

// DeployKeccak deploys a new Ethereum contract, binding an instance of Keccak to it.
func DeployKeccak(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Keccak, error) {
	parsed, err := abi.JSON(strings.NewReader(KeccakABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(KeccakBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Keccak{KeccakCaller: KeccakCaller{contract: contract}, KeccakTransactor: KeccakTransactor{contract: contract}, KeccakFilterer: KeccakFilterer{contract: contract}}, nil
}

// Keccak is an auto generated Go binding around an Ethereum contract.
type Keccak struct {
	KeccakCaller     // Read-only binding to the contract
	KeccakTransactor // Write-only binding to the contract
	KeccakFilterer   // Log filterer for contract events
}

// KeccakCaller is an auto generated read-only Go binding around an Ethereum contract.
type KeccakCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeccakTransactor is an auto generated write-only Go binding around an Ethereum contract.
type KeccakTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeccakFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type KeccakFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeccakSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type KeccakSession struct {
	Contract     *Keccak           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KeccakCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type KeccakCallerSession struct {
	Contract *KeccakCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// KeccakTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type KeccakTransactorSession struct {
	Contract     *KeccakTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KeccakRaw is an auto generated low-level Go binding around an Ethereum contract.
type KeccakRaw struct {
	Contract *Keccak // Generic contract binding to access the raw methods on
}

// KeccakCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type KeccakCallerRaw struct {
	Contract *KeccakCaller // Generic read-only contract binding to access the raw methods on
}

// KeccakTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type KeccakTransactorRaw struct {
	Contract *KeccakTransactor // Generic write-only contract binding to access the raw methods on
}

// NewKeccak creates a new instance of Keccak, bound to a specific deployed contract.
func NewKeccak(address common.Address, backend bind.ContractBackend) (*Keccak, error) {
	contract, err := bindKeccak(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Keccak{KeccakCaller: KeccakCaller{contract: contract}, KeccakTransactor: KeccakTransactor{contract: contract}, KeccakFilterer: KeccakFilterer{contract: contract}}, nil
}

// NewKeccakCaller creates a new read-only instance of Keccak, bound to a specific deployed contract.
func NewKeccakCaller(address common.Address, caller bind.ContractCaller) (*KeccakCaller, error) {
	contract, err := bindKeccak(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &KeccakCaller{contract: contract}, nil
}

// NewKeccakTransactor creates a new write-only instance of Keccak, bound to a specific deployed contract.
func NewKeccakTransactor(address common.Address, transactor bind.ContractTransactor) (*KeccakTransactor, error) {
	contract, err := bindKeccak(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &KeccakTransactor{contract: contract}, nil
}

// NewKeccakFilterer creates a new log filterer instance of Keccak, bound to a specific deployed contract.
func NewKeccakFilterer(address common.Address, filterer bind.ContractFilterer) (*KeccakFilterer, error) {
	contract, err := bindKeccak(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &KeccakFilterer{contract: contract}, nil
}

// bindKeccak binds a generic wrapper to an already deployed contract.
func bindKeccak(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(KeccakABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Keccak *KeccakRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Keccak.Contract.KeccakCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Keccak *KeccakRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Keccak.Contract.KeccakTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Keccak *KeccakRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Keccak.Contract.KeccakTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Keccak *KeccakCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Keccak.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Keccak *KeccakTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Keccak.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Keccak *KeccakTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Keccak.Contract.contract.Transact(opts, method, params...)
}

// OneStepProofABI is the input ABI used to generate the binding from.
const OneStepProofABI = "[]"

// OneStepProofBin is the compiled bytecode used for deploying new contracts.
var OneStepProofBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820081440e90b613c11f3c1f71afa350fbc464611b46b33f94b082b62afefd2f6e064736f6c63430005110032"

// DeployOneStepProof deploys a new Ethereum contract, binding an instance of OneStepProof to it.
func DeployOneStepProof(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// OneStepProof is an auto generated Go binding around an Ethereum contract.
type OneStepProof struct {
	OneStepProofCaller     // Read-only binding to the contract
	OneStepProofTransactor // Write-only binding to the contract
	OneStepProofFilterer   // Log filterer for contract events
}

// OneStepProofCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofSession struct {
	Contract     *OneStepProof     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProofCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofCallerSession struct {
	Contract *OneStepProofCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// OneStepProofTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTransactorSession struct {
	Contract     *OneStepProofTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// OneStepProofRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofRaw struct {
	Contract *OneStepProof // Generic contract binding to access the raw methods on
}

// OneStepProofCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofCallerRaw struct {
	Contract *OneStepProofCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTransactorRaw struct {
	Contract *OneStepProofTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof creates a new instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProof(address common.Address, backend bind.ContractBackend) (*OneStepProof, error) {
	contract, err := bindOneStepProof(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// NewOneStepProofCaller creates a new read-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofCaller, error) {
	contract, err := bindOneStepProof(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofCaller{contract: contract}, nil
}

// NewOneStepProofTransactor creates a new write-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTransactor, error) {
	contract, err := bindOneStepProof(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTransactor{contract: contract}, nil
}

// NewOneStepProofFilterer creates a new log filterer instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofFilterer, error) {
	contract, err := bindOneStepProof(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofFilterer{contract: contract}, nil
}

// bindOneStepProof binds a generic wrapper to an already deployed contract.
func bindOneStepProof(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.OneStepProofCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transact(opts, method, params...)
}
