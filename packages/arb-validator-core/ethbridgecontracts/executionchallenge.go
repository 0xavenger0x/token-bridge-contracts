// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgecontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ExecutionChallengeABI is the input ABI used to generate the binding from.
const ExecutionChallengeABI = "[{\"anonymous\":false,\"inputs\":[],\"name\":\"AsserterTimedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"machineHashes\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"inboxInsnIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"messageAccs\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"logAccs\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"outCounts\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"gases\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"totalSteps\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadlineTicks\",\"type\":\"uint256\"}],\"name\":\"BisectedAssertion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ChallengerTimedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"segmentIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadlineTicks\",\"type\":\"uint256\"}],\"name\":\"Continued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadlineTicks\",\"type\":\"uint256\"}],\"name\":\"InitiatedChallenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OneStepProofCompleted\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_beforeInbox\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_machineHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint32\",\"name\":\"inboxInsnIndex\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_messageAccs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_logAccs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_outCounts\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_gases\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64\",\"name\":\"_totalSteps\",\"type\":\"uint64\"}],\"name\":\"bisectAssertion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segmentToChallenge\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_bisectionRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_bisectionHash\",\"type\":\"bytes32\"}],\"name\":\"chooseSegment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rollupAddress\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_asserter\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_challenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_challengePeriodTicks\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_challengeState\",\"type\":\"bytes32\"}],\"name\":\"initializeBisection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_beforeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_beforeInbox\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_beforeInboxValueSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_afterHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_didInboxInsns\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"_firstMessage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_lastMessage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_firstLog\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_lastLog\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_gas\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"oneStepProof\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"timeoutChallenge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ExecutionChallengeFuncSigs maps the 4-byte function signature to its string representation.
var ExecutionChallengeFuncSigs = map[string]string{
	"6f537a39": "bisectAssertion(bytes32,bytes32[],uint32,bytes32[],bytes32[],uint64[],uint64[],uint64)",
	"79a9ad85": "chooseSegment(uint256,bytes,bytes32,bytes32)",
	"02ad1e4e": "initializeBisection(address,address,address,uint256,bytes32)",
	"82498b81": "oneStepProof(bytes32,bytes32,uint256,bytes32,bool,bytes32,bytes32,bytes32,bytes32,uint64,bytes)",
	"ced5c1bf": "timeoutChallenge()",
}

// ExecutionChallengeBin is the compiled bytecode used for deploying new contracts.
var ExecutionChallengeBin = "0x608060405234801561001057600080fd5b5061581a80620000216000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806302ad1e4e1461005c5780636f537a39146100a057806379a9ad851461036a57806382498b811461041a578063ced5c1bf1461050a575b600080fd5b61009e600480360360a081101561007257600080fd5b506001600160a01b03813581169160208101358216916040820135169060608101359060800135610512565b005b61009e60048036036101008110156100b757600080fd5b81359190810190604081016020820135600160201b8111156100d857600080fd5b8201836020820111156100ea57600080fd5b803590602001918460208302840111600160201b8311171561010b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929563ffffffff853516959094909350604081019250602001359050600160201b81111561016857600080fd5b82018360208201111561017a57600080fd5b803590602001918460208302840111600160201b8311171561019b57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156101ea57600080fd5b8201836020820111156101fc57600080fd5b803590602001918460208302840111600160201b8311171561021d57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561026c57600080fd5b82018360208201111561027e57600080fd5b803590602001918460208302840111600160201b8311171561029f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156102ee57600080fd5b82018360208201111561030057600080fd5b803590602001918460208302840111600160201b8311171561032157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160401b031691506105279050565b61009e6004803603608081101561038057600080fd5b81359190810190604081016020820135600160201b8111156103a157600080fd5b8201836020820111156103b357600080fd5b803590602001918460018302840111600160201b831117156103d457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550508235935050506020013561074a565b61009e600480360361016081101561043157600080fd5b813591602081013591604082013591606081013591608082013515159160a08101359160c08201359160e081013591610100820135916001600160401b0361012082013516918101906101608101610140820135600160201b81111561049657600080fd5b8201836020820111156104a857600080fd5b803590602001918460018302840111600160201b831117156104c957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610a0b945050505050565b61009e610d67565b61051e85858585610e47565b60065550505050565b60055460ff16600281111561053857fe5b600114604051806040016040528060098152602001684249535f535441544560b81b815250906105e65760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156105ab578181015183820152602001610593565b50505050905090810190601f1680156105d85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506003546105f343610f62565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b815250906106665760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b5060015460408051808201909152600a8152692124a9afa9a2a72222a960b11b6020820152906001600160a01b031633146106e25760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b506106eb615563565b6040518061010001604052808a81526020018981526020018863ffffffff168152602001878152602001868152602001858152602001848152602001836001600160401b0316815250905061073f81610f6d565b505050505050505050565b60055460ff16600281111561075b57fe5b60021460405180604001604052806009815260200168434f4e5f535441544560b81b815250906107cc5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b506003546107d943610f62565b11156040518060400160405280600c81526020016b434f4e5f444541444c494e4560a01b8152509061084c5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b5060025460408051808201909152600a81526921a7a72fa9a2a72222a960b11b6020820152906001600160a01b031633146108c85760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b5060065482146040518060400160405280600881526020016721a7a72fa82922ab60c11b8152509061093b5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b5061094b83838387600101611076565b6040518060400160405280600981526020016821a7a72fa82927a7a360b91b815250906109b95760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b5060068190556109c7611179565b60035460408051868152602081019290925280517f1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e49281900390910190a150505050565b60055460ff166002811115610a1c57fe5b600114604051806040016040528060098152602001684249535f535441544560b81b81525090610a8d5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b50600354610a9a43610f62565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b81525090610b0d5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b5060015460408051808201909152600a8152692124a9afa9a2a72222a960b11b6020820152906001600160a01b03163314610b895760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b506000610b9e610b998c8c611195565b611248565b9050610ba86155ba565b60405180610180016040528060016001600160401b031681526020018e81526020018381526020018b81526020018a15158152602001856001600160401b03168152602001898152602001888152602001888a14610c07576001610c0a565b60005b60ff166001600160401b03168152602001878152602001868152602001868814610c35576001610c38565b60005b60ff169052905087871480610c4c57508486145b610c9d576040805162461bcd60e51b815260206004820152601b60248201527f73656e7420626f7468206c6f677320616e64206d657373616765730000000000604482015290519081900360640190fd5b610cae610ca982611368565b611438565b610cb661561e565b610cc88e8e8e8d8d8d8d8d8d8d6114ae565b90508a610cd482611521565b14610d26576040805162461bcd60e51b815260206004820181905260248201527f50726f6f6620686164206e6f6e206d61746368696e6720656e64207374617465604482015290519081900360640190fd5b6040517f117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f590600090a1610d576115e5565b5050505050505050505050505050565b600354610d7343610f62565b11610dc5576040805162461bcd60e51b815260206004820152601760248201527f446561646c696e65206861736e27742065787069726564000000000000000000604482015290519081900360640190fd5b600160055460ff166002811115610dd857fe5b1415610e14576040517f2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f090600090a1610e0f611659565b610e45565b6040517f4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a90600090a1610e456115e5565b565b600060055460ff166002811115610e5a57fe5b146040518060400160405280600f81526020016e4348414c5f494e49545f535441544560881b81525090610ecf5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b50600080546001600160a01b038681166001600160a01b03199283161790925560018054868416908316178155600280549386169390921692909217905560048290556005805460ff19169091179055610f276116b1565b60035460408051918252517fe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc679181900360200190a150505050565b6103e881025b919050565b60208101515160001901610f80826116c3565b606081604051908082528060200260200182016040528015610fac578160200160208202803883390190505b509050610fd283610fca8560e001516001600160401b031685611a65565b846000611a83565b81600081518110610fdf57fe5b602090810291909101015260015b828110156110565780846040015163ffffffff16141561101557611012610b99611c01565b84525b611037846110308660e001516001600160401b031686611c48565b8584611a83565b82828151811061104357fe5b6020908102919091010152600101610fed565b5061106081611c5b565b611068611c6a565b61107183611c7e565b505050565b600080838160205b88518111611169578089015193506020818a51036020018161109c57fe5b0491505b6000821180156110b35750600286066001145b80156110c157508160020a86115b156110d4576002860460010195506110a0565b6002860661111f57838360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092506002868161111757fe5b049550611161565b828460405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092506002868161115a57fe5b0460010195505b60200161107e565b505085149150505b949350505050565b600580546001919060ff191682805b0217905550610e456116b1565b61119d61567c565b6040805160a08101825284815281516060810183526000808252602082810182905284518281528082018652939490850193908301916111f3565b6111e061567c565b8152602001906001900390816111d85790505b5090528152604080516000808252602082810190935291909201919061122f565b61121c61567c565b8152602001906001900390816112145790505b5081526002602082015260400183905290505b92915050565b6000611252611e62565b60ff16826060015160ff16141561127557815161126e90611e67565b9050610f68565b61127d611e8b565b60ff16826060015160ff16141561129b5761126e8260200151611e90565b6112a3611f8d565b60ff16826060015160ff1614156112c5578151608083015161126e9190611f92565b6112cd611fe3565b60ff16826060015160ff161415611306576112e661567c565b6112f38360400151611fe8565b90506112fe81611248565b915050610f68565b61130e61214a565b60ff16826060015160ff16141561132757508051610f68565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b80516020808301516040808501516060860151608087015160a088015160c0808a015160e08b01516101008c01516101208d01516101408e0151610160909e01518a519d861b6001600160c01b03199081168f8f015260288f019c909c5260488e019990995260688d019790975294151560f81b60888c015292821b881660898b015260918a015260b189019190915290811b851660d188015260d987019190915260f986019690965290941b166101198301528251808303610101018152610121909201909252805191012090565b6006548114604051806040016040528060088152602001672124a9afa82922ab60c11b815250906114aa5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b5050565b6114b661561e565b6115126040518061012001604052808d81526020016114d58d8d611195565b81526020018a15158152602001898152602001888152602001878152602001868152602001856001600160401b031681526020018481525061214f565b9b9a5050505050505050505050565b600060028260e00151141561153857506000610f68565b60018260e00151141561154d57506001610f68565b8151602083015161155d90611248565b61156a8460400151611248565b6115778560600151611248565b6115848660800151611248565b8660a001518760c0015160405160200180888152602001878152602001868152602001858152602001848152602001838152602001828152602001975050505050505050604051602081830303815290604052805190602001209050610f68565b600080546001546002546040805163396f51cf60e01b81526001600160a01b039384166004820152918316602483015251919092169263396f51cf926044808201939182900301818387803b15801561163d57600080fd5b505af1158015611651573d6000803e3d6000fd5b503392505050ff5b600080546002546001546040805163396f51cf60e01b81526001600160a01b039384166004820152918316602483015251919092169263396f51cf926044808201939182900301818387803b15801561163d57600080fd5b6004546116bd43610f62565b01600355565b6000600182602001515103905081606001515181600101146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b8152509061174a5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b5081608001515181600101146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b815250906117c55760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b508160c001515181146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b8152509061183d5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b508160a001515181600202146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b815250906118b85760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b5060008080805b8481101561192a578560c0015181815181106118d757fe5b6020026020010151840193508560a0015181815181106118f357fe5b6020026020010151830192508560a001518186018151811061191157fe5b60200260200101518201915080806001019150506118bf565b50611a5e610ca96040518061018001604052808860e001516001600160401b03168152602001886020015160008151811061196157fe5b60200260200101518152602001886000015181526020018860200151888151811061198857fe5b602002602001015181526020016000896040015163ffffffff16116119ae5760006119b1565b60015b15158152602001866001600160401b0316815260200188606001516000815181106119d857fe5b60200260200101518152602001886060015188815181106119f557fe5b60200260200101518152602001856001600160401b031681526020018860800151600081518110611a2257fe5b6020026020010151815260200188608001518881518110611a3f57fe5b60200260200101518152602001846001600160401b0316815250611368565b5050505050565b6000818381611a7057fe5b06828481611a7a57fe5b04019392505050565b6000611bf86040518061018001604052808663ffffffff166001600160401b0316815260200187602001518581518110611ab957fe5b602002602001015181526020018760000151815260200187602001518560010181518110611ae357fe5b6020026020010151815260200184600101886040015163ffffffff1614151581526020018760c001518581518110611b1757fe5b60200260200101516001600160401b0316815260200187606001518581518110611b3d57fe5b6020026020010151815260200187606001518560010181518110611b5d57fe5b602002602001015181526020018760a001518581518110611b7a57fe5b60200260200101516001600160401b0316815260200187608001518581518110611ba057fe5b6020026020010151815260200187608001518560010181518110611bc057fe5b602002602001015181526020018760a0015185870181518110611bdf57fe5b60200260200101516001600160401b0316815250611368565b95945050505050565b611c0961567c565b60408051600080825260208201909252611c4391611c3d565b611c2a61567c565b815260200190600190039081611c225790505b5061329e565b905090565b6000818381611c5357fe5b049392505050565b611c64816133b0565b60065550565b600580546002919060ff1916600183611188565b7ffdfc7d7356ac103488916cfffd6e537843dadc44dc71695a7ed504d9f668528781602001518260400151836060015184608001518560a001518660c001518760e0015160035460405180806020018963ffffffff1663ffffffff16815260200180602001806020018060200180602001886001600160401b03166001600160401b0316815260200187815260200186810386528e818151815260200191508051906020019060200280838360005b83811015611d45578181015183820152602001611d2d565b5050505090500186810385528c818151815260200191508051906020019060200280838360005b83811015611d84578181015183820152602001611d6c565b5050505090500186810384528b818151815260200191508051906020019060200280838360005b83811015611dc3578181015183820152602001611dab565b5050505090500186810383528a818151815260200191508051906020019060200280838360005b83811015611e02578181015183820152602001611dea565b50505050905001868103825289818151815260200191508051906020019060200280838360005b83811015611e41578181015183820152602001611e29565b505050509050019d505050505050505050505050505060405180910390a150565b600090565b60408051602080820193909352815180820384018152908201909152805191012090565b600190565b6000600282604001515110611ea157fe5b604082015151611f0657611eb3611e8b565b8251602080850151604080516001600160f81b031960f896871b8116828601529490951b909316602185015260228085019190915282518085039091018152604290930190915281519101209050610f68565b611f0e611e8b565b8260000151611f348460400151600081518110611f2757fe5b6020026020010151611248565b8460200151604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b600290565b6000611f9c611fe3565b8383604051602001808460ff1660ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b600390565b611ff061567c565b60088251111561203e576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b6060825160405190808252806020026020018201604052801561206b578160200160208202803883390190505b508051909150600160005b828110156120ce5761208d868281518110611f2757fe5b84828151811061209957fe5b6020026020010181815250508581815181106120b157fe5b602002602001015160800151820191508080600101915050612076565b506000835184604051602001808360ff1660ff1660f81b8152600101828051906020019060200280838360005b838110156121135781810151838201526020016120fb565b50505050905001925050506040516020818303038152906040528051906020012090506121408183611195565b9695505050505050565b606490565b61215761561e565b6000806000606061216661561e565b61216e61561e565b612177886134ee565b60e08e0151959b50939950929750909550935091506001906000906001600160401b031687146121e5576040805162461bcd60e51b815260206004820152601460248201527324b73b30b634b21033b0b99034b710383937b7b360611b604482015290519081900360640190fd5b896040015180156121f9575060ff88166072145b8061221557508960400151158015612215575060ff8816607214155b612266576040805162461bcd60e51b815260206004820152601a60248201527f496e76616c696420646964496e626f78496e736e20636c61696d000000000000604482015290519081900360640190fd5b60a08084018051899003905284015187111561228d5760001960a084015260009150613157565b60ff8816600114156122d3576122cc83866000815181106122aa57fe5b6020026020010151876001815181106122bf57fe5b6020026020010151613744565b9150613157565b60ff881660021415612312576122cc83866000815181106122f057fe5b60200260200101518760018151811061230557fe5b6020026020010151613794565b60ff881660031415612351576122cc838660008151811061232f57fe5b60200260200101518760018151811061234457fe5b60200260200101516137d5565b60ff881660041415612390576122cc838660008151811061236e57fe5b60200260200101518760018151811061238357fe5b6020026020010151613816565b60ff8816600514156123cf576122cc83866000815181106123ad57fe5b6020026020010151876001815181106123c257fe5b6020026020010151613867565b60ff88166006141561240e576122cc83866000815181106123ec57fe5b60200260200101518760018151811061240157fe5b60200260200101516138b8565b60ff88166007141561244d576122cc838660008151811061242b57fe5b60200260200101518760018151811061244057fe5b6020026020010151613909565b60ff8816600814156124a1576122cc838660008151811061246a57fe5b60200260200101518760018151811061247f57fe5b60200260200101518860028151811061249457fe5b602002602001015161395a565b60ff8816600914156124f5576122cc83866000815181106124be57fe5b6020026020010151876001815181106124d357fe5b6020026020010151886002815181106124e857fe5b60200260200101516139c2565b60ff8816600a1415612534576122cc838660008151811061251257fe5b60200260200101518760018151811061252757fe5b6020026020010151613a1b565b60ff881660101415612573576122cc838660008151811061255157fe5b60200260200101518760018151811061256657fe5b6020026020010151613a5c565b60ff8816601114156125b2576122cc838660008151811061259057fe5b6020026020010151876001815181106125a557fe5b6020026020010151613a9d565b60ff8816601214156125f1576122cc83866000815181106125cf57fe5b6020026020010151876001815181106125e457fe5b6020026020010151613ade565b60ff881660131415612630576122cc838660008151811061260e57fe5b60200260200101518760018151811061262357fe5b6020026020010151613b1f565b60ff88166014141561266f576122cc838660008151811061264d57fe5b60200260200101518760018151811061266257fe5b6020026020010151613b60565b60ff881660151415612699576122cc838660008151811061268c57fe5b6020026020010151613b97565b60ff8816601614156126d8576122cc83866000815181106126b657fe5b6020026020010151876001815181106126cb57fe5b6020026020010151613bdc565b60ff881660171415612717576122cc83866000815181106126f557fe5b60200260200101518760018151811061270a57fe5b6020026020010151613c1d565b60ff881660181415612756576122cc838660008151811061273457fe5b60200260200101518760018151811061274957fe5b6020026020010151613c5e565b60ff881660191415612780576122cc838660008151811061277357fe5b6020026020010151613c9f565b60ff8816601a14156127bf576122cc838660008151811061279d57fe5b6020026020010151876001815181106127b257fe5b6020026020010151613cd5565b60ff8816601b14156127fe576122cc83866000815181106127dc57fe5b6020026020010151876001815181106127f157fe5b6020026020010151613d16565b60ff881660201415612828576122cc838660008151811061281b57fe5b6020026020010151613d57565b60ff881660211415612852576122cc838660008151811061284557fe5b6020026020010151613d72565b60ff881660221415612891576122cc838660008151811061286f57fe5b60200260200101518760018151811061288457fe5b6020026020010151613d8d565b60ff8816603014156128bb576122cc83866000815181106128ae57fe5b6020026020010151613df3565b60ff8816603114156128d0576122cc83613dfb565b60ff8816603214156128e5576122cc83613e1c565b60ff88166033141561290f576122cc838660008151811061290257fe5b6020026020010151613e35565b60ff881660341415612939576122cc838660008151811061292c57fe5b6020026020010151613e41565b60ff881660351415612978576122cc838660008151811061295657fe5b60200260200101518760018151811061296b57fe5b6020026020010151613e6c565b60ff88166036141561298d576122cc83613eb4565b60ff8816603714156129a7576122cc838560000151613ee1565b60ff8816603814156129d1576122cc83866000815181106129c457fe5b6020026020010151613ef1565b60ff881660391415612a1f576129e561567c565b6129f48b610100015188613f03565b9097509050612a09858263ffffffff61409516565b612a19848263ffffffff6140af16565b50613157565b60ff8816603a1415612a34576122cc836140c9565b60ff8816603b1415612a495760019150613157565b60ff8816603c1415612a5e576122cc836140e9565b60ff8816603d1415612a88576122cc8386600081518110612a7b57fe5b60200260200101516140fd565b60ff881660401415612ab2576122cc8386600081518110612aa557fe5b602002602001015161412b565b60ff881660411415612af1576122cc8386600081518110612acf57fe5b602002602001015187600181518110612ae457fe5b602002602001015161414d565b60ff881660421415612b45576122cc8386600081518110612b0e57fe5b602002602001015187600181518110612b2357fe5b602002602001015188600281518110612b3857fe5b602002602001015161417f565b60ff881660431415612b84576122cc8386600081518110612b6257fe5b602002602001015187600181518110612b7757fe5b60200260200101516141c1565b60ff881660441415612bd8576122cc8386600081518110612ba157fe5b602002602001015187600181518110612bb657fe5b602002602001015188600281518110612bcb57fe5b60200260200101516141d3565b60ff881660501415612c17576122cc8386600081518110612bf557fe5b602002602001015187600181518110612c0a57fe5b60200260200101516141f5565b60ff881660511415612c6b576122cc8386600081518110612c3457fe5b602002602001015187600181518110612c4957fe5b602002602001015188600281518110612c5e57fe5b602002602001015161426b565b60ff881660521415612c95576122cc8386600081518110612c8857fe5b60200260200101516142f8565b60ff881660531415612cf457612ca961567c565b612cb88b610100015188613f03565b9097509050612ccd858263ffffffff61409516565b612cec8487600081518110612cde57fe5b60200260200101518361432b565b925050613157565b60ff881660541415612d6057612d0861567c565b612d178b610100015188613f03565b9097509050612d2c858263ffffffff61409516565b612cec8487600081518110612d3d57fe5b602002602001015188600181518110612d5257fe5b602002602001015184614383565b60ff881660601415612d75576122cc83614404565b60ff881660611415612e7257612d9f8386600081518110612d9257fe5b602002602001015161440a565b90925090508115612e69578960c001518a60a001518260405160200180838152602001828152602001925050506040516020818303038152906040528051906020012014612e1e5760405162461bcd60e51b815260040180806020018281038252602581526020018061579a6025913960400191505060405180910390fd5b89608001518a6060015114612e645760405162461bcd60e51b81526004018080602001828103825260278152602001806157bf6027913960400191505060405180910390fd5b612e6d565b5060005b613157565b60ff881660701415612fa957612e9c8386600081518110612e8f57fe5b6020026020010151614423565b90925090508115612e695780612ef75789608001518a6060015114612ef25760405162461bcd60e51b81526004018080602001828103825260388152602001806157626038913960400191505060405180910390fd5b612e64565b60808a01516060808c01516040805160208082019390935280820186905281518082038301815293019052815191012014612f635760405162461bcd60e51b81526004018080602001828103825260298152602001806156f26029913960400191505060405180910390fd5b8960c001518a60a0015114612e645760405162461bcd60e51b815260040180806020018281038252602681526020018061571b6026913960400191505060405180910390fd5b60ff881660721415612fc3576122cc838b60200151614462565b60ff881660731415612fd85760009150613157565b60ff881660741415612fed57612e6d836144cb565b60ff881660751415613017576122cc838660008151811061300a57fe5b60200260200101516144d5565b60ff88166076141561302c576122cc836144fa565b60ff881660771415613041576122cc83614513565b60ff881660781415613080576122cc838660008151811061305e57fe5b60200260200101518760018151811061307357fe5b602002602001015161455c565b60ff8816607914156130d4576122cc838660008151811061309d57fe5b6020026020010151876001815181106130b257fe5b6020026020010151886002815181106130c757fe5b60200260200101516145a1565b60ff8816607b14156130e9576122cc836145f4565b60ff881660801415613152576122cc838660008151811061310657fe5b60200260200101518760018151811061311b57fe5b60200260200101518860028151811061313057fe5b60200260200101518960038151811061314557fe5b6020026020010151614637565b600091505b806131e85789608001518a60600151146131a25760405162461bcd60e51b81526004018080602001828103825260278152602001806157bf6027913960400191505060405180910390fd5b8960c001518a60a00151146131e85760405162461bcd60e51b815260040180806020018281038252602681526020018061571b6026913960400191505060405180910390fd5b816132495760408051600160f81b602080830191909152600060218301819052602280840191909152835180840390910181526042909201909252805191012060c084015114156132415761323c83614754565b613249565b60c083015183525b61325284611521565b8a51146132905760405162461bcd60e51b81526004018080602001828103825260228152602001806156d06022913960400191505060405180910390fd5b509098975050505050505050565b6132a661567c565b6132b0825161475e565b613301576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b83518110156133385783818151811061331b57fe5b602002602001015160800151820191508080600101915050613306565b506040805160a0810182526000808252825160608101845281815260208181018390528451838152808201865293949085019391929083019190613392565b61337f61567c565b8152602001906001900390816133775790505b50905281526020810194909452600360408501526060909301525090565b6000815b6001815111156134d157606060028251600101816133ce57fe5b046040519080825280602002602001820160405280156133f8578160200160208202803883390190505b50905060005b81518110156134c95782518160020260010110156134915782816002028151811061342557fe5b602002602001015183826002026001018151811061343f57fe5b602002602001015160405160200180838152602001828152602001925050506040516020818303038152906040528051906020012082828151811061348057fe5b6020026020010181815250506134c1565b8281600202815181106134a057fe5b60200260200101518282815181106134b457fe5b6020026020010181815250505b6001016133fe565b5090506133b4565b806000815181106134de57fe5b6020026020010151915050919050565b60008060606134fb61561e565b61350361561e565b600061350e83614765565b61351d8761010001518261476f565b9350905061352a8361480f565b91506000876101000151828151811061353f57fe5b602001015160f81c60f81b60f81c9050876101000151826001018151811061356357fe5b016020015160f81c9650600061357888614878565b6040805183815260208085028201019091529098509091508180156135b757816020015b6135a461567c565b81526020019060019003908161359c5790505b5095506002830192508160ff16600014806135d557508160ff166001145b613626576040805162461bcd60e51b815260206004820152601c60248201527f50726f6f662068616420626164206f7065726174696f6e207479706500000000604482015290519081900360640190fd5b60ff82166136465761363f610b99898760000151614dd5565b85526136ac565b61364e61567c565b61365d8a610100015185613f03565b9094509050811561368657808760008151811061367657fe5b6020026020010181905250613696565b613696858263ffffffff6140af16565b6136a8610b998a886000015184614e30565b8652505b60ff82165b818110156136eb576136c88a610100015185613f03565b88518990849081106136d657fe5b602090810291909101015293506001016136b1565b865115613738575060005b8260ff1687510381101561373857613730878260018a5103038151811061371957fe5b6020026020010151876140af90919063ffffffff16565b6001016136f6565b50505091939550919395565b600061374f83614eab565b1580613761575061375f82614eab565b155b1561376e5750600061378d565b82518251808201613785878263ffffffff614eb616565b600193505050505b9392505050565b600061379f83614eab565b15806137b157506137af82614eab565b155b156137be5750600061378d565b82518251808202613785878263ffffffff614eb616565b60006137e083614eab565b15806137f257506137f082614eab565b155b156137ff5750600061378d565b82518251808203613785878263ffffffff614eb616565b600061382183614eab565b1580613833575061383182614eab565b155b156138405750600061378d565b82518251806138545760009250505061378d565b808204613785878263ffffffff614eb616565b600061387283614eab565b1580613884575061388282614eab565b155b156138915750600061378d565b82518251806138a55760009250505061378d565b808205613785878263ffffffff614eb616565b60006138c383614eab565b15806138d557506138d382614eab565b155b156138e25750600061378d565b82518251806138f65760009250505061378d565b808206613785878263ffffffff614eb616565b600061391483614eab565b1580613926575061392482614eab565b155b156139335750600061378d565b82518251806139475760009250505061378d565b808207613785878263ffffffff614eb616565b600061396584614eab565b1580613977575061397583614eab565b155b1561398457506000611171565b8351835183518061399b5760009350505050611171565b60008183850890506139b3898263ffffffff614eb616565b50600198975050505050505050565b60006139cd84614eab565b15806139df57506139dd83614eab565b155b156139ec57506000611171565b83518351835180613a035760009350505050611171565b60008183850990506139b3898263ffffffff614eb616565b6000613a2683614eab565b1580613a385750613a3682614eab565b155b15613a455750600061378d565b8251825180820a613785878263ffffffff614eb616565b6000613a6783614eab565b1580613a795750613a7782614eab565b155b15613a865750600061378d565b82518251808210613785878263ffffffff614eb616565b6000613aa883614eab565b1580613aba5750613ab882614eab565b155b15613ac75750600061378d565b82518251808211613785878263ffffffff614eb616565b6000613ae983614eab565b1580613afb5750613af982614eab565b155b15613b085750600061378d565b82518251808212613785878263ffffffff614eb616565b6000613b2a83614eab565b1580613b3c5750613b3a82614eab565b155b15613b495750600061378d565b82518251808213613785878263ffffffff614eb616565b6000613b8d613b80613b7184611248565b613b7a86611248565b14614ecc565b859063ffffffff6140af16565b5060019392505050565b6000613ba282614eab565b613bbc57613bb783600063ffffffff614eb616565b613bd3565b81518015613bd0858263ffffffff614eb616565b50505b50600192915050565b6000613be783614eab565b1580613bf95750613bf782614eab565b155b15613c065750600061378d565b82518251808216613785878263ffffffff614eb616565b6000613c2883614eab565b1580613c3a5750613c3882614eab565b155b15613c475750600061378d565b82518251808217613785878263ffffffff614eb616565b6000613c6983614eab565b1580613c7b5750613c7982614eab565b155b15613c885750600061378d565b82518251808218613785878263ffffffff614eb616565b6000613caa82614eab565b613cb657506000611242565b81518019613cca858263ffffffff614eb616565b506001949350505050565b6000613ce083614eab565b1580613cf25750613cf082614eab565b155b15613cff5750600061378d565b8251825181811a613785878263ffffffff614eb616565b6000613d2183614eab565b1580613d335750613d3182614eab565b155b15613d405750600061378d565b8251825181810b613785878263ffffffff614eb616565b6000613bd3613d6583611248565b849063ffffffff614eb616565b6000613bd3613d8083614eee565b849063ffffffff6140af16565b6000613d9883614eab565b1580613daa5750613da882614eab565b155b15613db75750600061378d565b8251825160408051602080820185905281830184905282518083038401815260609092019092528051910120613785878263ffffffff614eb616565b600192915050565b6000613e148260800151836140af90919063ffffffff16565b506001919050565b6000613e148260600151836140af90919063ffffffff16565b60609190910152600190565b6000613e4c82614f4d565b613e5857506000611242565b613e6182611248565b835250600192915050565b6000613e7783614f4d565b613e835750600061378d565b613e8c82614eab565b613e985750600061378d565b815115613b8d57613ea883611248565b84525060019392505050565b6000613e14613ed4613ec7610b99611c01565b613b7a8560200151611248565b839063ffffffff6140af16565b6000613bd3613d80836001614f5a565b6000613bd3838363ffffffff61409516565b6000613f0d61567c565b83518310613f53576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b600080613f60868661500b565b91509150613f6c611e62565b60ff168160ff161415613fa0576000613f858784615032565b909350905082613f948261509b565b9450945050505061408e565b613fa8611e8b565b60ff168160ff161415613fca57613fbf868361514d565b93509350505061408e565b613fd2611f8d565b60ff168160ff161415613fe957613fbf86836151ef565b613ff1611fe3565b60ff168160ff16101580156140125750614009615283565b60ff168160ff16105b1561404e576000614021611fe3565b820390506060614032828986615288565b9094509050836140418261329e565b955095505050505061408e565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b6140a3826040015182615321565b82604001819052505050565b6140bd826020015182615321565b82602001819052505050565b6000613e14613ed46140dc610b99611c01565b613b7a8560400151611248565b6000613e14613ed48360c001516001614f5a565b600061410882614f4d565b61411457506000611242565b61411d82611248565b60c084015250600192915050565b600061413d838363ffffffff6140af16565b613bd3838363ffffffff6140af16565b600061415f848363ffffffff6140af16565b61416f848463ffffffff6140af16565b613b8d848363ffffffff6140af16565b6000614191858363ffffffff6140af16565b6141a1858463ffffffff6140af16565b6141b1858563ffffffff6140af16565b613cca858363ffffffff6140af16565b600061416f848463ffffffff6140af16565b60006141e5858563ffffffff6140af16565b6141b1858463ffffffff6140af16565b600061420083614eab565b1580614212575061421082615397565b155b1561421f5750600061378d565b614228826153a4565b60ff1683600001511061423d5750600061378d565b613b8d826040015184600001518151811061425457fe5b6020026020010151856140af90919063ffffffff16565b600061427683615397565b1580614288575061428684614eab565b155b1561429557506000611171565b61429e836153a4565b60ff168460000151106142b357506000611171565b6040830151845181518491839181106142c857fe5b60200260200101819052506142ec6142df8261329e565b879063ffffffff6140af16565b50600195945050505050565b600061430382615397565b61430f57506000611242565b613bd361431b836153a4565b849060ff1663ffffffff614eb616565b600061433683614eab565b1580614348575061434682615397565b155b156143555750600061378d565b61435e826153a4565b60ff168360000151106143735750600061378d565b61423d848363ffffffff61409516565b600061438e82615397565b15806143a0575061439e84614eab565b155b156143ad57506000611171565b6143b6826153a4565b60ff168460000151106143cb57506000611171565b6040820151845181518591839181106143e057fe5b60200260200101819052506142ec6143f78261329e565b879063ffffffff61409516565b50600190565b600080600161441884611248565b915091509250929050565b6000806127108360800151111561443f5750600090508061408e565b614448836153cb565b6144575750600090508061408e565b600161441884611248565b600061446f610b99611c01565b61447883611248565b141561413d576040805162461bcd60e51b815260206004820152601d60248201527f496e626f7820696e737472756374696f6e2077617320626c6f636b6564000000604482015290519081900360640190fd5b600260e090910152565b60006144e082614eab565b6144ec57506000611242565b505160a09190910152600190565b6000613e148260a0015183614eb690919063ffffffff16565b60408051600160f81b60208083019190915260006021830181905260228084018290528451808503909101815260429093019093528151910120613e1490613ed4906001614f5a565b600061456783614eab565b6145735750600061378d565b61457c82614f4d565b6145885750600061378d565b613b8d613b80846000015161459c85611248565b614dd5565b60006145ac84614eab565b6145b857506000611171565b6145c182614f4d565b6145cd57506000611171565b613cca6145e785600001516145e185611248565b86614e30565b869063ffffffff6140af16565b6040805160008082526020820190925260609082614628565b61461561567c565b81526020019060019003908161460d5790505b509050613bd3613d808261329e565b600061464285614eab565b1580614654575061465284614eab565b155b80614665575061466383614eab565b155b80614676575061467482614eab565b155b1561468357506000611bf8565b8451845184511580159061469957508451600114155b156146ba576146af88600063ffffffff614eb616565b600192505050611bf8565b84518451604080516000808252602080830180855285905260ff601b9096019586168385015260608301889052608083018790529251909260019260a080820193601f1981019281900390910190855afa15801561471c573d6000803e3d6000fd5b5050604051601f190151915061474390508b6001600160a01b03831663ffffffff614eb616565b5060019a9950505050505050505050565b600160e090910152565b6008101590565b600060e090910152565b600061477961561e565b61478161561e565b600060e08201819052806147958787615032565b90965091506147a487876151ef565b602085015295506147b587876151ef565b604085015295506147c68787613f03565b606085015295506147d78787613f03565b608085015295506147e88787615032565b60a085015295506147f98787615032565b92845260c0840192909252509590945092505050565b61481761561e565b60405180610100016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e001518152509050919050565b60008060018314156148905750600290506003614dd0565b60028314156148a55750600290506003614dd0565b60038314156148ba5750600290506003614dd0565b60048314156148cf5750600290506004614dd0565b60058314156148e45750600290506007614dd0565b60068314156148f95750600290506004614dd0565b600783141561490e5750600290506007614dd0565b60088314156149235750600390506004614dd0565b60098314156149385750600390506004614dd0565b600a83141561494d5750600290506019614dd0565b601083141561496157506002905080614dd0565b601183141561497557506002905080614dd0565b601283141561498957506002905080614dd0565b601383141561499d57506002905080614dd0565b60148314156149b157506002905080614dd0565b60158314156149c557506001905080614dd0565b60168314156149d957506002905080614dd0565b60178314156149ed57506002905080614dd0565b6018831415614a0157506002905080614dd0565b6019831415614a1557506001905080614dd0565b601a831415614a2a5750600290506004614dd0565b601b831415614a3f5750600290506007614dd0565b6020831415614a545750600190506007614dd0565b6021831415614a695750600190506003614dd0565b6022831415614a7e5750600290506008614dd0565b6030831415614a9257506001905080614dd0565b6031831415614aa75750600090506001614dd0565b6032831415614abc5750600090506001614dd0565b6033831415614ad15750600190506002614dd0565b6034831415614ae65750600190506004614dd0565b6035831415614afb5750600290506004614dd0565b6036831415614b105750600090506002614dd0565b6037831415614b255750600090506001614dd0565b6038831415614b3957506001905080614dd0565b6039831415614b4e5750600090506001614dd0565b603a831415614b635750600090506002614dd0565b603b831415614b785750600090506001614dd0565b603c831415614b8d5750600090506001614dd0565b603d831415614ba157506001905080614dd0565b6040831415614bb557506001905080614dd0565b6041831415614bca5750600290506001614dd0565b6042831415614bdf5750600390506001614dd0565b6043831415614bf45750600290506001614dd0565b6044831415614c095750600390506001614dd0565b6050831415614c1d57506002905080614dd0565b6051831415614c325750600390506028614dd0565b6052831415614c475750600190506002614dd0565b6053831415614c5c5750600190506003614dd0565b6054831415614c715750600290506029614dd0565b6060831415614c865750600090506064614dd0565b6061831415614c9b5750600190506064614dd0565b6070831415614cb05750600190506064614dd0565b6072831415614cc55750600090506028614dd0565b6073831415614cda5750600090506005614dd0565b6074831415614cef575060009050600a614dd0565b6075831415614d045750600190506000614dd0565b6076831415614d195750600090506001614dd0565b6077831415614d2e5750600090506019614dd0565b6078831415614d435750600290506019614dd0565b6079831415614d585750600390506019614dd0565b607b831415614d6d575060009050600a614dd0565b6080831415614d83575060049050614e20614dd0565b6040805162461bcd60e51b815260206004820152601860248201527f496e76616c6964206f70636f64653a206f70496e666f28290000000000000000604482015290519081900360640190fd5b915091565b614ddd61567c565b6040805160608101825260ff85168152602080820185905282516000808252918101845261378d93830191614e28565b614e1561567c565b815260200190600190039081614e0d5790505b5090526154c9565b614e3861567c565b604080516001808252818301909252606091816020015b614e5761567c565b815260200190600190039081614e4f5790505090508281600081518110614e7a57fe5b6020026020010181905250611bf860405180606001604052808760ff168152602001868152602001838152506154c9565b6060015160ff161590565b6140bd8260200151614ec78361509b565b615321565b614ed461567c565b8115614ee45761126e600161509b565b61126e600061509b565b614ef661567c565b816060015160ff1660021415614f3d5760405162461bcd60e51b81526004018080602001828103825260218152602001806157416021913960400191505060405180910390fd5b611242826060015160ff1661509b565b6060015160ff1660011490565b614f6261567c565b6040805160a0810182528481528151606081018352600080825260208281018290528451828152808201865293949085019390830191614fb8565b614fa561567c565b815260200190600190039081614f9d5790505b50905281526040805160008082526020828101909352919092019190614ff4565b614fe161567c565b815260200190600190039081614fd95790505b508152606460208201526040019290925250919050565b6000808260010184848151811061501e57fe5b016020015190925060f81c90509250929050565b6000808284511015801561504a575060208385510310155b615087576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b60208301614418858563ffffffff61553016565b6150a361567c565b6040805160a08101825283815281516060810183526000808252602082810182905284518281528082018652939490850193908301916150f9565b6150e661567c565b8152602001906001900390816150de5790505b50905281526040805160008082526020828101909352919092019190615135565b61512261567c565b81526020019060019003908161511a5790505b50815260006020820152600160409091015292915050565b600061515761567c565b8260008061516361567c565b600061516f898661500b565b909550935061517e898661500b565b9095509250600160ff8516141561519f576151998986613f03565b90955091505b6151a9898661554c565b9095509050600160ff851614156151d457846151c6848385614e30565b96509650505050505061408e565b846151df8483614dd5565b9650965050505050509250929050565b60006151f961567c565b8284511015801561520e575060408385510310155b61524a576040805162461bcd60e51b81526020600482015260086024820152671d1bc81cda1bdc9d60c21b604482015290519081900360640190fd5b600080615257868661554c565b90945091506152668685615032565b9094509050836152768383611195565b9350935050509250929050565b600c90565b60006060600083905060608660ff166040519080825280602002602001820160405280156152d057816020015b6152bd61567c565b8152602001906001900390816152b55790505b50905060005b8760ff168160ff161015615314576152ee8784613f03565b8351849060ff85169081106152ff57fe5b602090810291909101015292506001016152d6565b5090969095509350505050565b61532961567c565b6040805160028082526060828101909352816020015b61534761567c565b81526020019060019003908161533f579050509050828160008151811061536a57fe5b6020026020010181905250838160018151811061538357fe5b602002602001018190525061117181611fe8565b6060015160ff1660031490565b606081015160009060ff16600314156153c35750604081015151610f68565b506001610f68565b606081015160009060ff166153e257506001610f68565b606082015160ff16600114156153fa57506000610f68565b606082015160ff166002141561544e576040805162461bcd60e51b81526020600482015260146024820152736d75737420686176652066756c6c2076616c756560601b604482015290519081900360640190fd5b606082015160ff16600314156154b15760408201515160005b818110156154a65761548f8460400151828151811061548257fe5b60200260200101516153cb565b61549e57600092505050610f68565b600101615467565b506001915050610f68565b606082015160ff166064141561132757506000610f68565b6154d161567c565b6040805160a0810182526000808252602080830186905283518281529081018452919283019190615518565b61550561567c565b8152602001906001900390816154fd5790505b50815260016020820181905260409091015292915050565b6000816020018351101561554357600080fd5b50016020015190565b60008060208301614418858563ffffffff61553016565b6040518061010001604052806000801916815260200160608152602001600063ffffffff1681526020016060815260200160608152602001606081526020016060815260200160006001600160401b031681525090565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081019190915290565b604080516101008101909152600081526020810161563a61567c565b815260200161564761567c565b815260200161565461567c565b815260200161566161567c565b81526000602082018190526040820181905260609091015290565b6040518060a00160405280600081526020016156966156b0565b815260606020820181905260006040830181905291015290565b604080516060808201835260008083526020830152918101919091529056fe50726f6f6620686164206e6f6e206d61746368696e6720737461727420737461746573656e74206d65737361676520646f65736e2774206d61746368206f7574707574206d6573736167654c6f67206e6f742063616c6c65642c20627574206d657373616765206973206e6f6e7a65726f56616c7565206d757374206861766520612076616c6964207479706520636f646553656e642076616c756520657863656564732073697a65206c696d69742c206e6f206d6573736167652073686f756c642062652073656e744c6f676765642076616c756520646f65736e2774206d61746368206f7574707574206c6f6753656e64206e6f742063616c6c65642c20627574206d657373616765206973206e6f6e7a65726fa265627a7a72315820398fba29cda91cecd92fb09a3be7e9b3b312906e3d9ab260e0844a3d5d3fc8a564736f6c634300050f0032"

// DeployExecutionChallenge deploys a new Ethereum contract, binding an instance of ExecutionChallenge to it.
func DeployExecutionChallenge(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ExecutionChallenge, error) {
	parsed, err := abi.JSON(strings.NewReader(ExecutionChallengeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ExecutionChallengeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ExecutionChallenge{ExecutionChallengeCaller: ExecutionChallengeCaller{contract: contract}, ExecutionChallengeTransactor: ExecutionChallengeTransactor{contract: contract}, ExecutionChallengeFilterer: ExecutionChallengeFilterer{contract: contract}}, nil
}

// ExecutionChallenge is an auto generated Go binding around an Ethereum contract.
type ExecutionChallenge struct {
	ExecutionChallengeCaller     // Read-only binding to the contract
	ExecutionChallengeTransactor // Write-only binding to the contract
	ExecutionChallengeFilterer   // Log filterer for contract events
}

// ExecutionChallengeCaller is an auto generated read-only Go binding around an Ethereum contract.
type ExecutionChallengeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExecutionChallengeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ExecutionChallengeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExecutionChallengeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ExecutionChallengeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExecutionChallengeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ExecutionChallengeSession struct {
	Contract     *ExecutionChallenge // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ExecutionChallengeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ExecutionChallengeCallerSession struct {
	Contract *ExecutionChallengeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ExecutionChallengeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ExecutionChallengeTransactorSession struct {
	Contract     *ExecutionChallengeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ExecutionChallengeRaw is an auto generated low-level Go binding around an Ethereum contract.
type ExecutionChallengeRaw struct {
	Contract *ExecutionChallenge // Generic contract binding to access the raw methods on
}

// ExecutionChallengeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ExecutionChallengeCallerRaw struct {
	Contract *ExecutionChallengeCaller // Generic read-only contract binding to access the raw methods on
}

// ExecutionChallengeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ExecutionChallengeTransactorRaw struct {
	Contract *ExecutionChallengeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewExecutionChallenge creates a new instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallenge(address common.Address, backend bind.ContractBackend) (*ExecutionChallenge, error) {
	contract, err := bindExecutionChallenge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallenge{ExecutionChallengeCaller: ExecutionChallengeCaller{contract: contract}, ExecutionChallengeTransactor: ExecutionChallengeTransactor{contract: contract}, ExecutionChallengeFilterer: ExecutionChallengeFilterer{contract: contract}}, nil
}

// NewExecutionChallengeCaller creates a new read-only instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallengeCaller(address common.Address, caller bind.ContractCaller) (*ExecutionChallengeCaller, error) {
	contract, err := bindExecutionChallenge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeCaller{contract: contract}, nil
}

// NewExecutionChallengeTransactor creates a new write-only instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallengeTransactor(address common.Address, transactor bind.ContractTransactor) (*ExecutionChallengeTransactor, error) {
	contract, err := bindExecutionChallenge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeTransactor{contract: contract}, nil
}

// NewExecutionChallengeFilterer creates a new log filterer instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallengeFilterer(address common.Address, filterer bind.ContractFilterer) (*ExecutionChallengeFilterer, error) {
	contract, err := bindExecutionChallenge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeFilterer{contract: contract}, nil
}

// bindExecutionChallenge binds a generic wrapper to an already deployed contract.
func bindExecutionChallenge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ExecutionChallengeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ExecutionChallenge *ExecutionChallengeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ExecutionChallenge.Contract.ExecutionChallengeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ExecutionChallenge *ExecutionChallengeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ExecutionChallengeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ExecutionChallenge *ExecutionChallengeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ExecutionChallengeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ExecutionChallenge *ExecutionChallengeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ExecutionChallenge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ExecutionChallenge *ExecutionChallengeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ExecutionChallenge *ExecutionChallengeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.contract.Transact(opts, method, params...)
}

// BisectAssertion is a paid mutator transaction binding the contract method 0x6f537a39.
//
// Solidity: function bisectAssertion(bytes32 _beforeInbox, bytes32[] _machineHashes, uint32 inboxInsnIndex, bytes32[] _messageAccs, bytes32[] _logAccs, uint64[] _outCounts, uint64[] _gases, uint64 _totalSteps) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) BisectAssertion(opts *bind.TransactOpts, _beforeInbox [32]byte, _machineHashes [][32]byte, inboxInsnIndex uint32, _messageAccs [][32]byte, _logAccs [][32]byte, _outCounts []uint64, _gases []uint64, _totalSteps uint64) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "bisectAssertion", _beforeInbox, _machineHashes, inboxInsnIndex, _messageAccs, _logAccs, _outCounts, _gases, _totalSteps)
}

// BisectAssertion is a paid mutator transaction binding the contract method 0x6f537a39.
//
// Solidity: function bisectAssertion(bytes32 _beforeInbox, bytes32[] _machineHashes, uint32 inboxInsnIndex, bytes32[] _messageAccs, bytes32[] _logAccs, uint64[] _outCounts, uint64[] _gases, uint64 _totalSteps) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) BisectAssertion(_beforeInbox [32]byte, _machineHashes [][32]byte, inboxInsnIndex uint32, _messageAccs [][32]byte, _logAccs [][32]byte, _outCounts []uint64, _gases []uint64, _totalSteps uint64) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.BisectAssertion(&_ExecutionChallenge.TransactOpts, _beforeInbox, _machineHashes, inboxInsnIndex, _messageAccs, _logAccs, _outCounts, _gases, _totalSteps)
}

// BisectAssertion is a paid mutator transaction binding the contract method 0x6f537a39.
//
// Solidity: function bisectAssertion(bytes32 _beforeInbox, bytes32[] _machineHashes, uint32 inboxInsnIndex, bytes32[] _messageAccs, bytes32[] _logAccs, uint64[] _outCounts, uint64[] _gases, uint64 _totalSteps) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) BisectAssertion(_beforeInbox [32]byte, _machineHashes [][32]byte, inboxInsnIndex uint32, _messageAccs [][32]byte, _logAccs [][32]byte, _outCounts []uint64, _gases []uint64, _totalSteps uint64) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.BisectAssertion(&_ExecutionChallenge.TransactOpts, _beforeInbox, _machineHashes, inboxInsnIndex, _messageAccs, _logAccs, _outCounts, _gases, _totalSteps)
}

// ChooseSegment is a paid mutator transaction binding the contract method 0x79a9ad85.
//
// Solidity: function chooseSegment(uint256 _segmentToChallenge, bytes _proof, bytes32 _bisectionRoot, bytes32 _bisectionHash) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) ChooseSegment(opts *bind.TransactOpts, _segmentToChallenge *big.Int, _proof []byte, _bisectionRoot [32]byte, _bisectionHash [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "chooseSegment", _segmentToChallenge, _proof, _bisectionRoot, _bisectionHash)
}

// ChooseSegment is a paid mutator transaction binding the contract method 0x79a9ad85.
//
// Solidity: function chooseSegment(uint256 _segmentToChallenge, bytes _proof, bytes32 _bisectionRoot, bytes32 _bisectionHash) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) ChooseSegment(_segmentToChallenge *big.Int, _proof []byte, _bisectionRoot [32]byte, _bisectionHash [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ChooseSegment(&_ExecutionChallenge.TransactOpts, _segmentToChallenge, _proof, _bisectionRoot, _bisectionHash)
}

// ChooseSegment is a paid mutator transaction binding the contract method 0x79a9ad85.
//
// Solidity: function chooseSegment(uint256 _segmentToChallenge, bytes _proof, bytes32 _bisectionRoot, bytes32 _bisectionHash) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) ChooseSegment(_segmentToChallenge *big.Int, _proof []byte, _bisectionRoot [32]byte, _bisectionHash [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ChooseSegment(&_ExecutionChallenge.TransactOpts, _segmentToChallenge, _proof, _bisectionRoot, _bisectionHash)
}

// InitializeBisection is a paid mutator transaction binding the contract method 0x02ad1e4e.
//
// Solidity: function initializeBisection(address _rollupAddress, address _asserter, address _challenger, uint256 _challengePeriodTicks, bytes32 _challengeState) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) InitializeBisection(opts *bind.TransactOpts, _rollupAddress common.Address, _asserter common.Address, _challenger common.Address, _challengePeriodTicks *big.Int, _challengeState [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "initializeBisection", _rollupAddress, _asserter, _challenger, _challengePeriodTicks, _challengeState)
}

// InitializeBisection is a paid mutator transaction binding the contract method 0x02ad1e4e.
//
// Solidity: function initializeBisection(address _rollupAddress, address _asserter, address _challenger, uint256 _challengePeriodTicks, bytes32 _challengeState) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) InitializeBisection(_rollupAddress common.Address, _asserter common.Address, _challenger common.Address, _challengePeriodTicks *big.Int, _challengeState [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.InitializeBisection(&_ExecutionChallenge.TransactOpts, _rollupAddress, _asserter, _challenger, _challengePeriodTicks, _challengeState)
}

// InitializeBisection is a paid mutator transaction binding the contract method 0x02ad1e4e.
//
// Solidity: function initializeBisection(address _rollupAddress, address _asserter, address _challenger, uint256 _challengePeriodTicks, bytes32 _challengeState) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) InitializeBisection(_rollupAddress common.Address, _asserter common.Address, _challenger common.Address, _challengePeriodTicks *big.Int, _challengeState [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.InitializeBisection(&_ExecutionChallenge.TransactOpts, _rollupAddress, _asserter, _challenger, _challengePeriodTicks, _challengeState)
}

// OneStepProof is a paid mutator transaction binding the contract method 0x82498b81.
//
// Solidity: function oneStepProof(bytes32 _beforeHash, bytes32 _beforeInbox, uint256 _beforeInboxValueSize, bytes32 _afterHash, bool _didInboxInsns, bytes32 _firstMessage, bytes32 _lastMessage, bytes32 _firstLog, bytes32 _lastLog, uint64 _gas, bytes _proof) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) OneStepProof(opts *bind.TransactOpts, _beforeHash [32]byte, _beforeInbox [32]byte, _beforeInboxValueSize *big.Int, _afterHash [32]byte, _didInboxInsns bool, _firstMessage [32]byte, _lastMessage [32]byte, _firstLog [32]byte, _lastLog [32]byte, _gas uint64, _proof []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "oneStepProof", _beforeHash, _beforeInbox, _beforeInboxValueSize, _afterHash, _didInboxInsns, _firstMessage, _lastMessage, _firstLog, _lastLog, _gas, _proof)
}

// OneStepProof is a paid mutator transaction binding the contract method 0x82498b81.
//
// Solidity: function oneStepProof(bytes32 _beforeHash, bytes32 _beforeInbox, uint256 _beforeInboxValueSize, bytes32 _afterHash, bool _didInboxInsns, bytes32 _firstMessage, bytes32 _lastMessage, bytes32 _firstLog, bytes32 _lastLog, uint64 _gas, bytes _proof) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) OneStepProof(_beforeHash [32]byte, _beforeInbox [32]byte, _beforeInboxValueSize *big.Int, _afterHash [32]byte, _didInboxInsns bool, _firstMessage [32]byte, _lastMessage [32]byte, _firstLog [32]byte, _lastLog [32]byte, _gas uint64, _proof []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.OneStepProof(&_ExecutionChallenge.TransactOpts, _beforeHash, _beforeInbox, _beforeInboxValueSize, _afterHash, _didInboxInsns, _firstMessage, _lastMessage, _firstLog, _lastLog, _gas, _proof)
}

// OneStepProof is a paid mutator transaction binding the contract method 0x82498b81.
//
// Solidity: function oneStepProof(bytes32 _beforeHash, bytes32 _beforeInbox, uint256 _beforeInboxValueSize, bytes32 _afterHash, bool _didInboxInsns, bytes32 _firstMessage, bytes32 _lastMessage, bytes32 _firstLog, bytes32 _lastLog, uint64 _gas, bytes _proof) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) OneStepProof(_beforeHash [32]byte, _beforeInbox [32]byte, _beforeInboxValueSize *big.Int, _afterHash [32]byte, _didInboxInsns bool, _firstMessage [32]byte, _lastMessage [32]byte, _firstLog [32]byte, _lastLog [32]byte, _gas uint64, _proof []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.OneStepProof(&_ExecutionChallenge.TransactOpts, _beforeHash, _beforeInbox, _beforeInboxValueSize, _afterHash, _didInboxInsns, _firstMessage, _lastMessage, _firstLog, _lastLog, _gas, _proof)
}

// TimeoutChallenge is a paid mutator transaction binding the contract method 0xced5c1bf.
//
// Solidity: function timeoutChallenge() returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) TimeoutChallenge(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "timeoutChallenge")
}

// TimeoutChallenge is a paid mutator transaction binding the contract method 0xced5c1bf.
//
// Solidity: function timeoutChallenge() returns()
func (_ExecutionChallenge *ExecutionChallengeSession) TimeoutChallenge() (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.TimeoutChallenge(&_ExecutionChallenge.TransactOpts)
}

// TimeoutChallenge is a paid mutator transaction binding the contract method 0xced5c1bf.
//
// Solidity: function timeoutChallenge() returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) TimeoutChallenge() (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.TimeoutChallenge(&_ExecutionChallenge.TransactOpts)
}

// ExecutionChallengeAsserterTimedOutIterator is returned from FilterAsserterTimedOut and is used to iterate over the raw logs and unpacked data for AsserterTimedOut events raised by the ExecutionChallenge contract.
type ExecutionChallengeAsserterTimedOutIterator struct {
	Event *ExecutionChallengeAsserterTimedOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeAsserterTimedOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeAsserterTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeAsserterTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeAsserterTimedOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeAsserterTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeAsserterTimedOut represents a AsserterTimedOut event raised by the ExecutionChallenge contract.
type ExecutionChallengeAsserterTimedOut struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAsserterTimedOut is a free log retrieval operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterAsserterTimedOut(opts *bind.FilterOpts) (*ExecutionChallengeAsserterTimedOutIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "AsserterTimedOut")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeAsserterTimedOutIterator{contract: _ExecutionChallenge.contract, event: "AsserterTimedOut", logs: logs, sub: sub}, nil
}

// WatchAsserterTimedOut is a free log subscription operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchAsserterTimedOut(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeAsserterTimedOut) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "AsserterTimedOut")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeAsserterTimedOut)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "AsserterTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAsserterTimedOut is a log parse operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseAsserterTimedOut(log types.Log) (*ExecutionChallengeAsserterTimedOut, error) {
	event := new(ExecutionChallengeAsserterTimedOut)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "AsserterTimedOut", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeBisectedAssertionIterator is returned from FilterBisectedAssertion and is used to iterate over the raw logs and unpacked data for BisectedAssertion events raised by the ExecutionChallenge contract.
type ExecutionChallengeBisectedAssertionIterator struct {
	Event *ExecutionChallengeBisectedAssertion // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeBisectedAssertionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeBisectedAssertion)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeBisectedAssertion)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeBisectedAssertionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeBisectedAssertionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeBisectedAssertion represents a BisectedAssertion event raised by the ExecutionChallenge contract.
type ExecutionChallengeBisectedAssertion struct {
	MachineHashes  [][32]byte
	InboxInsnIndex uint32
	MessageAccs    [][32]byte
	LogAccs        [][32]byte
	OutCounts      []uint64
	Gases          []uint64
	TotalSteps     uint64
	DeadlineTicks  *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterBisectedAssertion is a free log retrieval operation binding the contract event 0xfdfc7d7356ac103488916cfffd6e537843dadc44dc71695a7ed504d9f6685287.
//
// Solidity: event BisectedAssertion(bytes32[] machineHashes, uint32 inboxInsnIndex, bytes32[] messageAccs, bytes32[] logAccs, uint64[] outCounts, uint64[] gases, uint64 totalSteps, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterBisectedAssertion(opts *bind.FilterOpts) (*ExecutionChallengeBisectedAssertionIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "BisectedAssertion")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeBisectedAssertionIterator{contract: _ExecutionChallenge.contract, event: "BisectedAssertion", logs: logs, sub: sub}, nil
}

// WatchBisectedAssertion is a free log subscription operation binding the contract event 0xfdfc7d7356ac103488916cfffd6e537843dadc44dc71695a7ed504d9f6685287.
//
// Solidity: event BisectedAssertion(bytes32[] machineHashes, uint32 inboxInsnIndex, bytes32[] messageAccs, bytes32[] logAccs, uint64[] outCounts, uint64[] gases, uint64 totalSteps, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchBisectedAssertion(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeBisectedAssertion) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "BisectedAssertion")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeBisectedAssertion)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "BisectedAssertion", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBisectedAssertion is a log parse operation binding the contract event 0xfdfc7d7356ac103488916cfffd6e537843dadc44dc71695a7ed504d9f6685287.
//
// Solidity: event BisectedAssertion(bytes32[] machineHashes, uint32 inboxInsnIndex, bytes32[] messageAccs, bytes32[] logAccs, uint64[] outCounts, uint64[] gases, uint64 totalSteps, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseBisectedAssertion(log types.Log) (*ExecutionChallengeBisectedAssertion, error) {
	event := new(ExecutionChallengeBisectedAssertion)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "BisectedAssertion", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeChallengerTimedOutIterator is returned from FilterChallengerTimedOut and is used to iterate over the raw logs and unpacked data for ChallengerTimedOut events raised by the ExecutionChallenge contract.
type ExecutionChallengeChallengerTimedOutIterator struct {
	Event *ExecutionChallengeChallengerTimedOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeChallengerTimedOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeChallengerTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeChallengerTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeChallengerTimedOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeChallengerTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeChallengerTimedOut represents a ChallengerTimedOut event raised by the ExecutionChallenge contract.
type ExecutionChallengeChallengerTimedOut struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterChallengerTimedOut is a free log retrieval operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterChallengerTimedOut(opts *bind.FilterOpts) (*ExecutionChallengeChallengerTimedOutIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "ChallengerTimedOut")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeChallengerTimedOutIterator{contract: _ExecutionChallenge.contract, event: "ChallengerTimedOut", logs: logs, sub: sub}, nil
}

// WatchChallengerTimedOut is a free log subscription operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchChallengerTimedOut(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeChallengerTimedOut) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "ChallengerTimedOut")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeChallengerTimedOut)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengerTimedOut is a log parse operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseChallengerTimedOut(log types.Log) (*ExecutionChallengeChallengerTimedOut, error) {
	event := new(ExecutionChallengeChallengerTimedOut)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeContinuedIterator is returned from FilterContinued and is used to iterate over the raw logs and unpacked data for Continued events raised by the ExecutionChallenge contract.
type ExecutionChallengeContinuedIterator struct {
	Event *ExecutionChallengeContinued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeContinuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeContinued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeContinued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeContinuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeContinuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeContinued represents a Continued event raised by the ExecutionChallenge contract.
type ExecutionChallengeContinued struct {
	SegmentIndex  *big.Int
	DeadlineTicks *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterContinued is a free log retrieval operation binding the contract event 0x1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e4.
//
// Solidity: event Continued(uint256 segmentIndex, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterContinued(opts *bind.FilterOpts) (*ExecutionChallengeContinuedIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "Continued")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeContinuedIterator{contract: _ExecutionChallenge.contract, event: "Continued", logs: logs, sub: sub}, nil
}

// WatchContinued is a free log subscription operation binding the contract event 0x1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e4.
//
// Solidity: event Continued(uint256 segmentIndex, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchContinued(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeContinued) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "Continued")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeContinued)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "Continued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContinued is a log parse operation binding the contract event 0x1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e4.
//
// Solidity: event Continued(uint256 segmentIndex, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseContinued(log types.Log) (*ExecutionChallengeContinued, error) {
	event := new(ExecutionChallengeContinued)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "Continued", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeInitiatedChallengeIterator is returned from FilterInitiatedChallenge and is used to iterate over the raw logs and unpacked data for InitiatedChallenge events raised by the ExecutionChallenge contract.
type ExecutionChallengeInitiatedChallengeIterator struct {
	Event *ExecutionChallengeInitiatedChallenge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeInitiatedChallengeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeInitiatedChallenge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeInitiatedChallenge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeInitiatedChallengeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeInitiatedChallengeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeInitiatedChallenge represents a InitiatedChallenge event raised by the ExecutionChallenge contract.
type ExecutionChallengeInitiatedChallenge struct {
	DeadlineTicks *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterInitiatedChallenge is a free log retrieval operation binding the contract event 0xe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc67.
//
// Solidity: event InitiatedChallenge(uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterInitiatedChallenge(opts *bind.FilterOpts) (*ExecutionChallengeInitiatedChallengeIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "InitiatedChallenge")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeInitiatedChallengeIterator{contract: _ExecutionChallenge.contract, event: "InitiatedChallenge", logs: logs, sub: sub}, nil
}

// WatchInitiatedChallenge is a free log subscription operation binding the contract event 0xe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc67.
//
// Solidity: event InitiatedChallenge(uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchInitiatedChallenge(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeInitiatedChallenge) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "InitiatedChallenge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeInitiatedChallenge)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiatedChallenge is a log parse operation binding the contract event 0xe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc67.
//
// Solidity: event InitiatedChallenge(uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseInitiatedChallenge(log types.Log) (*ExecutionChallengeInitiatedChallenge, error) {
	event := new(ExecutionChallengeInitiatedChallenge)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeOneStepProofCompletedIterator is returned from FilterOneStepProofCompleted and is used to iterate over the raw logs and unpacked data for OneStepProofCompleted events raised by the ExecutionChallenge contract.
type ExecutionChallengeOneStepProofCompletedIterator struct {
	Event *ExecutionChallengeOneStepProofCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeOneStepProofCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeOneStepProofCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeOneStepProofCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeOneStepProofCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeOneStepProofCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeOneStepProofCompleted represents a OneStepProofCompleted event raised by the ExecutionChallenge contract.
type ExecutionChallengeOneStepProofCompleted struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOneStepProofCompleted is a free log retrieval operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterOneStepProofCompleted(opts *bind.FilterOpts) (*ExecutionChallengeOneStepProofCompletedIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "OneStepProofCompleted")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeOneStepProofCompletedIterator{contract: _ExecutionChallenge.contract, event: "OneStepProofCompleted", logs: logs, sub: sub}, nil
}

// WatchOneStepProofCompleted is a free log subscription operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchOneStepProofCompleted(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeOneStepProofCompleted) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "OneStepProofCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeOneStepProofCompleted)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOneStepProofCompleted is a log parse operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseOneStepProofCompleted(log types.Log) (*ExecutionChallengeOneStepProofCompleted, error) {
	event := new(ExecutionChallengeOneStepProofCompleted)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OneStepProofABI is the input ABI used to generate the binding from.
const OneStepProofABI = "[]"

// OneStepProofBin is the compiled bytecode used for deploying new contracts.
var OneStepProofBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a7231582057ee9f7775279ea01d30b4f8fa169380359e39508840293036e27a802abb0f5064736f6c634300050f0032"

// DeployOneStepProof deploys a new Ethereum contract, binding an instance of OneStepProof to it.
func DeployOneStepProof(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// OneStepProof is an auto generated Go binding around an Ethereum contract.
type OneStepProof struct {
	OneStepProofCaller     // Read-only binding to the contract
	OneStepProofTransactor // Write-only binding to the contract
	OneStepProofFilterer   // Log filterer for contract events
}

// OneStepProofCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofSession struct {
	Contract     *OneStepProof     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProofCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofCallerSession struct {
	Contract *OneStepProofCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// OneStepProofTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTransactorSession struct {
	Contract     *OneStepProofTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// OneStepProofRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofRaw struct {
	Contract *OneStepProof // Generic contract binding to access the raw methods on
}

// OneStepProofCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofCallerRaw struct {
	Contract *OneStepProofCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTransactorRaw struct {
	Contract *OneStepProofTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof creates a new instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProof(address common.Address, backend bind.ContractBackend) (*OneStepProof, error) {
	contract, err := bindOneStepProof(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// NewOneStepProofCaller creates a new read-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofCaller, error) {
	contract, err := bindOneStepProof(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofCaller{contract: contract}, nil
}

// NewOneStepProofTransactor creates a new write-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTransactor, error) {
	contract, err := bindOneStepProof(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTransactor{contract: contract}, nil
}

// NewOneStepProofFilterer creates a new log filterer instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofFilterer, error) {
	contract, err := bindOneStepProof(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofFilterer{contract: contract}, nil
}

// bindOneStepProof binds a generic wrapper to an already deployed contract.
func bindOneStepProof(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.OneStepProofCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transact(opts, method, params...)
}
