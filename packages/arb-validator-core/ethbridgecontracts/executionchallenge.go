// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgecontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ExecutionChallengeABI is the input ABI used to generate the binding from.
const ExecutionChallengeABI = "[{\"anonymous\":false,\"inputs\":[],\"name\":\"AsserterTimedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"assertionHashes\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadlineTicks\",\"type\":\"uint256\"}],\"name\":\"BisectedAssertion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ChallengerTimedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"segmentIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadlineTicks\",\"type\":\"uint256\"}],\"name\":\"Continued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadlineTicks\",\"type\":\"uint256\"}],\"name\":\"InitiatedChallenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OneStepProofCompleted\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_machineHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_inboxAccs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_messageAccs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_logAccs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_outCounts\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_gases\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64\",\"name\":\"_totalSteps\",\"type\":\"uint64\"}],\"name\":\"bisectAssertion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segmentToChallenge\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_bisectionRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_bisectionHash\",\"type\":\"bytes32\"}],\"name\":\"chooseSegment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rollupAddress\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_asserter\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_challenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_challengePeriodTicks\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_challengeState\",\"type\":\"bytes32\"}],\"name\":\"initializeBisection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_firstInbox\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_firstMessage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_firstLog\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"oneStepProof\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_firstInbox\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_firstMessage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_firstLog\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"_kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inboxSeqNum\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_msgData\",\"type\":\"bytes\"}],\"name\":\"oneStepProofInbox\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"timeoutChallenge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ExecutionChallengeFuncSigs maps the 4-byte function signature to its string representation.
var ExecutionChallengeFuncSigs = map[string]string{
	"efaa0772": "bisectAssertion(bytes32[],bytes32[],bytes32[],bytes32[],uint64[],uint64[],uint64)",
	"79a9ad85": "chooseSegment(uint256,bytes,bytes32,bytes32)",
	"02ad1e4e": "initializeBisection(address,address,address,uint256,bytes32)",
	"082379bb": "oneStepProof(bytes32,bytes32,bytes32,bytes)",
	"a8a4e532": "oneStepProofInbox(bytes32,bytes32,bytes32,bytes,uint8,uint256,uint256,address,uint256,bytes)",
	"ced5c1bf": "timeoutChallenge()",
}

// ExecutionChallengeBin is the compiled bytecode used for deploying new contracts.
var ExecutionChallengeBin = "0x608060405234801561001057600080fd5b5061656a80620000216000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806302ad1e4e14610067578063082379bb146100ab57806379a9ad8514610162578063a8a4e53214610212578063ced5c1bf14610376578063efaa07721461037e575b600080fd5b6100a9600480360360a081101561007d57600080fd5b506001600160a01b038135811691602081013582169160408201351690606081013590608001356106b4565b005b6100a9600480360360808110156100c157600080fd5b81359160208101359160408201359190810190608081016060820135600160201b8111156100ee57600080fd5b82018360208201111561010057600080fd5b803590602001918460018302840111600160201b8311171561012157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506106c9945050505050565b6100a96004803603608081101561017857600080fd5b81359190810190604081016020820135600160201b81111561019957600080fd5b8201836020820111156101ab57600080fd5b803590602001918460018302840111600160201b831117156101cc57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050823593505050602001356108ab565b6100a9600480360361014081101561022957600080fd5b81359160208101359160408201359190810190608081016060820135600160201b81111561025657600080fd5b82018360208201111561026857600080fd5b803590602001918460018302840111600160201b8311171561028957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929560ff85351695602086013595604081013595506001600160a01b0360608201351694506080810135935060c081019060a00135600160201b81111561030257600080fd5b82018360208201111561031457600080fd5b803590602001918460018302840111600160201b8311171561033557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610b6c945050505050565b6100a9610d1d565b6100a9600480360360e081101561039457600080fd5b810190602081018135600160201b8111156103ae57600080fd5b8201836020820111156103c057600080fd5b803590602001918460208302840111600160201b831117156103e157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561043057600080fd5b82018360208201111561044257600080fd5b803590602001918460208302840111600160201b8311171561046357600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156104b257600080fd5b8201836020820111156104c457600080fd5b803590602001918460208302840111600160201b831117156104e557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561053457600080fd5b82018360208201111561054657600080fd5b803590602001918460208302840111600160201b8311171561056757600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156105b657600080fd5b8201836020820111156105c857600080fd5b803590602001918460208302840111600160201b831117156105e957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561063857600080fd5b82018360208201111561064a57600080fd5b803590602001918460208302840111600160201b8311171561066b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160401b03169150610dfd9050565b6106c085858585610fd5565b60065550505050565b60055460ff1660028111156106da57fe5b600114604051806040016040528060098152602001684249535f535441544560b81b815250906107885760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561074d578181015183820152602001610735565b50505050905090810190601f16801561077a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600354610795436110f0565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b815250906108085760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b5060015460408051808201909152600a8152692124a9afa9a2a72222a960b11b6020820152906001600160a01b031633146108845760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b5061088d6162b7565b610899858585856110fb565b90506108a481611508565b5050505050565b60055460ff1660028111156108bc57fe5b60021460405180604001604052806009815260200168434f4e5f535441544560b81b8152509061092d5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b5060035461093a436110f0565b11156040518060400160405280600c81526020016b434f4e5f444541444c494e4560a01b815250906109ad5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b5060025460408051808201909152600a81526921a7a72fa9a2a72222a960b11b6020820152906001600160a01b03163314610a295760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b5060065482146040518060400160405280600881526020016721a7a72fa82922ab60c11b81525090610a9c5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b50610aac8383838760010161162f565b6040518060400160405280600981526020016821a7a72fa82927a7a360b91b81525090610b1a5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b506006819055610b28611730565b60035460408051868152602081019290925280517f1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e49281900390910190a150505050565b60055460ff166002811115610b7d57fe5b600114604051806040016040528060098152602001684249535f535441544560b81b81525090610bee5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b50600354610bfb436110f0565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b81525090610c6e5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b5060015460408051808201909152600a8152692124a9afa9a2a72222a960b11b6020820152906001600160a01b03163314610cea5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b50610cf36162b7565b610d058b8b8b8b8b8b8b8b8b8b61174c565b9050610d1081611508565b5050505050505050505050565b600354610d29436110f0565b11610d7b576040805162461bcd60e51b815260206004820152601760248201527f446561646c696e65206861736e27742065787069726564000000000000000000604482015290519081900360640190fd5b600160055460ff166002811115610d8e57fe5b1415610dca576040517f2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f090600090a1610dc56117a6565b610dfb565b6040517f4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a90600090a1610dfb61181a565b565b60055460ff166002811115610e0e57fe5b600114604051806040016040528060098152602001684249535f535441544560b81b81525090610e7f5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b50600354610e8c436110f0565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b81525090610eff5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b5060015460408051808201909152600a8152692124a9afa9a2a72222a960b11b6020820152906001600160a01b03163314610f7b5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b50610f84616343565b6040518060e00160405280898152602001888152602001878152602001868152602001858152602001848152602001836001600160401b03168152509050610fcb81611872565b5050505050505050565b600060055460ff166002811115610fe857fe5b146040518060400160405280600f81526020016e4348414c5f494e49545f535441544560881b8152509061105d5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b50600080546001600160a01b038681166001600160a01b03199283161790925560018054868416908316178155600280549386169390921692909217905560048290556005805460ff191690911790556110b56119ce565b60035460408051918252517fe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc679181900360200190a150505050565b6103e881025b919050565b6111036162b7565b60008260008151811061111257fe5b602001015160f81c60f81b60f81c905060008360018151811061113157fe5b602001015160f81c60f81b60f81c905060006002905060608360040160ff1660405190808252806020026020018201604052801561118957816020015b611176616389565b81526020019060019003908161116e5790505b50905060608360040160ff166040519080825280602002602001820160405280156111ce57816020015b6111bb616389565b8152602001906001900390816111b35790505b50905060005b8560ff1681101561120c576111e988856119e0565b84518590849081106111f757fe5b602090810291909101015293506001016111d4565b5060005b8460ff168110156112485761122588856119e0565b835184908490811061123357fe5b60209081029190910101529350600101611210565b506112516163bd565b61125b8885611b72565b8092508195505050600088858151811061127157fe5b602001015160f81c60f81b60f81c9050600089866001018151811061129257fe5b01602001516002969096019560f81c90506112ab6162b7565b604051806101c001604052808581526020016112c686611c12565b81526020018f81526020018e81526020018d815260200160006001600160401b031681526020016112f5611c7b565b81526020016000801b815260200160405180604001604052808c60ff16815260200189815250815260200160405180604001604052808b60ff1681526020018881525081526020018460ff16600114151581526020018360ff1681526020018c81526020018881525090508260ff166000148061137557508260ff166001145b6113c6576040805162461bcd60e51b815260206004820152601c60248201527f50726f6f662068616420626164206f7065726174696f6e207479706500000000604482015290519081900360640190fd5b6113ce616389565b60ff84166113eb578151516113e4908490611cc2565b9050611465565b6000875111611436576040805162461bcd60e51b81526020600482015260126024820152716e6f20696d6d6564696174652076616c756560701b604482015290519081900360640190fd5b611462838360000151600001518960018e0360ff168151811061145557fe5b6020026020010151611d24565b90505b61146e81611da8565b82515260005b848b0360ff168110156114b3576114ab88828151811061149057fe5b60200260200101518460000151611ec890919063ffffffff16565b600101611474565b5060005b8960ff168110156114f4576114ec8782815181106114d157fe5b60200260200101518460000151611ee290919063ffffffff16565b6001016114b7565b50909e9d5050505050505050505050505050565b60408101516060820151608083015161152084611efc565b61152861641b565b60405180610180016040528060016001600160401b031681526020018660a001516001600160401b03168152602001611564876000015161220c565b8152602001611576876020015161220c565b81526020018581526020018660400151815260200184815260200186606001518152602001866060015185146115ad5760016115b0565b60005b60ff166001600160401b0316815260200183815260200186608001518152602001866080015184146115e35760016115e6565b60005b60ff16905290506115fe6115f9826122d0565b6123e0565b6040517f117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f590600090a16108a461181a565b600080838160205b88518111611722578089015193506020818a51036020018161165557fe5b0491505b60008211801561166c5750600286066001145b801561167a57508160020a86115b1561168d57600286046001019550611659565b600286066116d85783836040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209250600286816116d057fe5b04955061171a565b828460405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092506002868161171357fe5b0460010195505b602001611637565b505090941495945050505050565b600580546001919060ff191682805b0217905550610dfb6119ce565b6117546162b7565b61175c6162b7565b6117688c8c8c8c6110fb565b905061177f88868989888880519060200120612456565b60e08201526117928888888888886124c4565b60c0909101529a9950505050505050505050565b600080546002546001546040805163396f51cf60e01b81526001600160a01b039384166004820152918316602483015251919092169263396f51cf926044808201939182900301818387803b1580156117fe57600080fd5b505af1158015611812573d6000803e3d6000fd5b503392505050ff5b600080546001546002546040805163396f51cf60e01b81526001600160a01b039384166004820152918316602483015251919092169263396f51cf926044808201939182900301818387803b1580156117fe57600080fd5b80515160001901611882826125ec565b6060816040519080825280602002602001820160405280156118ae578160200160208202803883390190505b5090506118d4836118cc8560c001516001600160401b031685612a04565b846000612a22565b816000815181106118e157fe5b602090810291909101015260015b8281101561193857611919846119128660c001516001600160401b031686612bb3565b8584612a22565b82828151811061192557fe5b60209081029190910101526001016118ef565b5061194281612bc6565b61194a612bd5565b7f81050542a90cf16d270921d19aeab083e0a9b460a208b224daf345c77cb4c3ce816003546040518080602001838152602001828103825284818151815260200191508051906020019060200280838360005b838110156119b557818101518382015260200161199d565b50505050905001935050505060405180910390a1505050565b6004546119da436110f0565b01600355565b60006119ea616389565b83518310611a30576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b600080611a3d8686612be9565b91509150611a49612c10565b60ff168160ff161415611a7d576000611a628784612c15565b909350905082611a7182612c89565b94509450505050611b6b565b611a85612d3b565b60ff168160ff161415611aa757611a9c8683612d40565b935093505050611b6b565b611aaf612de2565b60ff168160ff161415611ac657611a9c8683612de7565b611ace612e7b565b60ff168160ff1610158015611aef5750611ae6612e80565b60ff168160ff16105b15611b2b576000611afe612e7b565b820390506060611b0f828986612e85565b909450905083611b1e82612f1e565b9550955050505050611b6b565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b6000611b7c6163bd565b611b846163bd565b600060e0820181905280611b988787612c15565b9096509150611ba78787612de7565b60208501529550611bb88787612de7565b60408501529550611bc987876119e0565b60608501529550611bda87876119e0565b60808501529550611beb8787612c15565b60a08501529550611bfc8787612c15565b92845260c0840192909252509590945092505050565b611c1a6163bd565b60405180610100016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e001518152509050919050565b611c83616389565b60408051600080825260208201909252611cbd91611cb7565b611ca4616389565b815260200190600190039081611c9c5790505b50612f1e565b905090565b611cca616389565b6040805160608101825260ff851681526020808201859052825160008082529181018452611d1d93830191611d15565b611d02616389565b815260200190600190039081611cfa5790505b509052613030565b9392505050565b611d2c616389565b604080516001808252818301909252606091816020015b611d4b616389565b815260200190600190039081611d435790505090508281600081518110611d6e57fe5b6020026020010181905250611d9f60405180606001604052808760ff16815260200186815260200183815250613030565b95945050505050565b6000611db2612c10565b60ff16826060015160ff161415611dd5578151611dce90613097565b90506110f6565b611ddd612d3b565b60ff16826060015160ff161415611dfb57611dce82602001516130bb565b611e03612de2565b60ff16826060015160ff161415611e255781516080830151611dce91906131b8565b611e2d612e7b565b60ff16826060015160ff161415611e6657611e46616389565b611e538360400151613209565b9050611e5e81611da8565b9150506110f6565b611e6e61336b565b60ff16826060015160ff161415611e87575080516110f6565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b611ed6826020015182613370565b82602001819052505050565b611ef0826040015182613370565b82604001819052505050565b6000806000614242611f1585610160015160ff166133ee565b6001600160401b03821660a0808b0182905260208b01518101805183900390528a51015194985092965090945092501115611f6a57602085015160001960a090910152611f6185613ba9565b50505050612209565b61010085015151841115611ff457611f88611f83611c7b565b611da8565b611f99866020015160200151611da8565b14611feb576040805162461bcd60e51b815260206004820152601d60248201527f737461636b206974656d206d697373696e672066726f6d2070726f6f66000000604482015290519081900360640190fd5b611f6185613ba9565b610120850151518311156120705761200d611f83611c7b565b61201e866020015160400151611da8565b14611feb576040805162461bcd60e51b815260206004820181905260248201527f617578737461636b206974656d206d697373696e672066726f6d2070726f6f66604482015290519081900360640190fd5b60008411806120825750846101400151155b801561209357506101008501515184145b806120bb575084610140015180156120a9575083155b80156120bb5750610100850151516001145b612103576040805162461bcd60e51b8152602060048201526014602482015273746f6f206d616e7920737461636b206974656d7360601b604482015290519081900360640190fd5b61012085015151831461215d576040805162461bcd60e51b815260206004820152601760248201527f746f6f206d616e7920617578737461636b206974656d73000000000000000000604482015290519081900360640190fd5b61216a858263ffffffff16565b60005b610100860151518110156121b6576121ae86610100015160200151828151811061219357fe5b60200260200101518760200151611ec890919063ffffffff16565b60010161216d565b5060005b61012086015151811015612203576121fb8661012001516020015182815181106121e057fe5b60200260200101518760200151611ee290919063ffffffff16565b6001016121ba565b50505050505b50565b600060028260e001511415612223575060006110f6565b60018260e001511415612238575060016110f6565b8151602083015161224890611da8565b6122558460400151611da8565b6122628560600151611da8565b61226f8660800151611da8565b8660a001518760c00151604051602001808881526020018781526020018681526020018581526020018481526020018381526020018281526020019750505050505050506040516020818303038152906040528051906020012090506110f6565b6000816000015182602001518360400151846060015185608001518660a001518760c001518860e001518961010001518a61012001518b61014001518c6101600151604051602001808d6001600160401b03166001600160401b031660c01b81526008018c6001600160401b03166001600160401b031660c01b81526008018b81526020018a8152602001898152602001888152602001878152602001868152602001856001600160401b03166001600160401b031660c01b8152600801848152602001838152602001826001600160401b03166001600160401b031660c01b81526008019c50505050505050505050505050604051602081830303815290604052805190602001209050919050565b6006548114604051806040016040528060088152602001672124a9afa82922ab60c11b815250906124525760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b5050565b6040805160f89790971b6001600160f81b03191660208089019190915260609690961b6bffffffffffffffffffffffff191660218801526035870194909452605586019290925260758501526095808501919091528151808503909101815260b59093019052815191012090565b6124cc616389565b60408051600680825260e08201909252606091816020015b6124ec616389565b8152602001906001900390816124e457905050905061250d8860ff16612c89565b8160008151811061251a57fe5b602002602001018190525061252e87612c89565b8160018151811061253b57fe5b602002602001018190525061254f86612c89565b8160028151811061255c57fe5b6020026020010181905250612579856001600160a01b0316612c89565b8160038151811061258657fe5b602002602001018190525061259a84612c89565b816004815181106125a757fe5b60200260200101819052506125bf8360008551613c12565b816005815181106125cc57fe5b60200260200101819052506125e081612f1e565b98975050505050505050565b8051516020808301515160408051808201909152600a8152692124a9afa4a7282622a760b11b928101929092526000198301921461266b5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b50604080830151518151808301909252600a8252692124a9afa4a7282622a760b11b602083015260018301146126e25760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b5081606001515181600101146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b8152509061275d5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b508160a001515181146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b815250906127d55760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b5081608001515181600202146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b815250906128505760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561074d578181015183820152602001610735565b5060008080805b848110156128c2578560a00151818151811061286f57fe5b6020026020010151840193508560800151818151811061288b57fe5b6020026020010151830192508560800151818601815181106128a957fe5b6020026020010151820191508080600101915050612857565b506108a46115f96040518061018001604052808860c001516001600160401b03168152602001866001600160401b03168152602001886000015160008151811061290857fe5b602002602001015181526020018860000151888151811061292557fe5b60200260200101518152602001886020015160008151811061294357fe5b602002602001015181526020018860200151888151811061296057fe5b60200260200101518152602001886040015160008151811061297e57fe5b602002602001015181526020018860400151888151811061299b57fe5b60200260200101518152602001856001600160401b0316815260200188606001516000815181106129c857fe5b60200260200101518152602001886060015188815181106129e557fe5b60200260200101518152602001846001600160401b03168152506122d0565b6000818381612a0f57fe5b06828481612a1957fe5b04019392505050565b6000611d9f6040518061018001604052808663ffffffff166001600160401b031681526020018760a001518581518110612a5857fe5b60200260200101516001600160401b0316815260200187600001518581518110612a7e57fe5b6020026020010151815260200187600001518560010181518110612a9e57fe5b6020026020010151815260200187602001518581518110612abb57fe5b6020026020010151815260200187602001518560010181518110612adb57fe5b6020026020010151815260200187604001518581518110612af857fe5b6020026020010151815260200187604001518560010181518110612b1857fe5b6020026020010151815260200187608001518581518110612b3557fe5b60200260200101516001600160401b0316815260200187606001518581518110612b5b57fe5b6020026020010151815260200187606001518560010181518110612b7b57fe5b60200260200101518152602001876080015185870181518110612b9a57fe5b60200260200101516001600160401b03168152506122d0565b6000818381612bbe57fe5b049392505050565b612bcf81613d96565b60065550565b600580546002919060ff191660018361173f565b60008082600101848481518110612bfc57fe5b016020015190925060f81c90509250929050565b600090565b60008082845110158015612c2d575060208385510310155b612c6a576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b60208301612c7e858563ffffffff613ed416565b915091509250929050565b612c91616389565b6040805160a0810182528381528151606081018352600080825260208281018290528451828152808201865293949085019390830191612ce7565b612cd4616389565b815260200190600190039081612ccc5790505b50905281526040805160008082526020828101909352919092019190612d23565b612d10616389565b815260200190600190039081612d085790505b50815260006020820152600160409091015292915050565b600190565b6000612d4a616389565b82600080612d56616389565b6000612d628986612be9565b9095509350612d718986612be9565b9095509250600160ff85161415612d9257612d8c89866119e0565b90955091505b612d9c8986613f2d565b9095509050600160ff85161415612dc75784612db9848385611d24565b965096505050505050611b6b565b84612dd28483611cc2565b9650965050505050509250929050565b600290565b6000612df1616389565b82845110158015612e06575060408385510310155b612e42576040805162461bcd60e51b81526020600482015260086024820152671d1bc81cda1bdc9d60c21b604482015290519081900360640190fd5b600080612e4f8686613f2d565b9094509150612e5e8685612c15565b909450905083612e6e8383613f44565b9350935050509250929050565b600390565b600c90565b60006060600083905060608660ff16604051908082528060200260200182016040528015612ecd57816020015b612eba616389565b815260200190600190039081612eb25790505b50905060005b8760ff168160ff161015612f1157612eeb87846119e0565b8351849060ff8516908110612efc57fe5b60209081029190910101529250600101612ed3565b5090969095509350505050565b612f26616389565b612f308251613ff5565b612f81576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b8351811015612fb857838181518110612f9b57fe5b602002602001015160800151820191508080600101915050612f86565b506040805160a0810182526000808252825160608101845281815260208181018390528451838152808201865293949085019391929083019190613012565b612fff616389565b815260200190600190039081612ff75790505b50905281526020810194909452600360408501526060909301525090565b613038616389565b6040805160a081018252600080825260208083018690528351828152908101845291928301919061307f565b61306c616389565b8152602001906001900390816130645790505b50815260016020820181905260409091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b60006002826040015151106130cc57fe5b604082015151613131576130de612d3b565b8251602080850151604080516001600160f81b031960f896871b8116828601529490951b9093166021850152602280850191909152825180850390910181526042909301909152815191012090506110f6565b613139612d3b565b826000015161315f846040015160008151811061315257fe5b6020026020010151611da8565b8460200151604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b60006131c2612e7b565b8383604051602001808460ff1660ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b613211616389565b60088251111561325f576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b6060825160405190808252806020026020018201604052801561328c578160200160208202803883390190505b508051909150600160005b828110156132ef576132ae86828151811061315257fe5b8482815181106132ba57fe5b6020026020010181815250508581815181106132d257fe5b602002602001015160800151820191508080600101915050613297565b506000835184604051602001808360ff1660ff1660f81b8152600101828051906020019060200280838360005b8381101561333457818101518382015260200161331c565b50505050905001925050506040516020818303038152906040528051906020012090506133618183613f44565b9695505050505050565b606490565b613378616389565b6040805160028082526060828101909352816020015b613396616389565b81526020019060019003908161338e57905050905082816000815181106133b957fe5b602002602001018190525083816001815181106133d257fe5b60200260200101819052506133e681613209565b949350505050565b6000808061424260018514156134135750600292506000915060039050613ffc613ba2565b60028514156134315750600292506000915060039050613ffc613ba2565b600385141561344f5750600292506000915060039050613ffc613ba2565b600485141561346d5750600292506000915060049050614262613ba2565b600585141561348b5750600292506000915060079050614262613ba2565b60068514156134a95750600292506000915060049050614262613ba2565b60078514156134c75750600292506000915060079050614262613ba2565b60088514156134e55750600392506000915060049050614334613ba2565b60098514156135035750600392506000915060049050614334613ba2565b600a8514156135215750600292506000915060199050613ffc613ba2565b600b85141561353f5750600292506000915060079050613ffc613ba2565b601085141561355c57506002925060009150829050613ffc613ba2565b601185141561357957506002925060009150829050613ffc613ba2565b601285141561359657506002925060009150829050613ffc613ba2565b60138514156135b357506002925060009150829050613ffc613ba2565b60148514156135d057506002925060009150829050614423613ba2565b60158514156135ed57506001925060009150829050614488613ba2565b601685141561360a57506002925060009150829050613ffc613ba2565b601785141561362757506002925060009150829050613ffc613ba2565b601885141561364457506002925060009150829050613ffc613ba2565b6019851415613661575060019250600091508290506144f9613ba2565b601a85141561367f5750600292506000915060049050613ffc613ba2565b601b85141561369d5750600292506000915060049050613ffc613ba2565b601c8514156136bb5750600292506000915060049050613ffc613ba2565b601d8514156136d95750600292506000915060049050613ffc613ba2565b60208514156136f7575060019250600091506007905061453d613ba2565b60218514156137155750600192506000915060039050614564613ba2565b60228514156137335750600292506000915060089050613ffc613ba2565b6023851415613752575060019250600091506102589050614588613ba2565b603085141561376f5750600192506000915082905061476b613ba2565b603185141561378c57506000925082915060019050614779613ba2565b60328514156137a957506000925082915060019050614797613ba2565b60338514156137c757506001925060009150600290506147b5613ba2565b60348514156137e557506001925060009150600490506147cf613ba2565b60358514156138035750600292506000915060049050614810613ba2565b603685141561382057506000925082915060029050614884613ba2565b603785141561383d575060009250829150600190506148c2613ba2565b603885141561385a575060019250600091508290506148e6613ba2565b603985141561387757506000925060019150819050614909613ba2565b603a8514156138945750600092508291506002905061491a613ba2565b603b8514156138b157506000925082915060019050612209613ba2565b603c8514156138ce57506000925082915060019050614948613ba2565b603d8514156138eb5750600192506000915082905061495e613ba2565b6040851415613908575060019250600091508290506149a2613ba2565b604185141561392657506002925060009150600190506149e7613ba2565b60428514156139445750600392506000915060019050614a5a613ba2565b60438514156139625750600292506000915060019050614afb613ba2565b60448514156139805750600392506000915060019050614b42613ba2565b605085141561399d57506002925060009150829050614bb7613ba2565b60518514156139bb5750600392506000915060289050614c5d613ba2565b60528514156139d95750600192506000915060029050614d14613ba2565b60538514156139f657506001925082915060039050614d59613ba2565b6054851415613a145750600292506001915060299050614de2613ba2565b6060851415613a3157506000925082915060649050612209613ba2565b6061851415613a4f5750600192506000915060649050614eab613ba2565b6070851415613a6d5750600192506000915060649050614ef2613ba2565b6072851415613a8a57506000925082915060289050614f7a613ba2565b6073851415613aa757506000925082915060059050614ffa613ba2565b6074851415613ac4575060009250829150600a9050615003613ba2565b6075851415613ae157506001925060009150819050615010613ba2565b6076851415613afe5750600092508291506001905061504b613ba2565b6077851415613b1b5750600092508291506019905061505f613ba2565b6078851415613b3957506002925060009150601990506150a9613ba2565b6079851415613b57575060039250600091506019905061511b613ba2565b607b851415613b74575060009250829150600a90506151a6613ba2565b6080851415613b9357506004925060009150614e2090506151e8613ba2565b5060009250829150819050614ffa5b9193509193565b60408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051908201209082015160c001511415613c0557613c008160200151615379565b612209565b6020015160c08101519052565b613c1a616389565b60208204613c26616389565b613c2e611c7b565b60408051600280825260608281019093529293509091816020015b613c51616389565b815260200190600190039081613c4957905050905060005b83811015613cd257613c8e613c8989602084028a0163ffffffff613ed416565b612c89565b82600081518110613c9b57fe5b60200260200101819052508282600181518110613cb457fe5b6020026020010181905250613cc882613209565b9250600101613c69565b506020850615613d48576000613cf488601f198989010163ffffffff613ed416565b9050602086066020036008021b613d0a81612c89565b82600081518110613d1757fe5b60200260200101819052508282600181518110613d3057fe5b6020026020010181905250613d4482613209565b9250505b613d5185612c89565b81600081518110613d5e57fe5b60200260200101819052508181600181518110613d7757fe5b6020026020010181905250613d8b81613209565b979650505050505050565b6000815b600181511115613eb75760606002825160010181613db457fe5b04604051908082528060200260200182016040528015613dde578160200160208202803883390190505b50905060005b8151811015613eaf578251816002026001011015613e7757828160020281518110613e0b57fe5b6020026020010151838260020260010181518110613e2557fe5b6020026020010151604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120828281518110613e6657fe5b602002602001018181525050613ea7565b828160020281518110613e8657fe5b6020026020010151828281518110613e9a57fe5b6020026020010181815250505b600101613de4565b509050613d9a565b80600081518110613ec457fe5b6020026020010151915050919050565b60008160200183511015613f24576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b60008060208301612c7e858563ffffffff613ed416565b613f4c616389565b6040805160a0810182528481528151606081018352600080825260208281018290528451828152808201865293949085019390830191613fa2565b613f8f616389565b815260200190600190039081613f875790505b50905281526040805160008082526020828101909352919092019190613fde565b613fcb616389565b815260200190600190039081613fc35790505b508152600260208201526040019290925250919050565b6008101590565b614004616389565b614012826101000151615383565b905061401c616389565b61402a836101000151615383565b9050614035826153c5565b15806140475750614045816153c5565b155b1561405c57614055836153d0565b5050612209565b8151815161016085015160009060ff166001141561407d5750818101614244565b61016086015160ff16600214156140975750818102614244565b61016086015160ff16600314156140b15750808203614244565b61016086015160ff16600a14156140cb575080820a614244565b61016086015160ff16600b14156140e5575080820b614244565b61016086015160ff16601014156140ff5750808210614244565b61016086015160ff16601114156141195750808211614244565b61016086015160ff16601214156141335750808212614244565b61016086015160ff166013141561414d5750808213614244565b61016086015160ff16601614156141675750818116614244565b61016086015160ff16601714156141815750818117614244565b61016086015160ff166018141561419b5750818118614244565b61016086015160ff16601a14156141b5575080821a614244565b61016086015160ff16601b14156141cf575080821b614244565b61016086015160ff16601c14156141e9575080821c614244565b61016086015160ff16601d1415614203575080821d614244565b61016086015160ff1660221415614242575060408051602080820185905281830184905282518083038401815260609092019092528051910120614244565bfe5b61220361425082612c89565b6101008801519063ffffffff6153ef16565b61426a616389565b614278826101000151615383565b9050614282616389565b614290836101000151615383565b905061429b826153c5565b15806142ad57506142ab816153c5565b155b806142b757508051155b156142c557614055836153d0565b8151815161016085015160009060ff16600414156142e65750808204614244565b61016086015160ff16600514156143005750808205614244565b61016086015160ff166006141561431a5750808206614244565b61016086015160ff16600714156142425750808207614244565b61433c616389565b61434a826101000151615383565b9050614354616389565b614362836101000151615383565b905061436c616389565b61437a846101000151615383565b9050614385836153c5565b15806143975750614395826153c5565b155b806143a857506143a6816153c5565b155b806143b257508051155b156143c8576143c0846153d0565b505050612209565b82518251825161016087015160009060ff16600814156143ed57818385089050614405565b61016088015160ff1660091415614242578183850990505b610fcb61441182612c89565b6101008a01519063ffffffff6153ef16565b61442b616389565b614439826101000151615383565b9050614443616389565b614451836101000151615383565b905061448361447161446283611da8565b61446b85611da8565b14615419565b6101008501519063ffffffff6153ef16565b505050565b614490616389565b61449e826101000151615383565b90506144a9816153c5565b6144d1576144cc6144ba6000612c89565b6101008401519063ffffffff6153ef16565b612452565b805180156144f36144e182612c89565b6101008601519063ffffffff6153ef16565b50505050565b614501616389565b61450f826101000151615383565b905061451a816153c5565b61452d57614527826153d0565b50612209565b805180196144f36144e182612c89565b614545616389565b614553826101000151615383565b90506124526144ba613c8983611da8565b61456c616389565b61457a826101000151615383565b90506124526144ba8261543b565b614590616389565b61459e826101000151615383565b90506145a9816154a0565b15806145bb5750806040015151600714155b156145c957614527826153d0565b604081015160005b600781101561460b576145f68282815181106145e957fe5b60200260200101516153c5565b614603576143c0846153d0565b6001016145d1565b5061461461647f565b60005b6019811015614678576040600382160283600483048151811061463657fe5b602002602001015160000151901c6001600160401b0316826005838161465857fe5b0460058406600502016019811061466b57fe5b6020020152600101614617565b50614682816154ad565b604080516007808252610100820190925291925060609190816020015b6146a7616389565b81526020019060019003908161469f57905050905060005b60078110156146f1576146d26000612c89565b8282815181106146de57fe5b60209081029190910101526001016146bf565b5060005b601981101561474c5760406003821602836005830460058406600502016019811061471c57fe5b6020020151901b82600483048151811061473257fe5b6020908102919091010151805190911790526001016146f5565b506108a461475982612f1e565b6101008701519063ffffffff6153ef16565b612452816101000151615383565b6020810151608001516101008201516122099163ffffffff6153ef16565b6020810151606001516101008201516122099163ffffffff6153ef16565b6147c3816101000151615383565b60209091015160600152565b6147d7616389565b6147e5826101000151615383565b90506147f08161609e565b6147fd57614527826153d0565b61480681611da8565b6020830151525050565b614818616389565b614826826101000151615383565b9050614830616389565b61483e836101000151615383565b90506148498261609e565b158061485b5750614859816153c5565b155b1561486957614055836153d0565b8051156144835761487982611da8565b602084015152505050565b610100810151516000901580156148b457506148a1611f83611c7b565b6148b2836020015160200151611da8565b145b90506124526144ba82615419565b805151612209906148d49060016160ab565b6101008301519063ffffffff6153ef16565b6122096148f7826101000151615383565b6101208301519063ffffffff6153ef16565b6122096148d4826101200151615383565b610120810151516000901580156148b45750614937611f83611c7b565b6148b2836020015160400151611da8565b6122096148d4826020015160c0015160016160ab565b614966616389565b614974826101000151615383565b905061497f8161609e565b61498c57614527826153d0565b61499581611da8565b602083015160c001525050565b6149aa616389565b6149b8826101000151615383565b6101008301519091506149d1908263ffffffff6153ef16565b610100820151612452908263ffffffff6153ef16565b6149ef616389565b6149fd826101000151615383565b9050614a07616389565b614a15836101000151615383565b610100840151909150614a2e908263ffffffff6153ef16565b610100830151614a44908363ffffffff6153ef16565b610100830151614483908263ffffffff6153ef16565b614a62616389565b614a70826101000151615383565b9050614a7a616389565b614a88836101000151615383565b9050614a92616389565b614aa0846101000151615383565b610100850151909150614ab9908263ffffffff6153ef16565b610100840151614acf908363ffffffff6153ef16565b610100840151614ae5908463ffffffff6153ef16565b6101008401516144f3908263ffffffff6153ef16565b614b03616389565b614b11826101000151615383565b9050614b1b616389565b614b29836101000151615383565b610100840151909150614a44908363ffffffff6153ef16565b614b4a616389565b614b58826101000151615383565b9050614b62616389565b614b70836101000151615383565b9050614b7a616389565b614b88846101000151615383565b610100850151909150614ba1908463ffffffff6153ef16565b610100840151614ae5908363ffffffff6153ef16565b614bbf616389565b614bcd826101000151615383565b9050614bd7616389565b614be5836101000151615383565b9050614bf0826153c5565b1580614c025750614c00816154a0565b155b80614c1c5750614c118161615c565b60ff16826000015110155b15614c2a57614055836153d0565b6144838160400151836000015181518110614c4157fe5b60200260200101518461010001516153ef90919063ffffffff16565b614c65616389565b614c73826101000151615383565b9050614c7d616389565b614c8b836101000151615383565b9050614c95616389565b614ca3846101000151615383565b9050614cae836153c5565b1580614cc05750614cbe826154a0565b155b80614cda5750614ccf8261615c565b60ff16836000015110155b15614ce8576143c0846153d0565b604082015183518151839183918110614cfd57fe5b60200260200101819052506108a461475982612f1e565b614d1c616389565b614d2a826101000151615383565b9050614d35816154a0565b614d4257614527826153d0565b6124526144ba614d518361615c565b60ff16612c89565b614d61616389565b614d6f826101000151615383565b9050614d79616389565b614d87836101200151615383565b9050614d92826153c5565b1580614da45750614da2816154a0565b155b80614dbe5750614db38161615c565b60ff16826000015110155b15614dcc57614055836153d0565b610120830151614c2a908263ffffffff6153ef16565b614dea616389565b614df8826101000151615383565b9050614e02616389565b614e10836101000151615383565b9050614e1a616389565b614e28846101200151615383565b9050614e33816154a0565b1580614e455750614e43836153c5565b155b80614e5f5750614e548161615c565b60ff16836000015110155b15614e6d576143c0846153d0565b604081015183518151849183918110614e8257fe5b60200260200101819052506108a4614e9982612f1e565b6101208701519063ffffffff6153ef16565b8060800151614ec1611f83836101000151615383565b6040805160208082019490945280820192909252805180830382018152606090920190528051910120608090910152565b614efa616389565b614f08826101000151615383565b905061271081608001511180614f245750614f2281616183565b155b15614f3257614527826153d0565b8160600151614f4082611da8565b6040516020018083815260200182815260200192505050604051602081830303815290604052805190602001208260600181815250505050565b60e0810151614fc6576040805162461bcd60e51b81526020600482015260136024820152726d75737420737570706c79206d65737361676560681b604482015290519081900360640190fd5b60c0810151610100820151614fe09163ffffffff6153ef16565b614ff281604001518260e00151616281565b604090910152565b612209816153d0565b61220981602001516162ad565b615018616389565b615026826101000151615383565b9050615031816153c5565b61503e57614527826153d0565b51602082015160a0015250565b6122096148d4826020015160a00151612c89565b60408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051910120612209906148d49060016160ab565b6150b1616389565b6150bf826101000151615383565b90506150c9616389565b6150d7836101000151615383565b90506150e2826153c5565b15806150f457506150f28161609e565b155b1561510257614055836153d0565b614483614471836000015161511684611da8565b611cc2565b615123616389565b615131826101000151615383565b905061513b616389565b615149836101000151615383565b9050615153616389565b615161846101000151615383565b905061516c836153c5565b158061517e575061517c8161609e565b155b1561518c576143c0846153d0565b6144f36144e184600001516151a084611da8565b85611d24565b604080516000808252602082019092526060916151d9565b6151c6616389565b8152602001906001900390816151be5790505b5090506124526144ba82612f1e565b6151f0616389565b6151fe826101000151615383565b9050615208616389565b615216836101000151615383565b9050615220616389565b61522e846101000151615383565b9050615238616389565b615246856101000151615383565b9050615251846153c5565b15806152635750615261836153c5565b155b806152745750615272826153c5565b155b806152855750615283816153c5565b155b1561529357611f61856153d0565b835183518351158015906152a957508351600114155b156152d8576152cd6152bb6000612c89565b6101008901519063ffffffff6153ef16565b505050505050612209565b83518351604080516000808252602080830180855285905260ff601b9096019586168385015260608301889052608083018790529251909260019260a080820193601f1981019281900390910190855afa15801561533a573d6000803e3d6000fd5b50505060206040510351905061536d61535b826001600160a01b0316612c89565b6101008c01519063ffffffff6153ef16565b50505050505050505050565b600160e090910152565b61538b616389565b615393616389565b82602001516001846000015103815181106153aa57fe5b60209081029190910101518351600019018452915050919050565b6060015160ff161590565b6153d981613ba9565b6101008101516000908190526101209091015152565b80826020015183600001518151811061540457fe5b60209081029190910101525080516001019052565b615421616389565b811561543157611dce6001612c89565b611dce6000612c89565b615443616389565b816060015160ff166002141561548a5760405162461bcd60e51b81526004018080602001828103825260218152602001806165156021913960400191505060405180910390fd5b61549a826060015160ff16612c89565b92915050565b6060015160ff1660031490565b6154b561647f565b6154bd61649e565b6154c561649e565b6154cd61647f565b6154d56164bc565b60405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060008090505b6018811015616093576080878101516060808a01516040808c01516020808e01518e511890911890921890931889526101208b01516101008c015160e08d015160c08e015160a08f0151181818189089018190526101c08b01516101a08c01516101808d01516101608e01516101408f0151181818189289019283526102608b01516102408c01516102208d01516102008e01516101e08f015118181818918901919091526103008a01516102e08b01516102c08c01516102a08d01516102808e0151181818189288018390526001600160401b0360028202166001603f1b91829004179092188652510485600260200201516002026001600160401b03161785600060200201511884600160200201526001603f1b85600360200201518161572157fe5b0485600360200201516002026001600160401b03161785600160200201511884600260200201526001603f1b85600460200201518161575c57fe5b0485600460200201516002026001600160401b0316178560026005811061577f57fe5b602002015118606085015284516001603f1b9086516060808901519390920460029091026001600160401b031617909118608086810191825286518a5118808b5287516020808d018051909218825289516040808f0180519092189091528a518e8801805190911890528a51948e0180519095189094528901805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291880180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292870180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a01805190911890529084525163100000009060208901516001600160401b03641000000000909102169190041761010084015260408701516001603d1b9060408901516001600160401b03600890910216919004176101608401526060870151628000009060608901516001600160401b036502000000000090910216919004176102608401526080870151654000000000009060808901516001600160401b036204000090910216919004176102c084015260a08701516001603f1b900487600560200201516002026001600160401b031617836002601981106159e957fe5b602002015260c0870151621000008104651000000000009091026001600160401b039081169190911760a085015260e0880151664000000000000081046104009091028216176101a08501526101008801516208000081046520000000000090910282161761020085015261012088015160048082029092166001603e1b909104176103008501526101408801516101408901516001600160401b036001603e1b90910216919004176080840152610160870151670400000000000000906101608901516001600160401b036040909102169190041760e084015261018087015162200000906101808901516001600160401b036508000000000090910216919004176101408401526101a08701516602000000000000906101a08901516001600160401b0361800090910216919004176102408401526101c08701516008906101c08901516001600160401b036001603d1b90910216919004176102a08401526101e0870151641000000000906101e08901516001600160401b03631000000090910216919004176020840152610200808801516102008901516001600160401b0366800000000000009091021691900417610120840152610220870151648000000000906102208901516001600160401b036302000000909102169190041761018084015261024087015165080000000000906102408901516001600160401b036220000090910216919004176101e0840152610260870151610100906102608901516001600160401b03600160381b90910216919004176102e0840152610280870151642000000000906102808901516001600160401b036308000000909102169190041760608401526102a087015165100000000000906102a08901516001600160401b0362100000909102169190041760c08401526102c08701516302000000906102c08901516001600160401b0364800000000090910216919004176101c08401526102e0870151600160381b906102e08901516001600160401b036101009091021691900417610220840152610300870151660400000000000090048760186020020151614000026001600160401b031617836014602002015282600a602002015183600560200201511916836000602002015118876000602002015282600b602002015183600660200201511916836001602002015118876001602002015282600c602002015183600760200201511916836002602002015118876002602002015282600d602002015183600860200201511916836003602002015118876003602002015282600e602002015183600960200201511916836004602002015118876004602002015282600f602002015183600a602002015119168360056020020151188760056020020152826010602002015183600b602002015119168360066020020151188760066020020152826011602002015183600c602002015119168360076020020151188760076020020152826012602002015183600d602002015119168360086020020151188760086020020152826013602002015183600e602002015119168360096020020151188760096020020152826014602002015183600f6020020151191683600a60200201511887600a602002015282601560200201518360106020020151191683600b60200201511887600b602002015282601660200201518360116020020151191683600c60200201511887600c602002015282601760200201518360126020020151191683600d60200201511887600d602002015282601860200201518360136020020151191683600e60200201511887600e602002015282600060200201518360146020020151191683600f60200201511887600ffe5b602002015187511887526001016155fc565b509495945050505050565b6060015160ff1660011490565b6160b3616389565b6040805160a0810182528481528151606081018352600080825260208281018290528451828152808201865293949085019390830191616109565b6160f6616389565b8152602001906001900390816160ee5790505b50905281526040805160008082526020828101909352919092019190616145565b616132616389565b81526020019060019003908161612a5790505b508152606460208201526040019290925250919050565b606081015160009060ff166003141561617b57506040810151516110f6565b5060016110f6565b606081015160009060ff1661619a575060016110f6565b606082015160ff16600114156161b2575060006110f6565b606082015160ff1660021415616206576040805162461bcd60e51b81526020600482015260146024820152736d75737420686176652066756c6c2076616c756560601b604482015290519081900360640190fd5b606082015160ff16600314156162695760408201515160005b8181101561625e576162478460400151828151811061623a57fe5b6020026020010151616183565b616256576000925050506110f6565b60010161621f565b5060019150506110f6565b606082015160ff1660641415611e87575060006110f6565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600260e090910152565b604051806101c001604052806162cb6163bd565b81526020016162d86163bd565b81526000602082018190526040820181905260608201819052608082015260a001616301616389565b8152600060208201526040016163156164db565b81526020016163226164db565b81526000602082018190526040820181905260608083015260809091015290565b6040518060e0016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160006001600160401b031681525090565b6040518060a00160405280600081526020016163a36164f5565b815260606020820181905260006040830181905291015290565b60408051610100810190915260008152602081016163d9616389565b81526020016163e6616389565b81526020016163f3616389565b8152602001616400616389565b81526000602082018190526040820181905260609091015290565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081019190915290565b6040518061032001604052806019906020820280388339509192915050565b6040518060a001604052806005906020820280388339509192915050565b6040518061030001604052806018906020820280388339509192915050565b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fe56616c7565206d757374206861766520612076616c6964207479706520636f6465a265627a7a7231582088d00accfdfd1c20a9574d0a5cd0fbfc5366ce13b6ceda413fadffce3101476164736f6c63430005110032"

// DeployExecutionChallenge deploys a new Ethereum contract, binding an instance of ExecutionChallenge to it.
func DeployExecutionChallenge(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ExecutionChallenge, error) {
	parsed, err := abi.JSON(strings.NewReader(ExecutionChallengeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ExecutionChallengeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ExecutionChallenge{ExecutionChallengeCaller: ExecutionChallengeCaller{contract: contract}, ExecutionChallengeTransactor: ExecutionChallengeTransactor{contract: contract}, ExecutionChallengeFilterer: ExecutionChallengeFilterer{contract: contract}}, nil
}

// ExecutionChallenge is an auto generated Go binding around an Ethereum contract.
type ExecutionChallenge struct {
	ExecutionChallengeCaller     // Read-only binding to the contract
	ExecutionChallengeTransactor // Write-only binding to the contract
	ExecutionChallengeFilterer   // Log filterer for contract events
}

// ExecutionChallengeCaller is an auto generated read-only Go binding around an Ethereum contract.
type ExecutionChallengeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExecutionChallengeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ExecutionChallengeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExecutionChallengeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ExecutionChallengeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExecutionChallengeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ExecutionChallengeSession struct {
	Contract     *ExecutionChallenge // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ExecutionChallengeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ExecutionChallengeCallerSession struct {
	Contract *ExecutionChallengeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ExecutionChallengeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ExecutionChallengeTransactorSession struct {
	Contract     *ExecutionChallengeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ExecutionChallengeRaw is an auto generated low-level Go binding around an Ethereum contract.
type ExecutionChallengeRaw struct {
	Contract *ExecutionChallenge // Generic contract binding to access the raw methods on
}

// ExecutionChallengeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ExecutionChallengeCallerRaw struct {
	Contract *ExecutionChallengeCaller // Generic read-only contract binding to access the raw methods on
}

// ExecutionChallengeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ExecutionChallengeTransactorRaw struct {
	Contract *ExecutionChallengeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewExecutionChallenge creates a new instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallenge(address common.Address, backend bind.ContractBackend) (*ExecutionChallenge, error) {
	contract, err := bindExecutionChallenge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallenge{ExecutionChallengeCaller: ExecutionChallengeCaller{contract: contract}, ExecutionChallengeTransactor: ExecutionChallengeTransactor{contract: contract}, ExecutionChallengeFilterer: ExecutionChallengeFilterer{contract: contract}}, nil
}

// NewExecutionChallengeCaller creates a new read-only instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallengeCaller(address common.Address, caller bind.ContractCaller) (*ExecutionChallengeCaller, error) {
	contract, err := bindExecutionChallenge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeCaller{contract: contract}, nil
}

// NewExecutionChallengeTransactor creates a new write-only instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallengeTransactor(address common.Address, transactor bind.ContractTransactor) (*ExecutionChallengeTransactor, error) {
	contract, err := bindExecutionChallenge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeTransactor{contract: contract}, nil
}

// NewExecutionChallengeFilterer creates a new log filterer instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallengeFilterer(address common.Address, filterer bind.ContractFilterer) (*ExecutionChallengeFilterer, error) {
	contract, err := bindExecutionChallenge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeFilterer{contract: contract}, nil
}

// bindExecutionChallenge binds a generic wrapper to an already deployed contract.
func bindExecutionChallenge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ExecutionChallengeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ExecutionChallenge *ExecutionChallengeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ExecutionChallenge.Contract.ExecutionChallengeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ExecutionChallenge *ExecutionChallengeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ExecutionChallengeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ExecutionChallenge *ExecutionChallengeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ExecutionChallengeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ExecutionChallenge *ExecutionChallengeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ExecutionChallenge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ExecutionChallenge *ExecutionChallengeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ExecutionChallenge *ExecutionChallengeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.contract.Transact(opts, method, params...)
}

// BisectAssertion is a paid mutator transaction binding the contract method 0xefaa0772.
//
// Solidity: function bisectAssertion(bytes32[] _machineHashes, bytes32[] _inboxAccs, bytes32[] _messageAccs, bytes32[] _logAccs, uint64[] _outCounts, uint64[] _gases, uint64 _totalSteps) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) BisectAssertion(opts *bind.TransactOpts, _machineHashes [][32]byte, _inboxAccs [][32]byte, _messageAccs [][32]byte, _logAccs [][32]byte, _outCounts []uint64, _gases []uint64, _totalSteps uint64) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "bisectAssertion", _machineHashes, _inboxAccs, _messageAccs, _logAccs, _outCounts, _gases, _totalSteps)
}

// BisectAssertion is a paid mutator transaction binding the contract method 0xefaa0772.
//
// Solidity: function bisectAssertion(bytes32[] _machineHashes, bytes32[] _inboxAccs, bytes32[] _messageAccs, bytes32[] _logAccs, uint64[] _outCounts, uint64[] _gases, uint64 _totalSteps) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) BisectAssertion(_machineHashes [][32]byte, _inboxAccs [][32]byte, _messageAccs [][32]byte, _logAccs [][32]byte, _outCounts []uint64, _gases []uint64, _totalSteps uint64) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.BisectAssertion(&_ExecutionChallenge.TransactOpts, _machineHashes, _inboxAccs, _messageAccs, _logAccs, _outCounts, _gases, _totalSteps)
}

// BisectAssertion is a paid mutator transaction binding the contract method 0xefaa0772.
//
// Solidity: function bisectAssertion(bytes32[] _machineHashes, bytes32[] _inboxAccs, bytes32[] _messageAccs, bytes32[] _logAccs, uint64[] _outCounts, uint64[] _gases, uint64 _totalSteps) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) BisectAssertion(_machineHashes [][32]byte, _inboxAccs [][32]byte, _messageAccs [][32]byte, _logAccs [][32]byte, _outCounts []uint64, _gases []uint64, _totalSteps uint64) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.BisectAssertion(&_ExecutionChallenge.TransactOpts, _machineHashes, _inboxAccs, _messageAccs, _logAccs, _outCounts, _gases, _totalSteps)
}

// ChooseSegment is a paid mutator transaction binding the contract method 0x79a9ad85.
//
// Solidity: function chooseSegment(uint256 _segmentToChallenge, bytes _proof, bytes32 _bisectionRoot, bytes32 _bisectionHash) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) ChooseSegment(opts *bind.TransactOpts, _segmentToChallenge *big.Int, _proof []byte, _bisectionRoot [32]byte, _bisectionHash [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "chooseSegment", _segmentToChallenge, _proof, _bisectionRoot, _bisectionHash)
}

// ChooseSegment is a paid mutator transaction binding the contract method 0x79a9ad85.
//
// Solidity: function chooseSegment(uint256 _segmentToChallenge, bytes _proof, bytes32 _bisectionRoot, bytes32 _bisectionHash) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) ChooseSegment(_segmentToChallenge *big.Int, _proof []byte, _bisectionRoot [32]byte, _bisectionHash [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ChooseSegment(&_ExecutionChallenge.TransactOpts, _segmentToChallenge, _proof, _bisectionRoot, _bisectionHash)
}

// ChooseSegment is a paid mutator transaction binding the contract method 0x79a9ad85.
//
// Solidity: function chooseSegment(uint256 _segmentToChallenge, bytes _proof, bytes32 _bisectionRoot, bytes32 _bisectionHash) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) ChooseSegment(_segmentToChallenge *big.Int, _proof []byte, _bisectionRoot [32]byte, _bisectionHash [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ChooseSegment(&_ExecutionChallenge.TransactOpts, _segmentToChallenge, _proof, _bisectionRoot, _bisectionHash)
}

// InitializeBisection is a paid mutator transaction binding the contract method 0x02ad1e4e.
//
// Solidity: function initializeBisection(address _rollupAddress, address _asserter, address _challenger, uint256 _challengePeriodTicks, bytes32 _challengeState) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) InitializeBisection(opts *bind.TransactOpts, _rollupAddress common.Address, _asserter common.Address, _challenger common.Address, _challengePeriodTicks *big.Int, _challengeState [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "initializeBisection", _rollupAddress, _asserter, _challenger, _challengePeriodTicks, _challengeState)
}

// InitializeBisection is a paid mutator transaction binding the contract method 0x02ad1e4e.
//
// Solidity: function initializeBisection(address _rollupAddress, address _asserter, address _challenger, uint256 _challengePeriodTicks, bytes32 _challengeState) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) InitializeBisection(_rollupAddress common.Address, _asserter common.Address, _challenger common.Address, _challengePeriodTicks *big.Int, _challengeState [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.InitializeBisection(&_ExecutionChallenge.TransactOpts, _rollupAddress, _asserter, _challenger, _challengePeriodTicks, _challengeState)
}

// InitializeBisection is a paid mutator transaction binding the contract method 0x02ad1e4e.
//
// Solidity: function initializeBisection(address _rollupAddress, address _asserter, address _challenger, uint256 _challengePeriodTicks, bytes32 _challengeState) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) InitializeBisection(_rollupAddress common.Address, _asserter common.Address, _challenger common.Address, _challengePeriodTicks *big.Int, _challengeState [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.InitializeBisection(&_ExecutionChallenge.TransactOpts, _rollupAddress, _asserter, _challenger, _challengePeriodTicks, _challengeState)
}

// OneStepProof is a paid mutator transaction binding the contract method 0x082379bb.
//
// Solidity: function oneStepProof(bytes32 _firstInbox, bytes32 _firstMessage, bytes32 _firstLog, bytes _proof) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) OneStepProof(opts *bind.TransactOpts, _firstInbox [32]byte, _firstMessage [32]byte, _firstLog [32]byte, _proof []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "oneStepProof", _firstInbox, _firstMessage, _firstLog, _proof)
}

// OneStepProof is a paid mutator transaction binding the contract method 0x082379bb.
//
// Solidity: function oneStepProof(bytes32 _firstInbox, bytes32 _firstMessage, bytes32 _firstLog, bytes _proof) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) OneStepProof(_firstInbox [32]byte, _firstMessage [32]byte, _firstLog [32]byte, _proof []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.OneStepProof(&_ExecutionChallenge.TransactOpts, _firstInbox, _firstMessage, _firstLog, _proof)
}

// OneStepProof is a paid mutator transaction binding the contract method 0x082379bb.
//
// Solidity: function oneStepProof(bytes32 _firstInbox, bytes32 _firstMessage, bytes32 _firstLog, bytes _proof) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) OneStepProof(_firstInbox [32]byte, _firstMessage [32]byte, _firstLog [32]byte, _proof []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.OneStepProof(&_ExecutionChallenge.TransactOpts, _firstInbox, _firstMessage, _firstLog, _proof)
}

// OneStepProofInbox is a paid mutator transaction binding the contract method 0xa8a4e532.
//
// Solidity: function oneStepProofInbox(bytes32 _firstInbox, bytes32 _firstMessage, bytes32 _firstLog, bytes _proof, uint8 _kind, uint256 _blockNumber, uint256 _timestamp, address _sender, uint256 _inboxSeqNum, bytes _msgData) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) OneStepProofInbox(opts *bind.TransactOpts, _firstInbox [32]byte, _firstMessage [32]byte, _firstLog [32]byte, _proof []byte, _kind uint8, _blockNumber *big.Int, _timestamp *big.Int, _sender common.Address, _inboxSeqNum *big.Int, _msgData []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "oneStepProofInbox", _firstInbox, _firstMessage, _firstLog, _proof, _kind, _blockNumber, _timestamp, _sender, _inboxSeqNum, _msgData)
}

// OneStepProofInbox is a paid mutator transaction binding the contract method 0xa8a4e532.
//
// Solidity: function oneStepProofInbox(bytes32 _firstInbox, bytes32 _firstMessage, bytes32 _firstLog, bytes _proof, uint8 _kind, uint256 _blockNumber, uint256 _timestamp, address _sender, uint256 _inboxSeqNum, bytes _msgData) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) OneStepProofInbox(_firstInbox [32]byte, _firstMessage [32]byte, _firstLog [32]byte, _proof []byte, _kind uint8, _blockNumber *big.Int, _timestamp *big.Int, _sender common.Address, _inboxSeqNum *big.Int, _msgData []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.OneStepProofInbox(&_ExecutionChallenge.TransactOpts, _firstInbox, _firstMessage, _firstLog, _proof, _kind, _blockNumber, _timestamp, _sender, _inboxSeqNum, _msgData)
}

// OneStepProofInbox is a paid mutator transaction binding the contract method 0xa8a4e532.
//
// Solidity: function oneStepProofInbox(bytes32 _firstInbox, bytes32 _firstMessage, bytes32 _firstLog, bytes _proof, uint8 _kind, uint256 _blockNumber, uint256 _timestamp, address _sender, uint256 _inboxSeqNum, bytes _msgData) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) OneStepProofInbox(_firstInbox [32]byte, _firstMessage [32]byte, _firstLog [32]byte, _proof []byte, _kind uint8, _blockNumber *big.Int, _timestamp *big.Int, _sender common.Address, _inboxSeqNum *big.Int, _msgData []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.OneStepProofInbox(&_ExecutionChallenge.TransactOpts, _firstInbox, _firstMessage, _firstLog, _proof, _kind, _blockNumber, _timestamp, _sender, _inboxSeqNum, _msgData)
}

// TimeoutChallenge is a paid mutator transaction binding the contract method 0xced5c1bf.
//
// Solidity: function timeoutChallenge() returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) TimeoutChallenge(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "timeoutChallenge")
}

// TimeoutChallenge is a paid mutator transaction binding the contract method 0xced5c1bf.
//
// Solidity: function timeoutChallenge() returns()
func (_ExecutionChallenge *ExecutionChallengeSession) TimeoutChallenge() (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.TimeoutChallenge(&_ExecutionChallenge.TransactOpts)
}

// TimeoutChallenge is a paid mutator transaction binding the contract method 0xced5c1bf.
//
// Solidity: function timeoutChallenge() returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) TimeoutChallenge() (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.TimeoutChallenge(&_ExecutionChallenge.TransactOpts)
}

// ExecutionChallengeAsserterTimedOutIterator is returned from FilterAsserterTimedOut and is used to iterate over the raw logs and unpacked data for AsserterTimedOut events raised by the ExecutionChallenge contract.
type ExecutionChallengeAsserterTimedOutIterator struct {
	Event *ExecutionChallengeAsserterTimedOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeAsserterTimedOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeAsserterTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeAsserterTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeAsserterTimedOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeAsserterTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeAsserterTimedOut represents a AsserterTimedOut event raised by the ExecutionChallenge contract.
type ExecutionChallengeAsserterTimedOut struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAsserterTimedOut is a free log retrieval operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterAsserterTimedOut(opts *bind.FilterOpts) (*ExecutionChallengeAsserterTimedOutIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "AsserterTimedOut")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeAsserterTimedOutIterator{contract: _ExecutionChallenge.contract, event: "AsserterTimedOut", logs: logs, sub: sub}, nil
}

// WatchAsserterTimedOut is a free log subscription operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchAsserterTimedOut(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeAsserterTimedOut) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "AsserterTimedOut")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeAsserterTimedOut)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "AsserterTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAsserterTimedOut is a log parse operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseAsserterTimedOut(log types.Log) (*ExecutionChallengeAsserterTimedOut, error) {
	event := new(ExecutionChallengeAsserterTimedOut)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "AsserterTimedOut", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeBisectedAssertionIterator is returned from FilterBisectedAssertion and is used to iterate over the raw logs and unpacked data for BisectedAssertion events raised by the ExecutionChallenge contract.
type ExecutionChallengeBisectedAssertionIterator struct {
	Event *ExecutionChallengeBisectedAssertion // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeBisectedAssertionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeBisectedAssertion)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeBisectedAssertion)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeBisectedAssertionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeBisectedAssertionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeBisectedAssertion represents a BisectedAssertion event raised by the ExecutionChallenge contract.
type ExecutionChallengeBisectedAssertion struct {
	AssertionHashes [][32]byte
	DeadlineTicks   *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterBisectedAssertion is a free log retrieval operation binding the contract event 0x81050542a90cf16d270921d19aeab083e0a9b460a208b224daf345c77cb4c3ce.
//
// Solidity: event BisectedAssertion(bytes32[] assertionHashes, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterBisectedAssertion(opts *bind.FilterOpts) (*ExecutionChallengeBisectedAssertionIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "BisectedAssertion")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeBisectedAssertionIterator{contract: _ExecutionChallenge.contract, event: "BisectedAssertion", logs: logs, sub: sub}, nil
}

// WatchBisectedAssertion is a free log subscription operation binding the contract event 0x81050542a90cf16d270921d19aeab083e0a9b460a208b224daf345c77cb4c3ce.
//
// Solidity: event BisectedAssertion(bytes32[] assertionHashes, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchBisectedAssertion(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeBisectedAssertion) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "BisectedAssertion")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeBisectedAssertion)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "BisectedAssertion", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBisectedAssertion is a log parse operation binding the contract event 0x81050542a90cf16d270921d19aeab083e0a9b460a208b224daf345c77cb4c3ce.
//
// Solidity: event BisectedAssertion(bytes32[] assertionHashes, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseBisectedAssertion(log types.Log) (*ExecutionChallengeBisectedAssertion, error) {
	event := new(ExecutionChallengeBisectedAssertion)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "BisectedAssertion", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeChallengerTimedOutIterator is returned from FilterChallengerTimedOut and is used to iterate over the raw logs and unpacked data for ChallengerTimedOut events raised by the ExecutionChallenge contract.
type ExecutionChallengeChallengerTimedOutIterator struct {
	Event *ExecutionChallengeChallengerTimedOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeChallengerTimedOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeChallengerTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeChallengerTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeChallengerTimedOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeChallengerTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeChallengerTimedOut represents a ChallengerTimedOut event raised by the ExecutionChallenge contract.
type ExecutionChallengeChallengerTimedOut struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterChallengerTimedOut is a free log retrieval operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterChallengerTimedOut(opts *bind.FilterOpts) (*ExecutionChallengeChallengerTimedOutIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "ChallengerTimedOut")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeChallengerTimedOutIterator{contract: _ExecutionChallenge.contract, event: "ChallengerTimedOut", logs: logs, sub: sub}, nil
}

// WatchChallengerTimedOut is a free log subscription operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchChallengerTimedOut(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeChallengerTimedOut) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "ChallengerTimedOut")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeChallengerTimedOut)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengerTimedOut is a log parse operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseChallengerTimedOut(log types.Log) (*ExecutionChallengeChallengerTimedOut, error) {
	event := new(ExecutionChallengeChallengerTimedOut)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeContinuedIterator is returned from FilterContinued and is used to iterate over the raw logs and unpacked data for Continued events raised by the ExecutionChallenge contract.
type ExecutionChallengeContinuedIterator struct {
	Event *ExecutionChallengeContinued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeContinuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeContinued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeContinued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeContinuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeContinuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeContinued represents a Continued event raised by the ExecutionChallenge contract.
type ExecutionChallengeContinued struct {
	SegmentIndex  *big.Int
	DeadlineTicks *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterContinued is a free log retrieval operation binding the contract event 0x1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e4.
//
// Solidity: event Continued(uint256 segmentIndex, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterContinued(opts *bind.FilterOpts) (*ExecutionChallengeContinuedIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "Continued")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeContinuedIterator{contract: _ExecutionChallenge.contract, event: "Continued", logs: logs, sub: sub}, nil
}

// WatchContinued is a free log subscription operation binding the contract event 0x1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e4.
//
// Solidity: event Continued(uint256 segmentIndex, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchContinued(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeContinued) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "Continued")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeContinued)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "Continued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContinued is a log parse operation binding the contract event 0x1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e4.
//
// Solidity: event Continued(uint256 segmentIndex, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseContinued(log types.Log) (*ExecutionChallengeContinued, error) {
	event := new(ExecutionChallengeContinued)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "Continued", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeInitiatedChallengeIterator is returned from FilterInitiatedChallenge and is used to iterate over the raw logs and unpacked data for InitiatedChallenge events raised by the ExecutionChallenge contract.
type ExecutionChallengeInitiatedChallengeIterator struct {
	Event *ExecutionChallengeInitiatedChallenge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeInitiatedChallengeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeInitiatedChallenge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeInitiatedChallenge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeInitiatedChallengeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeInitiatedChallengeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeInitiatedChallenge represents a InitiatedChallenge event raised by the ExecutionChallenge contract.
type ExecutionChallengeInitiatedChallenge struct {
	DeadlineTicks *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterInitiatedChallenge is a free log retrieval operation binding the contract event 0xe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc67.
//
// Solidity: event InitiatedChallenge(uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterInitiatedChallenge(opts *bind.FilterOpts) (*ExecutionChallengeInitiatedChallengeIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "InitiatedChallenge")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeInitiatedChallengeIterator{contract: _ExecutionChallenge.contract, event: "InitiatedChallenge", logs: logs, sub: sub}, nil
}

// WatchInitiatedChallenge is a free log subscription operation binding the contract event 0xe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc67.
//
// Solidity: event InitiatedChallenge(uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchInitiatedChallenge(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeInitiatedChallenge) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "InitiatedChallenge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeInitiatedChallenge)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiatedChallenge is a log parse operation binding the contract event 0xe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc67.
//
// Solidity: event InitiatedChallenge(uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseInitiatedChallenge(log types.Log) (*ExecutionChallengeInitiatedChallenge, error) {
	event := new(ExecutionChallengeInitiatedChallenge)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeOneStepProofCompletedIterator is returned from FilterOneStepProofCompleted and is used to iterate over the raw logs and unpacked data for OneStepProofCompleted events raised by the ExecutionChallenge contract.
type ExecutionChallengeOneStepProofCompletedIterator struct {
	Event *ExecutionChallengeOneStepProofCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeOneStepProofCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeOneStepProofCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeOneStepProofCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeOneStepProofCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeOneStepProofCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeOneStepProofCompleted represents a OneStepProofCompleted event raised by the ExecutionChallenge contract.
type ExecutionChallengeOneStepProofCompleted struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOneStepProofCompleted is a free log retrieval operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterOneStepProofCompleted(opts *bind.FilterOpts) (*ExecutionChallengeOneStepProofCompletedIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "OneStepProofCompleted")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeOneStepProofCompletedIterator{contract: _ExecutionChallenge.contract, event: "OneStepProofCompleted", logs: logs, sub: sub}, nil
}

// WatchOneStepProofCompleted is a free log subscription operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchOneStepProofCompleted(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeOneStepProofCompleted) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "OneStepProofCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeOneStepProofCompleted)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOneStepProofCompleted is a log parse operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseOneStepProofCompleted(log types.Log) (*ExecutionChallengeOneStepProofCompleted, error) {
	event := new(ExecutionChallengeOneStepProofCompleted)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// KeccakABI is the input ABI used to generate the binding from.
const KeccakABI = "[]"

// KeccakBin is the compiled bytecode used for deploying new contracts.
var KeccakBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820c07ae5b3a4de3b843e4ad0fe343fe545017077f4b66197a567534adf7bf6c06864736f6c63430005110032"

// DeployKeccak deploys a new Ethereum contract, binding an instance of Keccak to it.
func DeployKeccak(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Keccak, error) {
	parsed, err := abi.JSON(strings.NewReader(KeccakABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(KeccakBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Keccak{KeccakCaller: KeccakCaller{contract: contract}, KeccakTransactor: KeccakTransactor{contract: contract}, KeccakFilterer: KeccakFilterer{contract: contract}}, nil
}

// Keccak is an auto generated Go binding around an Ethereum contract.
type Keccak struct {
	KeccakCaller     // Read-only binding to the contract
	KeccakTransactor // Write-only binding to the contract
	KeccakFilterer   // Log filterer for contract events
}

// KeccakCaller is an auto generated read-only Go binding around an Ethereum contract.
type KeccakCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeccakTransactor is an auto generated write-only Go binding around an Ethereum contract.
type KeccakTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeccakFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type KeccakFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeccakSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type KeccakSession struct {
	Contract     *Keccak           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KeccakCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type KeccakCallerSession struct {
	Contract *KeccakCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// KeccakTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type KeccakTransactorSession struct {
	Contract     *KeccakTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KeccakRaw is an auto generated low-level Go binding around an Ethereum contract.
type KeccakRaw struct {
	Contract *Keccak // Generic contract binding to access the raw methods on
}

// KeccakCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type KeccakCallerRaw struct {
	Contract *KeccakCaller // Generic read-only contract binding to access the raw methods on
}

// KeccakTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type KeccakTransactorRaw struct {
	Contract *KeccakTransactor // Generic write-only contract binding to access the raw methods on
}

// NewKeccak creates a new instance of Keccak, bound to a specific deployed contract.
func NewKeccak(address common.Address, backend bind.ContractBackend) (*Keccak, error) {
	contract, err := bindKeccak(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Keccak{KeccakCaller: KeccakCaller{contract: contract}, KeccakTransactor: KeccakTransactor{contract: contract}, KeccakFilterer: KeccakFilterer{contract: contract}}, nil
}

// NewKeccakCaller creates a new read-only instance of Keccak, bound to a specific deployed contract.
func NewKeccakCaller(address common.Address, caller bind.ContractCaller) (*KeccakCaller, error) {
	contract, err := bindKeccak(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &KeccakCaller{contract: contract}, nil
}

// NewKeccakTransactor creates a new write-only instance of Keccak, bound to a specific deployed contract.
func NewKeccakTransactor(address common.Address, transactor bind.ContractTransactor) (*KeccakTransactor, error) {
	contract, err := bindKeccak(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &KeccakTransactor{contract: contract}, nil
}

// NewKeccakFilterer creates a new log filterer instance of Keccak, bound to a specific deployed contract.
func NewKeccakFilterer(address common.Address, filterer bind.ContractFilterer) (*KeccakFilterer, error) {
	contract, err := bindKeccak(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &KeccakFilterer{contract: contract}, nil
}

// bindKeccak binds a generic wrapper to an already deployed contract.
func bindKeccak(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(KeccakABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Keccak *KeccakRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Keccak.Contract.KeccakCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Keccak *KeccakRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Keccak.Contract.KeccakTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Keccak *KeccakRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Keccak.Contract.KeccakTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Keccak *KeccakCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Keccak.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Keccak *KeccakTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Keccak.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Keccak *KeccakTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Keccak.Contract.contract.Transact(opts, method, params...)
}

// OneStepProofABI is the input ABI used to generate the binding from.
const OneStepProofABI = "[]"

// OneStepProofBin is the compiled bytecode used for deploying new contracts.
var OneStepProofBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820271cdd97831c8611f22e28adda58bd2a125b301763121d96c7510873e8f2bbf764736f6c63430005110032"

// DeployOneStepProof deploys a new Ethereum contract, binding an instance of OneStepProof to it.
func DeployOneStepProof(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// OneStepProof is an auto generated Go binding around an Ethereum contract.
type OneStepProof struct {
	OneStepProofCaller     // Read-only binding to the contract
	OneStepProofTransactor // Write-only binding to the contract
	OneStepProofFilterer   // Log filterer for contract events
}

// OneStepProofCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofSession struct {
	Contract     *OneStepProof     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProofCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofCallerSession struct {
	Contract *OneStepProofCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// OneStepProofTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTransactorSession struct {
	Contract     *OneStepProofTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// OneStepProofRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofRaw struct {
	Contract *OneStepProof // Generic contract binding to access the raw methods on
}

// OneStepProofCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofCallerRaw struct {
	Contract *OneStepProofCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTransactorRaw struct {
	Contract *OneStepProofTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof creates a new instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProof(address common.Address, backend bind.ContractBackend) (*OneStepProof, error) {
	contract, err := bindOneStepProof(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// NewOneStepProofCaller creates a new read-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofCaller, error) {
	contract, err := bindOneStepProof(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofCaller{contract: contract}, nil
}

// NewOneStepProofTransactor creates a new write-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTransactor, error) {
	contract, err := bindOneStepProof(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTransactor{contract: contract}, nil
}

// NewOneStepProofFilterer creates a new log filterer instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofFilterer, error) {
	contract, err := bindOneStepProof(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofFilterer{contract: contract}, nil
}

// bindOneStepProof binds a generic wrapper to an already deployed contract.
func bindOneStepProof(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.OneStepProofCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transact(opts, method, params...)
}
