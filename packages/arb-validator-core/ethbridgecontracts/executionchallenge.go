// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgecontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ExecutionChallengeABI is the input ABI used to generate the binding from.
const ExecutionChallengeABI = "[{\"anonymous\":false,\"inputs\":[],\"name\":\"AsserterTimedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"machineHashes\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"inboxInsnIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"messageAccs\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"logAccs\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"outCounts\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"gases\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"totalSteps\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadlineTicks\",\"type\":\"uint256\"}],\"name\":\"BisectedAssertion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ChallengerTimedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"segmentIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadlineTicks\",\"type\":\"uint256\"}],\"name\":\"Continued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadlineTicks\",\"type\":\"uint256\"}],\"name\":\"InitiatedChallenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OneStepProofCompleted\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_beforeInbox\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_machineHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint32\",\"name\":\"inboxInsnIndex\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_messageAccs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_logAccs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_outCounts\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_gases\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64\",\"name\":\"_totalSteps\",\"type\":\"uint64\"}],\"name\":\"bisectAssertion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segmentToChallenge\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_bisectionRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_bisectionHash\",\"type\":\"bytes32\"}],\"name\":\"chooseSegment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rollupAddress\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_asserter\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_challenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_challengePeriodTicks\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_challengeState\",\"type\":\"bytes32\"}],\"name\":\"initializeBisection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_beforeInbox\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_beforeInboxValueSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_firstMessage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_firstLog\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"oneStepProof\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"timeoutChallenge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ExecutionChallengeFuncSigs maps the 4-byte function signature to its string representation.
var ExecutionChallengeFuncSigs = map[string]string{
	"6f537a39": "bisectAssertion(bytes32,bytes32[],uint32,bytes32[],bytes32[],uint64[],uint64[],uint64)",
	"79a9ad85": "chooseSegment(uint256,bytes,bytes32,bytes32)",
	"02ad1e4e": "initializeBisection(address,address,address,uint256,bytes32)",
	"4f524e7a": "oneStepProof(bytes32,uint256,bytes32,bytes32,bytes)",
	"ced5c1bf": "timeoutChallenge()",
}

// ExecutionChallengeBin is the compiled bytecode used for deploying new contracts.
var ExecutionChallengeBin = "0x608060405234801561001057600080fd5b50615f6480620000216000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806302ad1e4e1461005c5780634f524e7a146100a05780636f537a391461015c57806379a9ad8514610426578063ced5c1bf146104d6575b600080fd5b61009e600480360360a081101561007257600080fd5b506001600160a01b038135811691602081013582169160408201351690606081013590608001356104de565b005b61009e600480360360a08110156100b657600080fd5b81359160208101359160408201359160608101359181019060a081016080820135600160201b8111156100e857600080fd5b8201836020820111156100fa57600080fd5b803590602001918460018302840111600160201b8311171561011b57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506104f3945050505050565b61009e600480360361010081101561017357600080fd5b81359190810190604081016020820135600160201b81111561019457600080fd5b8201836020820111156101a657600080fd5b803590602001918460208302840111600160201b831117156101c757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929563ffffffff853516959094909350604081019250602001359050600160201b81111561022457600080fd5b82018360208201111561023657600080fd5b803590602001918460208302840111600160201b8311171561025757600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156102a657600080fd5b8201836020820111156102b857600080fd5b803590602001918460208302840111600160201b831117156102d957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561032857600080fd5b82018360208201111561033a57600080fd5b803590602001918460208302840111600160201b8311171561035b57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156103aa57600080fd5b8201836020820111156103bc57600080fd5b803590602001918460208302840111600160201b831117156103dd57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160401b0316915061080b9050565b61009e6004803603608081101561043c57600080fd5b81359190810190604081016020820135600160201b81111561045d57600080fd5b82018360208201111561046f57600080fd5b803590602001918460018302840111600160201b8311171561049057600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050823593505050602001356109e6565b61009e610ca7565b6104ea85858585610d87565b60065550505050565b60055460ff16600281111561050457fe5b600114604051806040016040528060098152602001684249535f535441544560b81b815250906105b25760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561057757818101518382015260200161055f565b50505050905090810190601f1680156105a45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506003546105bf43610ea2565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b815250906106325760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b5060015460408051808201909152600a8152692124a9afa9a2a72222a960b11b6020820152906001600160a01b031633146106ae5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b506106b7615cb9565b6106c18686610ead565b90506106cb615ced565b60006106d983878787610f5e565b915091506106e78282611339565b6106ef615d5e565b60405180610180016040528060016001600160401b031681526020016107188560000151611629565b8152602001610726866116ed565b81526020016107388560200151611629565b81526020018460600151151581526020018460c001516001600160401b03168152602001888152602001846080015181526020018460800151891461077e576001610781565b60005b60ff166001600160401b031681526020018781526020018460a0015181526020018460a0015188146107b45760016107b7565b60005b60ff16905290506107cf6107ca8261180d565b6118dd565b6040517f117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f590600090a161080061194f565b505050505050505050565b60055460ff16600281111561081c57fe5b600114604051806040016040528060098152602001684249535f535441544560b81b8152509061088d5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b5060035461089a43610ea2565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b8152509061090d5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b5060015460408051808201909152600a8152692124a9afa9a2a72222a960b11b6020820152906001600160a01b031633146109895760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b50610992615dc2565b6040518061010001604052808a81526020018981526020018863ffffffff168152602001878152602001868152602001858152602001848152602001836001600160401b03168152509050610800816119c3565b60055460ff1660028111156109f757fe5b60021460405180604001604052806009815260200168434f4e5f535441544560b81b81525090610a685760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b50600354610a7543610ea2565b11156040518060400160405280600c81526020016b434f4e5f444541444c494e4560a01b81525090610ae85760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b5060025460408051808201909152600a81526921a7a72fa9a2a72222a960b11b6020820152906001600160a01b03163314610b645760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b5060065482146040518060400160405280600881526020016721a7a72fa82922ab60c11b81525090610bd75760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b50610be783838387600101611acc565b6040518060400160405280600981526020016821a7a72fa82927a7a360b91b81525090610c555760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b506006819055610c63611bcd565b60035460408051868152602081019290925280517f1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e49281900390910190a150505050565b600354610cb343610ea2565b11610d05576040805162461bcd60e51b815260206004820152601760248201527f446561646c696e65206861736e27742065787069726564000000000000000000604482015290519081900360640190fd5b600160055460ff166002811115610d1857fe5b1415610d54576040517f2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f090600090a1610d4f611be9565b610d85565b6040517f4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a90600090a1610d8561194f565b565b600060055460ff166002811115610d9a57fe5b146040518060400160405280600f81526020016e4348414c5f494e49545f535441544560881b81525090610e0f5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b50600080546001600160a01b038681166001600160a01b03199283161790925560018054868416908316178155600280549386169390921692909217905560048290556005805460ff19169091179055610e67611c41565b60035460408051918252517fe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc679181900360200190a150505050565b6103e881025b919050565b610eb5615cb9565b6040805160a0810182528481528151606081018352600080825260208281018290528451828152808201865293949085019390830191610f0b565b610ef8615cb9565b815260200190600190039081610ef05790505b50905281526040805160008082526020828101909352919092019190610f47565b610f34615cb9565b815260200190600190039081610f2c5790505b508152600260208201526040019290925250919050565b610f66615ced565b60008083600081518110610f7657fe5b602001015160f81c60f81b60f81c9050600084600181518110610f9557fe5b602001015160f81c60f81b60f81c905060608260040160ff16604051908082528060200260200182016040528015610fe757816020015b610fd4615cb9565b815260200190600190039081610fcc5790505b50905060608260040160ff1660405190808252806020026020018201604052801561102c57816020015b611019615cb9565b8152602001906001900390816110115790505b509050600260005b8560ff1681101561106c576110498983611c53565b855186908490811061105757fe5b60209081029190910101529150600101611034565b5060005b8460ff168110156110a8576110858983611c53565b845185908490811061109357fe5b60209081029190910101529150600101611070565b506110b1615e19565b6110bb8983611de5565b809250819350505060008983815181106110d157fe5b602001015160f81c60f81b60f81c90508983600101815181106110f057fe5b602001015160f81c60f81b60f81c975060405180610140016040528083815260200161111b84611e85565b81526020018e81526020016000151581526020018d81526020018c815260200160006001600160401b0316815260200160405180604001604052808a60ff16815260200188815250815260200160405180604001604052808960ff1681526020018781525081526020018260ff16600114151581525098508060ff16600014806111a857508060ff166001145b6111f9576040805162461bcd60e51b815260206004820152601c60248201527f50726f6f662068616420626164206f7065726174696f6e207479706500000000604482015290519081900360640190fd5b611201615cb9565b60ff821661121e57895151611217908a90611eee565b9050611298565b6000865111611269576040805162461bcd60e51b81526020600482015260126024820152716e6f20696d6d6564696174652076616c756560701b604482015290519081900360640190fd5b611295898b60000151600001518860018c0360ff168151811061128857fe5b6020026020010151611f50565b90505b6112a1816116ed565b8a515260005b82890360ff168110156112e6576112de8782815181106112c357fe5b60200260200101518c60000151611fd490919063ffffffff16565b6001016112a7565b5060005b8760ff168110156113275761131f86828151811061130457fe5b60200260200101518c60000151611fee90919063ffffffff16565b6001016112ea565b50505050505050505094509492505050565b6000806000615e7761134d8560ff16612008565b6001600160401b03821660c08b0181905260208b015160a0908101805183900390528b510151949850929650909450925011156113a457602086015160001960a09091015261139b86612769565b50505050611625565b60e08601515184111561141f576113c16113bc6127d5565b6116ed565b6113d28760200151602001516116ed565b14611416576040805162461bcd60e51b815260206004820152600f60248201526e737461636b206e6f7420656d70747960881b604482015290519081900360640190fd5b61139b86612769565b61010086015151831115611490576114386113bc6127d5565b6114498760200151604001516116ed565b14611416576040805162461bcd60e51b8152602060048201526012602482015271617578737461636b206e6f7420656d70747960701b604482015290519081900360640190fd5b60008411806114a25750856101200151155b80156114b2575060e08601515184145b806114d9575085610120015180156114c8575083155b80156114d9575060e0860151516001145b611521576040805162461bcd60e51b8152602060048201526014602482015273746f6f206d616e7920737461636b206974656d7360601b604482015290519081900360640190fd5b61010086015151831461157b576040805162461bcd60e51b815260206004820152601760248201527f746f6f206d616e7920617578737461636b206974656d73000000000000000000604482015290519081900360640190fd5b611588868263ffffffff16565b60005b60e0870151518110156115d2576115ca8760e001516020015182815181106115af57fe5b60200260200101518860200151611fd490919063ffffffff16565b60010161158b565b5060005b6101008701515181101561161f576116178761010001516020015182815181106115fc57fe5b60200260200101518860200151611fee90919063ffffffff16565b6001016115d6565b50505050505b5050565b600060028260e00151141561164057506000610ea8565b60018260e00151141561165557506001610ea8565b81516020830151611665906116ed565b61167284604001516116ed565b61167f85606001516116ed565b61168c86608001516116ed565b8660a001518760c0015160405160200180888152602001878152602001868152602001858152602001848152602001838152602001828152602001975050505050505050604051602081830303815290604052805190602001209050610ea8565b60006116f761281c565b60ff16826060015160ff16141561171a57815161171390612821565b9050610ea8565b611722612845565b60ff16826060015160ff16141561174057611713826020015161284a565b611748612947565b60ff16826060015160ff16141561176a5781516080830151611713919061294c565b61177261299d565b60ff16826060015160ff1614156117ab5761178b615cb9565b61179883604001516129a2565b90506117a3816116ed565b915050610ea8565b6117b3612b04565b60ff16826060015160ff1614156117cc57508051610ea8565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b80516020808301516040808501516060860151608087015160a088015160c0808a015160e08b01516101008c01516101208d01516101408e0151610160909e01518a519d861b6001600160c01b03199081168f8f015260288f019c909c5260488e019990995260688d019790975294151560f81b60888c015292821b881660898b015260918a015260b189019190915290811b851660d188015260d987019190915260f986019690965290941b166101198301528251808303610101018152610121909201909252805191012090565b6006548114604051806040016040528060088152602001672124a9afa82922ab60c11b815250906116255760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b600080546001546002546040805163396f51cf60e01b81526001600160a01b039384166004820152918316602483015251919092169263396f51cf926044808201939182900301818387803b1580156119a757600080fd5b505af11580156119bb573d6000803e3d6000fd5b503392505050ff5b602081015151600019016119d682612b09565b606081604051908082528060200260200182016040528015611a02578160200160208202803883390190505b509050611a2883611a208560e001516001600160401b031685612eab565b846000612ec9565b81600081518110611a3557fe5b602090810291909101015260015b82811015611aac5780846040015163ffffffff161415611a6b57611a686113bc6127d5565b84525b611a8d84611a868660e001516001600160401b03168661303e565b8584612ec9565b828281518110611a9957fe5b6020908102919091010152600101611a43565b50611ab681613051565b611abe613060565b611ac783613074565b505050565b600080838160205b88518111611bbf578089015193506020818a510360200181611af257fe5b0491505b600082118015611b095750600286066001145b8015611b1757508160020a86115b15611b2a57600286046001019550611af6565b60028606611b75578383604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120925060028681611b6d57fe5b049550611bb7565b8284604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120925060028681611bb057fe5b0460010195505b602001611ad4565b505090941495945050505050565b600580546001919060ff191682805b0217905550610d85611c41565b600080546002546001546040805163396f51cf60e01b81526001600160a01b039384166004820152918316602483015251919092169263396f51cf926044808201939182900301818387803b1580156119a757600080fd5b600454611c4d43610ea2565b01600355565b6000611c5d615cb9565b83518310611ca3576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b600080611cb08686613258565b91509150611cbc61281c565b60ff168160ff161415611cf0576000611cd5878461327f565b909350905082611ce4826132f3565b94509450505050611dde565b611cf8612845565b60ff168160ff161415611d1a57611d0f86836133a5565b935093505050611dde565b611d22612947565b60ff168160ff161415611d3957611d0f8683613447565b611d4161299d565b60ff168160ff1610158015611d625750611d596134db565b60ff168160ff16105b15611d9e576000611d7161299d565b820390506060611d828289866134e0565b909450905083611d9182613579565b9550955050505050611dde565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b6000611def615e19565b611df7615e19565b600060e0820181905280611e0b878761327f565b9096509150611e1a8787613447565b60208501529550611e2b8787613447565b60408501529550611e3c8787611c53565b60608501529550611e4d8787611c53565b60808501529550611e5e878761327f565b60a08501529550611e6f878761327f565b92845260c0840192909252509590945092505050565b611e8d615e19565b60405180610100016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e001518152509050919050565b611ef6615cb9565b6040805160608101825260ff851681526020808201859052825160008082529181018452611f4993830191611f41565b611f2e615cb9565b815260200190600190039081611f265790505b50905261368b565b9392505050565b611f58615cb9565b604080516001808252818301909252606091816020015b611f77615cb9565b815260200190600190039081611f6f5790505090508281600081518110611f9a57fe5b6020026020010181905250611fcb60405180606001604052808760ff1681526020018681526020018381525061368b565b95945050505050565b611fe28260200151826136f2565b82602001819052505050565b611ffc8260400151826136f2565b82604001819052505050565b60008080615e77600185141561202d5750600292506000915060039050613770612762565b600285141561204b57506002925060009150600390506137ba612762565b600385141561206957506002925060009150600390506137eb612762565b6004851415612087575060029250600091506004905061381c612762565b60058514156120a55750600292506000915060079050613858612762565b60068514156120c35750600292506000915060049050613894612762565b60078514156120e157506002925060009150600790506138d0612762565b60088514156120ff575060039250600091506004905061390c612762565b600985141561211d5750600392506000915060049050613972612762565b600a85141561213b57506002925060009150601990506139b6612762565b6010851415612158575060029250600091508290506139e7612762565b601185141561217557506002925060009150829050613a18612762565b601285141561219257506002925060009150829050613a49612762565b60138514156121af57506002925060009150829050613a7a612762565b60148514156121cc57506002925060009150829050613aab612762565b60158514156121e957506001925060009150829050613b08612762565b601685141561220657506002925060009150829050613b76612762565b601785141561222357506002925060009150829050613ba7612762565b601885141561224057506002925060009150829050613bd8612762565b601985141561225d57506001925060009150829050613c09612762565b601a85141561227b5750600292506000915060049050613c4c612762565b601b8514156122995750600292506000915060079050613c7d612762565b60208514156122b75750600192506000915060079050613cae612762565b60218514156122d55750600192506000915060039050613cd9612762565b60228514156122f35750600292506000915060089050613cfc612762565b6023851415612312575060019250600091506103209050613d52612762565b603085141561232f57506001925060009150829050613f1f612762565b603185141561234c57506000925082915060019050613f2c612762565b603285141561236957506000925082915060019050613f49612762565b60338514156123875750600192506000915060029050613f66612762565b60348514156123a55750600192506000915060049050613f7f612762565b60358514156123c35750600292506000915060049050613fbf612762565b60368514156123e057506000925082915060029050614038612762565b60378514156123fd57506000925082915060019050614075612762565b603885141561241a57506001925060009150829050614098612762565b6039851415612437575060009250600191508190506140ba612762565b603a851415612454575060009250829150600290506140cb612762565b603b851415612471575060009250829150600190506127d2612762565b603c85141561248e575060009250829150600190506140f9612762565b603d8514156124ab5750600192506000915082905061410f612762565b60408514156124c857506001925060009150829050614152612762565b60418514156124e65750600292506000915060019050614194612762565b60428514156125045750600392506000915060019050614202612762565b6043851415612522575060029250600091506001905061429c612762565b604485141561254057506003925060009150600190506142e0612762565b605085141561255d57506002925060009150829050614350612762565b605185141561257b57506003925060009150602890506143f3612762565b605285141561259957506001925060009150600290506144a7612762565b60538514156125b6575060019250829150600390506144eb612762565b60548514156125d45750600292506001915060299050614573612762565b60608514156125f1575060009250829150606490506127d2612762565b606185141561260f575060019250600091506064905061463a612762565b607085141561262d5750600192506000915060649050614680612762565b607285141561264a575060009250829150602890506146ff612762565b60738514156126675750600092508291506005905061479a612762565b6074851415612684575060009250829150600a90506147a3612762565b60758514156126a1575060019250600091508190506147b0612762565b60768514156126be575060009250829150600190506147ea612762565b60778514156126db575060009250829150601990506147fe612762565b60788514156126f95750600292506000915060199050614848612762565b607985141561271757506003925060009150601990506148b8612762565b607b851415612734575060009250829150600a9050614940612762565b608085141561275357506004925060009150614e209050614982612762565b506000925082915081905061479a5b9193509193565b60408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051908201209082015160c0015114156127c5576127c08160200151614b0d565b6127d2565b602081015160c081015190525b50565b6127dd615cb9565b6040805160008082526020820190925261281791612811565b6127fe615cb9565b8152602001906001900390816127f65790505b50613579565b905090565b600090565b60408051602080820193909352815180820384018152908201909152805191012090565b600190565b600060028260400151511061285b57fe5b6040820151516128c05761286d612845565b8251602080850151604080516001600160f81b031960f896871b8116828601529490951b909316602185015260228085019190915282518085039091018152604290930190915281519101209050610ea8565b6128c8612845565b82600001516128ee84604001516000815181106128e157fe5b60200260200101516116ed565b8460200151604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b600290565b600061295661299d565b8383604051602001808460ff1660ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b600390565b6129aa615cb9565b6008825111156129f8576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b60608251604051908082528060200260200182016040528015612a25578160200160208202803883390190505b508051909150600160005b82811015612a8857612a478682815181106128e157fe5b848281518110612a5357fe5b602002602001018181525050858181518110612a6b57fe5b602002602001015160800151820191508080600101915050612a30565b506000835184604051602001808360ff1660ff1660f81b8152600101828051906020019060200280838360005b83811015612acd578181015183820152602001612ab5565b5050505090500192505050604051602081830303815290604052805190602001209050612afa8183610ead565b9695505050505050565b606490565b6000600182602001515103905081606001515181600101146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b81525090612b905760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b5081608001515181600101146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b81525090612c0b5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b508160c001515181146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b81525090612c835760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b508160a001515181600202146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b81525090612cfe5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057757818101518382015260200161055f565b5060008080805b84811015612d70578560c001518181518110612d1d57fe5b6020026020010151840193508560a001518181518110612d3957fe5b6020026020010151830192508560a0015181860181518110612d5757fe5b6020026020010151820191508080600101915050612d05565b50612ea46107ca6040518061018001604052808860e001516001600160401b031681526020018860200151600081518110612da757fe5b602002602001015181526020018860000151815260200188602001518881518110612dce57fe5b602002602001015181526020016000896040015163ffffffff1611612df4576000612df7565b60015b15158152602001866001600160401b031681526020018860600151600081518110612e1e57fe5b6020026020010151815260200188606001518881518110612e3b57fe5b60200260200101518152602001856001600160401b031681526020018860800151600081518110612e6857fe5b6020026020010151815260200188608001518881518110612e8557fe5b60200260200101518152602001846001600160401b031681525061180d565b5050505050565b6000818381612eb657fe5b06828481612ec057fe5b04019392505050565b6000611fcb6040518061018001604052808663ffffffff166001600160401b0316815260200187602001518581518110612eff57fe5b602002602001015181526020018760000151815260200187602001518560010181518110612f2957fe5b6020026020010151815260200184600101886040015163ffffffff1614151581526020018760c001518581518110612f5d57fe5b60200260200101516001600160401b0316815260200187606001518581518110612f8357fe5b6020026020010151815260200187606001518560010181518110612fa357fe5b602002602001015181526020018760a001518581518110612fc057fe5b60200260200101516001600160401b0316815260200187608001518581518110612fe657fe5b602002602001015181526020018760800151856001018151811061300657fe5b602002602001015181526020018760a001518587018151811061302557fe5b60200260200101516001600160401b031681525061180d565b600081838161304957fe5b049392505050565b61305a81614b17565b60065550565b600580546002919060ff1916600183611bdc565b7ffdfc7d7356ac103488916cfffd6e537843dadc44dc71695a7ed504d9f668528781602001518260400151836060015184608001518560a001518660c001518760e0015160035460405180806020018963ffffffff1663ffffffff16815260200180602001806020018060200180602001886001600160401b03166001600160401b0316815260200187815260200186810386528e818151815260200191508051906020019060200280838360005b8381101561313b578181015183820152602001613123565b5050505090500186810385528c818151815260200191508051906020019060200280838360005b8381101561317a578181015183820152602001613162565b5050505090500186810384528b818151815260200191508051906020019060200280838360005b838110156131b95781810151838201526020016131a1565b5050505090500186810383528a818151815260200191508051906020019060200280838360005b838110156131f85781810151838201526020016131e0565b50505050905001868103825289818151815260200191508051906020019060200280838360005b8381101561323757818101518382015260200161321f565b505050509050019d505050505050505050505050505060405180910390a150565b6000808260010184848151811061326b57fe5b016020015190925060f81c90509250929050565b60008082845110158015613297575060208385510310155b6132d4576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b602083016132e8858563ffffffff614c5516565b915091509250929050565b6132fb615cb9565b6040805160a0810182528381528151606081018352600080825260208281018290528451828152808201865293949085019390830191613351565b61333e615cb9565b8152602001906001900390816133365790505b5090528152604080516000808252602082810190935291909201919061338d565b61337a615cb9565b8152602001906001900390816133725790505b50815260006020820152600160409091015292915050565b60006133af615cb9565b826000806133bb615cb9565b60006133c78986613258565b90955093506133d68986613258565b9095509250600160ff851614156133f7576133f18986611c53565b90955091505b6134018986614c71565b9095509050600160ff8516141561342c578461341e848385611f50565b965096505050505050611dde565b846134378483611eee565b9650965050505050509250929050565b6000613451615cb9565b82845110158015613466575060408385510310155b6134a2576040805162461bcd60e51b81526020600482015260086024820152671d1bc81cda1bdc9d60c21b604482015290519081900360640190fd5b6000806134af8686614c71565b90945091506134be868561327f565b9094509050836134ce8383610ead565b9350935050509250929050565b600c90565b60006060600083905060608660ff1660405190808252806020026020018201604052801561352857816020015b613515615cb9565b81526020019060019003908161350d5790505b50905060005b8760ff168160ff16101561356c576135468784611c53565b8351849060ff851690811061355757fe5b6020908102919091010152925060010161352e565b5090969095509350505050565b613581615cb9565b61358b8251614c88565b6135dc576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b8351811015613613578381815181106135f657fe5b6020026020010151608001518201915080806001019150506135e1565b506040805160a081018252600080825282516060810184528181526020818101839052845183815280820186529394908501939192908301919061366d565b61365a615cb9565b8152602001906001900390816136525790505b50905281526020810194909452600360408501526060909301525090565b613693615cb9565b6040805160a08101825260008082526020808301869052835182815290810184529192830191906136da565b6136c7615cb9565b8152602001906001900390816136bf5790505b50815260016020820181905260409091015292915050565b6136fa615cb9565b6040805160028082526060828101909352816020015b613718615cb9565b815260200190600190039081613710579050509050828160008151811061373b57fe5b6020026020010181905250838160018151811061375457fe5b6020026020010181905250613768816129a2565b949350505050565b600080600061377e84614c8f565b9250925092508261379a5761379284614d09565b5050506127d2565b818101612ea46137a9826132f3565b60e08701519063ffffffff614d2716565b60008060006137c884614c8f565b925092509250826137dc5761379284614d09565b818102612ea46137a9826132f3565b60008060006137f984614c8f565b9250925092508261380d5761379284614d09565b808203612ea46137a9826132f3565b600080600061382a84614c8f565b92509250925082158061383b575080155b156138495761379284614d09565b808204612ea46137a9826132f3565b600080600061386684614c8f565b925092509250821580613877575080155b156138855761379284614d09565b808205612ea46137a9826132f3565b60008060006138a284614c8f565b9250925092508215806138b3575080155b156138c15761379284614d09565b808206612ea46137a9826132f3565b60008060006138de84614c8f565b9250925092508215806138ef575080155b156138fd5761379284614d09565b808207612ea46137a9826132f3565b60008060008061391b85614d51565b935093509350935083158061392e575080155b156139455761393c85614d09565b505050506127d2565b600081838508905061396a613959826132f3565b60e08801519063ffffffff614d2716565b505050505050565b60008060008061398185614d51565b9350935093509350831580613994575080155b156139a25761393c85614d09565b600081838509905061396a613959826132f3565b60008060006139c484614c8f565b925092509250826139d85761379284614d09565b80820a612ea46137a9826132f3565b60008060006139f584614c8f565b92509250925082613a095761379284614d09565b808210612ea46137a9826132f3565b6000806000613a2684614c8f565b92509250925082613a3a5761379284614d09565b808211612ea46137a9826132f3565b6000806000613a5784614c8f565b92509250925082613a6b5761379284614d09565b808212612ea46137a9826132f3565b6000806000613a8884614c8f565b92509250925082613a9c5761379284614d09565b808213612ea46137a9826132f3565b613ab3615cb9565b613ac08260e00151614dfa565b9050613aca615cb9565b613ad78360e00151614dfa565b9050611ac7613af7613ae8836116ed565b613af1856116ed565b14614e3c565b60e08501519063ffffffff614d2716565b613b10615cb9565b613b1d8260e00151614dfa565b9050613b2881614e5e565b613b4f57613b4a613b3960006132f3565b60e08401519063ffffffff614d2716565b611625565b80518015613b70613b5f826132f3565b60e08601519063ffffffff614d2716565b50505050565b6000806000613b8484614c8f565b92509250925082613b985761379284614d09565b818116612ea46137a9826132f3565b6000806000613bb584614c8f565b92509250925082613bc95761379284614d09565b818117612ea46137a9826132f3565b6000806000613be684614c8f565b92509250925082613bfa5761379284614d09565b818118612ea46137a9826132f3565b613c11615cb9565b613c1e8260e00151614dfa565b9050613c2981614e5e565b613c3c57613c3682614d09565b506127d2565b80518019613b70613b5f826132f3565b6000806000613c5a84614c8f565b92509250925082613c6e5761379284614d09565b81811a612ea46137a9826132f3565b6000806000613c8b84614c8f565b92509250925082613c9f5761379284614d09565b81810b612ea46137a9826132f3565b613cb6615cb9565b613cc38260e00151614dfa565b9050611625613b39613cd4836116ed565b6132f3565b613ce1615cb9565b613cee8260e00151614dfa565b9050611625613b3982614e69565b6000806000613d0a84614c8f565b92509250925082613d1e5761379284614d09565b60408051602080820185905281830184905282518083038401815260609092019092528051910120612ea46137a9826132f3565b613d5a615cb9565b613d678260e00151614dfa565b9050613d7281614ece565b1580613d845750806040015151600714155b15613d9257613c3682614d09565b604081015160005b6007811015613dd457613dbf828281518110613db257fe5b6020026020010151614e5e565b613dcc5761379284614d09565b600101613d9a565b50613ddd615e79565b60005b6019811015613e4957826004820481518110613df857fe5b6020026020010151600001516001600160401b0316828260198110613e1957fe5b60200201526040836004830481518110613e2f57fe5b6020908102919091010151805190911c9052600101613de0565b50613e5381614edb565b604080516007808252610100820190925291925060609190816020015b613e78615cb9565b815260200190600190039081613e7057905050905060005b6007811015613ec257613ea360006132f3565b828281518110613eaf57fe5b6020908102919091010152600101613e90565b5060005b6019811015613f125760048106604002838260198110613ee257fe5b6020020151901b826004830481518110613ef857fe5b602090810291909101015180519091179052600101613ec6565b50612ea46137a982613579565b6116258160e00151614dfa565b60208101516080015160e08201516127d29163ffffffff614d2716565b60208101516060015160e08201516127d29163ffffffff614d2716565b613f738160e00151614dfa565b60209091015160600152565b613f87615cb9565b613f948260e00151614dfa565b9050613f9f81615acc565b613fac57613c3682614d09565b613fb5816116ed565b6020830151525050565b613fc7615cb9565b613fd48260e00151614dfa565b9050613fde615cb9565b613feb8360e00151614dfa565b9050613ff682615acc565b1580614008575061400681614e5e565b155b1561401d5761401683614d09565b50506127d2565b805115611ac75761402d826116ed565b602084015152505050565b60e08101515160009015801561406757506140546113bc6127d5565b6140658360200151602001516116ed565b145b9050611625613b3982614e3c565b8051516127d290614087906001615ad9565b60e08301519063ffffffff614d2716565b6127d26140a88260e00151614dfa565b6101008301519063ffffffff614d2716565b6127d2614087826101000151614dfa565b6101008101515160009015801561406757506140e86113bc6127d5565b6140658360200151604001516116ed565b6127d2614087826020015160c001516001615ad9565b614117615cb9565b6141248260e00151614dfa565b905061412f81615acc565b61413c57613c3682614d09565b614145816116ed565b602083015160c001525050565b61415a615cb9565b6141678260e00151614dfa565b60e083015190915061417f908263ffffffff614d2716565b60e0820151611625908263ffffffff614d2716565b61419c615cb9565b6141a98260e00151614dfa565b90506141b3615cb9565b6141c08360e00151614dfa565b60e08401519091506141d8908263ffffffff614d2716565b60e08301516141ed908363ffffffff614d2716565b60e0830151611ac7908263ffffffff614d2716565b61420a615cb9565b6142178260e00151614dfa565b9050614221615cb9565b61422e8360e00151614dfa565b9050614238615cb9565b6142458460e00151614dfa565b60e085015190915061425d908263ffffffff614d2716565b60e0840151614272908363ffffffff614d2716565b60e0840151614287908463ffffffff614d2716565b60e0840151613b70908263ffffffff614d2716565b6142a4615cb9565b6142b18260e00151614dfa565b90506142bb615cb9565b6142c88360e00151614dfa565b60e08401519091506141ed908363ffffffff614d2716565b6142e8615cb9565b6142f58260e00151614dfa565b90506142ff615cb9565b61430c8360e00151614dfa565b9050614316615cb9565b6143238460e00151614dfa565b60e085015190915061433b908463ffffffff614d2716565b60e0840151614287908363ffffffff614d2716565b614358615cb9565b6143658260e00151614dfa565b905061436f615cb9565b61437c8360e00151614dfa565b905061438782614e5e565b1580614399575061439781614ece565b155b806143b357506143a881615b8a565b60ff16826000015110155b156143c15761401683614d09565b611ac781604001518360000151815181106143d857fe5b60200260200101518460e00151614d2790919063ffffffff16565b6143fb615cb9565b6144088260e00151614dfa565b9050614412615cb9565b61441f8360e00151614dfa565b9050614429615cb9565b6144368460e00151614dfa565b905061444183614e5e565b1580614453575061445182614ece565b155b8061446d575061446282615b8a565b60ff16836000015110155b1561447b5761379284614d09565b60408201518351815183918391811061449057fe5b6020026020010181905250612ea46137a982613579565b6144af615cb9565b6144bc8260e00151614dfa565b90506144c781614ece565b6144d457613c3682614d09565b611625613b396144e383615b8a565b60ff166132f3565b6144f3615cb9565b6145008260e00151614dfa565b905061450a615cb9565b614518836101000151614dfa565b905061452382614e5e565b1580614535575061453381614ece565b155b8061454f575061454481615b8a565b60ff16826000015110155b1561455d5761401683614d09565b6101008301516143c1908263ffffffff614d2716565b61457b615cb9565b6145888260e00151614dfa565b9050614592615cb9565b61459f8360e00151614dfa565b90506145a9615cb9565b6145b7846101000151614dfa565b90506145c281614ece565b15806145d457506145d283614e5e565b155b806145ee57506145e381615b8a565b60ff16836000015110155b156145fc5761379284614d09565b60408101518351815184918391811061461157fe5b6020026020010181905250612ea461462882613579565b6101008701519063ffffffff614d2716565b8060a0015161464f6113bc8360e00151614dfa565b604080516020808201949094528082019290925280518083038201815260609092019052805191012060a090910152565b614688615cb9565b6146958260e00151614dfa565b9050612710816080015111806146b157506146af81615bb1565b155b156146bf57613c3682614d09565b81608001516146cd826116ed565b604080516020808201949094528082019290925280518083038201815260609092019052805191012060808301525050565b61470a6113bc6127d5565b61471782604001516116ed565b141561476a576040805162461bcd60e51b815260206004820152601d60248201527f496e626f7820696e737472756374696f6e2077617320626c6f636b6564000000604482015290519081900360640190fd5b604081015160e08201516147839163ffffffff614d2716565b61478b6127d5565b60408201526001606090910152565b6127d281614d09565b6127d28160200151615caf565b6147b8615cb9565b6147c58260e00151614dfa565b90506147d081614e5e565b6147dd57613c3682614d09565b51602082015160a0015250565b6127d2614087826020015160a001516132f3565b60408051600160f81b60208083019190915260006021830181905260228084019190915283518084039091018152604290920190925280519101206127d290614087906001615ad9565b614850615cb9565b61485d8260e00151614dfa565b9050614867615cb9565b6148748360e00151614dfa565b905061487f82614e5e565b1580614891575061488f81615acc565b155b1561489f5761401683614d09565b611ac7613af783600001516148b3846116ed565b611eee565b6148c0615cb9565b6148cd8260e00151614dfa565b90506148d7615cb9565b6148e48360e00151614dfa565b90506148ee615cb9565b6148fb8460e00151614dfa565b905061490683614e5e565b1580614918575061491681615acc565b155b156149265761379284614d09565b613b70613b5f846000015161493a846116ed565b85611f50565b60408051600080825260208201909252606091614973565b614960615cb9565b8152602001906001900390816149585790505b509050611625613b3982613579565b61498a615cb9565b6149978260e00151614dfa565b90506149a1615cb9565b6149ae8360e00151614dfa565b90506149b8615cb9565b6149c58460e00151614dfa565b90506149cf615cb9565b6149dc8560e00151614dfa565b90506149e784614e5e565b15806149f957506149f783614e5e565b155b80614a0a5750614a0882614e5e565b155b80614a1b5750614a1981614e5e565b155b15614a295761393c85614d09565b83518351835115801590614a3f57508351600114155b15614a6d57614a62614a5160006132f3565b60e08901519063ffffffff614d2716565b5050505050506127d2565b83518351604080516000808252602080830180855285905260ff601b9096019586168385015260608301889052608083018790529251909260019260a080820193601f1981019281900390910190855afa158015614acf573d6000803e3d6000fd5b505050602060405103519050614b01614af0826001600160a01b03166132f3565b60e08c01519063ffffffff614d2716565b50505050505050505050565b600160e090910152565b6000815b600181511115614c385760606002825160010181614b3557fe5b04604051908082528060200260200182016040528015614b5f578160200160208202803883390190505b50905060005b8151811015614c30578251816002026001011015614bf857828160020281518110614b8c57fe5b6020026020010151838260020260010181518110614ba657fe5b6020026020010151604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120828281518110614be757fe5b602002602001018181525050614c28565b828160020281518110614c0757fe5b6020026020010151828281518110614c1b57fe5b6020026020010181815250505b600101614b65565b509050614b1b565b80600081518110614c4557fe5b6020026020010151915050919050565b60008160200183511015614c6857600080fd5b50016020015190565b600080602083016132e8858563ffffffff614c5516565b6008101590565b6000806000614c9c615cb9565b614ca98560e00151614dfa565b9050614cb3615cb9565b614cc08660e00151614dfa565b9050614ccb82614e5e565b1580614cdd5750614cdb81614e5e565b155b15614cf4575060009350839250829150614d029050565b905190516001945090925090505b9193909250565b614d1281612769565b60e08101516000908190526101009091015152565b808260200151836000015181518110614d3c57fe5b60209081029190910101525080516001019052565b600080600080614d5f615cb9565b614d6c8660e00151614dfa565b9050614d76615cb9565b614d838760e00151614dfa565b9050614d8d615cb9565b614d9a8860e00151614dfa565b9050614da583614e5e565b1580614db75750614db582614e5e565b155b80614dc85750614dc681614e5e565b155b15614de3575060009550859450849350839250612762915050565b915190519151600198919750919550909350915050565b614e02615cb9565b614e0a615cb9565b8260200151600184600001510381518110614e2157fe5b60209081029190910101518351600019018452915050919050565b614e44615cb9565b8115614e545761171360016132f3565b61171360006132f3565b6060015160ff161590565b614e71615cb9565b816060015160ff1660021415614eb85760405162461bcd60e51b8152600401808060200182810382526021815260200180615f0f6021913960400191505060405180910390fd5b614ec8826060015160ff166132f3565b92915050565b6060015160ff1660031490565b614ee3615e79565b614eeb615e98565b614ef3615e98565b614efb615e79565b614f03615eb6565b60405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060008090505b6018811015615ac1576080878101516060808a01516040808c01516020808e01518e511890911890921890931889526101208b01516101008c015160e08d015160c08e015160a08f0151181818189089018190526101c08b01516101a08c01516101808d01516101608e01516101408f0151181818189289019283526102608b01516102408c01516102208d01516102008e01516101e08f015118181818918901919091526103008a01516102e08b01516102c08c01516102a08d01516102808e0151181818189288018390526001600160401b0360028202166001603f1b91829004179092188652510485600260200201516002026001600160401b03161785600060200201511884600160200201526001603f1b85600360200201518161514f57fe5b0485600360200201516002026001600160401b03161785600160200201511884600260200201526001603f1b85600460200201518161518a57fe5b0485600460200201516002026001600160401b031617856002600581106151ad57fe5b602002015118606085015284516001603f1b9086516060808901519390920460029091026001600160401b031617909118608086810191825286518a5118808b5287516020808d018051909218825289516040808f0180519092189091528a518e8801805190911890528a51948e0180519095189094528901805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291880180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292870180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a01805190911890529084525163100000009060208901516001600160401b03641000000000909102169190041761010084015260408701516001603d1b9060408901516001600160401b03600890910216919004176101608401526060870151628000009060608901516001600160401b036502000000000090910216919004176102608401526080870151654000000000009060808901516001600160401b036204000090910216919004176102c084015260a08701516001603f1b900487600560200201516002026001600160401b0316178360026019811061541757fe5b602002015260c0870151621000008104651000000000009091026001600160401b039081169190911760a085015260e0880151664000000000000081046104009091028216176101a08501526101008801516208000081046520000000000090910282161761020085015261012088015160048082029092166001603e1b909104176103008501526101408801516101408901516001600160401b036001603e1b90910216919004176080840152610160870151670400000000000000906101608901516001600160401b036040909102169190041760e084015261018087015162200000906101808901516001600160401b036508000000000090910216919004176101408401526101a08701516602000000000000906101a08901516001600160401b0361800090910216919004176102408401526101c08701516008906101c08901516001600160401b036001603d1b90910216919004176102a08401526101e0870151641000000000906101e08901516001600160401b03631000000090910216919004176020840152610200808801516102008901516001600160401b0366800000000000009091021691900417610120840152610220870151648000000000906102208901516001600160401b036302000000909102169190041761018084015261024087015165080000000000906102408901516001600160401b036220000090910216919004176101e0840152610260870151610100906102608901516001600160401b03600160381b90910216919004176102e0840152610280870151642000000000906102808901516001600160401b036308000000909102169190041760608401526102a087015165100000000000906102a08901516001600160401b0362100000909102169190041760c08401526102c08701516302000000906102c08901516001600160401b0364800000000090910216919004176101c08401526102e0870151600160381b906102e08901516001600160401b036101009091021691900417610220840152610300870151660400000000000090048760186020020151614000026001600160401b031617836014602002015282600a602002015183600560200201511916836000602002015118876000602002015282600b602002015183600660200201511916836001602002015118876001602002015282600c602002015183600760200201511916836002602002015118876002602002015282600d602002015183600860200201511916836003602002015118876003602002015282600e602002015183600960200201511916836004602002015118876004602002015282600f602002015183600a602002015119168360056020020151188760056020020152826010602002015183600b602002015119168360066020020151188760066020020152826011602002015183600c602002015119168360076020020151188760076020020152826012602002015183600d602002015119168360086020020151188760086020020152826013602002015183600e602002015119168360096020020151188760096020020152826014602002015183600f6020020151191683600a60200201511887600a602002015282601560200201518360106020020151191683600b60200201511887600b602002015282601660200201518360116020020151191683600c60200201511887600c602002015282601760200201518360126020020151191683600d60200201511887600d602002015282601860200201518360136020020151191683600e60200201511887600e602002015282600060200201518360146020020151191683600f60200201511887600faaf57fe5b6020020151875118875260010161502a565b509495945050505050565b6060015160ff1660011490565b615ae1615cb9565b6040805160a0810182528481528151606081018352600080825260208281018290528451828152808201865293949085019390830191615b37565b615b24615cb9565b815260200190600190039081615b1c5790505b50905281526040805160008082526020828101909352919092019190615b73565b615b60615cb9565b815260200190600190039081615b585790505b508152606460208201526040019290925250919050565b606081015160009060ff1660031415615ba95750604081015151610ea8565b506001610ea8565b606081015160009060ff16615bc857506001610ea8565b606082015160ff1660011415615be057506000610ea8565b606082015160ff1660021415615c34576040805162461bcd60e51b81526020600482015260146024820152736d75737420686176652066756c6c2076616c756560601b604482015290519081900360640190fd5b606082015160ff1660031415615c975760408201515160005b81811015615c8c57615c7584604001518281518110615c6857fe5b6020026020010151615bb1565b615c8457600092505050610ea8565b600101615c4d565b506001915050610ea8565b606082015160ff16606414156117cc57506000610ea8565b600260e090910152565b6040518060a0016040528060008152602001615cd3615ed5565b815260606020820181905260006040830181905291015290565b604051806101400160405280615d01615e19565b8152602001615d0e615e19565b8152602001615d1b615cb9565b81526000602082018190526040820181905260608201819052608082015260a001615d44615ef4565b8152602001615d51615ef4565b8152600060209091015290565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081019190915290565b6040518061010001604052806000801916815260200160608152602001600063ffffffff1681526020016060815260200160608152602001606081526020016060815260200160006001600160401b031681525090565b6040805161010081019091526000815260208101615e35615cb9565b8152602001615e42615cb9565b8152602001615e4f615cb9565b8152602001615e5c615cb9565b81526000602082018190526040820181905260609091015290565bfe5b6040518061032001604052806019906020820280388339509192915050565b6040518060a001604052806005906020820280388339509192915050565b6040518061030001604052806018906020820280388339509192915050565b6040805160608082018352600080835260208301529181019190915290565b60405180604001604052806000815260200160608152509056fe56616c7565206d757374206861766520612076616c6964207479706520636f6465a265627a7a723158203f3152688ac3812c896d5b95e9c21310576345b14e4dfcf0878c75ab5b50decd64736f6c63430005110032"

// DeployExecutionChallenge deploys a new Ethereum contract, binding an instance of ExecutionChallenge to it.
func DeployExecutionChallenge(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ExecutionChallenge, error) {
	parsed, err := abi.JSON(strings.NewReader(ExecutionChallengeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ExecutionChallengeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ExecutionChallenge{ExecutionChallengeCaller: ExecutionChallengeCaller{contract: contract}, ExecutionChallengeTransactor: ExecutionChallengeTransactor{contract: contract}, ExecutionChallengeFilterer: ExecutionChallengeFilterer{contract: contract}}, nil
}

// ExecutionChallenge is an auto generated Go binding around an Ethereum contract.
type ExecutionChallenge struct {
	ExecutionChallengeCaller     // Read-only binding to the contract
	ExecutionChallengeTransactor // Write-only binding to the contract
	ExecutionChallengeFilterer   // Log filterer for contract events
}

// ExecutionChallengeCaller is an auto generated read-only Go binding around an Ethereum contract.
type ExecutionChallengeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExecutionChallengeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ExecutionChallengeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExecutionChallengeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ExecutionChallengeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExecutionChallengeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ExecutionChallengeSession struct {
	Contract     *ExecutionChallenge // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ExecutionChallengeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ExecutionChallengeCallerSession struct {
	Contract *ExecutionChallengeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ExecutionChallengeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ExecutionChallengeTransactorSession struct {
	Contract     *ExecutionChallengeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ExecutionChallengeRaw is an auto generated low-level Go binding around an Ethereum contract.
type ExecutionChallengeRaw struct {
	Contract *ExecutionChallenge // Generic contract binding to access the raw methods on
}

// ExecutionChallengeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ExecutionChallengeCallerRaw struct {
	Contract *ExecutionChallengeCaller // Generic read-only contract binding to access the raw methods on
}

// ExecutionChallengeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ExecutionChallengeTransactorRaw struct {
	Contract *ExecutionChallengeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewExecutionChallenge creates a new instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallenge(address common.Address, backend bind.ContractBackend) (*ExecutionChallenge, error) {
	contract, err := bindExecutionChallenge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallenge{ExecutionChallengeCaller: ExecutionChallengeCaller{contract: contract}, ExecutionChallengeTransactor: ExecutionChallengeTransactor{contract: contract}, ExecutionChallengeFilterer: ExecutionChallengeFilterer{contract: contract}}, nil
}

// NewExecutionChallengeCaller creates a new read-only instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallengeCaller(address common.Address, caller bind.ContractCaller) (*ExecutionChallengeCaller, error) {
	contract, err := bindExecutionChallenge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeCaller{contract: contract}, nil
}

// NewExecutionChallengeTransactor creates a new write-only instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallengeTransactor(address common.Address, transactor bind.ContractTransactor) (*ExecutionChallengeTransactor, error) {
	contract, err := bindExecutionChallenge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeTransactor{contract: contract}, nil
}

// NewExecutionChallengeFilterer creates a new log filterer instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallengeFilterer(address common.Address, filterer bind.ContractFilterer) (*ExecutionChallengeFilterer, error) {
	contract, err := bindExecutionChallenge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeFilterer{contract: contract}, nil
}

// bindExecutionChallenge binds a generic wrapper to an already deployed contract.
func bindExecutionChallenge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ExecutionChallengeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ExecutionChallenge *ExecutionChallengeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ExecutionChallenge.Contract.ExecutionChallengeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ExecutionChallenge *ExecutionChallengeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ExecutionChallengeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ExecutionChallenge *ExecutionChallengeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ExecutionChallengeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ExecutionChallenge *ExecutionChallengeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ExecutionChallenge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ExecutionChallenge *ExecutionChallengeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ExecutionChallenge *ExecutionChallengeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.contract.Transact(opts, method, params...)
}

// BisectAssertion is a paid mutator transaction binding the contract method 0x6f537a39.
//
// Solidity: function bisectAssertion(bytes32 _beforeInbox, bytes32[] _machineHashes, uint32 inboxInsnIndex, bytes32[] _messageAccs, bytes32[] _logAccs, uint64[] _outCounts, uint64[] _gases, uint64 _totalSteps) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) BisectAssertion(opts *bind.TransactOpts, _beforeInbox [32]byte, _machineHashes [][32]byte, inboxInsnIndex uint32, _messageAccs [][32]byte, _logAccs [][32]byte, _outCounts []uint64, _gases []uint64, _totalSteps uint64) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "bisectAssertion", _beforeInbox, _machineHashes, inboxInsnIndex, _messageAccs, _logAccs, _outCounts, _gases, _totalSteps)
}

// BisectAssertion is a paid mutator transaction binding the contract method 0x6f537a39.
//
// Solidity: function bisectAssertion(bytes32 _beforeInbox, bytes32[] _machineHashes, uint32 inboxInsnIndex, bytes32[] _messageAccs, bytes32[] _logAccs, uint64[] _outCounts, uint64[] _gases, uint64 _totalSteps) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) BisectAssertion(_beforeInbox [32]byte, _machineHashes [][32]byte, inboxInsnIndex uint32, _messageAccs [][32]byte, _logAccs [][32]byte, _outCounts []uint64, _gases []uint64, _totalSteps uint64) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.BisectAssertion(&_ExecutionChallenge.TransactOpts, _beforeInbox, _machineHashes, inboxInsnIndex, _messageAccs, _logAccs, _outCounts, _gases, _totalSteps)
}

// BisectAssertion is a paid mutator transaction binding the contract method 0x6f537a39.
//
// Solidity: function bisectAssertion(bytes32 _beforeInbox, bytes32[] _machineHashes, uint32 inboxInsnIndex, bytes32[] _messageAccs, bytes32[] _logAccs, uint64[] _outCounts, uint64[] _gases, uint64 _totalSteps) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) BisectAssertion(_beforeInbox [32]byte, _machineHashes [][32]byte, inboxInsnIndex uint32, _messageAccs [][32]byte, _logAccs [][32]byte, _outCounts []uint64, _gases []uint64, _totalSteps uint64) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.BisectAssertion(&_ExecutionChallenge.TransactOpts, _beforeInbox, _machineHashes, inboxInsnIndex, _messageAccs, _logAccs, _outCounts, _gases, _totalSteps)
}

// ChooseSegment is a paid mutator transaction binding the contract method 0x79a9ad85.
//
// Solidity: function chooseSegment(uint256 _segmentToChallenge, bytes _proof, bytes32 _bisectionRoot, bytes32 _bisectionHash) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) ChooseSegment(opts *bind.TransactOpts, _segmentToChallenge *big.Int, _proof []byte, _bisectionRoot [32]byte, _bisectionHash [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "chooseSegment", _segmentToChallenge, _proof, _bisectionRoot, _bisectionHash)
}

// ChooseSegment is a paid mutator transaction binding the contract method 0x79a9ad85.
//
// Solidity: function chooseSegment(uint256 _segmentToChallenge, bytes _proof, bytes32 _bisectionRoot, bytes32 _bisectionHash) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) ChooseSegment(_segmentToChallenge *big.Int, _proof []byte, _bisectionRoot [32]byte, _bisectionHash [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ChooseSegment(&_ExecutionChallenge.TransactOpts, _segmentToChallenge, _proof, _bisectionRoot, _bisectionHash)
}

// ChooseSegment is a paid mutator transaction binding the contract method 0x79a9ad85.
//
// Solidity: function chooseSegment(uint256 _segmentToChallenge, bytes _proof, bytes32 _bisectionRoot, bytes32 _bisectionHash) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) ChooseSegment(_segmentToChallenge *big.Int, _proof []byte, _bisectionRoot [32]byte, _bisectionHash [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ChooseSegment(&_ExecutionChallenge.TransactOpts, _segmentToChallenge, _proof, _bisectionRoot, _bisectionHash)
}

// InitializeBisection is a paid mutator transaction binding the contract method 0x02ad1e4e.
//
// Solidity: function initializeBisection(address _rollupAddress, address _asserter, address _challenger, uint256 _challengePeriodTicks, bytes32 _challengeState) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) InitializeBisection(opts *bind.TransactOpts, _rollupAddress common.Address, _asserter common.Address, _challenger common.Address, _challengePeriodTicks *big.Int, _challengeState [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "initializeBisection", _rollupAddress, _asserter, _challenger, _challengePeriodTicks, _challengeState)
}

// InitializeBisection is a paid mutator transaction binding the contract method 0x02ad1e4e.
//
// Solidity: function initializeBisection(address _rollupAddress, address _asserter, address _challenger, uint256 _challengePeriodTicks, bytes32 _challengeState) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) InitializeBisection(_rollupAddress common.Address, _asserter common.Address, _challenger common.Address, _challengePeriodTicks *big.Int, _challengeState [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.InitializeBisection(&_ExecutionChallenge.TransactOpts, _rollupAddress, _asserter, _challenger, _challengePeriodTicks, _challengeState)
}

// InitializeBisection is a paid mutator transaction binding the contract method 0x02ad1e4e.
//
// Solidity: function initializeBisection(address _rollupAddress, address _asserter, address _challenger, uint256 _challengePeriodTicks, bytes32 _challengeState) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) InitializeBisection(_rollupAddress common.Address, _asserter common.Address, _challenger common.Address, _challengePeriodTicks *big.Int, _challengeState [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.InitializeBisection(&_ExecutionChallenge.TransactOpts, _rollupAddress, _asserter, _challenger, _challengePeriodTicks, _challengeState)
}

// OneStepProof is a paid mutator transaction binding the contract method 0x4f524e7a.
//
// Solidity: function oneStepProof(bytes32 _beforeInbox, uint256 _beforeInboxValueSize, bytes32 _firstMessage, bytes32 _firstLog, bytes _proof) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) OneStepProof(opts *bind.TransactOpts, _beforeInbox [32]byte, _beforeInboxValueSize *big.Int, _firstMessage [32]byte, _firstLog [32]byte, _proof []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "oneStepProof", _beforeInbox, _beforeInboxValueSize, _firstMessage, _firstLog, _proof)
}

// OneStepProof is a paid mutator transaction binding the contract method 0x4f524e7a.
//
// Solidity: function oneStepProof(bytes32 _beforeInbox, uint256 _beforeInboxValueSize, bytes32 _firstMessage, bytes32 _firstLog, bytes _proof) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) OneStepProof(_beforeInbox [32]byte, _beforeInboxValueSize *big.Int, _firstMessage [32]byte, _firstLog [32]byte, _proof []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.OneStepProof(&_ExecutionChallenge.TransactOpts, _beforeInbox, _beforeInboxValueSize, _firstMessage, _firstLog, _proof)
}

// OneStepProof is a paid mutator transaction binding the contract method 0x4f524e7a.
//
// Solidity: function oneStepProof(bytes32 _beforeInbox, uint256 _beforeInboxValueSize, bytes32 _firstMessage, bytes32 _firstLog, bytes _proof) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) OneStepProof(_beforeInbox [32]byte, _beforeInboxValueSize *big.Int, _firstMessage [32]byte, _firstLog [32]byte, _proof []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.OneStepProof(&_ExecutionChallenge.TransactOpts, _beforeInbox, _beforeInboxValueSize, _firstMessage, _firstLog, _proof)
}

// TimeoutChallenge is a paid mutator transaction binding the contract method 0xced5c1bf.
//
// Solidity: function timeoutChallenge() returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) TimeoutChallenge(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "timeoutChallenge")
}

// TimeoutChallenge is a paid mutator transaction binding the contract method 0xced5c1bf.
//
// Solidity: function timeoutChallenge() returns()
func (_ExecutionChallenge *ExecutionChallengeSession) TimeoutChallenge() (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.TimeoutChallenge(&_ExecutionChallenge.TransactOpts)
}

// TimeoutChallenge is a paid mutator transaction binding the contract method 0xced5c1bf.
//
// Solidity: function timeoutChallenge() returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) TimeoutChallenge() (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.TimeoutChallenge(&_ExecutionChallenge.TransactOpts)
}

// ExecutionChallengeAsserterTimedOutIterator is returned from FilterAsserterTimedOut and is used to iterate over the raw logs and unpacked data for AsserterTimedOut events raised by the ExecutionChallenge contract.
type ExecutionChallengeAsserterTimedOutIterator struct {
	Event *ExecutionChallengeAsserterTimedOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeAsserterTimedOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeAsserterTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeAsserterTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeAsserterTimedOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeAsserterTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeAsserterTimedOut represents a AsserterTimedOut event raised by the ExecutionChallenge contract.
type ExecutionChallengeAsserterTimedOut struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAsserterTimedOut is a free log retrieval operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterAsserterTimedOut(opts *bind.FilterOpts) (*ExecutionChallengeAsserterTimedOutIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "AsserterTimedOut")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeAsserterTimedOutIterator{contract: _ExecutionChallenge.contract, event: "AsserterTimedOut", logs: logs, sub: sub}, nil
}

// WatchAsserterTimedOut is a free log subscription operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchAsserterTimedOut(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeAsserterTimedOut) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "AsserterTimedOut")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeAsserterTimedOut)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "AsserterTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAsserterTimedOut is a log parse operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseAsserterTimedOut(log types.Log) (*ExecutionChallengeAsserterTimedOut, error) {
	event := new(ExecutionChallengeAsserterTimedOut)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "AsserterTimedOut", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeBisectedAssertionIterator is returned from FilterBisectedAssertion and is used to iterate over the raw logs and unpacked data for BisectedAssertion events raised by the ExecutionChallenge contract.
type ExecutionChallengeBisectedAssertionIterator struct {
	Event *ExecutionChallengeBisectedAssertion // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeBisectedAssertionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeBisectedAssertion)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeBisectedAssertion)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeBisectedAssertionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeBisectedAssertionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeBisectedAssertion represents a BisectedAssertion event raised by the ExecutionChallenge contract.
type ExecutionChallengeBisectedAssertion struct {
	MachineHashes  [][32]byte
	InboxInsnIndex uint32
	MessageAccs    [][32]byte
	LogAccs        [][32]byte
	OutCounts      []uint64
	Gases          []uint64
	TotalSteps     uint64
	DeadlineTicks  *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterBisectedAssertion is a free log retrieval operation binding the contract event 0xfdfc7d7356ac103488916cfffd6e537843dadc44dc71695a7ed504d9f6685287.
//
// Solidity: event BisectedAssertion(bytes32[] machineHashes, uint32 inboxInsnIndex, bytes32[] messageAccs, bytes32[] logAccs, uint64[] outCounts, uint64[] gases, uint64 totalSteps, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterBisectedAssertion(opts *bind.FilterOpts) (*ExecutionChallengeBisectedAssertionIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "BisectedAssertion")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeBisectedAssertionIterator{contract: _ExecutionChallenge.contract, event: "BisectedAssertion", logs: logs, sub: sub}, nil
}

// WatchBisectedAssertion is a free log subscription operation binding the contract event 0xfdfc7d7356ac103488916cfffd6e537843dadc44dc71695a7ed504d9f6685287.
//
// Solidity: event BisectedAssertion(bytes32[] machineHashes, uint32 inboxInsnIndex, bytes32[] messageAccs, bytes32[] logAccs, uint64[] outCounts, uint64[] gases, uint64 totalSteps, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchBisectedAssertion(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeBisectedAssertion) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "BisectedAssertion")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeBisectedAssertion)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "BisectedAssertion", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBisectedAssertion is a log parse operation binding the contract event 0xfdfc7d7356ac103488916cfffd6e537843dadc44dc71695a7ed504d9f6685287.
//
// Solidity: event BisectedAssertion(bytes32[] machineHashes, uint32 inboxInsnIndex, bytes32[] messageAccs, bytes32[] logAccs, uint64[] outCounts, uint64[] gases, uint64 totalSteps, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseBisectedAssertion(log types.Log) (*ExecutionChallengeBisectedAssertion, error) {
	event := new(ExecutionChallengeBisectedAssertion)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "BisectedAssertion", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeChallengerTimedOutIterator is returned from FilterChallengerTimedOut and is used to iterate over the raw logs and unpacked data for ChallengerTimedOut events raised by the ExecutionChallenge contract.
type ExecutionChallengeChallengerTimedOutIterator struct {
	Event *ExecutionChallengeChallengerTimedOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeChallengerTimedOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeChallengerTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeChallengerTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeChallengerTimedOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeChallengerTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeChallengerTimedOut represents a ChallengerTimedOut event raised by the ExecutionChallenge contract.
type ExecutionChallengeChallengerTimedOut struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterChallengerTimedOut is a free log retrieval operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterChallengerTimedOut(opts *bind.FilterOpts) (*ExecutionChallengeChallengerTimedOutIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "ChallengerTimedOut")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeChallengerTimedOutIterator{contract: _ExecutionChallenge.contract, event: "ChallengerTimedOut", logs: logs, sub: sub}, nil
}

// WatchChallengerTimedOut is a free log subscription operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchChallengerTimedOut(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeChallengerTimedOut) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "ChallengerTimedOut")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeChallengerTimedOut)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengerTimedOut is a log parse operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseChallengerTimedOut(log types.Log) (*ExecutionChallengeChallengerTimedOut, error) {
	event := new(ExecutionChallengeChallengerTimedOut)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeContinuedIterator is returned from FilterContinued and is used to iterate over the raw logs and unpacked data for Continued events raised by the ExecutionChallenge contract.
type ExecutionChallengeContinuedIterator struct {
	Event *ExecutionChallengeContinued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeContinuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeContinued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeContinued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeContinuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeContinuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeContinued represents a Continued event raised by the ExecutionChallenge contract.
type ExecutionChallengeContinued struct {
	SegmentIndex  *big.Int
	DeadlineTicks *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterContinued is a free log retrieval operation binding the contract event 0x1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e4.
//
// Solidity: event Continued(uint256 segmentIndex, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterContinued(opts *bind.FilterOpts) (*ExecutionChallengeContinuedIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "Continued")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeContinuedIterator{contract: _ExecutionChallenge.contract, event: "Continued", logs: logs, sub: sub}, nil
}

// WatchContinued is a free log subscription operation binding the contract event 0x1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e4.
//
// Solidity: event Continued(uint256 segmentIndex, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchContinued(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeContinued) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "Continued")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeContinued)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "Continued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContinued is a log parse operation binding the contract event 0x1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e4.
//
// Solidity: event Continued(uint256 segmentIndex, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseContinued(log types.Log) (*ExecutionChallengeContinued, error) {
	event := new(ExecutionChallengeContinued)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "Continued", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeInitiatedChallengeIterator is returned from FilterInitiatedChallenge and is used to iterate over the raw logs and unpacked data for InitiatedChallenge events raised by the ExecutionChallenge contract.
type ExecutionChallengeInitiatedChallengeIterator struct {
	Event *ExecutionChallengeInitiatedChallenge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeInitiatedChallengeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeInitiatedChallenge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeInitiatedChallenge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeInitiatedChallengeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeInitiatedChallengeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeInitiatedChallenge represents a InitiatedChallenge event raised by the ExecutionChallenge contract.
type ExecutionChallengeInitiatedChallenge struct {
	DeadlineTicks *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterInitiatedChallenge is a free log retrieval operation binding the contract event 0xe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc67.
//
// Solidity: event InitiatedChallenge(uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterInitiatedChallenge(opts *bind.FilterOpts) (*ExecutionChallengeInitiatedChallengeIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "InitiatedChallenge")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeInitiatedChallengeIterator{contract: _ExecutionChallenge.contract, event: "InitiatedChallenge", logs: logs, sub: sub}, nil
}

// WatchInitiatedChallenge is a free log subscription operation binding the contract event 0xe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc67.
//
// Solidity: event InitiatedChallenge(uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchInitiatedChallenge(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeInitiatedChallenge) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "InitiatedChallenge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeInitiatedChallenge)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiatedChallenge is a log parse operation binding the contract event 0xe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc67.
//
// Solidity: event InitiatedChallenge(uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseInitiatedChallenge(log types.Log) (*ExecutionChallengeInitiatedChallenge, error) {
	event := new(ExecutionChallengeInitiatedChallenge)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeOneStepProofCompletedIterator is returned from FilterOneStepProofCompleted and is used to iterate over the raw logs and unpacked data for OneStepProofCompleted events raised by the ExecutionChallenge contract.
type ExecutionChallengeOneStepProofCompletedIterator struct {
	Event *ExecutionChallengeOneStepProofCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeOneStepProofCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeOneStepProofCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeOneStepProofCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeOneStepProofCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeOneStepProofCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeOneStepProofCompleted represents a OneStepProofCompleted event raised by the ExecutionChallenge contract.
type ExecutionChallengeOneStepProofCompleted struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOneStepProofCompleted is a free log retrieval operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterOneStepProofCompleted(opts *bind.FilterOpts) (*ExecutionChallengeOneStepProofCompletedIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "OneStepProofCompleted")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeOneStepProofCompletedIterator{contract: _ExecutionChallenge.contract, event: "OneStepProofCompleted", logs: logs, sub: sub}, nil
}

// WatchOneStepProofCompleted is a free log subscription operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchOneStepProofCompleted(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeOneStepProofCompleted) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "OneStepProofCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeOneStepProofCompleted)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOneStepProofCompleted is a log parse operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseOneStepProofCompleted(log types.Log) (*ExecutionChallengeOneStepProofCompleted, error) {
	event := new(ExecutionChallengeOneStepProofCompleted)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// KeccakABI is the input ABI used to generate the binding from.
const KeccakABI = "[]"

// KeccakBin is the compiled bytecode used for deploying new contracts.
var KeccakBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820c07ae5b3a4de3b843e4ad0fe343fe545017077f4b66197a567534adf7bf6c06864736f6c63430005110032"

// DeployKeccak deploys a new Ethereum contract, binding an instance of Keccak to it.
func DeployKeccak(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Keccak, error) {
	parsed, err := abi.JSON(strings.NewReader(KeccakABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(KeccakBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Keccak{KeccakCaller: KeccakCaller{contract: contract}, KeccakTransactor: KeccakTransactor{contract: contract}, KeccakFilterer: KeccakFilterer{contract: contract}}, nil
}

// Keccak is an auto generated Go binding around an Ethereum contract.
type Keccak struct {
	KeccakCaller     // Read-only binding to the contract
	KeccakTransactor // Write-only binding to the contract
	KeccakFilterer   // Log filterer for contract events
}

// KeccakCaller is an auto generated read-only Go binding around an Ethereum contract.
type KeccakCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeccakTransactor is an auto generated write-only Go binding around an Ethereum contract.
type KeccakTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeccakFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type KeccakFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeccakSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type KeccakSession struct {
	Contract     *Keccak           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KeccakCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type KeccakCallerSession struct {
	Contract *KeccakCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// KeccakTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type KeccakTransactorSession struct {
	Contract     *KeccakTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KeccakRaw is an auto generated low-level Go binding around an Ethereum contract.
type KeccakRaw struct {
	Contract *Keccak // Generic contract binding to access the raw methods on
}

// KeccakCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type KeccakCallerRaw struct {
	Contract *KeccakCaller // Generic read-only contract binding to access the raw methods on
}

// KeccakTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type KeccakTransactorRaw struct {
	Contract *KeccakTransactor // Generic write-only contract binding to access the raw methods on
}

// NewKeccak creates a new instance of Keccak, bound to a specific deployed contract.
func NewKeccak(address common.Address, backend bind.ContractBackend) (*Keccak, error) {
	contract, err := bindKeccak(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Keccak{KeccakCaller: KeccakCaller{contract: contract}, KeccakTransactor: KeccakTransactor{contract: contract}, KeccakFilterer: KeccakFilterer{contract: contract}}, nil
}

// NewKeccakCaller creates a new read-only instance of Keccak, bound to a specific deployed contract.
func NewKeccakCaller(address common.Address, caller bind.ContractCaller) (*KeccakCaller, error) {
	contract, err := bindKeccak(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &KeccakCaller{contract: contract}, nil
}

// NewKeccakTransactor creates a new write-only instance of Keccak, bound to a specific deployed contract.
func NewKeccakTransactor(address common.Address, transactor bind.ContractTransactor) (*KeccakTransactor, error) {
	contract, err := bindKeccak(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &KeccakTransactor{contract: contract}, nil
}

// NewKeccakFilterer creates a new log filterer instance of Keccak, bound to a specific deployed contract.
func NewKeccakFilterer(address common.Address, filterer bind.ContractFilterer) (*KeccakFilterer, error) {
	contract, err := bindKeccak(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &KeccakFilterer{contract: contract}, nil
}

// bindKeccak binds a generic wrapper to an already deployed contract.
func bindKeccak(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(KeccakABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Keccak *KeccakRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Keccak.Contract.KeccakCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Keccak *KeccakRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Keccak.Contract.KeccakTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Keccak *KeccakRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Keccak.Contract.KeccakTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Keccak *KeccakCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Keccak.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Keccak *KeccakTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Keccak.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Keccak *KeccakTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Keccak.Contract.contract.Transact(opts, method, params...)
}

// OneStepProofABI is the input ABI used to generate the binding from.
const OneStepProofABI = "[]"

// OneStepProofBin is the compiled bytecode used for deploying new contracts.
var OneStepProofBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820cf78b8a4b585c89d4fb6369855dfc43a748ff681b0c3cbd70ea2325ef933d21464736f6c63430005110032"

// DeployOneStepProof deploys a new Ethereum contract, binding an instance of OneStepProof to it.
func DeployOneStepProof(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// OneStepProof is an auto generated Go binding around an Ethereum contract.
type OneStepProof struct {
	OneStepProofCaller     // Read-only binding to the contract
	OneStepProofTransactor // Write-only binding to the contract
	OneStepProofFilterer   // Log filterer for contract events
}

// OneStepProofCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofSession struct {
	Contract     *OneStepProof     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProofCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofCallerSession struct {
	Contract *OneStepProofCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// OneStepProofTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTransactorSession struct {
	Contract     *OneStepProofTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// OneStepProofRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofRaw struct {
	Contract *OneStepProof // Generic contract binding to access the raw methods on
}

// OneStepProofCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofCallerRaw struct {
	Contract *OneStepProofCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTransactorRaw struct {
	Contract *OneStepProofTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof creates a new instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProof(address common.Address, backend bind.ContractBackend) (*OneStepProof, error) {
	contract, err := bindOneStepProof(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// NewOneStepProofCaller creates a new read-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofCaller, error) {
	contract, err := bindOneStepProof(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofCaller{contract: contract}, nil
}

// NewOneStepProofTransactor creates a new write-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTransactor, error) {
	contract, err := bindOneStepProof(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTransactor{contract: contract}, nil
}

// NewOneStepProofFilterer creates a new log filterer instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofFilterer, error) {
	contract, err := bindOneStepProof(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofFilterer{contract: contract}, nil
}

// bindOneStepProof binds a generic wrapper to an already deployed contract.
func bindOneStepProof(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.OneStepProofCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transact(opts, method, params...)
}
