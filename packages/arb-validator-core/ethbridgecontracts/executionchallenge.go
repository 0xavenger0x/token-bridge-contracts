// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgecontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ExecutionChallengeABI is the input ABI used to generate the binding from.
const ExecutionChallengeABI = "[{\"anonymous\":false,\"inputs\":[],\"name\":\"AsserterTimedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"machineHashes\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"inboxInsnIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"messageAccs\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"logAccs\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"outCounts\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"gases\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"totalSteps\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadlineTicks\",\"type\":\"uint256\"}],\"name\":\"BisectedAssertion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ChallengerTimedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"segmentIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadlineTicks\",\"type\":\"uint256\"}],\"name\":\"Continued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadlineTicks\",\"type\":\"uint256\"}],\"name\":\"InitiatedChallenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OneStepProofCompleted\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_beforeInbox\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_machineHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint32\",\"name\":\"inboxInsnIndex\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_messageAccs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_logAccs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_outCounts\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_gases\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64\",\"name\":\"_totalSteps\",\"type\":\"uint64\"}],\"name\":\"bisectAssertion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segmentToChallenge\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_bisectionRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_bisectionHash\",\"type\":\"bytes32\"}],\"name\":\"chooseSegment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rollupAddress\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_asserter\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_challenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_challengePeriodTicks\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_challengeState\",\"type\":\"bytes32\"}],\"name\":\"initializeBisection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_inboxHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_firstMessage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_firstLog\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"oneStepProof\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"timeoutChallenge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ExecutionChallengeFuncSigs maps the 4-byte function signature to its string representation.
var ExecutionChallengeFuncSigs = map[string]string{
	"6f537a39": "bisectAssertion(bytes32,bytes32[],uint32,bytes32[],bytes32[],uint64[],uint64[],uint64)",
	"79a9ad85": "chooseSegment(uint256,bytes,bytes32,bytes32)",
	"02ad1e4e": "initializeBisection(address,address,address,uint256,bytes32)",
	"082379bb": "oneStepProof(bytes32,bytes32,bytes32,bytes)",
	"ced5c1bf": "timeoutChallenge()",
}

// ExecutionChallengeBin is the compiled bytecode used for deploying new contracts.
var ExecutionChallengeBin = "0x608060405234801561001057600080fd5b50615ee480620000216000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806302ad1e4e1461005c578063082379bb146100a05780636f537a391461015757806379a9ad8514610421578063ced5c1bf146104d1575b600080fd5b61009e600480360360a081101561007257600080fd5b506001600160a01b038135811691602081013582169160408201351690606081013590608001356104d9565b005b61009e600480360360808110156100b657600080fd5b81359160208101359160408201359190810190608081016060820135600160201b8111156100e357600080fd5b8201836020820111156100f557600080fd5b803590602001918460018302840111600160201b8311171561011657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506104ee945050505050565b61009e600480360361010081101561016e57600080fd5b81359190810190604081016020820135600160201b81111561018f57600080fd5b8201836020820111156101a157600080fd5b803590602001918460208302840111600160201b831117156101c257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929563ffffffff853516959094909350604081019250602001359050600160201b81111561021f57600080fd5b82018360208201111561023157600080fd5b803590602001918460208302840111600160201b8311171561025257600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156102a157600080fd5b8201836020820111156102b357600080fd5b803590602001918460208302840111600160201b831117156102d457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561032357600080fd5b82018360208201111561033557600080fd5b803590602001918460208302840111600160201b8311171561035657600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156103a557600080fd5b8201836020820111156103b757600080fd5b803590602001918460208302840111600160201b831117156103d857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160401b031691506107e29050565b61009e6004803603608081101561043757600080fd5b81359190810190604081016020820135600160201b81111561045857600080fd5b82018360208201111561046a57600080fd5b803590602001918460018302840111600160201b8311171561048b57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050823593505050602001356109c8565b61009e610c89565b6104e585858585610d69565b60065550505050565b60055460ff1660028111156104ff57fe5b600114604051806040016040528060098152602001684249535f535441544560b81b815250906105ad5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561057257818101518382015260200161055a565b50505050905090810190601f16801561059f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506003546105ba43610e84565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b8152509061062d5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057257818101518382015260200161055a565b5060015460408051808201909152600a8152692124a9afa9a2a72222a960b11b6020820152906001600160a01b031633146106a95760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057257818101518382015260200161055a565b506106b2615c2d565b6106be85858585610e8f565b90506106c98161128f565b6106d1615cac565b60405180610180016040528060016001600160401b031681526020016106fa8460000151611596565b81526020018781526020016107128460200151611596565b81526020018360600151151581526020018360c001516001600160401b03168152602001868152602001836080015181526020018360800151871461075857600161075b565b60005b60ff166001600160401b031681526020018581526020018360a0015181526020018360a00151861461078e576001610791565b60005b60ff16905290506107a96107a48261165a565b61172a565b6040517f117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f590600090a16107da6117a0565b505050505050565b60055460ff1660028111156107f357fe5b600114604051806040016040528060098152602001684249535f535441544560b81b815250906108645760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057257818101518382015260200161055a565b5060035461087143610e84565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b815250906108e45760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057257818101518382015260200161055a565b5060015460408051808201909152600a8152692124a9afa9a2a72222a960b11b6020820152906001600160a01b031633146109605760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057257818101518382015260200161055a565b50610969615d10565b6040518061010001604052808a81526020018981526020018863ffffffff168152602001878152602001868152602001858152602001848152602001836001600160401b031681525090506109bd81611814565b505050505050505050565b60055460ff1660028111156109d957fe5b60021460405180604001604052806009815260200168434f4e5f535441544560b81b81525090610a4a5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057257818101518382015260200161055a565b50600354610a5743610e84565b11156040518060400160405280600c81526020016b434f4e5f444541444c494e4560a01b81525090610aca5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057257818101518382015260200161055a565b5060025460408051808201909152600a81526921a7a72fa9a2a72222a960b11b6020820152906001600160a01b03163314610b465760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057257818101518382015260200161055a565b5060065482146040518060400160405280600881526020016721a7a72fa82922ab60c11b81525090610bb95760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057257818101518382015260200161055a565b50610bc98383838760010161191d565b6040518060400160405280600981526020016821a7a72fa82927a7a360b91b81525090610c375760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057257818101518382015260200161055a565b506006819055610c45611a1e565b60035460408051868152602081019290925280517f1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e49281900390910190a150505050565b600354610c9543610e84565b11610ce7576040805162461bcd60e51b815260206004820152601760248201527f446561646c696e65206861736e27742065787069726564000000000000000000604482015290519081900360640190fd5b600160055460ff166002811115610cfa57fe5b1415610d36576040517f2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f090600090a1610d31611a3a565b610d67565b6040517f4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a90600090a1610d676117a0565b565b600060055460ff166002811115610d7c57fe5b146040518060400160405280600f81526020016e4348414c5f494e49545f535441544560881b81525090610df15760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057257818101518382015260200161055a565b50600080546001600160a01b038681166001600160a01b03199283161790925560018054868416908316178155600280549386169390921692909217905560048290556005805460ff19169091179055610e49611a92565b60035460408051918252517fe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc679181900360200190a150505050565b6103e881025b919050565b610e97615c2d565b600082600081518110610ea657fe5b602001015160f81c60f81b60f81c9050600083600181518110610ec557fe5b602001015160f81c60f81b60f81c905060006002905060608360040160ff16604051908082528060200260200182016040528015610f1d57816020015b610f0a615d67565b815260200190600190039081610f025790505b50905060608360040160ff16604051908082528060200260200182016040528015610f6257816020015b610f4f615d67565b815260200190600190039081610f475790505b50905060005b8560ff16811015610fa057610f7d8885611aa4565b8451859084908110610f8b57fe5b60209081029190910101529350600101610f68565b5060005b8460ff16811015610fdc57610fb98885611aa4565b8351849084908110610fc757fe5b60209081029190910101529350600101610fa4565b50610fe5615d9b565b610fef8885611c36565b8092508195505050600088858151811061100557fe5b602001015160f81c60f81b60f81c9050600089866001018151811061102657fe5b01602001516002969096019560f81c905061103f615c2d565b604051806101a0016040528085815260200161105a86611cd6565b81526020018f81526020016000151581526020018e81526020018d815260200160006001600160401b0316815260200160405180604001604052808c60ff16815260200189815250815260200160405180604001604052808b60ff1681526020018881525081526020018460ff16600114151581526020018360ff1681526020018c81526020018881525090508260ff16600014806110fc57508260ff166001145b61114d576040805162461bcd60e51b815260206004820152601c60248201527f50726f6f662068616420626164206f7065726174696f6e207479706500000000604482015290519081900360640190fd5b611155615d67565b60ff84166111725781515161116b908490611d3f565b90506111ec565b60008751116111bd576040805162461bcd60e51b81526020600482015260126024820152716e6f20696d6d6564696174652076616c756560701b604482015290519081900360640190fd5b6111e9838360000151600001518960018e0360ff16815181106111dc57fe5b6020026020010151611da1565b90505b6111f581611e25565b82515260005b848b0360ff1681101561123a5761123288828151811061121757fe5b60200260200101518460000151611f4590919063ffffffff16565b6001016111fb565b5060005b8960ff1681101561127b5761127387828151811061125857fe5b60200260200101518460000151611f5f90919063ffffffff16565b60010161123e565b50909e9d5050505050505050505050505050565b600080600061397c6112a885610140015160ff16611f79565b6001600160401b03821660c08a0181905260208a015160a0908101805183900390528a510151949850929650909450925011156112ff57602085015160001960a0909101526112f685612734565b50505050611593565b60e0850151518411156113885761131c61131761279d565b611e25565b61132d866020015160200151611e25565b1461137f576040805162461bcd60e51b815260206004820152601d60248201527f737461636b206974656d206d697373696e672066726f6d2070726f6f66000000604482015290519081900360640190fd5b6112f685612734565b61010085015151831115611404576113a161131761279d565b6113b2866020015160400151611e25565b1461137f576040805162461bcd60e51b815260206004820181905260248201527f617578737461636b206974656d206d697373696e672066726f6d2070726f6f66604482015290519081900360640190fd5b60008411806114165750846101200151155b8015611426575060e08501515184145b8061144d5750846101200151801561143c575083155b801561144d575060e0850151516001145b611495576040805162461bcd60e51b8152602060048201526014602482015273746f6f206d616e7920737461636b206974656d7360601b604482015290519081900360640190fd5b6101008501515183146114ef576040805162461bcd60e51b815260206004820152601760248201527f746f6f206d616e7920617578737461636b206974656d73000000000000000000604482015290519081900360640190fd5b6114fc858263ffffffff16565b60005b60e0860151518110156115465761153e8660e0015160200151828151811061152357fe5b60200260200101518760200151611f4590919063ffffffff16565b6001016114ff565b5060005b610100860151518110156107da5761158b86610100015160200151828151811061157057fe5b60200260200101518760200151611f5f90919063ffffffff16565b60010161154a565b50565b600060028260e0015114156115ad57506000610e8a565b60018260e0015114156115c257506001610e8a565b815160208301516115d290611e25565b6115df8460400151611e25565b6115ec8560600151611e25565b6115f98660800151611e25565b8660a001518760c0015160405160200180888152602001878152602001868152602001858152602001848152602001838152602001828152602001975050505050505050604051602081830303815290604052805190602001209050610e8a565b80516020808301516040808501516060860151608087015160a088015160c0808a015160e08b01516101008c01516101208d01516101408e0151610160909e01518a519d861b6001600160c01b03199081168f8f015260288f019c909c5260488e019990995260688d019790975294151560f81b60888c015292821b881660898b015260918a015260b189019190915290811b851660d188015260d987019190915260f986019690965290941b166101198301528251808303610101018152610121909201909252805191012090565b6006548114604051806040016040528060088152602001672124a9afa82922ab60c11b8152509061179c5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057257818101518382015260200161055a565b5050565b600080546001546002546040805163396f51cf60e01b81526001600160a01b039384166004820152918316602483015251919092169263396f51cf926044808201939182900301818387803b1580156117f857600080fd5b505af115801561180c573d6000803e3d6000fd5b503392505050ff5b60208101515160001901611827826127e4565b606081604051908082528060200260200182016040528015611853578160200160208202803883390190505b509050611879836118718560e001516001600160401b031685612b86565b846000612ba4565b8160008151811061188657fe5b602090810291909101015260015b828110156118fd5780846040015163ffffffff1614156118bc576118b961131761279d565b84525b6118de846118d78660e001516001600160401b031686612d19565b8584612ba4565b8282815181106118ea57fe5b6020908102919091010152600101611894565b5061190781612d2c565b61190f612d3b565b61191883612d4f565b505050565b600080838160205b88518111611a10578089015193506020818a51036020018161194357fe5b0491505b60008211801561195a5750600286066001145b801561196857508160020a86115b1561197b57600286046001019550611947565b600286066119c65783836040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209250600286816119be57fe5b049550611a08565b8284604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120925060028681611a0157fe5b0460010195505b602001611925565b505090941495945050505050565b600580546001919060ff191682805b0217905550610d67611a92565b600080546002546001546040805163396f51cf60e01b81526001600160a01b039384166004820152918316602483015251919092169263396f51cf926044808201939182900301818387803b1580156117f857600080fd5b600454611a9e43610e84565b01600355565b6000611aae615d67565b83518310611af4576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b600080611b018686612f33565b91509150611b0d612f5a565b60ff168160ff161415611b41576000611b268784612f5f565b909350905082611b3582612fd3565b94509450505050611c2f565b611b49613085565b60ff168160ff161415611b6b57611b60868361308a565b935093505050611c2f565b611b7361312c565b60ff168160ff161415611b8a57611b608683613131565b611b926131c5565b60ff168160ff1610158015611bb35750611baa6131ca565b60ff168160ff16105b15611bef576000611bc26131c5565b820390506060611bd38289866131cf565b909450905083611be282613268565b9550955050505050611c2f565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b6000611c40615d9b565b611c48615d9b565b600060e0820181905280611c5c8787612f5f565b9096509150611c6b8787613131565b60208501529550611c7c8787613131565b60408501529550611c8d8787611aa4565b60608501529550611c9e8787611aa4565b60808501529550611caf8787612f5f565b60a08501529550611cc08787612f5f565b92845260c0840192909252509590945092505050565b611cde615d9b565b60405180610100016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e001518152509050919050565b611d47615d67565b6040805160608101825260ff851681526020808201859052825160008082529181018452611d9a93830191611d92565b611d7f615d67565b815260200190600190039081611d775790505b50905261337a565b9392505050565b611da9615d67565b604080516001808252818301909252606091816020015b611dc8615d67565b815260200190600190039081611dc05790505090508281600081518110611deb57fe5b6020026020010181905250611e1c60405180606001604052808760ff1681526020018681526020018381525061337a565b95945050505050565b6000611e2f612f5a565b60ff16826060015160ff161415611e52578151611e4b906133e1565b9050610e8a565b611e5a613085565b60ff16826060015160ff161415611e7857611e4b8260200151613405565b611e8061312c565b60ff16826060015160ff161415611ea25781516080830151611e4b9190613502565b611eaa6131c5565b60ff16826060015160ff161415611ee357611ec3615d67565b611ed08360400151613553565b9050611edb81611e25565b915050610e8a565b611eeb6136b5565b60ff16826060015160ff161415611f0457508051610e8a565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b611f538260200151826136ba565b82602001819052505050565b611f6d8260400151826136ba565b82604001819052505050565b6000808061397c6001851415611f9e575060029250600091506003905061373861272d565b6002851415611fbc575060029250600091506003905061373861272d565b6003851415611fda575060029250600091506003905061373861272d565b6004851415611ff8575060029250600091506004905061399b61272d565b6005851415612016575060029250600091506007905061399b61272d565b6006851415612034575060029250600091506004905061399b61272d565b6007851415612052575060029250600091506007905061399b61272d565b60088514156120705750600392506000915060049050613a6b61272d565b600985141561208e5750600392506000915060049050613a6b61272d565b600a8514156120ac575060029250600091506019905061373861272d565b600b8514156120ca575060029250600091506007905061373861272d565b60108514156120e75750600292506000915082905061373861272d565b60118514156121045750600292506000915082905061373861272d565b60128514156121215750600292506000915082905061373861272d565b601385141561213e5750600292506000915082905061373861272d565b601485141561215b57506002925060009150829050613b6061272d565b601585141561217857506001925060009150829050613bbd61272d565b60168514156121955750600292506000915082905061373861272d565b60178514156121b25750600292506000915082905061373861272d565b60188514156121cf5750600292506000915082905061373861272d565b60198514156121ec57506001925060009150829050613c2b61272d565b601a85141561220a575060029250600091506004905061373861272d565b601b851415612228575060029250600091506004905061373861272d565b601c851415612246575060029250600091506004905061373861272d565b601d851415612264575060029250600091506004905061373861272d565b60208514156122825750600192506000915060079050613c6e61272d565b60218514156122a05750600192506000915060039050613c9961272d565b60228514156122be575060029250600091506008905061373861272d565b60238514156122dd575060019250600091506102589050613cbc61272d565b60308514156122fa57506001925060009150829050613e9d61272d565b603185141561231757506000925082915060019050613eaa61272d565b603285141561233457506000925082915060019050613ec761272d565b60338514156123525750600192506000915060029050613ee461272d565b60348514156123705750600192506000915060049050613efd61272d565b603585141561238e5750600292506000915060049050613f3d61272d565b60368514156123ab57506000925082915060029050613faf61272d565b60378514156123c857506000925082915060019050613fec61272d565b60388514156123e55750600192506000915082905061400f61272d565b60398514156124025750600092506001915081905061403161272d565b603a85141561241f5750600092508291506002905061404261272d565b603b85141561243c5750600092508291506001905061159361272d565b603c8514156124595750600092508291506001905061407061272d565b603d8514156124765750600192506000915082905061408661272d565b6040851415612493575060019250600091508290506140c961272d565b60418514156124b1575060029250600091506001905061410b61272d565b60428514156124cf575060039250600091506001905061417961272d565b60438514156124ed575060029250600091506001905061421361272d565b604485141561250b575060039250600091506001905061425761272d565b6050851415612528575060029250600091508290506142c761272d565b6051851415612546575060039250600091506028905061436a61272d565b6052851415612564575060019250600091506002905061441e61272d565b60538514156125815750600192508291506003905061446261272d565b605485141561259f57506002925060019150602990506144ea61272d565b60608514156125bc5750600092508291506064905061159361272d565b60618514156125da57506001925060009150606490506145b161272d565b60708514156125f857506001925060009150606490506145f761272d565b60728514156126155750600092508291506028905061467661272d565b60738514156126325750600092508291506005905061478061272d565b607485141561264f575060009250829150600a905061478961272d565b607585141561266c5750600192506000915081905061479661272d565b6076851415612689575060009250829150600190506147d061272d565b60778514156126a6575060009250829150601990506147e461272d565b60788514156126c4575060029250600091506019905061482e61272d565b60798514156126e2575060039250600091506019905061489e61272d565b607b8514156126ff575060009250829150600a905061492661272d565b608085141561271e57506004925060009150614e20905061496861272d565b50600092508291508190506147805b9193509193565b60408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051908201209082015160c0015114156127905761278b8160200151614af3565b611593565b6020015160c08101519052565b6127a5615d67565b604080516000808252602082019092526127df916127d9565b6127c6615d67565b8152602001906001900390816127be5790505b50613268565b905090565b6000600182602001515103905081606001515181600101146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b8152509061286b5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057257818101518382015260200161055a565b5081608001515181600101146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b815250906128e65760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057257818101518382015260200161055a565b508160c001515181146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b8152509061295e5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057257818101518382015260200161055a565b508160a001515181600202146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b815250906129d95760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561057257818101518382015260200161055a565b5060008080805b84811015612a4b578560c0015181815181106129f857fe5b6020026020010151840193508560a001518181518110612a1457fe5b6020026020010151830192508560a0015181860181518110612a3257fe5b60200260200101518201915080806001019150506129e0565b50612b7f6107a46040518061018001604052808860e001516001600160401b031681526020018860200151600081518110612a8257fe5b602002602001015181526020018860000151815260200188602001518881518110612aa957fe5b602002602001015181526020016000896040015163ffffffff1611612acf576000612ad2565b60015b15158152602001866001600160401b031681526020018860600151600081518110612af957fe5b6020026020010151815260200188606001518881518110612b1657fe5b60200260200101518152602001856001600160401b031681526020018860800151600081518110612b4357fe5b6020026020010151815260200188608001518881518110612b6057fe5b60200260200101518152602001846001600160401b031681525061165a565b5050505050565b6000818381612b9157fe5b06828481612b9b57fe5b04019392505050565b6000611e1c6040518061018001604052808663ffffffff166001600160401b0316815260200187602001518581518110612bda57fe5b602002602001015181526020018760000151815260200187602001518560010181518110612c0457fe5b6020026020010151815260200184600101886040015163ffffffff1614151581526020018760c001518581518110612c3857fe5b60200260200101516001600160401b0316815260200187606001518581518110612c5e57fe5b6020026020010151815260200187606001518560010181518110612c7e57fe5b602002602001015181526020018760a001518581518110612c9b57fe5b60200260200101516001600160401b0316815260200187608001518581518110612cc157fe5b6020026020010151815260200187608001518560010181518110612ce157fe5b602002602001015181526020018760a0015185870181518110612d0057fe5b60200260200101516001600160401b031681525061165a565b6000818381612d2457fe5b049392505050565b612d3581614afd565b60065550565b600580546002919060ff1916600183611a2d565b7ffdfc7d7356ac103488916cfffd6e537843dadc44dc71695a7ed504d9f668528781602001518260400151836060015184608001518560a001518660c001518760e0015160035460405180806020018963ffffffff1663ffffffff16815260200180602001806020018060200180602001886001600160401b03166001600160401b0316815260200187815260200186810386528e818151815260200191508051906020019060200280838360005b83811015612e16578181015183820152602001612dfe565b5050505090500186810385528c818151815260200191508051906020019060200280838360005b83811015612e55578181015183820152602001612e3d565b5050505090500186810384528b818151815260200191508051906020019060200280838360005b83811015612e94578181015183820152602001612e7c565b5050505090500186810383528a818151815260200191508051906020019060200280838360005b83811015612ed3578181015183820152602001612ebb565b50505050905001868103825289818151815260200191508051906020019060200280838360005b83811015612f12578181015183820152602001612efa565b505050509050019d505050505050505050505050505060405180910390a150565b60008082600101848481518110612f4657fe5b016020015190925060f81c90509250929050565b600090565b60008082845110158015612f77575060208385510310155b612fb4576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b60208301612fc8858563ffffffff614c3b16565b915091509250929050565b612fdb615d67565b6040805160a0810182528381528151606081018352600080825260208281018290528451828152808201865293949085019390830191613031565b61301e615d67565b8152602001906001900390816130165790505b5090528152604080516000808252602082810190935291909201919061306d565b61305a615d67565b8152602001906001900390816130525790505b50815260006020820152600160409091015292915050565b600190565b6000613094615d67565b826000806130a0615d67565b60006130ac8986612f33565b90955093506130bb8986612f33565b9095509250600160ff851614156130dc576130d68986611aa4565b90955091505b6130e68986614c57565b9095509050600160ff851614156131115784613103848385611da1565b965096505050505050611c2f565b8461311c8483611d3f565b9650965050505050509250929050565b600290565b600061313b615d67565b82845110158015613150575060408385510310155b61318c576040805162461bcd60e51b81526020600482015260086024820152671d1bc81cda1bdc9d60c21b604482015290519081900360640190fd5b6000806131998686614c57565b90945091506131a88685612f5f565b9094509050836131b88383614c6e565b9350935050509250929050565b600390565b600c90565b60006060600083905060608660ff1660405190808252806020026020018201604052801561321757816020015b613204615d67565b8152602001906001900390816131fc5790505b50905060005b8760ff168160ff16101561325b576132358784611aa4565b8351849060ff851690811061324657fe5b6020908102919091010152925060010161321d565b5090969095509350505050565b613270615d67565b61327a8251614d1f565b6132cb576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b8351811015613302578381815181106132e557fe5b6020026020010151608001518201915080806001019150506132d0565b506040805160a081018252600080825282516060810184528181526020818101839052845183815280820186529394908501939192908301919061335c565b613349615d67565b8152602001906001900390816133415790505b50905281526020810194909452600360408501526060909301525090565b613382615d67565b6040805160a08101825260008082526020808301869052835182815290810184529192830191906133c9565b6133b6615d67565b8152602001906001900390816133ae5790505b50815260016020820181905260409091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b600060028260400151511061341657fe5b60408201515161347b57613428613085565b8251602080850151604080516001600160f81b031960f896871b8116828601529490951b909316602185015260228085019190915282518085039091018152604290930190915281519101209050610e8a565b613483613085565b82600001516134a9846040015160008151811061349c57fe5b6020026020010151611e25565b8460200151604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b600061350c6131c5565b8383604051602001808460ff1660ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b61355b615d67565b6008825111156135a9576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b606082516040519080825280602002602001820160405280156135d6578160200160208202803883390190505b508051909150600160005b82811015613639576135f886828151811061349c57fe5b84828151811061360457fe5b60200260200101818152505085818151811061361c57fe5b6020026020010151608001518201915080806001019150506135e1565b506000835184604051602001808360ff1660ff1660f81b8152600101828051906020019060200280838360005b8381101561367e578181015183820152602001613666565b50505050905001925050506040516020818303038152906040528051906020012090506136ab8183614c6e565b9695505050505050565b606490565b6136c2615d67565b6040805160028082526060828101909352816020015b6136e0615d67565b8152602001906001900390816136d8579050509050828160008151811061370357fe5b6020026020010181905250838160018151811061371c57fe5b602002602001018190525061373081613553565b949350505050565b613740615d67565b61374d8260e00151614d26565b9050613757615d67565b6137648360e00151614d26565b905061376f82614d68565b1580613781575061377f81614d68565b155b156137965761378f83614d73565b5050611593565b8151815161014085015160009060ff16600114156137b7575081810161397e565b61014086015160ff16600214156137d1575081810261397e565b61014086015160ff16600314156137eb575080820361397e565b61014086015160ff16600a1415613805575080820a61397e565b61014086015160ff16600b141561381f575080820b61397e565b61014086015160ff1660101415613839575080821061397e565b61014086015160ff1660111415613853575080821161397e565b61014086015160ff166012141561386d575080821261397e565b61014086015160ff1660131415613887575080821361397e565b61014086015160ff16601614156138a1575081811661397e565b61014086015160ff16601714156138bb575081811761397e565b61014086015160ff16601814156138d5575081811861397e565b61014086015160ff16601a14156138ef575080821a61397e565b61014086015160ff16601b1415613909575080821b61397e565b61014086015160ff16601c1415613923575080821c61397e565b61014086015160ff16601d141561393d575080821d61397e565b61014086015160ff166022141561397c57506040805160208082018590528183018490528251808303840181526060909201909252805191012061397e565bfe5b6107da61398a82612fd3565b60e08801519063ffffffff614d9116565b6139a3615d67565b6139b08260e00151614d26565b90506139ba615d67565b6139c78360e00151614d26565b90506139d282614d68565b15806139e457506139e281614d68565b155b806139ee57508051155b156139fc5761378f83614d73565b8151815161014085015160009060ff1660041415613a1d575080820461397e565b61014086015160ff1660051415613a37575080820561397e565b61014086015160ff1660061415613a51575080820661397e565b61014086015160ff166007141561397c575080820761397e565b613a73615d67565b613a808260e00151614d26565b9050613a8a615d67565b613a978360e00151614d26565b9050613aa1615d67565b613aae8460e00151614d26565b9050613ab983614d68565b1580613acb5750613ac982614d68565b155b80613adc5750613ada81614d68565b155b80613ae657508051155b15613afc57613af484614d73565b505050611593565b82518251825161014087015160009060ff1660081415613b2157818385089050613b39565b61014088015160ff166009141561397c578183850990505b613b56613b4582612fd3565b60e08a01519063ffffffff614d9116565b5050505050505050565b613b68615d67565b613b758260e00151614d26565b9050613b7f615d67565b613b8c8360e00151614d26565b9050611918613bac613b9d83611e25565b613ba685611e25565b14614dbb565b60e08501519063ffffffff614d9116565b613bc5615d67565b613bd28260e00151614d26565b9050613bdd81614d68565b613c0457613bff613bee6000612fd3565b60e08401519063ffffffff614d9116565b61179c565b80518015613c25613c1482612fd3565b60e08601519063ffffffff614d9116565b50505050565b613c33615d67565b613c408260e00151614d26565b9050613c4b81614d68565b613c5e57613c5882614d73565b50611593565b80518019613c25613c1482612fd3565b613c76615d67565b613c838260e00151614d26565b905061179c613bee613c9483611e25565b612fd3565b613ca1615d67565b613cae8260e00151614d26565b905061179c613bee82614ddd565b613cc4615d67565b613cd18260e00151614d26565b9050613cdc81614e42565b1580613cee5750806040015151600714155b15613cfc57613c5882614d73565b604081015160005b6007811015613d3e57613d29828281518110613d1c57fe5b6020026020010151614d68565b613d3657613af484614d73565b600101613d04565b50613d47615df9565b60005b6019811015613dab5760406003821602836004830481518110613d6957fe5b602002602001015160000151901c6001600160401b03168260058381613d8b57fe5b04600584066005020160198110613d9e57fe5b6020020152600101613d4a565b50613db581614e4f565b604080516007808252610100820190925291925060609190816020015b613dda615d67565b815260200190600190039081613dd257905050905060005b6007811015613e2457613e056000612fd3565b828281518110613e1157fe5b6020908102919091010152600101613df2565b5060005b6019811015613e7f57604060038216028360058304600584066005020160198110613e4f57fe5b6020020151901b826004830481518110613e6557fe5b602090810291909101015180519091179052600101613e28565b50612b7f613e8c82613268565b60e08701519063ffffffff614d9116565b61179c8160e00151614d26565b60208101516080015160e08201516115939163ffffffff614d9116565b60208101516060015160e08201516115939163ffffffff614d9116565b613ef18160e00151614d26565b60209091015160600152565b613f05615d67565b613f128260e00151614d26565b9050613f1d81615a40565b613f2a57613c5882614d73565b613f3381611e25565b6020830151525050565b613f45615d67565b613f528260e00151614d26565b9050613f5c615d67565b613f698360e00151614d26565b9050613f7482615a40565b1580613f865750613f8481614d68565b155b15613f945761378f83614d73565b80511561191857613fa482611e25565b602084015152505050565b60e081015151600090158015613fde5750613fcb61131761279d565b613fdc836020015160200151611e25565b145b905061179c613bee82614dbb565b80515161159390613ffe906001615a4d565b60e08301519063ffffffff614d9116565b61159361401f8260e00151614d26565b6101008301519063ffffffff614d9116565b611593613ffe826101000151614d26565b61010081015151600090158015613fde575061405f61131761279d565b613fdc836020015160400151611e25565b611593613ffe826020015160c001516001615a4d565b61408e615d67565b61409b8260e00151614d26565b90506140a681615a40565b6140b357613c5882614d73565b6140bc81611e25565b602083015160c001525050565b6140d1615d67565b6140de8260e00151614d26565b60e08301519091506140f6908263ffffffff614d9116565b60e082015161179c908263ffffffff614d9116565b614113615d67565b6141208260e00151614d26565b905061412a615d67565b6141378360e00151614d26565b60e084015190915061414f908263ffffffff614d9116565b60e0830151614164908363ffffffff614d9116565b60e0830151611918908263ffffffff614d9116565b614181615d67565b61418e8260e00151614d26565b9050614198615d67565b6141a58360e00151614d26565b90506141af615d67565b6141bc8460e00151614d26565b60e08501519091506141d4908263ffffffff614d9116565b60e08401516141e9908363ffffffff614d9116565b60e08401516141fe908463ffffffff614d9116565b60e0840151613c25908263ffffffff614d9116565b61421b615d67565b6142288260e00151614d26565b9050614232615d67565b61423f8360e00151614d26565b60e0840151909150614164908363ffffffff614d9116565b61425f615d67565b61426c8260e00151614d26565b9050614276615d67565b6142838360e00151614d26565b905061428d615d67565b61429a8460e00151614d26565b60e08501519091506142b2908463ffffffff614d9116565b60e08401516141fe908363ffffffff614d9116565b6142cf615d67565b6142dc8260e00151614d26565b90506142e6615d67565b6142f38360e00151614d26565b90506142fe82614d68565b1580614310575061430e81614e42565b155b8061432a575061431f81615afe565b60ff16826000015110155b156143385761378f83614d73565b611918816040015183600001518151811061434f57fe5b60200260200101518460e00151614d9190919063ffffffff16565b614372615d67565b61437f8260e00151614d26565b9050614389615d67565b6143968360e00151614d26565b90506143a0615d67565b6143ad8460e00151614d26565b90506143b883614d68565b15806143ca57506143c882614e42565b155b806143e457506143d982615afe565b60ff16836000015110155b156143f257613af484614d73565b60408201518351815183918391811061440757fe5b6020026020010181905250612b7f613e8c82613268565b614426615d67565b6144338260e00151614d26565b905061443e81614e42565b61444b57613c5882614d73565b61179c613bee61445a83615afe565b60ff16612fd3565b61446a615d67565b6144778260e00151614d26565b9050614481615d67565b61448f836101000151614d26565b905061449a82614d68565b15806144ac57506144aa81614e42565b155b806144c657506144bb81615afe565b60ff16826000015110155b156144d45761378f83614d73565b610100830151614338908263ffffffff614d9116565b6144f2615d67565b6144ff8260e00151614d26565b9050614509615d67565b6145168360e00151614d26565b9050614520615d67565b61452e846101000151614d26565b905061453981614e42565b158061454b575061454983614d68565b155b80614565575061455a81615afe565b60ff16836000015110155b1561457357613af484614d73565b60408101518351815184918391811061458857fe5b6020026020010181905250612b7f61459f82613268565b6101008701519063ffffffff614d9116565b8060a001516145c66113178360e00151614d26565b604080516020808201949094528082019290925280518083038201815260609092019052805191012060a090910152565b6145ff615d67565b61460c8260e00151614d26565b905061271081608001511180614628575061462681615b25565b155b1561463657613c5882614d73565b816080015161464482611e25565b604080516020808201949094528082019290925280518083038201815260609092019052805191012060808301525050565b61468161131761279d565b816040015114156146d9576040805162461bcd60e51b815260206004820152601d60248201527f496e626f7820696e737472756374696f6e2077617320626c6f636b6564000000604482015290519081900360640190fd5b6146e1615d67565b6146f5826101600151836101800151611aa4565b915050816040015161470682611e25565b14614750576040805162461bcd60e51b8152602060048201526015602482015274696e636f727265637420696e626f782076616c756560581b604482015290519081900360640190fd5b60e0820151614765908263ffffffff614d9116565b61477061131761279d565b6040830152506001606090910152565b61159381614d73565b6115938160200151615c23565b61479e615d67565b6147ab8260e00151614d26565b90506147b681614d68565b6147c357613c5882614d73565b51602082015160a0015250565b611593613ffe826020015160a00151612fd3565b60408051600160f81b602080830191909152600060218301819052602280840191909152835180840390910181526042909201909252805191012061159390613ffe906001615a4d565b614836615d67565b6148438260e00151614d26565b905061484d615d67565b61485a8360e00151614d26565b905061486582614d68565b1580614877575061487581615a40565b155b156148855761378f83614d73565b611918613bac836000015161489984611e25565b611d3f565b6148a6615d67565b6148b38260e00151614d26565b90506148bd615d67565b6148ca8360e00151614d26565b90506148d4615d67565b6148e18460e00151614d26565b90506148ec83614d68565b15806148fe57506148fc81615a40565b155b1561490c57613af484614d73565b613c25613c14846000015161492084611e25565b85611da1565b60408051600080825260208201909252606091614959565b614946615d67565b81526020019060019003908161493e5790505b50905061179c613bee82613268565b614970615d67565b61497d8260e00151614d26565b9050614987615d67565b6149948360e00151614d26565b905061499e615d67565b6149ab8460e00151614d26565b90506149b5615d67565b6149c28560e00151614d26565b90506149cd84614d68565b15806149df57506149dd83614d68565b155b806149f057506149ee82614d68565b155b80614a0157506149ff81614d68565b155b15614a0f576112f685614d73565b83518351835115801590614a2557508351600114155b15614a5357614a48614a376000612fd3565b60e08901519063ffffffff614d9116565b505050505050611593565b83518351604080516000808252602080830180855285905260ff601b9096019586168385015260608301889052608083018790529251909260019260a080820193601f1981019281900390910190855afa158015614ab5573d6000803e3d6000fd5b505050602060405103519050614ae7614ad6826001600160a01b0316612fd3565b60e08c01519063ffffffff614d9116565b50505050505050505050565b600160e090910152565b6000815b600181511115614c1e5760606002825160010181614b1b57fe5b04604051908082528060200260200182016040528015614b45578160200160208202803883390190505b50905060005b8151811015614c16578251816002026001011015614bde57828160020281518110614b7257fe5b6020026020010151838260020260010181518110614b8c57fe5b6020026020010151604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120828281518110614bcd57fe5b602002602001018181525050614c0e565b828160020281518110614bed57fe5b6020026020010151828281518110614c0157fe5b6020026020010181815250505b600101614b4b565b509050614b01565b80600081518110614c2b57fe5b6020026020010151915050919050565b60008160200183511015614c4e57600080fd5b50016020015190565b60008060208301612fc8858563ffffffff614c3b16565b614c76615d67565b6040805160a0810182528481528151606081018352600080825260208281018290528451828152808201865293949085019390830191614ccc565b614cb9615d67565b815260200190600190039081614cb15790505b50905281526040805160008082526020828101909352919092019190614d08565b614cf5615d67565b815260200190600190039081614ced5790505b508152600260208201526040019290925250919050565b6008101590565b614d2e615d67565b614d36615d67565b8260200151600184600001510381518110614d4d57fe5b60209081029190910101518351600019018452915050919050565b6060015160ff161590565b614d7c81612734565b60e08101516000908190526101009091015152565b808260200151836000015181518110614da657fe5b60209081029190910101525080516001019052565b614dc3615d67565b8115614dd357611e4b6001612fd3565b611e4b6000612fd3565b614de5615d67565b816060015160ff1660021415614e2c5760405162461bcd60e51b8152600401808060200182810382526021815260200180615e8f6021913960400191505060405180910390fd5b614e3c826060015160ff16612fd3565b92915050565b6060015160ff1660031490565b614e57615df9565b614e5f615e18565b614e67615e18565b614e6f615df9565b614e77615e36565b60405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060008090505b6018811015615a35576080878101516060808a01516040808c01516020808e01518e511890911890921890931889526101208b01516101008c015160e08d015160c08e015160a08f0151181818189089018190526101c08b01516101a08c01516101808d01516101608e01516101408f0151181818189289019283526102608b01516102408c01516102208d01516102008e01516101e08f015118181818918901919091526103008a01516102e08b01516102c08c01516102a08d01516102808e0151181818189288018390526001600160401b0360028202166001603f1b91829004179092188652510485600260200201516002026001600160401b03161785600060200201511884600160200201526001603f1b8560036020020151816150c357fe5b0485600360200201516002026001600160401b03161785600160200201511884600260200201526001603f1b8560046020020151816150fe57fe5b0485600460200201516002026001600160401b0316178560026005811061512157fe5b602002015118606085015284516001603f1b9086516060808901519390920460029091026001600160401b031617909118608086810191825286518a5118808b5287516020808d018051909218825289516040808f0180519092189091528a518e8801805190911890528a51948e0180519095189094528901805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291880180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292870180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a01805190911890529084525163100000009060208901516001600160401b03641000000000909102169190041761010084015260408701516001603d1b9060408901516001600160401b03600890910216919004176101608401526060870151628000009060608901516001600160401b036502000000000090910216919004176102608401526080870151654000000000009060808901516001600160401b036204000090910216919004176102c084015260a08701516001603f1b900487600560200201516002026001600160401b0316178360026019811061538b57fe5b602002015260c0870151621000008104651000000000009091026001600160401b039081169190911760a085015260e0880151664000000000000081046104009091028216176101a08501526101008801516208000081046520000000000090910282161761020085015261012088015160048082029092166001603e1b909104176103008501526101408801516101408901516001600160401b036001603e1b90910216919004176080840152610160870151670400000000000000906101608901516001600160401b036040909102169190041760e084015261018087015162200000906101808901516001600160401b036508000000000090910216919004176101408401526101a08701516602000000000000906101a08901516001600160401b0361800090910216919004176102408401526101c08701516008906101c08901516001600160401b036001603d1b90910216919004176102a08401526101e0870151641000000000906101e08901516001600160401b03631000000090910216919004176020840152610200808801516102008901516001600160401b0366800000000000009091021691900417610120840152610220870151648000000000906102208901516001600160401b036302000000909102169190041761018084015261024087015165080000000000906102408901516001600160401b036220000090910216919004176101e0840152610260870151610100906102608901516001600160401b03600160381b90910216919004176102e0840152610280870151642000000000906102808901516001600160401b036308000000909102169190041760608401526102a087015165100000000000906102a08901516001600160401b0362100000909102169190041760c08401526102c08701516302000000906102c08901516001600160401b0364800000000090910216919004176101c08401526102e0870151600160381b906102e08901516001600160401b036101009091021691900417610220840152610300870151660400000000000090048760186020020151614000026001600160401b031617836014602002015282600a602002015183600560200201511916836000602002015118876000602002015282600b602002015183600660200201511916836001602002015118876001602002015282600c602002015183600760200201511916836002602002015118876002602002015282600d602002015183600860200201511916836003602002015118876003602002015282600e602002015183600960200201511916836004602002015118876004602002015282600f602002015183600a602002015119168360056020020151188760056020020152826010602002015183600b602002015119168360066020020151188760066020020152826011602002015183600c602002015119168360076020020151188760076020020152826012602002015183600d602002015119168360086020020151188760086020020152826013602002015183600e602002015119168360096020020151188760096020020152826014602002015183600f6020020151191683600a60200201511887600a602002015282601560200201518360106020020151191683600b60200201511887600b602002015282601660200201518360116020020151191683600c60200201511887600c602002015282601760200201518360126020020151191683600d60200201511887600d602002015282601860200201518360136020020151191683600e60200201511887600e602002015282600060200201518360146020020151191683600f60200201511887600fa2357fe5b60200201518751188752600101614f9e565b509495945050505050565b6060015160ff1660011490565b615a55615d67565b6040805160a0810182528481528151606081018352600080825260208281018290528451828152808201865293949085019390830191615aab565b615a98615d67565b815260200190600190039081615a905790505b50905281526040805160008082526020828101909352919092019190615ae7565b615ad4615d67565b815260200190600190039081615acc5790505b508152606460208201526040019290925250919050565b606081015160009060ff1660031415615b1d5750604081015151610e8a565b506001610e8a565b606081015160009060ff16615b3c57506001610e8a565b606082015160ff1660011415615b5457506000610e8a565b606082015160ff1660021415615ba8576040805162461bcd60e51b81526020600482015260146024820152736d75737420686176652066756c6c2076616c756560601b604482015290519081900360640190fd5b606082015160ff1660031415615c0b5760408201515160005b81811015615c0057615be984604001518281518110615bdc57fe5b6020026020010151615b25565b615bf857600092505050610e8a565b600101615bc1565b506001915050610e8a565b606082015160ff1660641415611f0457506000610e8a565b600260e090910152565b604051806101a00160405280615c41615d9b565b8152602001615c4e615d9b565b815260006020820181905260408201819052606082018190526080820181905260a082015260c001615c7e615e55565b8152602001615c8b615e55565b81526000602082018190526040820181905260608083015260809091015290565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081019190915290565b6040518061010001604052806000801916815260200160608152602001600063ffffffff1681526020016060815260200160608152602001606081526020016060815260200160006001600160401b031681525090565b6040518060a0016040528060008152602001615d81615e6f565b815260606020820181905260006040830181905291015290565b6040805161010081019091526000815260208101615db7615d67565b8152602001615dc4615d67565b8152602001615dd1615d67565b8152602001615dde615d67565b81526000602082018190526040820181905260609091015290565b6040518061032001604052806019906020820280388339509192915050565b6040518060a001604052806005906020820280388339509192915050565b6040518061030001604052806018906020820280388339509192915050565b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fe56616c7565206d757374206861766520612076616c6964207479706520636f6465a265627a7a72315820174f052e1bc1a5c19e3a1725b6bee6cc97e6eaa76bf81de411c1197f5849d96c64736f6c63430005110032"

// DeployExecutionChallenge deploys a new Ethereum contract, binding an instance of ExecutionChallenge to it.
func DeployExecutionChallenge(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ExecutionChallenge, error) {
	parsed, err := abi.JSON(strings.NewReader(ExecutionChallengeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ExecutionChallengeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ExecutionChallenge{ExecutionChallengeCaller: ExecutionChallengeCaller{contract: contract}, ExecutionChallengeTransactor: ExecutionChallengeTransactor{contract: contract}, ExecutionChallengeFilterer: ExecutionChallengeFilterer{contract: contract}}, nil
}

// ExecutionChallenge is an auto generated Go binding around an Ethereum contract.
type ExecutionChallenge struct {
	ExecutionChallengeCaller     // Read-only binding to the contract
	ExecutionChallengeTransactor // Write-only binding to the contract
	ExecutionChallengeFilterer   // Log filterer for contract events
}

// ExecutionChallengeCaller is an auto generated read-only Go binding around an Ethereum contract.
type ExecutionChallengeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExecutionChallengeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ExecutionChallengeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExecutionChallengeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ExecutionChallengeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExecutionChallengeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ExecutionChallengeSession struct {
	Contract     *ExecutionChallenge // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ExecutionChallengeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ExecutionChallengeCallerSession struct {
	Contract *ExecutionChallengeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ExecutionChallengeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ExecutionChallengeTransactorSession struct {
	Contract     *ExecutionChallengeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ExecutionChallengeRaw is an auto generated low-level Go binding around an Ethereum contract.
type ExecutionChallengeRaw struct {
	Contract *ExecutionChallenge // Generic contract binding to access the raw methods on
}

// ExecutionChallengeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ExecutionChallengeCallerRaw struct {
	Contract *ExecutionChallengeCaller // Generic read-only contract binding to access the raw methods on
}

// ExecutionChallengeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ExecutionChallengeTransactorRaw struct {
	Contract *ExecutionChallengeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewExecutionChallenge creates a new instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallenge(address common.Address, backend bind.ContractBackend) (*ExecutionChallenge, error) {
	contract, err := bindExecutionChallenge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallenge{ExecutionChallengeCaller: ExecutionChallengeCaller{contract: contract}, ExecutionChallengeTransactor: ExecutionChallengeTransactor{contract: contract}, ExecutionChallengeFilterer: ExecutionChallengeFilterer{contract: contract}}, nil
}

// NewExecutionChallengeCaller creates a new read-only instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallengeCaller(address common.Address, caller bind.ContractCaller) (*ExecutionChallengeCaller, error) {
	contract, err := bindExecutionChallenge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeCaller{contract: contract}, nil
}

// NewExecutionChallengeTransactor creates a new write-only instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallengeTransactor(address common.Address, transactor bind.ContractTransactor) (*ExecutionChallengeTransactor, error) {
	contract, err := bindExecutionChallenge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeTransactor{contract: contract}, nil
}

// NewExecutionChallengeFilterer creates a new log filterer instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallengeFilterer(address common.Address, filterer bind.ContractFilterer) (*ExecutionChallengeFilterer, error) {
	contract, err := bindExecutionChallenge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeFilterer{contract: contract}, nil
}

// bindExecutionChallenge binds a generic wrapper to an already deployed contract.
func bindExecutionChallenge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ExecutionChallengeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ExecutionChallenge *ExecutionChallengeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ExecutionChallenge.Contract.ExecutionChallengeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ExecutionChallenge *ExecutionChallengeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ExecutionChallengeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ExecutionChallenge *ExecutionChallengeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ExecutionChallengeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ExecutionChallenge *ExecutionChallengeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ExecutionChallenge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ExecutionChallenge *ExecutionChallengeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ExecutionChallenge *ExecutionChallengeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.contract.Transact(opts, method, params...)
}

// BisectAssertion is a paid mutator transaction binding the contract method 0x6f537a39.
//
// Solidity: function bisectAssertion(bytes32 _beforeInbox, bytes32[] _machineHashes, uint32 inboxInsnIndex, bytes32[] _messageAccs, bytes32[] _logAccs, uint64[] _outCounts, uint64[] _gases, uint64 _totalSteps) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) BisectAssertion(opts *bind.TransactOpts, _beforeInbox [32]byte, _machineHashes [][32]byte, inboxInsnIndex uint32, _messageAccs [][32]byte, _logAccs [][32]byte, _outCounts []uint64, _gases []uint64, _totalSteps uint64) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "bisectAssertion", _beforeInbox, _machineHashes, inboxInsnIndex, _messageAccs, _logAccs, _outCounts, _gases, _totalSteps)
}

// BisectAssertion is a paid mutator transaction binding the contract method 0x6f537a39.
//
// Solidity: function bisectAssertion(bytes32 _beforeInbox, bytes32[] _machineHashes, uint32 inboxInsnIndex, bytes32[] _messageAccs, bytes32[] _logAccs, uint64[] _outCounts, uint64[] _gases, uint64 _totalSteps) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) BisectAssertion(_beforeInbox [32]byte, _machineHashes [][32]byte, inboxInsnIndex uint32, _messageAccs [][32]byte, _logAccs [][32]byte, _outCounts []uint64, _gases []uint64, _totalSteps uint64) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.BisectAssertion(&_ExecutionChallenge.TransactOpts, _beforeInbox, _machineHashes, inboxInsnIndex, _messageAccs, _logAccs, _outCounts, _gases, _totalSteps)
}

// BisectAssertion is a paid mutator transaction binding the contract method 0x6f537a39.
//
// Solidity: function bisectAssertion(bytes32 _beforeInbox, bytes32[] _machineHashes, uint32 inboxInsnIndex, bytes32[] _messageAccs, bytes32[] _logAccs, uint64[] _outCounts, uint64[] _gases, uint64 _totalSteps) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) BisectAssertion(_beforeInbox [32]byte, _machineHashes [][32]byte, inboxInsnIndex uint32, _messageAccs [][32]byte, _logAccs [][32]byte, _outCounts []uint64, _gases []uint64, _totalSteps uint64) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.BisectAssertion(&_ExecutionChallenge.TransactOpts, _beforeInbox, _machineHashes, inboxInsnIndex, _messageAccs, _logAccs, _outCounts, _gases, _totalSteps)
}

// ChooseSegment is a paid mutator transaction binding the contract method 0x79a9ad85.
//
// Solidity: function chooseSegment(uint256 _segmentToChallenge, bytes _proof, bytes32 _bisectionRoot, bytes32 _bisectionHash) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) ChooseSegment(opts *bind.TransactOpts, _segmentToChallenge *big.Int, _proof []byte, _bisectionRoot [32]byte, _bisectionHash [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "chooseSegment", _segmentToChallenge, _proof, _bisectionRoot, _bisectionHash)
}

// ChooseSegment is a paid mutator transaction binding the contract method 0x79a9ad85.
//
// Solidity: function chooseSegment(uint256 _segmentToChallenge, bytes _proof, bytes32 _bisectionRoot, bytes32 _bisectionHash) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) ChooseSegment(_segmentToChallenge *big.Int, _proof []byte, _bisectionRoot [32]byte, _bisectionHash [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ChooseSegment(&_ExecutionChallenge.TransactOpts, _segmentToChallenge, _proof, _bisectionRoot, _bisectionHash)
}

// ChooseSegment is a paid mutator transaction binding the contract method 0x79a9ad85.
//
// Solidity: function chooseSegment(uint256 _segmentToChallenge, bytes _proof, bytes32 _bisectionRoot, bytes32 _bisectionHash) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) ChooseSegment(_segmentToChallenge *big.Int, _proof []byte, _bisectionRoot [32]byte, _bisectionHash [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ChooseSegment(&_ExecutionChallenge.TransactOpts, _segmentToChallenge, _proof, _bisectionRoot, _bisectionHash)
}

// InitializeBisection is a paid mutator transaction binding the contract method 0x02ad1e4e.
//
// Solidity: function initializeBisection(address _rollupAddress, address _asserter, address _challenger, uint256 _challengePeriodTicks, bytes32 _challengeState) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) InitializeBisection(opts *bind.TransactOpts, _rollupAddress common.Address, _asserter common.Address, _challenger common.Address, _challengePeriodTicks *big.Int, _challengeState [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "initializeBisection", _rollupAddress, _asserter, _challenger, _challengePeriodTicks, _challengeState)
}

// InitializeBisection is a paid mutator transaction binding the contract method 0x02ad1e4e.
//
// Solidity: function initializeBisection(address _rollupAddress, address _asserter, address _challenger, uint256 _challengePeriodTicks, bytes32 _challengeState) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) InitializeBisection(_rollupAddress common.Address, _asserter common.Address, _challenger common.Address, _challengePeriodTicks *big.Int, _challengeState [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.InitializeBisection(&_ExecutionChallenge.TransactOpts, _rollupAddress, _asserter, _challenger, _challengePeriodTicks, _challengeState)
}

// InitializeBisection is a paid mutator transaction binding the contract method 0x02ad1e4e.
//
// Solidity: function initializeBisection(address _rollupAddress, address _asserter, address _challenger, uint256 _challengePeriodTicks, bytes32 _challengeState) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) InitializeBisection(_rollupAddress common.Address, _asserter common.Address, _challenger common.Address, _challengePeriodTicks *big.Int, _challengeState [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.InitializeBisection(&_ExecutionChallenge.TransactOpts, _rollupAddress, _asserter, _challenger, _challengePeriodTicks, _challengeState)
}

// OneStepProof is a paid mutator transaction binding the contract method 0x082379bb.
//
// Solidity: function oneStepProof(bytes32 _inboxHash, bytes32 _firstMessage, bytes32 _firstLog, bytes _proof) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) OneStepProof(opts *bind.TransactOpts, _inboxHash [32]byte, _firstMessage [32]byte, _firstLog [32]byte, _proof []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "oneStepProof", _inboxHash, _firstMessage, _firstLog, _proof)
}

// OneStepProof is a paid mutator transaction binding the contract method 0x082379bb.
//
// Solidity: function oneStepProof(bytes32 _inboxHash, bytes32 _firstMessage, bytes32 _firstLog, bytes _proof) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) OneStepProof(_inboxHash [32]byte, _firstMessage [32]byte, _firstLog [32]byte, _proof []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.OneStepProof(&_ExecutionChallenge.TransactOpts, _inboxHash, _firstMessage, _firstLog, _proof)
}

// OneStepProof is a paid mutator transaction binding the contract method 0x082379bb.
//
// Solidity: function oneStepProof(bytes32 _inboxHash, bytes32 _firstMessage, bytes32 _firstLog, bytes _proof) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) OneStepProof(_inboxHash [32]byte, _firstMessage [32]byte, _firstLog [32]byte, _proof []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.OneStepProof(&_ExecutionChallenge.TransactOpts, _inboxHash, _firstMessage, _firstLog, _proof)
}

// TimeoutChallenge is a paid mutator transaction binding the contract method 0xced5c1bf.
//
// Solidity: function timeoutChallenge() returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) TimeoutChallenge(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "timeoutChallenge")
}

// TimeoutChallenge is a paid mutator transaction binding the contract method 0xced5c1bf.
//
// Solidity: function timeoutChallenge() returns()
func (_ExecutionChallenge *ExecutionChallengeSession) TimeoutChallenge() (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.TimeoutChallenge(&_ExecutionChallenge.TransactOpts)
}

// TimeoutChallenge is a paid mutator transaction binding the contract method 0xced5c1bf.
//
// Solidity: function timeoutChallenge() returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) TimeoutChallenge() (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.TimeoutChallenge(&_ExecutionChallenge.TransactOpts)
}

// ExecutionChallengeAsserterTimedOutIterator is returned from FilterAsserterTimedOut and is used to iterate over the raw logs and unpacked data for AsserterTimedOut events raised by the ExecutionChallenge contract.
type ExecutionChallengeAsserterTimedOutIterator struct {
	Event *ExecutionChallengeAsserterTimedOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeAsserterTimedOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeAsserterTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeAsserterTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeAsserterTimedOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeAsserterTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeAsserterTimedOut represents a AsserterTimedOut event raised by the ExecutionChallenge contract.
type ExecutionChallengeAsserterTimedOut struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAsserterTimedOut is a free log retrieval operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterAsserterTimedOut(opts *bind.FilterOpts) (*ExecutionChallengeAsserterTimedOutIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "AsserterTimedOut")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeAsserterTimedOutIterator{contract: _ExecutionChallenge.contract, event: "AsserterTimedOut", logs: logs, sub: sub}, nil
}

// WatchAsserterTimedOut is a free log subscription operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchAsserterTimedOut(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeAsserterTimedOut) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "AsserterTimedOut")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeAsserterTimedOut)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "AsserterTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAsserterTimedOut is a log parse operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseAsserterTimedOut(log types.Log) (*ExecutionChallengeAsserterTimedOut, error) {
	event := new(ExecutionChallengeAsserterTimedOut)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "AsserterTimedOut", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeBisectedAssertionIterator is returned from FilterBisectedAssertion and is used to iterate over the raw logs and unpacked data for BisectedAssertion events raised by the ExecutionChallenge contract.
type ExecutionChallengeBisectedAssertionIterator struct {
	Event *ExecutionChallengeBisectedAssertion // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeBisectedAssertionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeBisectedAssertion)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeBisectedAssertion)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeBisectedAssertionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeBisectedAssertionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeBisectedAssertion represents a BisectedAssertion event raised by the ExecutionChallenge contract.
type ExecutionChallengeBisectedAssertion struct {
	MachineHashes  [][32]byte
	InboxInsnIndex uint32
	MessageAccs    [][32]byte
	LogAccs        [][32]byte
	OutCounts      []uint64
	Gases          []uint64
	TotalSteps     uint64
	DeadlineTicks  *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterBisectedAssertion is a free log retrieval operation binding the contract event 0xfdfc7d7356ac103488916cfffd6e537843dadc44dc71695a7ed504d9f6685287.
//
// Solidity: event BisectedAssertion(bytes32[] machineHashes, uint32 inboxInsnIndex, bytes32[] messageAccs, bytes32[] logAccs, uint64[] outCounts, uint64[] gases, uint64 totalSteps, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterBisectedAssertion(opts *bind.FilterOpts) (*ExecutionChallengeBisectedAssertionIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "BisectedAssertion")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeBisectedAssertionIterator{contract: _ExecutionChallenge.contract, event: "BisectedAssertion", logs: logs, sub: sub}, nil
}

// WatchBisectedAssertion is a free log subscription operation binding the contract event 0xfdfc7d7356ac103488916cfffd6e537843dadc44dc71695a7ed504d9f6685287.
//
// Solidity: event BisectedAssertion(bytes32[] machineHashes, uint32 inboxInsnIndex, bytes32[] messageAccs, bytes32[] logAccs, uint64[] outCounts, uint64[] gases, uint64 totalSteps, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchBisectedAssertion(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeBisectedAssertion) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "BisectedAssertion")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeBisectedAssertion)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "BisectedAssertion", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBisectedAssertion is a log parse operation binding the contract event 0xfdfc7d7356ac103488916cfffd6e537843dadc44dc71695a7ed504d9f6685287.
//
// Solidity: event BisectedAssertion(bytes32[] machineHashes, uint32 inboxInsnIndex, bytes32[] messageAccs, bytes32[] logAccs, uint64[] outCounts, uint64[] gases, uint64 totalSteps, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseBisectedAssertion(log types.Log) (*ExecutionChallengeBisectedAssertion, error) {
	event := new(ExecutionChallengeBisectedAssertion)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "BisectedAssertion", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeChallengerTimedOutIterator is returned from FilterChallengerTimedOut and is used to iterate over the raw logs and unpacked data for ChallengerTimedOut events raised by the ExecutionChallenge contract.
type ExecutionChallengeChallengerTimedOutIterator struct {
	Event *ExecutionChallengeChallengerTimedOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeChallengerTimedOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeChallengerTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeChallengerTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeChallengerTimedOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeChallengerTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeChallengerTimedOut represents a ChallengerTimedOut event raised by the ExecutionChallenge contract.
type ExecutionChallengeChallengerTimedOut struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterChallengerTimedOut is a free log retrieval operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterChallengerTimedOut(opts *bind.FilterOpts) (*ExecutionChallengeChallengerTimedOutIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "ChallengerTimedOut")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeChallengerTimedOutIterator{contract: _ExecutionChallenge.contract, event: "ChallengerTimedOut", logs: logs, sub: sub}, nil
}

// WatchChallengerTimedOut is a free log subscription operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchChallengerTimedOut(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeChallengerTimedOut) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "ChallengerTimedOut")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeChallengerTimedOut)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengerTimedOut is a log parse operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseChallengerTimedOut(log types.Log) (*ExecutionChallengeChallengerTimedOut, error) {
	event := new(ExecutionChallengeChallengerTimedOut)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeContinuedIterator is returned from FilterContinued and is used to iterate over the raw logs and unpacked data for Continued events raised by the ExecutionChallenge contract.
type ExecutionChallengeContinuedIterator struct {
	Event *ExecutionChallengeContinued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeContinuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeContinued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeContinued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeContinuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeContinuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeContinued represents a Continued event raised by the ExecutionChallenge contract.
type ExecutionChallengeContinued struct {
	SegmentIndex  *big.Int
	DeadlineTicks *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterContinued is a free log retrieval operation binding the contract event 0x1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e4.
//
// Solidity: event Continued(uint256 segmentIndex, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterContinued(opts *bind.FilterOpts) (*ExecutionChallengeContinuedIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "Continued")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeContinuedIterator{contract: _ExecutionChallenge.contract, event: "Continued", logs: logs, sub: sub}, nil
}

// WatchContinued is a free log subscription operation binding the contract event 0x1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e4.
//
// Solidity: event Continued(uint256 segmentIndex, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchContinued(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeContinued) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "Continued")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeContinued)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "Continued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContinued is a log parse operation binding the contract event 0x1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e4.
//
// Solidity: event Continued(uint256 segmentIndex, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseContinued(log types.Log) (*ExecutionChallengeContinued, error) {
	event := new(ExecutionChallengeContinued)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "Continued", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeInitiatedChallengeIterator is returned from FilterInitiatedChallenge and is used to iterate over the raw logs and unpacked data for InitiatedChallenge events raised by the ExecutionChallenge contract.
type ExecutionChallengeInitiatedChallengeIterator struct {
	Event *ExecutionChallengeInitiatedChallenge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeInitiatedChallengeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeInitiatedChallenge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeInitiatedChallenge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeInitiatedChallengeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeInitiatedChallengeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeInitiatedChallenge represents a InitiatedChallenge event raised by the ExecutionChallenge contract.
type ExecutionChallengeInitiatedChallenge struct {
	DeadlineTicks *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterInitiatedChallenge is a free log retrieval operation binding the contract event 0xe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc67.
//
// Solidity: event InitiatedChallenge(uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterInitiatedChallenge(opts *bind.FilterOpts) (*ExecutionChallengeInitiatedChallengeIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "InitiatedChallenge")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeInitiatedChallengeIterator{contract: _ExecutionChallenge.contract, event: "InitiatedChallenge", logs: logs, sub: sub}, nil
}

// WatchInitiatedChallenge is a free log subscription operation binding the contract event 0xe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc67.
//
// Solidity: event InitiatedChallenge(uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchInitiatedChallenge(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeInitiatedChallenge) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "InitiatedChallenge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeInitiatedChallenge)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiatedChallenge is a log parse operation binding the contract event 0xe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc67.
//
// Solidity: event InitiatedChallenge(uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseInitiatedChallenge(log types.Log) (*ExecutionChallengeInitiatedChallenge, error) {
	event := new(ExecutionChallengeInitiatedChallenge)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeOneStepProofCompletedIterator is returned from FilterOneStepProofCompleted and is used to iterate over the raw logs and unpacked data for OneStepProofCompleted events raised by the ExecutionChallenge contract.
type ExecutionChallengeOneStepProofCompletedIterator struct {
	Event *ExecutionChallengeOneStepProofCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeOneStepProofCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeOneStepProofCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeOneStepProofCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeOneStepProofCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeOneStepProofCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeOneStepProofCompleted represents a OneStepProofCompleted event raised by the ExecutionChallenge contract.
type ExecutionChallengeOneStepProofCompleted struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOneStepProofCompleted is a free log retrieval operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterOneStepProofCompleted(opts *bind.FilterOpts) (*ExecutionChallengeOneStepProofCompletedIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "OneStepProofCompleted")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeOneStepProofCompletedIterator{contract: _ExecutionChallenge.contract, event: "OneStepProofCompleted", logs: logs, sub: sub}, nil
}

// WatchOneStepProofCompleted is a free log subscription operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchOneStepProofCompleted(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeOneStepProofCompleted) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "OneStepProofCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeOneStepProofCompleted)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOneStepProofCompleted is a log parse operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseOneStepProofCompleted(log types.Log) (*ExecutionChallengeOneStepProofCompleted, error) {
	event := new(ExecutionChallengeOneStepProofCompleted)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// KeccakABI is the input ABI used to generate the binding from.
const KeccakABI = "[]"

// KeccakBin is the compiled bytecode used for deploying new contracts.
var KeccakBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820c07ae5b3a4de3b843e4ad0fe343fe545017077f4b66197a567534adf7bf6c06864736f6c63430005110032"

// DeployKeccak deploys a new Ethereum contract, binding an instance of Keccak to it.
func DeployKeccak(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Keccak, error) {
	parsed, err := abi.JSON(strings.NewReader(KeccakABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(KeccakBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Keccak{KeccakCaller: KeccakCaller{contract: contract}, KeccakTransactor: KeccakTransactor{contract: contract}, KeccakFilterer: KeccakFilterer{contract: contract}}, nil
}

// Keccak is an auto generated Go binding around an Ethereum contract.
type Keccak struct {
	KeccakCaller     // Read-only binding to the contract
	KeccakTransactor // Write-only binding to the contract
	KeccakFilterer   // Log filterer for contract events
}

// KeccakCaller is an auto generated read-only Go binding around an Ethereum contract.
type KeccakCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeccakTransactor is an auto generated write-only Go binding around an Ethereum contract.
type KeccakTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeccakFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type KeccakFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeccakSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type KeccakSession struct {
	Contract     *Keccak           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KeccakCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type KeccakCallerSession struct {
	Contract *KeccakCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// KeccakTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type KeccakTransactorSession struct {
	Contract     *KeccakTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KeccakRaw is an auto generated low-level Go binding around an Ethereum contract.
type KeccakRaw struct {
	Contract *Keccak // Generic contract binding to access the raw methods on
}

// KeccakCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type KeccakCallerRaw struct {
	Contract *KeccakCaller // Generic read-only contract binding to access the raw methods on
}

// KeccakTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type KeccakTransactorRaw struct {
	Contract *KeccakTransactor // Generic write-only contract binding to access the raw methods on
}

// NewKeccak creates a new instance of Keccak, bound to a specific deployed contract.
func NewKeccak(address common.Address, backend bind.ContractBackend) (*Keccak, error) {
	contract, err := bindKeccak(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Keccak{KeccakCaller: KeccakCaller{contract: contract}, KeccakTransactor: KeccakTransactor{contract: contract}, KeccakFilterer: KeccakFilterer{contract: contract}}, nil
}

// NewKeccakCaller creates a new read-only instance of Keccak, bound to a specific deployed contract.
func NewKeccakCaller(address common.Address, caller bind.ContractCaller) (*KeccakCaller, error) {
	contract, err := bindKeccak(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &KeccakCaller{contract: contract}, nil
}

// NewKeccakTransactor creates a new write-only instance of Keccak, bound to a specific deployed contract.
func NewKeccakTransactor(address common.Address, transactor bind.ContractTransactor) (*KeccakTransactor, error) {
	contract, err := bindKeccak(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &KeccakTransactor{contract: contract}, nil
}

// NewKeccakFilterer creates a new log filterer instance of Keccak, bound to a specific deployed contract.
func NewKeccakFilterer(address common.Address, filterer bind.ContractFilterer) (*KeccakFilterer, error) {
	contract, err := bindKeccak(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &KeccakFilterer{contract: contract}, nil
}

// bindKeccak binds a generic wrapper to an already deployed contract.
func bindKeccak(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(KeccakABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Keccak *KeccakRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Keccak.Contract.KeccakCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Keccak *KeccakRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Keccak.Contract.KeccakTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Keccak *KeccakRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Keccak.Contract.KeccakTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Keccak *KeccakCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Keccak.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Keccak *KeccakTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Keccak.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Keccak *KeccakTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Keccak.Contract.contract.Transact(opts, method, params...)
}

// OneStepProofABI is the input ABI used to generate the binding from.
const OneStepProofABI = "[]"

// OneStepProofBin is the compiled bytecode used for deploying new contracts.
var OneStepProofBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723158204feae112ad4f334fbbb080f576ac61acf707104a3b0c2095467b7f00155ef42a64736f6c63430005110032"

// DeployOneStepProof deploys a new Ethereum contract, binding an instance of OneStepProof to it.
func DeployOneStepProof(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// OneStepProof is an auto generated Go binding around an Ethereum contract.
type OneStepProof struct {
	OneStepProofCaller     // Read-only binding to the contract
	OneStepProofTransactor // Write-only binding to the contract
	OneStepProofFilterer   // Log filterer for contract events
}

// OneStepProofCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofSession struct {
	Contract     *OneStepProof     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProofCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofCallerSession struct {
	Contract *OneStepProofCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// OneStepProofTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTransactorSession struct {
	Contract     *OneStepProofTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// OneStepProofRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofRaw struct {
	Contract *OneStepProof // Generic contract binding to access the raw methods on
}

// OneStepProofCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofCallerRaw struct {
	Contract *OneStepProofCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTransactorRaw struct {
	Contract *OneStepProofTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof creates a new instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProof(address common.Address, backend bind.ContractBackend) (*OneStepProof, error) {
	contract, err := bindOneStepProof(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// NewOneStepProofCaller creates a new read-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofCaller, error) {
	contract, err := bindOneStepProof(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofCaller{contract: contract}, nil
}

// NewOneStepProofTransactor creates a new write-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTransactor, error) {
	contract, err := bindOneStepProof(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTransactor{contract: contract}, nil
}

// NewOneStepProofFilterer creates a new log filterer instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofFilterer, error) {
	contract, err := bindOneStepProof(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofFilterer{contract: contract}, nil
}

// bindOneStepProof binds a generic wrapper to an already deployed contract.
func bindOneStepProof(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.OneStepProofCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transact(opts, method, params...)
}
