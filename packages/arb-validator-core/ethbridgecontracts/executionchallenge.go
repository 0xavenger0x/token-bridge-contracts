// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgecontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ExecutionChallengeABI is the input ABI used to generate the binding from.
const ExecutionChallengeABI = "[{\"anonymous\":false,\"inputs\":[],\"name\":\"AsserterTimedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"machineHashes\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"inboxHashes\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"messageAccs\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"logAccs\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"outCounts\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"gases\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"totalSteps\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadlineTicks\",\"type\":\"uint256\"}],\"name\":\"BisectedAssertion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ChallengerTimedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"segmentIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadlineTicks\",\"type\":\"uint256\"}],\"name\":\"Continued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadlineTicks\",\"type\":\"uint256\"}],\"name\":\"InitiatedChallenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OneStepProofCompleted\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_machineHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_inboxHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_messageAccs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_logAccs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_outCounts\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_gases\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64\",\"name\":\"_totalSteps\",\"type\":\"uint64\"}],\"name\":\"bisectAssertion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segmentToChallenge\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_bisectionRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_bisectionHash\",\"type\":\"bytes32\"}],\"name\":\"chooseSegment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rollupAddress\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_asserter\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_challenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_challengePeriodTicks\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_challengeState\",\"type\":\"bytes32\"}],\"name\":\"initializeBisection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_afterInboxHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_firstMessage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_firstLog\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"oneStepProof\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"timeoutChallenge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ExecutionChallengeFuncSigs maps the 4-byte function signature to its string representation.
var ExecutionChallengeFuncSigs = map[string]string{
	"efaa0772": "bisectAssertion(bytes32[],bytes32[],bytes32[],bytes32[],uint64[],uint64[],uint64)",
	"79a9ad85": "chooseSegment(uint256,bytes,bytes32,bytes32)",
	"02ad1e4e": "initializeBisection(address,address,address,uint256,bytes32)",
	"082379bb": "oneStepProof(bytes32,bytes32,bytes32,bytes)",
	"ced5c1bf": "timeoutChallenge()",
}

// ExecutionChallengeBin is the compiled bytecode used for deploying new contracts.
var ExecutionChallengeBin = "0x608060405234801561001057600080fd5b50615f7080620000216000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806302ad1e4e1461005c578063082379bb146100a057806379a9ad8514610157578063ced5c1bf14610207578063efaa07721461020f575b600080fd5b61009e600480360360a081101561007257600080fd5b506001600160a01b03813581169160208101358216916040820135169060608101359060800135610545565b005b61009e600480360360808110156100b657600080fd5b81359160208101359160408201359190810190608081016060820135600160201b8111156100e357600080fd5b8201836020820111156100f557600080fd5b803590602001918460018302840111600160201b8311171561011657600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061055a945050505050565b61009e6004803603608081101561016d57600080fd5b81359190810190604081016020820135600160201b81111561018e57600080fd5b8201836020820111156101a057600080fd5b803590602001918460018302840111600160201b831117156101c157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550508235935050506020013561084c565b61009e610b0d565b61009e600480360360e081101561022557600080fd5b810190602081018135600160201b81111561023f57600080fd5b82018360208201111561025157600080fd5b803590602001918460208302840111600160201b8311171561027257600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156102c157600080fd5b8201836020820111156102d357600080fd5b803590602001918460208302840111600160201b831117156102f457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561034357600080fd5b82018360208201111561035557600080fd5b803590602001918460208302840111600160201b8311171561037657600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156103c557600080fd5b8201836020820111156103d757600080fd5b803590602001918460208302840111600160201b831117156103f857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561044757600080fd5b82018360208201111561045957600080fd5b803590602001918460208302840111600160201b8311171561047a57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156104c957600080fd5b8201836020820111156104db57600080fd5b803590602001918460208302840111600160201b831117156104fc57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160401b03169150610bed9050565b61055185858585610dc5565b60065550505050565b60055460ff16600281111561056b57fe5b600114604051806040016040528060098152602001684249535f535441544560b81b815250906106195760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156105de5781810151838201526020016105c6565b50505050905090810190601f16801561060b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060035461062643610ee0565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b815250906106995760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105de5781810151838201526020016105c6565b5060015460408051808201909152600a8152692124a9afa9a2a72222a960b11b6020820152906001600160a01b031633146107155760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105de5781810151838201526020016105c6565b5061071e615cd1565b61072a85858585610eeb565b9050610735816112e2565b61073d615d49565b60405180610180016040528060016001600160401b031681526020018360a001516001600160401b0316815260200161077984600001516115e3565b815260200161078b84602001516115e3565b81526020018360400151815260200187815260200186815260200183606001518152602001836060015187146107c25760016107c5565b60005b60ff166001600160401b0316815260200185815260200183608001518152602001836080015186146107f85760016107fb565b60005b60ff169052905061081361080e826116a7565b6117b7565b6040517f117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f590600090a161084461182d565b505050505050565b60055460ff16600281111561085d57fe5b60021460405180604001604052806009815260200168434f4e5f535441544560b81b815250906108ce5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105de5781810151838201526020016105c6565b506003546108db43610ee0565b11156040518060400160405280600c81526020016b434f4e5f444541444c494e4560a01b8152509061094e5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105de5781810151838201526020016105c6565b5060025460408051808201909152600a81526921a7a72fa9a2a72222a960b11b6020820152906001600160a01b031633146109ca5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105de5781810151838201526020016105c6565b5060065482146040518060400160405280600881526020016721a7a72fa82922ab60c11b81525090610a3d5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105de5781810151838201526020016105c6565b50610a4d838383876001016118a1565b6040518060400160405280600981526020016821a7a72fa82927a7a360b91b81525090610abb5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105de5781810151838201526020016105c6565b506006819055610ac96119a2565b60035460408051868152602081019290925280517f1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e49281900390910190a150505050565b600354610b1943610ee0565b11610b6b576040805162461bcd60e51b815260206004820152601760248201527f446561646c696e65206861736e27742065787069726564000000000000000000604482015290519081900360640190fd5b600160055460ff166002811115610b7e57fe5b1415610bba576040517f2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f090600090a1610bb56119be565b610beb565b6040517f4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a90600090a1610beb61182d565b565b60055460ff166002811115610bfe57fe5b600114604051806040016040528060098152602001684249535f535441544560b81b81525090610c6f5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105de5781810151838201526020016105c6565b50600354610c7c43610ee0565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b81525090610cef5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105de5781810151838201526020016105c6565b5060015460408051808201909152600a8152692124a9afa9a2a72222a960b11b6020820152906001600160a01b03163314610d6b5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105de5781810151838201526020016105c6565b50610d74615dad565b6040518060e00160405280898152602001888152602001878152602001868152602001858152602001848152602001836001600160401b03168152509050610dbb81611a16565b5050505050505050565b600060055460ff166002811115610dd857fe5b146040518060400160405280600f81526020016e4348414c5f494e49545f535441544560881b81525090610e4d5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105de5781810151838201526020016105c6565b50600080546001600160a01b038681166001600160a01b03199283161790925560018054868416908316178155600280549386169390921692909217905560048290556005805460ff19169091179055610ea5611afc565b60035460408051918252517fe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc679181900360200190a150505050565b6103e881025b919050565b610ef3615cd1565b600082600081518110610f0257fe5b602001015160f81c60f81b60f81c9050600083600181518110610f2157fe5b602001015160f81c60f81b60f81c905060006002905060608360040160ff16604051908082528060200260200182016040528015610f7957816020015b610f66615df3565b815260200190600190039081610f5e5790505b50905060608360040160ff16604051908082528060200260200182016040528015610fbe57816020015b610fab615df3565b815260200190600190039081610fa35790505b50905060005b8560ff16811015610ffc57610fd98885611b0e565b8451859084908110610fe757fe5b60209081029190910101529350600101610fc4565b5060005b8460ff16811015611038576110158885611b0e565b835184908490811061102357fe5b60209081029190910101529350600101611000565b50611041615e27565b61104b8885611ca0565b8092508195505050600088858151811061106157fe5b602001015160f81c60f81b60f81c9050600089866001018151811061108257fe5b01602001516002969096019560f81c905061109b615cd1565b6040518061018001604052808581526020016110b686611d40565b81526020018f81526020018e81526020018d815260200160006001600160401b0316815260200160405180604001604052808c60ff16815260200189815250815260200160405180604001604052808b60ff1681526020018881525081526020018460ff16600114151581526020018360ff1681526020018c81526020018881525090508260ff166000148061114f57508260ff166001145b6111a0576040805162461bcd60e51b815260206004820152601c60248201527f50726f6f662068616420626164206f7065726174696f6e207479706500000000604482015290519081900360640190fd5b6111a8615df3565b60ff84166111c5578151516111be908490611da9565b905061123f565b6000875111611210576040805162461bcd60e51b81526020600482015260126024820152716e6f20696d6d6564696174652076616c756560701b604482015290519081900360640190fd5b61123c838360000151600001518960018e0360ff168151811061122f57fe5b6020026020010151611e0b565b90505b61124881611e8f565b82515260005b848b0360ff1681101561128d5761128588828151811061126a57fe5b60200260200101518460000151611faf90919063ffffffff16565b60010161124e565b5060005b8960ff168110156112ce576112c68782815181106112ab57fe5b60200260200101518460000151611fc990919063ffffffff16565b600101611291565b50909e9d5050505050505050505050505050565b6000806000613ab16112fb85610120015160ff16611fe3565b6001600160401b03821660a0808b0182905260208b01518101805183900390528a5101519498509296509094509250111561135057602085015160001960a0909101526113478561279e565b505050506115e0565b60c0850151518411156113d95761136d611368612807565b611e8f565b61137e866020015160200151611e8f565b146113d0576040805162461bcd60e51b815260206004820152601d60248201527f737461636b206974656d206d697373696e672066726f6d2070726f6f66000000604482015290519081900360640190fd5b6113478561279e565b60e085015151831115611454576113f1611368612807565b611402866020015160400151611e8f565b146113d0576040805162461bcd60e51b815260206004820181905260248201527f617578737461636b206974656d206d697373696e672066726f6d2070726f6f66604482015290519081900360640190fd5b60008411806114665750846101000151155b8015611476575060c08501515184145b8061149d5750846101000151801561148c575083155b801561149d575060c0850151516001145b6114e5576040805162461bcd60e51b8152602060048201526014602482015273746f6f206d616e7920737461636b206974656d7360601b604482015290519081900360640190fd5b60e085015151831461153e576040805162461bcd60e51b815260206004820152601760248201527f746f6f206d616e7920617578737461636b206974656d73000000000000000000604482015290519081900360640190fd5b61154b858263ffffffff16565b60005b60c0860151518110156115955761158d8660c0015160200151828151811061157257fe5b60200260200101518760200151611faf90919063ffffffff16565b60010161154e565b5060005b60e086015151811015610844576115d88660e001516020015182815181106115bd57fe5b60200260200101518760200151611fc990919063ffffffff16565b600101611599565b50565b600060028260e0015114156115fa57506000610ee6565b60018260e00151141561160f57506001610ee6565b8151602083015161161f90611e8f565b61162c8460400151611e8f565b6116398560600151611e8f565b6116468660800151611e8f565b8660a001518760c0015160405160200180888152602001878152602001868152602001858152602001848152602001838152602001828152602001975050505050505050604051602081830303815290604052805190602001209050610ee6565b6000816000015182602001518360400151846060015185608001518660a001518760c001518860e001518961010001518a61012001518b61014001518c6101600151604051602001808d6001600160401b03166001600160401b031660c01b81526008018c6001600160401b03166001600160401b031660c01b81526008018b81526020018a8152602001898152602001888152602001878152602001868152602001856001600160401b03166001600160401b031660c01b8152600801848152602001838152602001826001600160401b03166001600160401b031660c01b81526008019c50505050505050505050505050604051602081830303815290604052805190602001209050919050565b6006548114604051806040016040528060088152602001672124a9afa82922ab60c11b815250906118295760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105de5781810151838201526020016105c6565b5050565b600080546001546002546040805163396f51cf60e01b81526001600160a01b039384166004820152918316602483015251919092169263396f51cf926044808201939182900301818387803b15801561188557600080fd5b505af1158015611899573d6000803e3d6000fd5b503392505050ff5b600080838160205b88518111611994578089015193506020818a5103602001816118c757fe5b0491505b6000821180156118de5750600286066001145b80156118ec57508160020a86115b156118ff576002860460010195506118cb565b6002860661194a57838360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092506002868161194257fe5b04955061198c565b828460405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092506002868161198557fe5b0460010195505b6020016118a9565b505090941495945050505050565b600580546001919060ff191682805b0217905550610beb611afc565b600080546002546001546040805163396f51cf60e01b81526001600160a01b039384166004820152918316602483015251919092169263396f51cf926044808201939182900301818387803b15801561188557600080fd5b80515160001901611a268261284e565b606081604051908082528060200260200182016040528015611a52578160200160208202803883390190505b509050611a7883611a708560c001516001600160401b031685612c6d565b846000612c8b565b81600081518110611a8557fe5b602090810291909101015260015b82811015611adc57611abd84611ab68660c001516001600160401b031686612e1c565b8584612c8b565b828281518110611ac957fe5b6020908102919091010152600101611a93565b50611ae681612e2f565b611aee612e3e565b611af783612e52565b505050565b600454611b0843610ee0565b01600355565b6000611b18615df3565b83518310611b5e576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b600080611b6b8686613068565b91509150611b7761308f565b60ff168160ff161415611bab576000611b908784613094565b909350905082611b9f82613108565b94509450505050611c99565b611bb36131ba565b60ff168160ff161415611bd557611bca86836131bf565b935093505050611c99565b611bdd613261565b60ff168160ff161415611bf457611bca8683613266565b611bfc6132fa565b60ff168160ff1610158015611c1d5750611c146132ff565b60ff168160ff16105b15611c59576000611c2c6132fa565b820390506060611c3d828986613304565b909450905083611c4c8261339d565b9550955050505050611c99565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b6000611caa615e27565b611cb2615e27565b600060e0820181905280611cc68787613094565b9096509150611cd58787613266565b60208501529550611ce68787613266565b60408501529550611cf78787611b0e565b60608501529550611d088787611b0e565b60808501529550611d198787613094565b60a08501529550611d2a8787613094565b92845260c0840192909252509590945092505050565b611d48615e27565b60405180610100016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e001518152509050919050565b611db1615df3565b6040805160608101825260ff851681526020808201859052825160008082529181018452611e0493830191611dfc565b611de9615df3565b815260200190600190039081611de15790505b5090526134af565b9392505050565b611e13615df3565b604080516001808252818301909252606091816020015b611e32615df3565b815260200190600190039081611e2a5790505090508281600081518110611e5557fe5b6020026020010181905250611e8660405180606001604052808760ff168152602001868152602001838152506134af565b95945050505050565b6000611e9961308f565b60ff16826060015160ff161415611ebc578151611eb590613516565b9050610ee6565b611ec46131ba565b60ff16826060015160ff161415611ee257611eb5826020015161353a565b611eea613261565b60ff16826060015160ff161415611f0c5781516080830151611eb59190613637565b611f146132fa565b60ff16826060015160ff161415611f4d57611f2d615df3565b611f3a8360400151613688565b9050611f4581611e8f565b915050610ee6565b611f556137ea565b60ff16826060015160ff161415611f6e57508051610ee6565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b611fbd8260200151826137ef565b82602001819052505050565b611fd78260400151826137ef565b82604001819052505050565b60008080613ab16001851415612008575060029250600091506003905061386d612797565b6002851415612026575060029250600091506003905061386d612797565b6003851415612044575060029250600091506003905061386d612797565b60048514156120625750600292506000915060049050613ad0612797565b60058514156120805750600292506000915060079050613ad0612797565b600685141561209e5750600292506000915060049050613ad0612797565b60078514156120bc5750600292506000915060079050613ad0612797565b60088514156120da5750600392506000915060049050613ba0612797565b60098514156120f85750600392506000915060049050613ba0612797565b600a851415612116575060029250600091506019905061386d612797565b600b851415612134575060029250600091506007905061386d612797565b60108514156121515750600292506000915082905061386d612797565b601185141561216e5750600292506000915082905061386d612797565b601285141561218b5750600292506000915082905061386d612797565b60138514156121a85750600292506000915082905061386d612797565b60148514156121c557506002925060009150829050613c8b612797565b60158514156121e257506001925060009150829050613ce8612797565b60168514156121ff5750600292506000915082905061386d612797565b601785141561221c5750600292506000915082905061386d612797565b60188514156122395750600292506000915082905061386d612797565b601985141561225657506001925060009150829050613d56612797565b601a851415612274575060029250600091506004905061386d612797565b601b851415612292575060029250600091506004905061386d612797565b601c8514156122b0575060029250600091506004905061386d612797565b601d8514156122ce575060029250600091506004905061386d612797565b60208514156122ec5750600192506000915060079050613d99612797565b602185141561230a5750600192506000915060039050613dc4612797565b6022851415612328575060029250600091506008905061386d612797565b6023851415612347575060019250600091506102589050613de7612797565b603085141561236457506001925060009150829050613fc8612797565b603185141561238157506000925082915060019050613fd5612797565b603285141561239e57506000925082915060019050613ff2612797565b60338514156123bc575060019250600091506002905061400f612797565b60348514156123da5750600192506000915060049050614028612797565b60358514156123f85750600292506000915060049050614068612797565b6036851415612415575060009250829150600290506140da612797565b603785141561243257506000925082915060019050614117612797565b603885141561244f5750600192506000915082905061413a612797565b603985141561246c5750600092506001915081905061415b612797565b603a8514156124895750600092508291506002905061416b612797565b603b8514156124a6575060009250829150600190506115e0612797565b603c8514156124c357506000925082915060019050614198612797565b603d8514156124e0575060019250600091508290506141ae612797565b60408514156124fd575060019250600091508290506141f1612797565b604185141561251b5750600292506000915060019050614233612797565b604285141561253957506003925060009150600190506142a1612797565b6043851415612557575060029250600091506001905061433b612797565b6044851415612575575060039250600091506001905061437f612797565b6050851415612592575060029250600091508290506143ef612797565b60518514156125b05750600392506000915060289050614492612797565b60528514156125ce5750600192506000915060029050614546612797565b60538514156125eb5750600192508291506003905061458a612797565b60548514156126095750600292506001915060299050614610612797565b6060851415612626575060009250829150606490506115e0612797565b606185141561264457506001925060009150606490506146d5612797565b6070851415612662575060019250600091506064905061471b612797565b607285141561267f575060009250829150602890506147a2612797565b607385141561269c575060009250829150600590506147f9612797565b60748514156126b9575060009250829150600a9050614802612797565b60758514156126d65750600192506000915081905061480f612797565b60768514156126f357506000925082915060019050614849612797565b60778514156127105750600092508291506019905061485d612797565b607885141561272e57506002925060009150601990506148a7612797565b607985141561274c5750600392506000915060199050614917612797565b607b851415612769575060009250829150600a905061499f612797565b608085141561278857506004925060009150614e2090506149e1612797565b50600092508291508190506147f95b9193509193565b60408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051908201209082015160c0015114156127fa576127f58160200151614b6c565b6115e0565b6020015160c08101519052565b61280f615df3565b6040805160008082526020820190925261284991612843565b612830615df3565b8152602001906001900390816128285790505b5061339d565b905090565b8051516020808301515160408051808201909152600a8152692124a9afa4a7282622a760b11b92810192909252600019830192146128cd5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105de5781810151838201526020016105c6565b50604080830151518151808301909252600a8252692124a9afa4a7282622a760b11b602083015260018301146129445760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105de5781810151838201526020016105c6565b5081606001515181600101146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b815250906129bf5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105de5781810151838201526020016105c6565b508160a001515181146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b81525090612a375760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105de5781810151838201526020016105c6565b5081608001515181600202146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b81525090612ab25760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105de5781810151838201526020016105c6565b5060008080805b84811015612b24578560a001518181518110612ad157fe5b60200260200101518401935085608001518181518110612aed57fe5b602002602001015183019250856080015181860181518110612b0b57fe5b6020026020010151820191508080600101915050612ab9565b50612c6661080e6040518061018001604052808860c001516001600160401b03168152602001866001600160401b031681526020018860000151600081518110612b6a57fe5b6020026020010151815260200188600001518881518110612b8757fe5b602002602001015181526020018860200151600081518110612ba557fe5b6020026020010151815260200188602001518881518110612bc257fe5b602002602001015181526020018860400151600081518110612be057fe5b6020026020010151815260200188604001518881518110612bfd57fe5b60200260200101518152602001856001600160401b031681526020018860600151600081518110612c2a57fe5b6020026020010151815260200188606001518881518110612c4757fe5b60200260200101518152602001846001600160401b03168152506116a7565b5050505050565b6000818381612c7857fe5b06828481612c8257fe5b04019392505050565b6000611e866040518061018001604052808663ffffffff166001600160401b031681526020018760a001518581518110612cc157fe5b60200260200101516001600160401b0316815260200187600001518581518110612ce757fe5b6020026020010151815260200187600001518560010181518110612d0757fe5b6020026020010151815260200187602001518581518110612d2457fe5b6020026020010151815260200187602001518560010181518110612d4457fe5b6020026020010151815260200187604001518581518110612d6157fe5b6020026020010151815260200187604001518560010181518110612d8157fe5b6020026020010151815260200187608001518581518110612d9e57fe5b60200260200101516001600160401b0316815260200187606001518581518110612dc457fe5b6020026020010151815260200187606001518560010181518110612de457fe5b60200260200101518152602001876080015185870181518110612e0357fe5b60200260200101516001600160401b03168152506116a7565b6000818381612e2757fe5b049392505050565b612e3881614b76565b60065550565b600580546002919060ff19166001836119b1565b7f6b9d7e7b7a60864e1b42794359b85e4b2477cda53bc2fb9bc2f8a71c1caf1c69816000015182602001518360400151846060015185608001518660a001518760c0015160035460405180806020018060200180602001806020018060200180602001896001600160401b03166001600160401b0316815260200188815260200187810387528f818151815260200191508051906020019060200280838360005b83811015612f0b578181015183820152602001612ef3565b5050505090500187810386528e818151815260200191508051906020019060200280838360005b83811015612f4a578181015183820152602001612f32565b5050505090500187810385528d818151815260200191508051906020019060200280838360005b83811015612f89578181015183820152602001612f71565b5050505090500187810384528c818151815260200191508051906020019060200280838360005b83811015612fc8578181015183820152602001612fb0565b5050505090500187810383528b818151815260200191508051906020019060200280838360005b83811015613007578181015183820152602001612fef565b5050505090500187810382528a818151815260200191508051906020019060200280838360005b8381101561304657818101518382015260200161302e565b505050509050019e50505050505050505050505050505060405180910390a150565b6000808260010184848151811061307b57fe5b016020015190925060f81c90509250929050565b600090565b600080828451101580156130ac575060208385510310155b6130e9576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b602083016130fd858563ffffffff614cb416565b915091509250929050565b613110615df3565b6040805160a0810182528381528151606081018352600080825260208281018290528451828152808201865293949085019390830191613166565b613153615df3565b81526020019060019003908161314b5790505b509052815260408051600080825260208281019093529190920191906131a2565b61318f615df3565b8152602001906001900390816131875790505b50815260006020820152600160409091015292915050565b600190565b60006131c9615df3565b826000806131d5615df3565b60006131e18986613068565b90955093506131f08986613068565b9095509250600160ff851614156132115761320b8986611b0e565b90955091505b61321b8986614cd0565b9095509050600160ff851614156132465784613238848385611e0b565b965096505050505050611c99565b846132518483611da9565b9650965050505050509250929050565b600290565b6000613270615df3565b82845110158015613285575060408385510310155b6132c1576040805162461bcd60e51b81526020600482015260086024820152671d1bc81cda1bdc9d60c21b604482015290519081900360640190fd5b6000806132ce8686614cd0565b90945091506132dd8685613094565b9094509050836132ed8383614ce7565b9350935050509250929050565b600390565b600c90565b60006060600083905060608660ff1660405190808252806020026020018201604052801561334c57816020015b613339615df3565b8152602001906001900390816133315790505b50905060005b8760ff168160ff1610156133905761336a8784611b0e565b8351849060ff851690811061337b57fe5b60209081029190910101529250600101613352565b5090969095509350505050565b6133a5615df3565b6133af8251614d98565b613400576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b83518110156134375783818151811061341a57fe5b602002602001015160800151820191508080600101915050613405565b506040805160a0810182526000808252825160608101845281815260208181018390528451838152808201865293949085019391929083019190613491565b61347e615df3565b8152602001906001900390816134765790505b50905281526020810194909452600360408501526060909301525090565b6134b7615df3565b6040805160a08101825260008082526020808301869052835182815290810184529192830191906134fe565b6134eb615df3565b8152602001906001900390816134e35790505b50815260016020820181905260409091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b600060028260400151511061354b57fe5b6040820151516135b05761355d6131ba565b8251602080850151604080516001600160f81b031960f896871b8116828601529490951b909316602185015260228085019190915282518085039091018152604290930190915281519101209050610ee6565b6135b86131ba565b82600001516135de84604001516000815181106135d157fe5b6020026020010151611e8f565b8460200151604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b60006136416132fa565b8383604051602001808460ff1660ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b613690615df3565b6008825111156136de576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b6060825160405190808252806020026020018201604052801561370b578160200160208202803883390190505b508051909150600160005b8281101561376e5761372d8682815181106135d157fe5b84828151811061373957fe5b60200260200101818152505085818151811061375157fe5b602002602001015160800151820191508080600101915050613716565b506000835184604051602001808360ff1660ff1660f81b8152600101828051906020019060200280838360005b838110156137b357818101518382015260200161379b565b50505050905001925050506040516020818303038152906040528051906020012090506137e08183614ce7565b9695505050505050565b606490565b6137f7615df3565b6040805160028082526060828101909352816020015b613815615df3565b81526020019060019003908161380d579050509050828160008151811061383857fe5b6020026020010181905250838160018151811061385157fe5b602002602001018190525061386581613688565b949350505050565b613875615df3565b6138828260c00151614d9f565b905061388c615df3565b6138998360c00151614d9f565b90506138a482614de1565b15806138b657506138b481614de1565b155b156138cb576138c483614dec565b50506115e0565b8151815161012085015160009060ff16600114156138ec5750818101613ab3565b61012086015160ff16600214156139065750818102613ab3565b61012086015160ff16600314156139205750808203613ab3565b61012086015160ff16600a141561393a575080820a613ab3565b61012086015160ff16600b1415613954575080820b613ab3565b61012086015160ff166010141561396e5750808210613ab3565b61012086015160ff16601114156139885750808211613ab3565b61012086015160ff16601214156139a25750808212613ab3565b61012086015160ff16601314156139bc5750808213613ab3565b61012086015160ff16601614156139d65750818116613ab3565b61012086015160ff16601714156139f05750818117613ab3565b61012086015160ff1660181415613a0a5750818118613ab3565b61012086015160ff16601a1415613a24575080821a613ab3565b61012086015160ff16601b1415613a3e575080821b613ab3565b61012086015160ff16601c1415613a58575080821c613ab3565b61012086015160ff16601d1415613a72575080821d613ab3565b61012086015160ff1660221415613ab1575060408051602080820185905281830184905282518083038401815260609092019092528051910120613ab3565bfe5b610844613abf82613108565b60c08801519063ffffffff614e0916565b613ad8615df3565b613ae58260c00151614d9f565b9050613aef615df3565b613afc8360c00151614d9f565b9050613b0782614de1565b1580613b195750613b1781614de1565b155b80613b2357508051155b15613b31576138c483614dec565b8151815161012085015160009060ff1660041415613b525750808204613ab3565b61012086015160ff1660051415613b6c5750808205613ab3565b61012086015160ff1660061415613b865750808206613ab3565b61012086015160ff1660071415613ab15750808207613ab3565b613ba8615df3565b613bb58260c00151614d9f565b9050613bbf615df3565b613bcc8360c00151614d9f565b9050613bd6615df3565b613be38460c00151614d9f565b9050613bee83614de1565b1580613c005750613bfe82614de1565b155b80613c115750613c0f81614de1565b155b80613c1b57508051155b15613c3157613c2984614dec565b5050506115e0565b82518251825161012087015160009060ff1660081415613c5657818385089050613c6e565b61012088015160ff1660091415613ab1578183850990505b610dbb613c7a82613108565b60c08a01519063ffffffff614e0916565b613c93615df3565b613ca08260c00151614d9f565b9050613caa615df3565b613cb78360c00151614d9f565b9050611af7613cd7613cc883611e8f565b613cd185611e8f565b14614e33565b60c08501519063ffffffff614e0916565b613cf0615df3565b613cfd8260c00151614d9f565b9050613d0881614de1565b613d2f57613d2a613d196000613108565b60c08401519063ffffffff614e0916565b611829565b80518015613d50613d3f82613108565b60c08601519063ffffffff614e0916565b50505050565b613d5e615df3565b613d6b8260c00151614d9f565b9050613d7681614de1565b613d8957613d8382614dec565b506115e0565b80518019613d50613d3f82613108565b613da1615df3565b613dae8260c00151614d9f565b9050611829613d19613dbf83611e8f565b613108565b613dcc615df3565b613dd98260c00151614d9f565b9050611829613d1982614e55565b613def615df3565b613dfc8260c00151614d9f565b9050613e0781614eba565b1580613e195750806040015151600714155b15613e2757613d8382614dec565b604081015160005b6007811015613e6957613e54828281518110613e4757fe5b6020026020010151614de1565b613e6157613c2984614dec565b600101613e2f565b50613e72615e85565b60005b6019811015613ed65760406003821602836004830481518110613e9457fe5b602002602001015160000151901c6001600160401b03168260058381613eb657fe5b04600584066005020160198110613ec957fe5b6020020152600101613e75565b50613ee081614ec7565b604080516007808252610100820190925291925060609190816020015b613f05615df3565b815260200190600190039081613efd57905050905060005b6007811015613f4f57613f306000613108565b828281518110613f3c57fe5b6020908102919091010152600101613f1d565b5060005b6019811015613faa57604060038216028360058304600584066005020160198110613f7a57fe5b6020020151901b826004830481518110613f9057fe5b602090810291909101015180519091179052600101613f53565b50612c66613fb78261339d565b60c08701519063ffffffff614e0916565b6118298160c00151614d9f565b60208101516080015160c08201516115e09163ffffffff614e0916565b60208101516060015160c08201516115e09163ffffffff614e0916565b61401c8160c00151614d9f565b60209091015160600152565b614030615df3565b61403d8260c00151614d9f565b905061404881615ab8565b61405557613d8382614dec565b61405e81611e8f565b6020830151525050565b614070615df3565b61407d8260c00151614d9f565b9050614087615df3565b6140948360c00151614d9f565b905061409f82615ab8565b15806140b157506140af81614de1565b155b156140bf576138c483614dec565b805115611af7576140cf82611e8f565b602084015152505050565b60c08101515160009015801561410957506140f6611368612807565b614107836020015160200151611e8f565b145b9050611829613d1982614e33565b8051516115e090614129906001615ac5565b60c08301519063ffffffff614e0916565b6115e061414a8260c00151614d9f565b60e08301519063ffffffff614e0916565b6115e06141298260e00151614d9f565b60e0810151516000901580156141095750614187611368612807565b614107836020015160400151611e8f565b6115e0614129826020015160c001516001615ac5565b6141b6615df3565b6141c38260c00151614d9f565b90506141ce81615ab8565b6141db57613d8382614dec565b6141e481611e8f565b602083015160c001525050565b6141f9615df3565b6142068260c00151614d9f565b60c083015190915061421e908263ffffffff614e0916565b60c0820151611829908263ffffffff614e0916565b61423b615df3565b6142488260c00151614d9f565b9050614252615df3565b61425f8360c00151614d9f565b60c0840151909150614277908263ffffffff614e0916565b60c083015161428c908363ffffffff614e0916565b60c0830151611af7908263ffffffff614e0916565b6142a9615df3565b6142b68260c00151614d9f565b90506142c0615df3565b6142cd8360c00151614d9f565b90506142d7615df3565b6142e48460c00151614d9f565b60c08501519091506142fc908263ffffffff614e0916565b60c0840151614311908363ffffffff614e0916565b60c0840151614326908463ffffffff614e0916565b60c0840151613d50908263ffffffff614e0916565b614343615df3565b6143508260c00151614d9f565b905061435a615df3565b6143678360c00151614d9f565b60c084015190915061428c908363ffffffff614e0916565b614387615df3565b6143948260c00151614d9f565b905061439e615df3565b6143ab8360c00151614d9f565b90506143b5615df3565b6143c28460c00151614d9f565b60c08501519091506143da908463ffffffff614e0916565b60c0840151614326908363ffffffff614e0916565b6143f7615df3565b6144048260c00151614d9f565b905061440e615df3565b61441b8360c00151614d9f565b905061442682614de1565b1580614438575061443681614eba565b155b80614452575061444781615b76565b60ff16826000015110155b15614460576138c483614dec565b611af7816040015183600001518151811061447757fe5b60200260200101518460c00151614e0990919063ffffffff16565b61449a615df3565b6144a78260c00151614d9f565b90506144b1615df3565b6144be8360c00151614d9f565b90506144c8615df3565b6144d58460c00151614d9f565b90506144e083614de1565b15806144f257506144f082614eba565b155b8061450c575061450182615b76565b60ff16836000015110155b1561451a57613c2984614dec565b60408201518351815183918391811061452f57fe5b6020026020010181905250612c66613fb78261339d565b61454e615df3565b61455b8260c00151614d9f565b905061456681614eba565b61457357613d8382614dec565b611829613d1961458283615b76565b60ff16613108565b614592615df3565b61459f8260c00151614d9f565b90506145a9615df3565b6145b68360e00151614d9f565b90506145c182614de1565b15806145d357506145d181614eba565b155b806145ed57506145e281615b76565b60ff16826000015110155b156145fb576138c483614dec565b60e0830151614460908263ffffffff614e0916565b614618615df3565b6146258260c00151614d9f565b905061462f615df3565b61463c8360c00151614d9f565b9050614646615df3565b6146538460e00151614d9f565b905061465e81614eba565b1580614670575061466e83614de1565b155b8061468a575061467f81615b76565b60ff16836000015110155b1561469857613c2984614dec565b6040810151835181518491839181106146ad57fe5b6020026020010181905250612c666146c48261339d565b60e08701519063ffffffff614e0916565b80608001516146ea6113688360c00151614d9f565b6040805160208082019490945280820192909252805180830382018152606090920190528051910120608090910152565b614723615df3565b6147308260c00151614d9f565b90506127108160800151118061474c575061474a81615b9d565b155b1561475a57613d8382614dec565b816060015161476882611e8f565b6040516020018083815260200182815260200192505050604051602081830303815290604052805190602001208260600181815250505050565b6147aa615df3565b6147be826101400151836101600151611b0e565b60c08401519092506147d791508263ffffffff614e0916565b6147ed82604001516147e883611e8f565b615c9b565b60409092019190915250565b6115e081614dec565b6115e08160200151615cc7565b614817615df3565b6148248260c00151614d9f565b905061482f81614de1565b61483c57613d8382614dec565b51602082015160a0015250565b6115e0614129826020015160a00151613108565b60408051600160f81b60208083019190915260006021830181905260228084019190915283518084039091018152604290920190925280519101206115e090614129906001615ac5565b6148af615df3565b6148bc8260c00151614d9f565b90506148c6615df3565b6148d38360c00151614d9f565b90506148de82614de1565b15806148f057506148ee81615ab8565b155b156148fe576138c483614dec565b611af7613cd7836000015161491284611e8f565b611da9565b61491f615df3565b61492c8260c00151614d9f565b9050614936615df3565b6149438360c00151614d9f565b905061494d615df3565b61495a8460c00151614d9f565b905061496583614de1565b1580614977575061497581615ab8565b155b1561498557613c2984614dec565b613d50613d3f846000015161499984611e8f565b85611e0b565b604080516000808252602082019092526060916149d2565b6149bf615df3565b8152602001906001900390816149b75790505b509050611829613d198261339d565b6149e9615df3565b6149f68260c00151614d9f565b9050614a00615df3565b614a0d8360c00151614d9f565b9050614a17615df3565b614a248460c00151614d9f565b9050614a2e615df3565b614a3b8560c00151614d9f565b9050614a4684614de1565b1580614a585750614a5683614de1565b155b80614a695750614a6782614de1565b155b80614a7a5750614a7881614de1565b155b15614a885761134785614dec565b83518351835115801590614a9e57508351600114155b15614acc57614ac1614ab06000613108565b60c08901519063ffffffff614e0916565b5050505050506115e0565b83518351604080516000808252602080830180855285905260ff601b9096019586168385015260608301889052608083018790529251909260019260a080820193601f1981019281900390910190855afa158015614b2e573d6000803e3d6000fd5b505050602060405103519050614b60614b4f826001600160a01b0316613108565b60c08c01519063ffffffff614e0916565b50505050505050505050565b600160e090910152565b6000815b600181511115614c975760606002825160010181614b9457fe5b04604051908082528060200260200182016040528015614bbe578160200160208202803883390190505b50905060005b8151811015614c8f578251816002026001011015614c5757828160020281518110614beb57fe5b6020026020010151838260020260010181518110614c0557fe5b6020026020010151604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120828281518110614c4657fe5b602002602001018181525050614c87565b828160020281518110614c6657fe5b6020026020010151828281518110614c7a57fe5b6020026020010181815250505b600101614bc4565b509050614b7a565b80600081518110614ca457fe5b6020026020010151915050919050565b60008160200183511015614cc757600080fd5b50016020015190565b600080602083016130fd858563ffffffff614cb416565b614cef615df3565b6040805160a0810182528481528151606081018352600080825260208281018290528451828152808201865293949085019390830191614d45565b614d32615df3565b815260200190600190039081614d2a5790505b50905281526040805160008082526020828101909352919092019190614d81565b614d6e615df3565b815260200190600190039081614d665790505b508152600260208201526040019290925250919050565b6008101590565b614da7615df3565b614daf615df3565b8260200151600184600001510381518110614dc657fe5b60209081029190910101518351600019018452915050919050565b6060015160ff161590565b614df58161279e565b60c081015160009081905260e09091015152565b808260200151836000015181518110614e1e57fe5b60209081029190910101525080516001019052565b614e3b615df3565b8115614e4b57611eb56001613108565b611eb56000613108565b614e5d615df3565b816060015160ff1660021415614ea45760405162461bcd60e51b8152600401808060200182810382526021815260200180615f1b6021913960400191505060405180910390fd5b614eb4826060015160ff16613108565b92915050565b6060015160ff1660031490565b614ecf615e85565b614ed7615ea4565b614edf615ea4565b614ee7615e85565b614eef615ec2565b60405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060008090505b6018811015615aad576080878101516060808a01516040808c01516020808e01518e511890911890921890931889526101208b01516101008c015160e08d015160c08e015160a08f0151181818189089018190526101c08b01516101a08c01516101808d01516101608e01516101408f0151181818189289019283526102608b01516102408c01516102208d01516102008e01516101e08f015118181818918901919091526103008a01516102e08b01516102c08c01516102a08d01516102808e0151181818189288018390526001600160401b0360028202166001603f1b91829004179092188652510485600260200201516002026001600160401b03161785600060200201511884600160200201526001603f1b85600360200201518161513b57fe5b0485600360200201516002026001600160401b03161785600160200201511884600260200201526001603f1b85600460200201518161517657fe5b0485600460200201516002026001600160401b0316178560026005811061519957fe5b602002015118606085015284516001603f1b9086516060808901519390920460029091026001600160401b031617909118608086810191825286518a5118808b5287516020808d018051909218825289516040808f0180519092189091528a518e8801805190911890528a51948e0180519095189094528901805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291880180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292870180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a01805190911890529084525163100000009060208901516001600160401b03641000000000909102169190041761010084015260408701516001603d1b9060408901516001600160401b03600890910216919004176101608401526060870151628000009060608901516001600160401b036502000000000090910216919004176102608401526080870151654000000000009060808901516001600160401b036204000090910216919004176102c084015260a08701516001603f1b900487600560200201516002026001600160401b0316178360026019811061540357fe5b602002015260c0870151621000008104651000000000009091026001600160401b039081169190911760a085015260e0880151664000000000000081046104009091028216176101a08501526101008801516208000081046520000000000090910282161761020085015261012088015160048082029092166001603e1b909104176103008501526101408801516101408901516001600160401b036001603e1b90910216919004176080840152610160870151670400000000000000906101608901516001600160401b036040909102169190041760e084015261018087015162200000906101808901516001600160401b036508000000000090910216919004176101408401526101a08701516602000000000000906101a08901516001600160401b0361800090910216919004176102408401526101c08701516008906101c08901516001600160401b036001603d1b90910216919004176102a08401526101e0870151641000000000906101e08901516001600160401b03631000000090910216919004176020840152610200808801516102008901516001600160401b0366800000000000009091021691900417610120840152610220870151648000000000906102208901516001600160401b036302000000909102169190041761018084015261024087015165080000000000906102408901516001600160401b036220000090910216919004176101e0840152610260870151610100906102608901516001600160401b03600160381b90910216919004176102e0840152610280870151642000000000906102808901516001600160401b036308000000909102169190041760608401526102a087015165100000000000906102a08901516001600160401b0362100000909102169190041760c08401526102c08701516302000000906102c08901516001600160401b0364800000000090910216919004176101c08401526102e0870151600160381b906102e08901516001600160401b036101009091021691900417610220840152610300870151660400000000000090048760186020020151614000026001600160401b031617836014602002015282600a602002015183600560200201511916836000602002015118876000602002015282600b602002015183600660200201511916836001602002015118876001602002015282600c602002015183600760200201511916836002602002015118876002602002015282600d602002015183600860200201511916836003602002015118876003602002015282600e602002015183600960200201511916836004602002015118876004602002015282600f602002015183600a602002015119168360056020020151188760056020020152826010602002015183600b602002015119168360066020020151188760066020020152826011602002015183600c602002015119168360076020020151188760076020020152826012602002015183600d602002015119168360086020020151188760086020020152826013602002015183600e602002015119168360096020020151188760096020020152826014602002015183600f6020020151191683600a60200201511887600a602002015282601560200201518360106020020151191683600b60200201511887600b602002015282601660200201518360116020020151191683600c60200201511887600c602002015282601760200201518360126020020151191683600d60200201511887600d602002015282601860200201518360136020020151191683600e60200201511887600e602002015282600060200201518360146020020151191683600f60200201511887600fa9b57fe5b60200201518751188752600101615016565b509495945050505050565b6060015160ff1660011490565b615acd615df3565b6040805160a0810182528481528151606081018352600080825260208281018290528451828152808201865293949085019390830191615b23565b615b10615df3565b815260200190600190039081615b085790505b50905281526040805160008082526020828101909352919092019190615b5f565b615b4c615df3565b815260200190600190039081615b445790505b508152606460208201526040019290925250919050565b606081015160009060ff1660031415615b955750604081015151610ee6565b506001610ee6565b606081015160009060ff16615bb457506001610ee6565b606082015160ff1660011415615bcc57506000610ee6565b606082015160ff1660021415615c20576040805162461bcd60e51b81526020600482015260146024820152736d75737420686176652066756c6c2076616c756560601b604482015290519081900360640190fd5b606082015160ff1660031415615c835760408201515160005b81811015615c7857615c6184604001518281518110615c5457fe5b6020026020010151615b9d565b615c7057600092505050610ee6565b600101615c39565b506001915050610ee6565b606082015160ff1660641415611f6e57506000610ee6565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600260e090910152565b604051806101800160405280615ce5615e27565b8152602001615cf2615e27565b81526000602082018190526040820181905260608201819052608082015260a001615d1b615ee1565b8152602001615d28615ee1565b81526000602082018190526040820181905260608083015260809091015290565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081019190915290565b6040518060e0016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160006001600160401b031681525090565b6040518060a0016040528060008152602001615e0d615efb565b815260606020820181905260006040830181905291015290565b6040805161010081019091526000815260208101615e43615df3565b8152602001615e50615df3565b8152602001615e5d615df3565b8152602001615e6a615df3565b81526000602082018190526040820181905260609091015290565b6040518061032001604052806019906020820280388339509192915050565b6040518060a001604052806005906020820280388339509192915050565b6040518061030001604052806018906020820280388339509192915050565b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fe56616c7565206d757374206861766520612076616c6964207479706520636f6465a265627a7a723158205a749fff4c642ac93dc538d7197710b34a0a155c4fb975267647fdadd6aa83d764736f6c63430005110032"

// DeployExecutionChallenge deploys a new Ethereum contract, binding an instance of ExecutionChallenge to it.
func DeployExecutionChallenge(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ExecutionChallenge, error) {
	parsed, err := abi.JSON(strings.NewReader(ExecutionChallengeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ExecutionChallengeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ExecutionChallenge{ExecutionChallengeCaller: ExecutionChallengeCaller{contract: contract}, ExecutionChallengeTransactor: ExecutionChallengeTransactor{contract: contract}, ExecutionChallengeFilterer: ExecutionChallengeFilterer{contract: contract}}, nil
}

// ExecutionChallenge is an auto generated Go binding around an Ethereum contract.
type ExecutionChallenge struct {
	ExecutionChallengeCaller     // Read-only binding to the contract
	ExecutionChallengeTransactor // Write-only binding to the contract
	ExecutionChallengeFilterer   // Log filterer for contract events
}

// ExecutionChallengeCaller is an auto generated read-only Go binding around an Ethereum contract.
type ExecutionChallengeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExecutionChallengeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ExecutionChallengeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExecutionChallengeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ExecutionChallengeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExecutionChallengeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ExecutionChallengeSession struct {
	Contract     *ExecutionChallenge // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ExecutionChallengeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ExecutionChallengeCallerSession struct {
	Contract *ExecutionChallengeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ExecutionChallengeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ExecutionChallengeTransactorSession struct {
	Contract     *ExecutionChallengeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ExecutionChallengeRaw is an auto generated low-level Go binding around an Ethereum contract.
type ExecutionChallengeRaw struct {
	Contract *ExecutionChallenge // Generic contract binding to access the raw methods on
}

// ExecutionChallengeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ExecutionChallengeCallerRaw struct {
	Contract *ExecutionChallengeCaller // Generic read-only contract binding to access the raw methods on
}

// ExecutionChallengeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ExecutionChallengeTransactorRaw struct {
	Contract *ExecutionChallengeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewExecutionChallenge creates a new instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallenge(address common.Address, backend bind.ContractBackend) (*ExecutionChallenge, error) {
	contract, err := bindExecutionChallenge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallenge{ExecutionChallengeCaller: ExecutionChallengeCaller{contract: contract}, ExecutionChallengeTransactor: ExecutionChallengeTransactor{contract: contract}, ExecutionChallengeFilterer: ExecutionChallengeFilterer{contract: contract}}, nil
}

// NewExecutionChallengeCaller creates a new read-only instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallengeCaller(address common.Address, caller bind.ContractCaller) (*ExecutionChallengeCaller, error) {
	contract, err := bindExecutionChallenge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeCaller{contract: contract}, nil
}

// NewExecutionChallengeTransactor creates a new write-only instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallengeTransactor(address common.Address, transactor bind.ContractTransactor) (*ExecutionChallengeTransactor, error) {
	contract, err := bindExecutionChallenge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeTransactor{contract: contract}, nil
}

// NewExecutionChallengeFilterer creates a new log filterer instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallengeFilterer(address common.Address, filterer bind.ContractFilterer) (*ExecutionChallengeFilterer, error) {
	contract, err := bindExecutionChallenge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeFilterer{contract: contract}, nil
}

// bindExecutionChallenge binds a generic wrapper to an already deployed contract.
func bindExecutionChallenge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ExecutionChallengeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ExecutionChallenge *ExecutionChallengeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ExecutionChallenge.Contract.ExecutionChallengeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ExecutionChallenge *ExecutionChallengeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ExecutionChallengeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ExecutionChallenge *ExecutionChallengeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ExecutionChallengeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ExecutionChallenge *ExecutionChallengeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ExecutionChallenge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ExecutionChallenge *ExecutionChallengeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ExecutionChallenge *ExecutionChallengeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.contract.Transact(opts, method, params...)
}

// BisectAssertion is a paid mutator transaction binding the contract method 0xefaa0772.
//
// Solidity: function bisectAssertion(bytes32[] _machineHashes, bytes32[] _inboxHashes, bytes32[] _messageAccs, bytes32[] _logAccs, uint64[] _outCounts, uint64[] _gases, uint64 _totalSteps) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) BisectAssertion(opts *bind.TransactOpts, _machineHashes [][32]byte, _inboxHashes [][32]byte, _messageAccs [][32]byte, _logAccs [][32]byte, _outCounts []uint64, _gases []uint64, _totalSteps uint64) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "bisectAssertion", _machineHashes, _inboxHashes, _messageAccs, _logAccs, _outCounts, _gases, _totalSteps)
}

// BisectAssertion is a paid mutator transaction binding the contract method 0xefaa0772.
//
// Solidity: function bisectAssertion(bytes32[] _machineHashes, bytes32[] _inboxHashes, bytes32[] _messageAccs, bytes32[] _logAccs, uint64[] _outCounts, uint64[] _gases, uint64 _totalSteps) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) BisectAssertion(_machineHashes [][32]byte, _inboxHashes [][32]byte, _messageAccs [][32]byte, _logAccs [][32]byte, _outCounts []uint64, _gases []uint64, _totalSteps uint64) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.BisectAssertion(&_ExecutionChallenge.TransactOpts, _machineHashes, _inboxHashes, _messageAccs, _logAccs, _outCounts, _gases, _totalSteps)
}

// BisectAssertion is a paid mutator transaction binding the contract method 0xefaa0772.
//
// Solidity: function bisectAssertion(bytes32[] _machineHashes, bytes32[] _inboxHashes, bytes32[] _messageAccs, bytes32[] _logAccs, uint64[] _outCounts, uint64[] _gases, uint64 _totalSteps) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) BisectAssertion(_machineHashes [][32]byte, _inboxHashes [][32]byte, _messageAccs [][32]byte, _logAccs [][32]byte, _outCounts []uint64, _gases []uint64, _totalSteps uint64) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.BisectAssertion(&_ExecutionChallenge.TransactOpts, _machineHashes, _inboxHashes, _messageAccs, _logAccs, _outCounts, _gases, _totalSteps)
}

// ChooseSegment is a paid mutator transaction binding the contract method 0x79a9ad85.
//
// Solidity: function chooseSegment(uint256 _segmentToChallenge, bytes _proof, bytes32 _bisectionRoot, bytes32 _bisectionHash) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) ChooseSegment(opts *bind.TransactOpts, _segmentToChallenge *big.Int, _proof []byte, _bisectionRoot [32]byte, _bisectionHash [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "chooseSegment", _segmentToChallenge, _proof, _bisectionRoot, _bisectionHash)
}

// ChooseSegment is a paid mutator transaction binding the contract method 0x79a9ad85.
//
// Solidity: function chooseSegment(uint256 _segmentToChallenge, bytes _proof, bytes32 _bisectionRoot, bytes32 _bisectionHash) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) ChooseSegment(_segmentToChallenge *big.Int, _proof []byte, _bisectionRoot [32]byte, _bisectionHash [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ChooseSegment(&_ExecutionChallenge.TransactOpts, _segmentToChallenge, _proof, _bisectionRoot, _bisectionHash)
}

// ChooseSegment is a paid mutator transaction binding the contract method 0x79a9ad85.
//
// Solidity: function chooseSegment(uint256 _segmentToChallenge, bytes _proof, bytes32 _bisectionRoot, bytes32 _bisectionHash) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) ChooseSegment(_segmentToChallenge *big.Int, _proof []byte, _bisectionRoot [32]byte, _bisectionHash [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ChooseSegment(&_ExecutionChallenge.TransactOpts, _segmentToChallenge, _proof, _bisectionRoot, _bisectionHash)
}

// InitializeBisection is a paid mutator transaction binding the contract method 0x02ad1e4e.
//
// Solidity: function initializeBisection(address _rollupAddress, address _asserter, address _challenger, uint256 _challengePeriodTicks, bytes32 _challengeState) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) InitializeBisection(opts *bind.TransactOpts, _rollupAddress common.Address, _asserter common.Address, _challenger common.Address, _challengePeriodTicks *big.Int, _challengeState [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "initializeBisection", _rollupAddress, _asserter, _challenger, _challengePeriodTicks, _challengeState)
}

// InitializeBisection is a paid mutator transaction binding the contract method 0x02ad1e4e.
//
// Solidity: function initializeBisection(address _rollupAddress, address _asserter, address _challenger, uint256 _challengePeriodTicks, bytes32 _challengeState) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) InitializeBisection(_rollupAddress common.Address, _asserter common.Address, _challenger common.Address, _challengePeriodTicks *big.Int, _challengeState [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.InitializeBisection(&_ExecutionChallenge.TransactOpts, _rollupAddress, _asserter, _challenger, _challengePeriodTicks, _challengeState)
}

// InitializeBisection is a paid mutator transaction binding the contract method 0x02ad1e4e.
//
// Solidity: function initializeBisection(address _rollupAddress, address _asserter, address _challenger, uint256 _challengePeriodTicks, bytes32 _challengeState) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) InitializeBisection(_rollupAddress common.Address, _asserter common.Address, _challenger common.Address, _challengePeriodTicks *big.Int, _challengeState [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.InitializeBisection(&_ExecutionChallenge.TransactOpts, _rollupAddress, _asserter, _challenger, _challengePeriodTicks, _challengeState)
}

// OneStepProof is a paid mutator transaction binding the contract method 0x082379bb.
//
// Solidity: function oneStepProof(bytes32 _afterInboxHash, bytes32 _firstMessage, bytes32 _firstLog, bytes _proof) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) OneStepProof(opts *bind.TransactOpts, _afterInboxHash [32]byte, _firstMessage [32]byte, _firstLog [32]byte, _proof []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "oneStepProof", _afterInboxHash, _firstMessage, _firstLog, _proof)
}

// OneStepProof is a paid mutator transaction binding the contract method 0x082379bb.
//
// Solidity: function oneStepProof(bytes32 _afterInboxHash, bytes32 _firstMessage, bytes32 _firstLog, bytes _proof) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) OneStepProof(_afterInboxHash [32]byte, _firstMessage [32]byte, _firstLog [32]byte, _proof []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.OneStepProof(&_ExecutionChallenge.TransactOpts, _afterInboxHash, _firstMessage, _firstLog, _proof)
}

// OneStepProof is a paid mutator transaction binding the contract method 0x082379bb.
//
// Solidity: function oneStepProof(bytes32 _afterInboxHash, bytes32 _firstMessage, bytes32 _firstLog, bytes _proof) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) OneStepProof(_afterInboxHash [32]byte, _firstMessage [32]byte, _firstLog [32]byte, _proof []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.OneStepProof(&_ExecutionChallenge.TransactOpts, _afterInboxHash, _firstMessage, _firstLog, _proof)
}

// TimeoutChallenge is a paid mutator transaction binding the contract method 0xced5c1bf.
//
// Solidity: function timeoutChallenge() returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) TimeoutChallenge(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "timeoutChallenge")
}

// TimeoutChallenge is a paid mutator transaction binding the contract method 0xced5c1bf.
//
// Solidity: function timeoutChallenge() returns()
func (_ExecutionChallenge *ExecutionChallengeSession) TimeoutChallenge() (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.TimeoutChallenge(&_ExecutionChallenge.TransactOpts)
}

// TimeoutChallenge is a paid mutator transaction binding the contract method 0xced5c1bf.
//
// Solidity: function timeoutChallenge() returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) TimeoutChallenge() (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.TimeoutChallenge(&_ExecutionChallenge.TransactOpts)
}

// ExecutionChallengeAsserterTimedOutIterator is returned from FilterAsserterTimedOut and is used to iterate over the raw logs and unpacked data for AsserterTimedOut events raised by the ExecutionChallenge contract.
type ExecutionChallengeAsserterTimedOutIterator struct {
	Event *ExecutionChallengeAsserterTimedOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeAsserterTimedOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeAsserterTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeAsserterTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeAsserterTimedOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeAsserterTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeAsserterTimedOut represents a AsserterTimedOut event raised by the ExecutionChallenge contract.
type ExecutionChallengeAsserterTimedOut struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAsserterTimedOut is a free log retrieval operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterAsserterTimedOut(opts *bind.FilterOpts) (*ExecutionChallengeAsserterTimedOutIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "AsserterTimedOut")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeAsserterTimedOutIterator{contract: _ExecutionChallenge.contract, event: "AsserterTimedOut", logs: logs, sub: sub}, nil
}

// WatchAsserterTimedOut is a free log subscription operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchAsserterTimedOut(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeAsserterTimedOut) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "AsserterTimedOut")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeAsserterTimedOut)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "AsserterTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAsserterTimedOut is a log parse operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseAsserterTimedOut(log types.Log) (*ExecutionChallengeAsserterTimedOut, error) {
	event := new(ExecutionChallengeAsserterTimedOut)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "AsserterTimedOut", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeBisectedAssertionIterator is returned from FilterBisectedAssertion and is used to iterate over the raw logs and unpacked data for BisectedAssertion events raised by the ExecutionChallenge contract.
type ExecutionChallengeBisectedAssertionIterator struct {
	Event *ExecutionChallengeBisectedAssertion // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeBisectedAssertionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeBisectedAssertion)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeBisectedAssertion)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeBisectedAssertionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeBisectedAssertionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeBisectedAssertion represents a BisectedAssertion event raised by the ExecutionChallenge contract.
type ExecutionChallengeBisectedAssertion struct {
	MachineHashes [][32]byte
	InboxHashes   [][32]byte
	MessageAccs   [][32]byte
	LogAccs       [][32]byte
	OutCounts     []uint64
	Gases         []uint64
	TotalSteps    uint64
	DeadlineTicks *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterBisectedAssertion is a free log retrieval operation binding the contract event 0x6b9d7e7b7a60864e1b42794359b85e4b2477cda53bc2fb9bc2f8a71c1caf1c69.
//
// Solidity: event BisectedAssertion(bytes32[] machineHashes, bytes32[] inboxHashes, bytes32[] messageAccs, bytes32[] logAccs, uint64[] outCounts, uint64[] gases, uint64 totalSteps, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterBisectedAssertion(opts *bind.FilterOpts) (*ExecutionChallengeBisectedAssertionIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "BisectedAssertion")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeBisectedAssertionIterator{contract: _ExecutionChallenge.contract, event: "BisectedAssertion", logs: logs, sub: sub}, nil
}

// WatchBisectedAssertion is a free log subscription operation binding the contract event 0x6b9d7e7b7a60864e1b42794359b85e4b2477cda53bc2fb9bc2f8a71c1caf1c69.
//
// Solidity: event BisectedAssertion(bytes32[] machineHashes, bytes32[] inboxHashes, bytes32[] messageAccs, bytes32[] logAccs, uint64[] outCounts, uint64[] gases, uint64 totalSteps, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchBisectedAssertion(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeBisectedAssertion) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "BisectedAssertion")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeBisectedAssertion)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "BisectedAssertion", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBisectedAssertion is a log parse operation binding the contract event 0x6b9d7e7b7a60864e1b42794359b85e4b2477cda53bc2fb9bc2f8a71c1caf1c69.
//
// Solidity: event BisectedAssertion(bytes32[] machineHashes, bytes32[] inboxHashes, bytes32[] messageAccs, bytes32[] logAccs, uint64[] outCounts, uint64[] gases, uint64 totalSteps, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseBisectedAssertion(log types.Log) (*ExecutionChallengeBisectedAssertion, error) {
	event := new(ExecutionChallengeBisectedAssertion)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "BisectedAssertion", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeChallengerTimedOutIterator is returned from FilterChallengerTimedOut and is used to iterate over the raw logs and unpacked data for ChallengerTimedOut events raised by the ExecutionChallenge contract.
type ExecutionChallengeChallengerTimedOutIterator struct {
	Event *ExecutionChallengeChallengerTimedOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeChallengerTimedOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeChallengerTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeChallengerTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeChallengerTimedOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeChallengerTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeChallengerTimedOut represents a ChallengerTimedOut event raised by the ExecutionChallenge contract.
type ExecutionChallengeChallengerTimedOut struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterChallengerTimedOut is a free log retrieval operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterChallengerTimedOut(opts *bind.FilterOpts) (*ExecutionChallengeChallengerTimedOutIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "ChallengerTimedOut")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeChallengerTimedOutIterator{contract: _ExecutionChallenge.contract, event: "ChallengerTimedOut", logs: logs, sub: sub}, nil
}

// WatchChallengerTimedOut is a free log subscription operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchChallengerTimedOut(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeChallengerTimedOut) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "ChallengerTimedOut")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeChallengerTimedOut)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengerTimedOut is a log parse operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseChallengerTimedOut(log types.Log) (*ExecutionChallengeChallengerTimedOut, error) {
	event := new(ExecutionChallengeChallengerTimedOut)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeContinuedIterator is returned from FilterContinued and is used to iterate over the raw logs and unpacked data for Continued events raised by the ExecutionChallenge contract.
type ExecutionChallengeContinuedIterator struct {
	Event *ExecutionChallengeContinued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeContinuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeContinued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeContinued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeContinuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeContinuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeContinued represents a Continued event raised by the ExecutionChallenge contract.
type ExecutionChallengeContinued struct {
	SegmentIndex  *big.Int
	DeadlineTicks *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterContinued is a free log retrieval operation binding the contract event 0x1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e4.
//
// Solidity: event Continued(uint256 segmentIndex, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterContinued(opts *bind.FilterOpts) (*ExecutionChallengeContinuedIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "Continued")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeContinuedIterator{contract: _ExecutionChallenge.contract, event: "Continued", logs: logs, sub: sub}, nil
}

// WatchContinued is a free log subscription operation binding the contract event 0x1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e4.
//
// Solidity: event Continued(uint256 segmentIndex, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchContinued(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeContinued) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "Continued")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeContinued)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "Continued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContinued is a log parse operation binding the contract event 0x1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e4.
//
// Solidity: event Continued(uint256 segmentIndex, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseContinued(log types.Log) (*ExecutionChallengeContinued, error) {
	event := new(ExecutionChallengeContinued)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "Continued", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeInitiatedChallengeIterator is returned from FilterInitiatedChallenge and is used to iterate over the raw logs and unpacked data for InitiatedChallenge events raised by the ExecutionChallenge contract.
type ExecutionChallengeInitiatedChallengeIterator struct {
	Event *ExecutionChallengeInitiatedChallenge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeInitiatedChallengeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeInitiatedChallenge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeInitiatedChallenge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeInitiatedChallengeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeInitiatedChallengeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeInitiatedChallenge represents a InitiatedChallenge event raised by the ExecutionChallenge contract.
type ExecutionChallengeInitiatedChallenge struct {
	DeadlineTicks *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterInitiatedChallenge is a free log retrieval operation binding the contract event 0xe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc67.
//
// Solidity: event InitiatedChallenge(uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterInitiatedChallenge(opts *bind.FilterOpts) (*ExecutionChallengeInitiatedChallengeIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "InitiatedChallenge")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeInitiatedChallengeIterator{contract: _ExecutionChallenge.contract, event: "InitiatedChallenge", logs: logs, sub: sub}, nil
}

// WatchInitiatedChallenge is a free log subscription operation binding the contract event 0xe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc67.
//
// Solidity: event InitiatedChallenge(uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchInitiatedChallenge(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeInitiatedChallenge) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "InitiatedChallenge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeInitiatedChallenge)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiatedChallenge is a log parse operation binding the contract event 0xe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc67.
//
// Solidity: event InitiatedChallenge(uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseInitiatedChallenge(log types.Log) (*ExecutionChallengeInitiatedChallenge, error) {
	event := new(ExecutionChallengeInitiatedChallenge)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeOneStepProofCompletedIterator is returned from FilterOneStepProofCompleted and is used to iterate over the raw logs and unpacked data for OneStepProofCompleted events raised by the ExecutionChallenge contract.
type ExecutionChallengeOneStepProofCompletedIterator struct {
	Event *ExecutionChallengeOneStepProofCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeOneStepProofCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeOneStepProofCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeOneStepProofCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeOneStepProofCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeOneStepProofCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeOneStepProofCompleted represents a OneStepProofCompleted event raised by the ExecutionChallenge contract.
type ExecutionChallengeOneStepProofCompleted struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOneStepProofCompleted is a free log retrieval operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterOneStepProofCompleted(opts *bind.FilterOpts) (*ExecutionChallengeOneStepProofCompletedIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "OneStepProofCompleted")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeOneStepProofCompletedIterator{contract: _ExecutionChallenge.contract, event: "OneStepProofCompleted", logs: logs, sub: sub}, nil
}

// WatchOneStepProofCompleted is a free log subscription operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchOneStepProofCompleted(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeOneStepProofCompleted) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "OneStepProofCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeOneStepProofCompleted)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOneStepProofCompleted is a log parse operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseOneStepProofCompleted(log types.Log) (*ExecutionChallengeOneStepProofCompleted, error) {
	event := new(ExecutionChallengeOneStepProofCompleted)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// KeccakABI is the input ABI used to generate the binding from.
const KeccakABI = "[]"

// KeccakBin is the compiled bytecode used for deploying new contracts.
var KeccakBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820c07ae5b3a4de3b843e4ad0fe343fe545017077f4b66197a567534adf7bf6c06864736f6c63430005110032"

// DeployKeccak deploys a new Ethereum contract, binding an instance of Keccak to it.
func DeployKeccak(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Keccak, error) {
	parsed, err := abi.JSON(strings.NewReader(KeccakABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(KeccakBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Keccak{KeccakCaller: KeccakCaller{contract: contract}, KeccakTransactor: KeccakTransactor{contract: contract}, KeccakFilterer: KeccakFilterer{contract: contract}}, nil
}

// Keccak is an auto generated Go binding around an Ethereum contract.
type Keccak struct {
	KeccakCaller     // Read-only binding to the contract
	KeccakTransactor // Write-only binding to the contract
	KeccakFilterer   // Log filterer for contract events
}

// KeccakCaller is an auto generated read-only Go binding around an Ethereum contract.
type KeccakCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeccakTransactor is an auto generated write-only Go binding around an Ethereum contract.
type KeccakTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeccakFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type KeccakFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeccakSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type KeccakSession struct {
	Contract     *Keccak           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KeccakCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type KeccakCallerSession struct {
	Contract *KeccakCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// KeccakTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type KeccakTransactorSession struct {
	Contract     *KeccakTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KeccakRaw is an auto generated low-level Go binding around an Ethereum contract.
type KeccakRaw struct {
	Contract *Keccak // Generic contract binding to access the raw methods on
}

// KeccakCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type KeccakCallerRaw struct {
	Contract *KeccakCaller // Generic read-only contract binding to access the raw methods on
}

// KeccakTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type KeccakTransactorRaw struct {
	Contract *KeccakTransactor // Generic write-only contract binding to access the raw methods on
}

// NewKeccak creates a new instance of Keccak, bound to a specific deployed contract.
func NewKeccak(address common.Address, backend bind.ContractBackend) (*Keccak, error) {
	contract, err := bindKeccak(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Keccak{KeccakCaller: KeccakCaller{contract: contract}, KeccakTransactor: KeccakTransactor{contract: contract}, KeccakFilterer: KeccakFilterer{contract: contract}}, nil
}

// NewKeccakCaller creates a new read-only instance of Keccak, bound to a specific deployed contract.
func NewKeccakCaller(address common.Address, caller bind.ContractCaller) (*KeccakCaller, error) {
	contract, err := bindKeccak(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &KeccakCaller{contract: contract}, nil
}

// NewKeccakTransactor creates a new write-only instance of Keccak, bound to a specific deployed contract.
func NewKeccakTransactor(address common.Address, transactor bind.ContractTransactor) (*KeccakTransactor, error) {
	contract, err := bindKeccak(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &KeccakTransactor{contract: contract}, nil
}

// NewKeccakFilterer creates a new log filterer instance of Keccak, bound to a specific deployed contract.
func NewKeccakFilterer(address common.Address, filterer bind.ContractFilterer) (*KeccakFilterer, error) {
	contract, err := bindKeccak(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &KeccakFilterer{contract: contract}, nil
}

// bindKeccak binds a generic wrapper to an already deployed contract.
func bindKeccak(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(KeccakABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Keccak *KeccakRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Keccak.Contract.KeccakCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Keccak *KeccakRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Keccak.Contract.KeccakTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Keccak *KeccakRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Keccak.Contract.KeccakTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Keccak *KeccakCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Keccak.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Keccak *KeccakTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Keccak.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Keccak *KeccakTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Keccak.Contract.contract.Transact(opts, method, params...)
}

// OneStepProofABI is the input ABI used to generate the binding from.
const OneStepProofABI = "[]"

// OneStepProofBin is the compiled bytecode used for deploying new contracts.
var OneStepProofBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820ca8a5c5e2068c0d906d826ad9e35880d508375525a7b1d17908f2ae627aa354f64736f6c63430005110032"

// DeployOneStepProof deploys a new Ethereum contract, binding an instance of OneStepProof to it.
func DeployOneStepProof(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// OneStepProof is an auto generated Go binding around an Ethereum contract.
type OneStepProof struct {
	OneStepProofCaller     // Read-only binding to the contract
	OneStepProofTransactor // Write-only binding to the contract
	OneStepProofFilterer   // Log filterer for contract events
}

// OneStepProofCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofSession struct {
	Contract     *OneStepProof     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProofCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofCallerSession struct {
	Contract *OneStepProofCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// OneStepProofTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTransactorSession struct {
	Contract     *OneStepProofTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// OneStepProofRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofRaw struct {
	Contract *OneStepProof // Generic contract binding to access the raw methods on
}

// OneStepProofCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofCallerRaw struct {
	Contract *OneStepProofCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTransactorRaw struct {
	Contract *OneStepProofTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof creates a new instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProof(address common.Address, backend bind.ContractBackend) (*OneStepProof, error) {
	contract, err := bindOneStepProof(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// NewOneStepProofCaller creates a new read-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofCaller, error) {
	contract, err := bindOneStepProof(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofCaller{contract: contract}, nil
}

// NewOneStepProofTransactor creates a new write-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTransactor, error) {
	contract, err := bindOneStepProof(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTransactor{contract: contract}, nil
}

// NewOneStepProofFilterer creates a new log filterer instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofFilterer, error) {
	contract, err := bindOneStepProof(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofFilterer{contract: contract}, nil
}

// bindOneStepProof binds a generic wrapper to an already deployed contract.
func bindOneStepProof(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.OneStepProofCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transact(opts, method, params...)
}
