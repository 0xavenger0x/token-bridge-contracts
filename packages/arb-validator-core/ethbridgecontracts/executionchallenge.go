// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgecontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ExecutionChallengeABI is the input ABI used to generate the binding from.
const ExecutionChallengeABI = "[{\"anonymous\":false,\"inputs\":[],\"name\":\"AsserterTimedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"machineHashes\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"inboxInsnIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"messageAccs\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"logAccs\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"outCounts\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"gases\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"totalSteps\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadlineTicks\",\"type\":\"uint256\"}],\"name\":\"BisectedAssertion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ChallengerTimedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"segmentIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadlineTicks\",\"type\":\"uint256\"}],\"name\":\"Continued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadlineTicks\",\"type\":\"uint256\"}],\"name\":\"InitiatedChallenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OneStepProofCompleted\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_beforeInbox\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_machineHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint32\",\"name\":\"inboxInsnIndex\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_messageAccs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_logAccs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_outCounts\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_gases\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64\",\"name\":\"_totalSteps\",\"type\":\"uint64\"}],\"name\":\"bisectAssertion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segmentToChallenge\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_bisectionRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_bisectionHash\",\"type\":\"bytes32\"}],\"name\":\"chooseSegment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rollupAddress\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_asserter\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_challenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_challengePeriodTicks\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_challengeState\",\"type\":\"bytes32\"}],\"name\":\"initializeBisection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_beforeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_beforeInbox\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_beforeInboxValueSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_afterHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_didInboxInsns\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"_firstMessage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_lastMessage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_firstLog\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_lastLog\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_gas\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"oneStepProof\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"timeoutChallenge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ExecutionChallengeFuncSigs maps the 4-byte function signature to its string representation.
var ExecutionChallengeFuncSigs = map[string]string{
	"6f537a39": "bisectAssertion(bytes32,bytes32[],uint32,bytes32[],bytes32[],uint64[],uint64[],uint64)",
	"79a9ad85": "chooseSegment(uint256,bytes,bytes32,bytes32)",
	"02ad1e4e": "initializeBisection(address,address,address,uint256,bytes32)",
	"82498b81": "oneStepProof(bytes32,bytes32,uint256,bytes32,bool,bytes32,bytes32,bytes32,bytes32,uint64,bytes)",
	"ced5c1bf": "timeoutChallenge()",
}

// ExecutionChallengeBin is the compiled bytecode used for deploying new contracts.
var ExecutionChallengeBin = "0x608060405234801561001057600080fd5b506167d080620000216000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806302ad1e4e1461005c5780636f537a39146100a057806379a9ad851461036a57806382498b811461041a578063ced5c1bf1461050a575b600080fd5b61009e600480360360a081101561007257600080fd5b506001600160a01b03813581169160208101358216916040820135169060608101359060800135610512565b005b61009e60048036036101008110156100b757600080fd5b81359190810190604081016020820135600160201b8111156100d857600080fd5b8201836020820111156100ea57600080fd5b803590602001918460208302840111600160201b8311171561010b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929563ffffffff853516959094909350604081019250602001359050600160201b81111561016857600080fd5b82018360208201111561017a57600080fd5b803590602001918460208302840111600160201b8311171561019b57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156101ea57600080fd5b8201836020820111156101fc57600080fd5b803590602001918460208302840111600160201b8311171561021d57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561026c57600080fd5b82018360208201111561027e57600080fd5b803590602001918460208302840111600160201b8311171561029f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156102ee57600080fd5b82018360208201111561030057600080fd5b803590602001918460208302840111600160201b8311171561032157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160401b031691506105279050565b61009e6004803603608081101561038057600080fd5b81359190810190604081016020820135600160201b8111156103a157600080fd5b8201836020820111156103b357600080fd5b803590602001918460018302840111600160201b831117156103d457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550508235935050506020013561074a565b61009e600480360361016081101561043157600080fd5b813591602081013591604082013591606081013591608082013515159160a08101359160c08201359160e081013591610100820135916001600160401b0361012082013516918101906101608101610140820135600160201b81111561049657600080fd5b8201836020820111156104a857600080fd5b803590602001918460018302840111600160201b831117156104c957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610a0b945050505050565b61009e610d67565b61051e85858585610e47565b60065550505050565b60055460ff16600281111561053857fe5b600114604051806040016040528060098152602001684249535f535441544560b81b815250906105e65760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156105ab578181015183820152602001610593565b50505050905090810190601f1680156105d85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506003546105f343610f62565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b815250906106665760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b5060015460408051808201909152600a8152692124a9afa9a2a72222a960b11b6020820152906001600160a01b031633146106e25760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b506106eb6164bd565b6040518061010001604052808a81526020018981526020018863ffffffff168152602001878152602001868152602001858152602001848152602001836001600160401b0316815250905061073f81610f6d565b505050505050505050565b60055460ff16600281111561075b57fe5b60021460405180604001604052806009815260200168434f4e5f535441544560b81b815250906107cc5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b506003546107d943610f62565b11156040518060400160405280600c81526020016b434f4e5f444541444c494e4560a01b8152509061084c5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b5060025460408051808201909152600a81526921a7a72fa9a2a72222a960b11b6020820152906001600160a01b031633146108c85760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b5060065482146040518060400160405280600881526020016721a7a72fa82922ab60c11b8152509061093b5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b5061094b83838387600101611076565b6040518060400160405280600981526020016821a7a72fa82927a7a360b91b815250906109b95760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b5060068190556109c7611179565b60035460408051868152602081019290925280517f1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e49281900390910190a150505050565b60055460ff166002811115610a1c57fe5b600114604051806040016040528060098152602001684249535f535441544560b81b81525090610a8d5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b50600354610a9a43610f62565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b81525090610b0d5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b5060015460408051808201909152600a8152692124a9afa9a2a72222a960b11b6020820152906001600160a01b03163314610b895760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b506000610b9e610b998c8c611195565b611248565b9050610ba8616514565b60405180610180016040528060016001600160401b031681526020018e81526020018381526020018b81526020018a15158152602001856001600160401b03168152602001898152602001888152602001888a14610c07576001610c0a565b60005b60ff166001600160401b03168152602001878152602001868152602001868814610c35576001610c38565b60005b60ff169052905087871480610c4c57508486145b610c9d576040805162461bcd60e51b815260206004820152601b60248201527f73656e7420626f7468206c6f677320616e64206d657373616765730000000000604482015290519081900360640190fd5b610cae610ca982611368565b611438565b610cb6616578565b610cc88e8e8e8d8d8d8d8d8d8d6114ae565b90508a610cd482611521565b14610d26576040805162461bcd60e51b815260206004820181905260248201527f50726f6f6620686164206e6f6e206d61746368696e6720656e64207374617465604482015290519081900360640190fd5b6040517f117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f590600090a1610d576115e5565b5050505050505050505050505050565b600354610d7343610f62565b11610dc5576040805162461bcd60e51b815260206004820152601760248201527f446561646c696e65206861736e27742065787069726564000000000000000000604482015290519081900360640190fd5b600160055460ff166002811115610dd857fe5b1415610e14576040517f2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f090600090a1610e0f611659565b610e45565b6040517f4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a90600090a1610e456115e5565b565b600060055460ff166002811115610e5a57fe5b146040518060400160405280600f81526020016e4348414c5f494e49545f535441544560881b81525090610ecf5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b50600080546001600160a01b038681166001600160a01b03199283161790925560018054868416908316178155600280549386169390921692909217905560048290556005805460ff19169091179055610f276116b1565b60035460408051918252517fe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc679181900360200190a150505050565b6103e881025b919050565b60208101515160001901610f80826116c3565b606081604051908082528060200260200182016040528015610fac578160200160208202803883390190505b509050610fd283610fca8560e001516001600160401b031685611a65565b846000611a83565b81600081518110610fdf57fe5b602090810291909101015260015b828110156110565780846040015163ffffffff16141561101557611012610b99611c01565b84525b611037846110308660e001516001600160401b031686611c48565b8584611a83565b82828151811061104357fe5b6020908102919091010152600101610fed565b5061106081611c5b565b611068611c6a565b61107183611c7e565b505050565b600080838160205b88518111611169578089015193506020818a51036020018161109c57fe5b0491505b6000821180156110b35750600286066001145b80156110c157508160020a86115b156110d4576002860460010195506110a0565b6002860661111f57838360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092506002868161111757fe5b049550611161565b828460405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092506002868161115a57fe5b0460010195505b60200161107e565b505085149150505b949350505050565b600580546001919060ff191682805b0217905550610e456116b1565b61119d6165d6565b6040805160a08101825284815281516060810183526000808252602082810182905284518281528082018652939490850193908301916111f3565b6111e06165d6565b8152602001906001900390816111d85790505b5090528152604080516000808252602082810190935291909201919061122f565b61121c6165d6565b8152602001906001900390816112145790505b5081526002602082015260400183905290505b92915050565b6000611252611e62565b60ff16826060015160ff16141561127557815161126e90611e67565b9050610f68565b61127d611e8b565b60ff16826060015160ff16141561129b5761126e8260200151611e90565b6112a3611f8d565b60ff16826060015160ff1614156112c5578151608083015161126e9190611f92565b6112cd611fe3565b60ff16826060015160ff161415611306576112e66165d6565b6112f38360400151611fe8565b90506112fe81611248565b915050610f68565b61130e61214a565b60ff16826060015160ff16141561132757508051610f68565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b80516020808301516040808501516060860151608087015160a088015160c0808a015160e08b01516101008c01516101208d01516101408e0151610160909e01518a519d861b6001600160c01b03199081168f8f015260288f019c909c5260488e019990995260688d019790975294151560f81b60888c015292821b881660898b015260918a015260b189019190915290811b851660d188015260d987019190915260f986019690965290941b166101198301528251808303610101018152610121909201909252805191012090565b6006548114604051806040016040528060088152602001672124a9afa82922ab60c11b815250906114aa5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b5050565b6114b6616578565b6115126040518061012001604052808d81526020016114d58d8d611195565b81526020018a15158152602001898152602001888152602001878152602001868152602001856001600160401b031681526020018481525061214f565b9b9a5050505050505050505050565b600060028260e00151141561153857506000610f68565b60018260e00151141561154d57506001610f68565b8151602083015161155d90611248565b61156a8460400151611248565b6115778560600151611248565b6115848660800151611248565b8660a001518760c0015160405160200180888152602001878152602001868152602001858152602001848152602001838152602001828152602001975050505050505050604051602081830303815290604052805190602001209050610f68565b600080546001546002546040805163396f51cf60e01b81526001600160a01b039384166004820152918316602483015251919092169263396f51cf926044808201939182900301818387803b15801561163d57600080fd5b505af1158015611651573d6000803e3d6000fd5b503392505050ff5b600080546002546001546040805163396f51cf60e01b81526001600160a01b039384166004820152918316602483015251919092169263396f51cf926044808201939182900301818387803b15801561163d57600080fd5b6004546116bd43610f62565b01600355565b6000600182602001515103905081606001515181600101146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b8152509061174a5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b5081608001515181600101146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b815250906117c55760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b508160c001515181146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b8152509061183d5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b508160a001515181600202146040518060400160405280600a8152602001692124a9afa4a7282622a760b11b815250906118b85760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156105ab578181015183820152602001610593565b5060008080805b8481101561192a578560c0015181815181106118d757fe5b6020026020010151840193508560a0015181815181106118f357fe5b6020026020010151830192508560a001518186018151811061191157fe5b60200260200101518201915080806001019150506118bf565b50611a5e610ca96040518061018001604052808860e001516001600160401b03168152602001886020015160008151811061196157fe5b60200260200101518152602001886000015181526020018860200151888151811061198857fe5b602002602001015181526020016000896040015163ffffffff16116119ae5760006119b1565b60015b15158152602001866001600160401b0316815260200188606001516000815181106119d857fe5b60200260200101518152602001886060015188815181106119f557fe5b60200260200101518152602001856001600160401b031681526020018860800151600081518110611a2257fe5b6020026020010151815260200188608001518881518110611a3f57fe5b60200260200101518152602001846001600160401b0316815250611368565b5050505050565b6000818381611a7057fe5b06828481611a7a57fe5b04019392505050565b6000611bf86040518061018001604052808663ffffffff166001600160401b0316815260200187602001518581518110611ab957fe5b602002602001015181526020018760000151815260200187602001518560010181518110611ae357fe5b6020026020010151815260200184600101886040015163ffffffff1614151581526020018760c001518581518110611b1757fe5b60200260200101516001600160401b0316815260200187606001518581518110611b3d57fe5b6020026020010151815260200187606001518560010181518110611b5d57fe5b602002602001015181526020018760a001518581518110611b7a57fe5b60200260200101516001600160401b0316815260200187608001518581518110611ba057fe5b6020026020010151815260200187608001518560010181518110611bc057fe5b602002602001015181526020018760a0015185870181518110611bdf57fe5b60200260200101516001600160401b0316815250611368565b95945050505050565b611c096165d6565b60408051600080825260208201909252611c4391611c3d565b611c2a6165d6565b815260200190600190039081611c225790505b506132c8565b905090565b6000818381611c5357fe5b049392505050565b611c64816133da565b60065550565b600580546002919060ff1916600183611188565b7ffdfc7d7356ac103488916cfffd6e537843dadc44dc71695a7ed504d9f668528781602001518260400151836060015184608001518560a001518660c001518760e0015160035460405180806020018963ffffffff1663ffffffff16815260200180602001806020018060200180602001886001600160401b03166001600160401b0316815260200187815260200186810386528e818151815260200191508051906020019060200280838360005b83811015611d45578181015183820152602001611d2d565b5050505090500186810385528c818151815260200191508051906020019060200280838360005b83811015611d84578181015183820152602001611d6c565b5050505090500186810384528b818151815260200191508051906020019060200280838360005b83811015611dc3578181015183820152602001611dab565b5050505090500186810383528a818151815260200191508051906020019060200280838360005b83811015611e02578181015183820152602001611dea565b50505050905001868103825289818151815260200191508051906020019060200280838360005b83811015611e41578181015183820152602001611e29565b505050509050019d505050505050505050505050505060405180910390a150565b600090565b60408051602080820193909352815180820384018152908201909152805191012090565b600190565b6000600282604001515110611ea157fe5b604082015151611f0657611eb3611e8b565b8251602080850151604080516001600160f81b031960f896871b8116828601529490951b909316602185015260228085019190915282518085039091018152604290930190915281519101209050610f68565b611f0e611e8b565b8260000151611f348460400151600081518110611f2757fe5b6020026020010151611248565b8460200151604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b600290565b6000611f9c611fe3565b8383604051602001808460ff1660ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b600390565b611ff06165d6565b60088251111561203e576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b6060825160405190808252806020026020018201604052801561206b578160200160208202803883390190505b508051909150600160005b828110156120ce5761208d868281518110611f2757fe5b84828151811061209957fe5b6020026020010181815250508581815181106120b157fe5b602002602001015160800151820191508080600101915050612076565b506000835184604051602001808360ff1660ff1660f81b8152600101828051906020019060200280838360005b838110156121135781810151838201526020016120fb565b50505050905001925050506040516020818303038152906040528051906020012090506121408183611195565b9695505050505050565b606490565b612157616578565b60008060006060612166616578565b61216e616578565b61217788613518565b60e08e0151959b50939950929750909550935091506001906000906001600160401b031687146121e5576040805162461bcd60e51b815260206004820152601460248201527324b73b30b634b21033b0b99034b710383937b7b360611b604482015290519081900360640190fd5b896040015180156121f9575060ff88166072145b8061221557508960400151158015612215575060ff8816607214155b612266576040805162461bcd60e51b815260206004820152601a60248201527f496e76616c696420646964496e626f78496e736e20636c61696d000000000000604482015290519081900360640190fd5b60a08084018051899003905284015187111561228d5760001960a084015260009150613181565b60ff8816600114156122d3576122cc83866000815181106122aa57fe5b6020026020010151876001815181106122bf57fe5b602002602001015161376e565b9150613181565b60ff881660021415612312576122cc83866000815181106122f057fe5b60200260200101518760018151811061230557fe5b60200260200101516137be565b60ff881660031415612351576122cc838660008151811061232f57fe5b60200260200101518760018151811061234457fe5b60200260200101516137ff565b60ff881660041415612390576122cc838660008151811061236e57fe5b60200260200101518760018151811061238357fe5b6020026020010151613840565b60ff8816600514156123cf576122cc83866000815181106123ad57fe5b6020026020010151876001815181106123c257fe5b6020026020010151613891565b60ff88166006141561240e576122cc83866000815181106123ec57fe5b60200260200101518760018151811061240157fe5b60200260200101516138e2565b60ff88166007141561244d576122cc838660008151811061242b57fe5b60200260200101518760018151811061244057fe5b6020026020010151613933565b60ff8816600814156124a1576122cc838660008151811061246a57fe5b60200260200101518760018151811061247f57fe5b60200260200101518860028151811061249457fe5b6020026020010151613984565b60ff8816600914156124f5576122cc83866000815181106124be57fe5b6020026020010151876001815181106124d357fe5b6020026020010151886002815181106124e857fe5b60200260200101516139ec565b60ff8816600a1415612534576122cc838660008151811061251257fe5b60200260200101518760018151811061252757fe5b6020026020010151613a45565b60ff881660101415612573576122cc838660008151811061255157fe5b60200260200101518760018151811061256657fe5b6020026020010151613a86565b60ff8816601114156125b2576122cc838660008151811061259057fe5b6020026020010151876001815181106125a557fe5b6020026020010151613ac7565b60ff8816601214156125f1576122cc83866000815181106125cf57fe5b6020026020010151876001815181106125e457fe5b6020026020010151613b08565b60ff881660131415612630576122cc838660008151811061260e57fe5b60200260200101518760018151811061262357fe5b6020026020010151613b49565b60ff88166014141561266f576122cc838660008151811061264d57fe5b60200260200101518760018151811061266257fe5b6020026020010151613b8a565b60ff881660151415612699576122cc838660008151811061268c57fe5b6020026020010151613bc1565b60ff8816601614156126d8576122cc83866000815181106126b657fe5b6020026020010151876001815181106126cb57fe5b6020026020010151613c06565b60ff881660171415612717576122cc83866000815181106126f557fe5b60200260200101518760018151811061270a57fe5b6020026020010151613c47565b60ff881660181415612756576122cc838660008151811061273457fe5b60200260200101518760018151811061274957fe5b6020026020010151613c88565b60ff881660191415612780576122cc838660008151811061277357fe5b6020026020010151613cc9565b60ff8816601a14156127bf576122cc838660008151811061279d57fe5b6020026020010151876001815181106127b257fe5b6020026020010151613cff565b60ff8816601b14156127fe576122cc83866000815181106127dc57fe5b6020026020010151876001815181106127f157fe5b6020026020010151613d40565b60ff881660201415612828576122cc838660008151811061281b57fe5b6020026020010151613d81565b60ff881660211415612852576122cc838660008151811061284557fe5b6020026020010151613d9c565b60ff881660221415612891576122cc838660008151811061286f57fe5b60200260200101518760018151811061288457fe5b6020026020010151613db7565b60ff8816602314156128bb576122cc83866000815181106128ae57fe5b6020026020010151613e1d565b60ff8816603014156128e5576122cc83866000815181106128d857fe5b6020026020010151613fef565b60ff8816603114156128fa576122cc83613ff7565b60ff88166032141561290f576122cc83614018565b60ff881660331415612939576122cc838660008151811061292c57fe5b6020026020010151614031565b60ff881660341415612963576122cc838660008151811061295657fe5b602002602001015161403d565b60ff8816603514156129a2576122cc838660008151811061298057fe5b60200260200101518760018151811061299557fe5b6020026020010151614068565b60ff8816603614156129b7576122cc836140b0565b60ff8816603714156129d1576122cc8385600001516140dd565b60ff8816603814156129fb576122cc83866000815181106129ee57fe5b60200260200101516140ed565b60ff881660391415612a4957612a0f6165d6565b612a1e8b6101000151886140ff565b9097509050612a33858263ffffffff61429116565b612a43848263ffffffff6142ab16565b50613181565b60ff8816603a1415612a5e576122cc836142c5565b60ff8816603b1415612a735760019150613181565b60ff8816603c1415612a88576122cc836142e5565b60ff8816603d1415612ab2576122cc8386600081518110612aa557fe5b60200260200101516142f9565b60ff881660401415612adc576122cc8386600081518110612acf57fe5b6020026020010151614327565b60ff881660411415612b1b576122cc8386600081518110612af957fe5b602002602001015187600181518110612b0e57fe5b6020026020010151614349565b60ff881660421415612b6f576122cc8386600081518110612b3857fe5b602002602001015187600181518110612b4d57fe5b602002602001015188600281518110612b6257fe5b602002602001015161437b565b60ff881660431415612bae576122cc8386600081518110612b8c57fe5b602002602001015187600181518110612ba157fe5b60200260200101516143bd565b60ff881660441415612c02576122cc8386600081518110612bcb57fe5b602002602001015187600181518110612be057fe5b602002602001015188600281518110612bf557fe5b60200260200101516143cf565b60ff881660501415612c41576122cc8386600081518110612c1f57fe5b602002602001015187600181518110612c3457fe5b60200260200101516143f1565b60ff881660511415612c95576122cc8386600081518110612c5e57fe5b602002602001015187600181518110612c7357fe5b602002602001015188600281518110612c8857fe5b6020026020010151614467565b60ff881660521415612cbf576122cc8386600081518110612cb257fe5b60200260200101516144db565b60ff881660531415612d1e57612cd36165d6565b612ce28b6101000151886140ff565b9097509050612cf7858263ffffffff61429116565b612d168487600081518110612d0857fe5b60200260200101518361450e565b925050613181565b60ff881660541415612d8a57612d326165d6565b612d418b6101000151886140ff565b9097509050612d56858263ffffffff61429116565b612d168487600081518110612d6757fe5b602002602001015188600181518110612d7c57fe5b602002602001015184614566565b60ff881660601415612d9f576122cc836145e7565b60ff881660611415612e9c57612dc98386600081518110612dbc57fe5b60200260200101516145ed565b90925090508115612e93578960c001518a60a001518260405160200180838152602001828152602001925050506040516020818303038152906040528051906020012014612e485760405162461bcd60e51b81526004018080602001828103825260258152602001806167506025913960400191505060405180910390fd5b89608001518a6060015114612e8e5760405162461bcd60e51b81526004018080602001828103825260278152602001806167756027913960400191505060405180910390fd5b612e97565b5060005b613181565b60ff881660701415612fd357612ec68386600081518110612eb957fe5b6020026020010151614606565b90925090508115612e935780612f215789608001518a6060015114612f1c5760405162461bcd60e51b81526004018080602001828103825260388152602001806167186038913960400191505060405180910390fd5b612e8e565b60808a01516060808c01516040805160208082019390935280820186905281518082038301815293019052815191012014612f8d5760405162461bcd60e51b81526004018080602001828103825260298152602001806166a86029913960400191505060405180910390fd5b8960c001518a60a0015114612e8e5760405162461bcd60e51b81526004018080602001828103825260268152602001806166d16026913960400191505060405180910390fd5b60ff881660721415612fed576122cc838b60200151614645565b60ff8816607314156130025760009150613181565b60ff88166074141561301757612e97836146ae565b60ff881660751415613041576122cc838660008151811061303457fe5b60200260200101516146b8565b60ff881660761415613056576122cc836146dd565b60ff88166077141561306b576122cc836146f6565b60ff8816607814156130aa576122cc838660008151811061308857fe5b60200260200101518760018151811061309d57fe5b602002602001015161473f565b60ff8816607914156130fe576122cc83866000815181106130c757fe5b6020026020010151876001815181106130dc57fe5b6020026020010151886002815181106130f157fe5b6020026020010151614784565b60ff8816607b1415613113576122cc836147d7565b60ff88166080141561317c576122cc838660008151811061313057fe5b60200260200101518760018151811061314557fe5b60200260200101518860028151811061315a57fe5b60200260200101518960038151811061316f57fe5b602002602001015161481a565b600091505b806132125789608001518a60600151146131cc5760405162461bcd60e51b81526004018080602001828103825260278152602001806167756027913960400191505060405180910390fd5b8960c001518a60a00151146132125760405162461bcd60e51b81526004018080602001828103825260268152602001806166d16026913960400191505060405180910390fd5b816132735760408051600160f81b602080830191909152600060218301819052602280840191909152835180840390910181526042909201909252805191012060c0840151141561326b5761326683614937565b613273565b60c083015183525b61327c84611521565b8a51146132ba5760405162461bcd60e51b81526004018080602001828103825260228152602001806166866022913960400191505060405180910390fd5b509098975050505050505050565b6132d06165d6565b6132da8251614941565b61332b576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b83518110156133625783818151811061334557fe5b602002602001015160800151820191508080600101915050613330565b506040805160a08101825260008082528251606081018452818152602081810183905284518381528082018652939490850193919290830191906133bc565b6133a96165d6565b8152602001906001900390816133a15790505b50905281526020810194909452600360408501526060909301525090565b6000815b6001815111156134fb57606060028251600101816133f857fe5b04604051908082528060200260200182016040528015613422578160200160208202803883390190505b50905060005b81518110156134f35782518160020260010110156134bb5782816002028151811061344f57fe5b602002602001015183826002026001018151811061346957fe5b60200260200101516040516020018083815260200182815260200192505050604051602081830303815290604052805190602001208282815181106134aa57fe5b6020026020010181815250506134eb565b8281600202815181106134ca57fe5b60200260200101518282815181106134de57fe5b6020026020010181815250505b600101613428565b5090506133de565b8060008151811061350857fe5b6020026020010151915050919050565b6000806060613525616578565b61352d616578565b600061353883614948565b61354787610100015182614952565b93509050613554836149f2565b91506000876101000151828151811061356957fe5b602001015160f81c60f81b60f81c9050876101000151826001018151811061358d57fe5b016020015160f81c965060006135a288614a5b565b6040805183815260208085028201019091529098509091508180156135e157816020015b6135ce6165d6565b8152602001906001900390816135c65790505b5095506002830192508160ff16600014806135ff57508160ff166001145b613650576040805162461bcd60e51b815260206004820152601c60248201527f50726f6f662068616420626164206f7065726174696f6e207479706500000000604482015290519081900360640190fd5b60ff821661367057613669610b99898760000151614fcd565b85526136d6565b6136786165d6565b6136878a6101000151856140ff565b909450905081156136b05780876000815181106136a057fe5b60200260200101819052506136c0565b6136c0858263ffffffff6142ab16565b6136d2610b998a886000015184615028565b8652505b60ff82165b81811015613715576136f28a6101000151856140ff565b885189908490811061370057fe5b602090810291909101015293506001016136db565b865115613762575060005b8260ff168751038110156137625761375a878260018a5103038151811061374357fe5b6020026020010151876142ab90919063ffffffff16565b600101613720565b50505091939550919395565b6000613779836150a3565b158061378b5750613789826150a3565b155b15613798575060006137b7565b825182518082016137af878263ffffffff6150ae16565b600193505050505b9392505050565b60006137c9836150a3565b15806137db57506137d9826150a3565b155b156137e8575060006137b7565b825182518082026137af878263ffffffff6150ae16565b600061380a836150a3565b158061381c575061381a826150a3565b155b15613829575060006137b7565b825182518082036137af878263ffffffff6150ae16565b600061384b836150a3565b158061385d575061385b826150a3565b155b1561386a575060006137b7565b825182518061387e576000925050506137b7565b8082046137af878263ffffffff6150ae16565b600061389c836150a3565b15806138ae57506138ac826150a3565b155b156138bb575060006137b7565b82518251806138cf576000925050506137b7565b8082056137af878263ffffffff6150ae16565b60006138ed836150a3565b15806138ff57506138fd826150a3565b155b1561390c575060006137b7565b8251825180613920576000925050506137b7565b8082066137af878263ffffffff6150ae16565b600061393e836150a3565b1580613950575061394e826150a3565b155b1561395d575060006137b7565b8251825180613971576000925050506137b7565b8082076137af878263ffffffff6150ae16565b600061398f846150a3565b15806139a1575061399f836150a3565b155b156139ae57506000611171565b835183518351806139c55760009350505050611171565b60008183850890506139dd898263ffffffff6150ae16565b50600198975050505050505050565b60006139f7846150a3565b1580613a095750613a07836150a3565b155b15613a1657506000611171565b83518351835180613a2d5760009350505050611171565b60008183850990506139dd898263ffffffff6150ae16565b6000613a50836150a3565b1580613a625750613a60826150a3565b155b15613a6f575060006137b7565b8251825180820a6137af878263ffffffff6150ae16565b6000613a91836150a3565b1580613aa35750613aa1826150a3565b155b15613ab0575060006137b7565b825182518082106137af878263ffffffff6150ae16565b6000613ad2836150a3565b1580613ae45750613ae2826150a3565b155b15613af1575060006137b7565b825182518082116137af878263ffffffff6150ae16565b6000613b13836150a3565b1580613b255750613b23826150a3565b155b15613b32575060006137b7565b825182518082126137af878263ffffffff6150ae16565b6000613b54836150a3565b1580613b665750613b64826150a3565b155b15613b73575060006137b7565b825182518082136137af878263ffffffff6150ae16565b6000613bb7613baa613b9b84611248565b613ba486611248565b146150c4565b859063ffffffff6142ab16565b5060019392505050565b6000613bcc826150a3565b613be657613be183600063ffffffff6150ae16565b613bfd565b81518015613bfa858263ffffffff6150ae16565b50505b50600192915050565b6000613c11836150a3565b1580613c235750613c21826150a3565b155b15613c30575060006137b7565b825182518082166137af878263ffffffff6150ae16565b6000613c52836150a3565b1580613c645750613c62826150a3565b155b15613c71575060006137b7565b825182518082176137af878263ffffffff6150ae16565b6000613c93836150a3565b1580613ca55750613ca3826150a3565b155b15613cb2575060006137b7565b825182518082186137af878263ffffffff6150ae16565b6000613cd4826150a3565b613ce057506000611242565b81518019613cf4858263ffffffff6150ae16565b506001949350505050565b6000613d0a836150a3565b1580613d1c5750613d1a826150a3565b155b15613d29575060006137b7565b8251825181811a6137af878263ffffffff6150ae16565b6000613d4b836150a3565b1580613d5d5750613d5b826150a3565b155b15613d6a575060006137b7565b8251825181810b6137af878263ffffffff6150ae16565b6000613bfd613d8f83611248565b849063ffffffff6150ae16565b6000613bfd613daa836150e6565b849063ffffffff6142ab16565b6000613dc2836150a3565b1580613dd45750613dd2826150a3565b155b15613de1575060006137b7565b82518251604080516020808201859052818301849052825180830384018152606090920190925280519101206137af878263ffffffff6150ae16565b6000613e2882615145565b613e3457506000611242565b60408201518051600714613e4c576000915050611242565b60005b6007811015613e8b57613e74828281518110613e6757fe5b60200260200101516150a3565b613e8357600092505050611242565b600101613e4f565b50613e9461660a565b60005b6019811015613f0057826004820481518110613eaf57fe5b6020026020010151600001516001600160401b0316828260198110613ed057fe5b60200201526040836004830481518110613ee657fe5b6020908102919091010151805190911c9052600101613e97565b50613f0a81615152565b604080516007808252610100820190925291925060609190816020015b613f2f6165d6565b815260200190600190039081613f2757905050905060005b6007811015613f7957613f5a6000615eb4565b828281518110613f6657fe5b6020908102919091010152600101613f47565b5060005b6019811015613fc95760048106604002838260198110613f9957fe5b6020020151901b826004830481518110613faf57fe5b602090810291909101015180519091179052600101613f7d565b50613fe3613fd6826132c8565b879063ffffffff6142ab16565b50600195945050505050565b600192915050565b60006140108260800151836142ab90919063ffffffff16565b506001919050565b60006140108260600151836142ab90919063ffffffff16565b60609190910152600190565b600061404882615f66565b61405457506000611242565b61405d82611248565b835250600192915050565b600061407383615f66565b61407f575060006137b7565b614088826150a3565b614094575060006137b7565b815115613bb7576140a483611248565b84525060019392505050565b60006140106140d06140c3610b99611c01565b613ba48560200151611248565b839063ffffffff6142ab16565b6000613bfd613daa836001615f73565b6000613bfd838363ffffffff61429116565b60006141096165d6565b8351831061414f576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b60008061415c8686616024565b91509150614168611e62565b60ff168160ff16141561419c576000614181878461604b565b90935090508261419082615eb4565b9450945050505061428a565b6141a4611e8b565b60ff168160ff1614156141c6576141bb86836160b4565b93509350505061428a565b6141ce611f8d565b60ff168160ff1614156141e5576141bb8683616156565b6141ed611fe3565b60ff168160ff161015801561420e57506142056161ea565b60ff168160ff16105b1561424a57600061421d611fe3565b82039050606061422e8289866161ef565b90945090508361423d826132c8565b955095505050505061428a565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b61429f826040015182616288565b82604001819052505050565b6142b9826020015182616288565b82602001819052505050565b60006140106140d06142d8610b99611c01565b613ba48560400151611248565b60006140106140d08360c001516001615f73565b600061430482615f66565b61431057506000611242565b61431982611248565b60c084015250600192915050565b6000614339838363ffffffff6142ab16565b613bfd838363ffffffff6142ab16565b600061435b848363ffffffff6142ab16565b61436b848463ffffffff6142ab16565b613bb7848363ffffffff6142ab16565b600061438d858363ffffffff6142ab16565b61439d858463ffffffff6142ab16565b6143ad858563ffffffff6142ab16565b613cf4858363ffffffff6142ab16565b600061436b848463ffffffff6142ab16565b60006143e1858563ffffffff6142ab16565b6143ad858463ffffffff6142ab16565b60006143fc836150a3565b158061440e575061440c82615145565b155b1561441b575060006137b7565b614424826162fe565b60ff16836000015110614439575060006137b7565b613bb7826040015184600001518151811061445057fe5b6020026020010151856142ab90919063ffffffff16565b600061447283615145565b15806144845750614482846150a3565b155b1561449157506000611171565b61449a836162fe565b60ff168460000151106144af57506000611171565b6040830151845181518491839181106144c457fe5b6020026020010181905250613fe3613fd6826132c8565b60006144e682615145565b6144f257506000611242565b613bfd6144fe836162fe565b849060ff1663ffffffff6150ae16565b6000614519836150a3565b158061452b575061452982615145565b155b15614538575060006137b7565b614541826162fe565b60ff16836000015110614556575060006137b7565b614439848363ffffffff61429116565b600061457182615145565b15806145835750614581846150a3565b155b1561459057506000611171565b614599826162fe565b60ff168460000151106145ae57506000611171565b6040820151845181518591839181106145c357fe5b6020026020010181905250613fe36145da826132c8565b879063ffffffff61429116565b50600190565b60008060016145fb84611248565b915091509250929050565b600080612710836080015111156146225750600090508061428a565b61462b83616325565b61463a5750600090508061428a565b60016145fb84611248565b6000614652610b99611c01565b61465b83611248565b1415614339576040805162461bcd60e51b815260206004820152601d60248201527f496e626f7820696e737472756374696f6e2077617320626c6f636b6564000000604482015290519081900360640190fd5b600260e090910152565b60006146c3826150a3565b6146cf57506000611242565b505160a09190910152600190565b60006140108260a00151836150ae90919063ffffffff16565b60408051600160f81b60208083019190915260006021830181905260228084018290528451808503909101815260429093019093528151910120614010906140d0906001615f73565b600061474a836150a3565b614756575060006137b7565b61475f82615f66565b61476b575060006137b7565b613bb7613baa846000015161477f85611248565b614fcd565b600061478f846150a3565b61479b57506000611171565b6147a482615f66565b6147b057506000611171565b613cf46147ca85600001516147c485611248565b86615028565b869063ffffffff6142ab16565b604080516000808252602082019092526060908261480b565b6147f86165d6565b8152602001906001900390816147f05790505b509050613bfd613daa826132c8565b6000614825856150a3565b15806148375750614835846150a3565b155b806148485750614846836150a3565b155b806148595750614857826150a3565b155b1561486657506000611bf8565b8451845184511580159061487c57508451600114155b1561489d5761489288600063ffffffff6150ae16565b600192505050611bf8565b84518451604080516000808252602080830180855285905260ff601b9096019586168385015260608301889052608083018790529251909260019260a080820193601f1981019281900390910190855afa1580156148ff573d6000803e3d6000fd5b5050604051601f190151915061492690508b6001600160a01b03831663ffffffff6150ae16565b5060019a9950505050505050505050565b600160e090910152565b6008101590565b600060e090910152565b600061495c616578565b614964616578565b600060e0820181905280614978878761604b565b90965091506149878787616156565b602085015295506149988787616156565b604085015295506149a987876140ff565b606085015295506149ba87876140ff565b608085015295506149cb878761604b565b60a085015295506149dc878761604b565b92845260c0840192909252509590945092505050565b6149fa616578565b60405180610100016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e001518152509050919050565b6000806001831415614a735750600290506003614fc8565b6002831415614a885750600290506003614fc8565b6003831415614a9d5750600290506003614fc8565b6004831415614ab25750600290506004614fc8565b6005831415614ac75750600290506007614fc8565b6006831415614adc5750600290506004614fc8565b6007831415614af15750600290506007614fc8565b6008831415614b065750600390506004614fc8565b6009831415614b1b5750600390506004614fc8565b600a831415614b305750600290506019614fc8565b6010831415614b4457506002905080614fc8565b6011831415614b5857506002905080614fc8565b6012831415614b6c57506002905080614fc8565b6013831415614b8057506002905080614fc8565b6014831415614b9457506002905080614fc8565b6015831415614ba857506001905080614fc8565b6016831415614bbc57506002905080614fc8565b6017831415614bd057506002905080614fc8565b6018831415614be457506002905080614fc8565b6019831415614bf857506001905080614fc8565b601a831415614c0d5750600290506004614fc8565b601b831415614c225750600290506007614fc8565b6020831415614c375750600190506007614fc8565b6021831415614c4c5750600190506003614fc8565b6022831415614c615750600290506008614fc8565b6023831415614c765750600190506008614fc8565b6030831415614c8a57506001905080614fc8565b6031831415614c9f5750600090506001614fc8565b6032831415614cb45750600090506001614fc8565b6033831415614cc95750600190506002614fc8565b6034831415614cde5750600190506004614fc8565b6035831415614cf35750600290506004614fc8565b6036831415614d085750600090506002614fc8565b6037831415614d1d5750600090506001614fc8565b6038831415614d3157506001905080614fc8565b6039831415614d465750600090506001614fc8565b603a831415614d5b5750600090506002614fc8565b603b831415614d705750600090506001614fc8565b603c831415614d855750600090506001614fc8565b603d831415614d9957506001905080614fc8565b6040831415614dad57506001905080614fc8565b6041831415614dc25750600290506001614fc8565b6042831415614dd75750600390506001614fc8565b6043831415614dec5750600290506001614fc8565b6044831415614e015750600390506001614fc8565b6050831415614e1557506002905080614fc8565b6051831415614e2a5750600390506028614fc8565b6052831415614e3f5750600190506002614fc8565b6053831415614e545750600190506003614fc8565b6054831415614e695750600290506029614fc8565b6060831415614e7e5750600090506064614fc8565b6061831415614e935750600190506064614fc8565b6070831415614ea85750600190506064614fc8565b6072831415614ebd5750600090506028614fc8565b6073831415614ed25750600090506005614fc8565b6074831415614ee7575060009050600a614fc8565b6075831415614efc5750600190506000614fc8565b6076831415614f115750600090506001614fc8565b6077831415614f265750600090506019614fc8565b6078831415614f3b5750600290506019614fc8565b6079831415614f505750600390506019614fc8565b607b831415614f65575060009050600a614fc8565b6080831415614f7b575060049050614e20614fc8565b6040805162461bcd60e51b815260206004820152601860248201527f496e76616c6964206f70636f64653a206f70496e666f28290000000000000000604482015290519081900360640190fd5b915091565b614fd56165d6565b6040805160608101825260ff8516815260208082018590528251600080825291810184526137b793830191615020565b61500d6165d6565b8152602001906001900390816150055790505b509052616423565b6150306165d6565b604080516001808252818301909252606091816020015b61504f6165d6565b815260200190600190039081615047579050509050828160008151811061507257fe5b6020026020010181905250611bf860405180606001604052808760ff16815260200186815260200183815250616423565b6060015160ff161590565b6142b982602001516150bf83615eb4565b616288565b6150cc6165d6565b81156150dc5761126e6001615eb4565b61126e6000615eb4565b6150ee6165d6565b816060015160ff16600214156151355760405162461bcd60e51b81526004018080602001828103825260218152602001806166f76021913960400191505060405180910390fd5b611242826060015160ff16615eb4565b6060015160ff1660031490565b61515a61660a565b615162616629565b61516a616629565b60008061517561660a565b61517d616647565b60405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060008090505b6018811015615ea757886004602002015189600360200201518a600260200201518b600160200201518c60006020020151181818188760006020020152886009602002015189600860200201518a600760200201518b600660200201518c6005602002015118181818876001602002015288600e602002015189600d60200201518a600c60200201518b600b60200201518c600a6020020151181818188760026020020152886013602002015189601260200201518a601160200201518b601060200201518c600f6020020151181818188760036020020152886018602002015189601760200201518a601660200201518b601560200201518c601460200201511818181887600460200201526001603f1b8760016020020151816153c557fe5b0487600160200201516002026001600160401b03161787600460200201511886600060200201526001603f1b87600260200201518161540057fe5b0487600260200201516002026001600160401b03161787600060200201511886600160200201526001603f1b87600360200201518161543b57fe5b0487600360200201516002026001600160401b03161787600160200201511886600260200201526001603f1b87600460200201518161547657fe5b0487600460200201516002026001600160401b0316178760026005811061549957fe5b602002015118606087015286516001603f1b900487600060200201516002026001600160401ba60200201511889600a6020020152856002602002015189600b60200201511889600b6020020152856002602002015189600c60200201511889600c6020020152856002602002015189600d60200201511889600d6020020152856002602002015189600e60200201511889600e6020020152856003602002015189600f60200201511889600ffe5b60208b01519190046410000000009091026001600160401b039081169190911761010085015260408a01516001603d1b8104600890910282161761016085015260608a01516280000081046502000000000090910282161761026085015260808a0151654000000000008104620400009091028216176102c085015260a08a015160028082029092166001603f1b90910417908490602002015260c0890151621000008104651000000000009091026001600160401b039081169190911760a085015260e08a0151664000000000000081046104009091028216176101a08501526101008a0151620800008104652000000000009091028216176102008501526101208a015160048082029092166001603e1b909104176103008501526101408a01516101408b01516001600160401b036001603e1b90910216919004176080840152610160890151670400000000000000906101608b01516001600160401b036040909102169190041760e084015261018089015162200000906101808b01516001600160401b036508000000000090910216919004176101408401526101a08901516602000000000000906101a08b01516001600160401b0361800090910216919004176102408401526101c08901516008906101c08b01516001600160401b036001603d1b90910216919004176102a08401526101e0890151641000000000906101e08b01516001600160401b03631000000090910216919004176020840152610200808a01516102008b01516001600160401b0366800000000000009091021691900417610120840152610220890151648000000000906102208b01516001600160401b036302000000909102169190041761018084015261024089015165080000000000906102408b01516001600160401b036220000090910216919004176101e0840152610260890151610100906102608b01516001600160401b03600160381b90910216919004176102e0840152610280890151642000000000906102808b01516001600160401b036308000000909102169190041760608401526102a089015165100000000000906102a08b01516001600160401b0362100000909102169190041760c08401526102c08901516302000000906102c08b01516001600160401b0364800000000090910216919004176101c08401526102e0890151600160381b906102e08b01516001600160401b036101009091021691900417610220840152610300890151660400000000000090048960186020020151614000026001600160401b031617836014602002015282600a602002015183600560200201511916836000602002015118896000602002015282600b602002015183600660200201511916836001602002015118896001602002015282600c602002015183600760200201511916836002602002015118896002602002015282600d602002015183600860200201511916836003602002015118896003602002015282600e602002015183600960200201511916836004602002015118896004602002015282600f602002015183600a602002015119168360056020020151188960056020020152826010602002015183600b602002015119168360066020020151188960066020020152826011602002015183600c602002015119168360076020020151188960076020020152826012602002015183600d602002015119168360086020020151188960086020020152826013602002015183600e602002015119168360096020020151188960096020020152826014602002015183600f6020020151191683600a60200201511889600a602002015282601560200201518360106020020151191683600b60200201511889600b602002015282601660200201518360116020020151191683600c60200201511889600c602002015282601760200201518360126020020151191683600d60200201511889600d602002015282601860200201518360136020020151191683600e60200201511889600e602002015282600060200201518360146020020151191683600f60200201511889600fe9557fe5b602002015189511889526001016152a4565b5096979650505050505050565b615ebc6165d6565b6040805160a0810182528381528151606081018352600080825260208281018290528451828152808201865293949085019390830191615f12565b615eff6165d6565b815260200190600190039081615ef75790505b50905281526040805160008082526020828101909352919092019190615f4e565b615f3b6165d6565b815260200190600190039081615f335790505b50815260006020820152600160409091015292915050565b6060015160ff1660011490565b615f7b6165d6565b6040805160a0810182528481528151606081018352600080825260208281018290528451828152808201865293949085019390830191615fd1565b615fbe6165d6565b815260200190600190039081615fb65790505b5090528152604080516000808252602082810190935291909201919061600d565b615ffa6165d6565b815260200190600190039081615ff25790505b508152606460208201526040019290925250919050565b6000808260010184848151811061603757fe5b016020015190925060f81c90509250929050565b60008082845110158015616063575060208385510310155b6160a0576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b602083016145fb858563ffffffff61648a16565b60006160be6165d6565b826000806160ca6165d6565b60006160d68986616024565b90955093506160e58986616024565b9095509250600160ff851614156161065761610089866140ff565b90955091505b61611089866164a6565b9095509050600160ff8516141561613b578461612d848385615028565b96509650505050505061428a565b846161468483614fcd565b9650965050505050509250929050565b60006161606165d6565b82845110158015616175575060408385510310155b6161b1576040805162461bcd60e51b81526020600482015260086024820152671d1bc81cda1bdc9d60c21b604482015290519081900360640190fd5b6000806161be86866164a6565b90945091506161cd868561604b565b9094509050836161dd8383611195565b9350935050509250929050565b600c90565b60006060600083905060608660ff1660405190808252806020026020018201604052801561623757816020015b6162246165d6565b81526020019060019003908161621c5790505b50905060005b8760ff168160ff16101561627b5761625587846140ff565b8351849060ff851690811061626657fe5b6020908102919091010152925060010161623d565b5090969095509350505050565b6162906165d6565b6040805160028082526060828101909352816020015b6162ae6165d6565b8152602001906001900390816162a657905050905082816000815181106162d157fe5b602002602001018190525083816001815181106162ea57fe5b602002602001018190525061117181611fe8565b606081015160009060ff166003141561631d5750604081015151610f68565b506001610f68565b606081015160009060ff1661633c57506001610f68565b606082015160ff166001141561635457506000610f68565b606082015160ff16600214156163a8576040805162461bcd60e51b81526020600482015260146024820152736d75737420686176652066756c6c2076616c756560601b604482015290519081900360640190fd5b606082015160ff166003141561640b5760408201515160005b81811015616400576163e9846040015182815181106163dc57fe5b6020026020010151616325565b6163f857600092505050610f68565b6001016163c1565b506001915050610f68565b606082015160ff166064141561132757506000610f68565b61642b6165d6565b6040805160a0810182526000808252602080830186905283518281529081018452919283019190616472565b61645f6165d6565b8152602001906001900390816164575790505b50815260016020820181905260409091015292915050565b6000816020018351101561649d57600080fd5b50016020015190565b600080602083016145fb858563ffffffff61648a16565b6040518061010001604052806000801916815260200160608152602001600063ffffffff1681526020016060815260200160608152602001606081526020016060815260200160006001600160401b031681525090565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081019190915290565b60408051610100810190915260008152602081016165946165d6565b81526020016165a16165d6565b81526020016165ae6165d6565b81526020016165bb6165d6565b81526000602082018190526040820181905260609091015290565b6040518060a00160405280600081526020016165f0616666565b815260606020820181905260006040830181905291015290565b6040518061032001604052806019906020820280388339509192915050565b6040518060a001604052806005906020820280388339509192915050565b6040518061030001604052806018906020820280388339509192915050565b604080516060808201835260008083526020830152918101919091529056fe50726f6f6620686164206e6f6e206d61746368696e6720737461727420737461746573656e74206d65737361676520646f65736e2774206d61746368206f7574707574206d6573736167654c6f67206e6f742063616c6c65642c20627574206d657373616765206973206e6f6e7a65726f56616c7565206d757374206861766520612076616c6964207479706520636f646553656e642076616c756520657863656564732073697a65206c696d69742c206e6f206d6573736167652073686f756c642062652073656e744c6f676765642076616c756520646f65736e2774206d61746368206f7574707574206c6f6753656e64206e6f742063616c6c65642c20627574206d657373616765206973206e6f6e7a65726fa265627a7a72315820c8889b4af643c73817105e0420216097e0d1479f9d5927461a25e9c6c614af9364736f6c63430005110032"

// DeployExecutionChallenge deploys a new Ethereum contract, binding an instance of ExecutionChallenge to it.
func DeployExecutionChallenge(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ExecutionChallenge, error) {
	parsed, err := abi.JSON(strings.NewReader(ExecutionChallengeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ExecutionChallengeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ExecutionChallenge{ExecutionChallengeCaller: ExecutionChallengeCaller{contract: contract}, ExecutionChallengeTransactor: ExecutionChallengeTransactor{contract: contract}, ExecutionChallengeFilterer: ExecutionChallengeFilterer{contract: contract}}, nil
}

// ExecutionChallenge is an auto generated Go binding around an Ethereum contract.
type ExecutionChallenge struct {
	ExecutionChallengeCaller     // Read-only binding to the contract
	ExecutionChallengeTransactor // Write-only binding to the contract
	ExecutionChallengeFilterer   // Log filterer for contract events
}

// ExecutionChallengeCaller is an auto generated read-only Go binding around an Ethereum contract.
type ExecutionChallengeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExecutionChallengeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ExecutionChallengeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExecutionChallengeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ExecutionChallengeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExecutionChallengeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ExecutionChallengeSession struct {
	Contract     *ExecutionChallenge // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ExecutionChallengeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ExecutionChallengeCallerSession struct {
	Contract *ExecutionChallengeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ExecutionChallengeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ExecutionChallengeTransactorSession struct {
	Contract     *ExecutionChallengeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ExecutionChallengeRaw is an auto generated low-level Go binding around an Ethereum contract.
type ExecutionChallengeRaw struct {
	Contract *ExecutionChallenge // Generic contract binding to access the raw methods on
}

// ExecutionChallengeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ExecutionChallengeCallerRaw struct {
	Contract *ExecutionChallengeCaller // Generic read-only contract binding to access the raw methods on
}

// ExecutionChallengeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ExecutionChallengeTransactorRaw struct {
	Contract *ExecutionChallengeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewExecutionChallenge creates a new instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallenge(address common.Address, backend bind.ContractBackend) (*ExecutionChallenge, error) {
	contract, err := bindExecutionChallenge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallenge{ExecutionChallengeCaller: ExecutionChallengeCaller{contract: contract}, ExecutionChallengeTransactor: ExecutionChallengeTransactor{contract: contract}, ExecutionChallengeFilterer: ExecutionChallengeFilterer{contract: contract}}, nil
}

// NewExecutionChallengeCaller creates a new read-only instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallengeCaller(address common.Address, caller bind.ContractCaller) (*ExecutionChallengeCaller, error) {
	contract, err := bindExecutionChallenge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeCaller{contract: contract}, nil
}

// NewExecutionChallengeTransactor creates a new write-only instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallengeTransactor(address common.Address, transactor bind.ContractTransactor) (*ExecutionChallengeTransactor, error) {
	contract, err := bindExecutionChallenge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeTransactor{contract: contract}, nil
}

// NewExecutionChallengeFilterer creates a new log filterer instance of ExecutionChallenge, bound to a specific deployed contract.
func NewExecutionChallengeFilterer(address common.Address, filterer bind.ContractFilterer) (*ExecutionChallengeFilterer, error) {
	contract, err := bindExecutionChallenge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeFilterer{contract: contract}, nil
}

// bindExecutionChallenge binds a generic wrapper to an already deployed contract.
func bindExecutionChallenge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ExecutionChallengeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ExecutionChallenge *ExecutionChallengeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ExecutionChallenge.Contract.ExecutionChallengeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ExecutionChallenge *ExecutionChallengeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ExecutionChallengeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ExecutionChallenge *ExecutionChallengeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ExecutionChallengeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ExecutionChallenge *ExecutionChallengeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ExecutionChallenge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ExecutionChallenge *ExecutionChallengeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ExecutionChallenge *ExecutionChallengeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.contract.Transact(opts, method, params...)
}

// BisectAssertion is a paid mutator transaction binding the contract method 0x6f537a39.
//
// Solidity: function bisectAssertion(bytes32 _beforeInbox, bytes32[] _machineHashes, uint32 inboxInsnIndex, bytes32[] _messageAccs, bytes32[] _logAccs, uint64[] _outCounts, uint64[] _gases, uint64 _totalSteps) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) BisectAssertion(opts *bind.TransactOpts, _beforeInbox [32]byte, _machineHashes [][32]byte, inboxInsnIndex uint32, _messageAccs [][32]byte, _logAccs [][32]byte, _outCounts []uint64, _gases []uint64, _totalSteps uint64) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "bisectAssertion", _beforeInbox, _machineHashes, inboxInsnIndex, _messageAccs, _logAccs, _outCounts, _gases, _totalSteps)
}

// BisectAssertion is a paid mutator transaction binding the contract method 0x6f537a39.
//
// Solidity: function bisectAssertion(bytes32 _beforeInbox, bytes32[] _machineHashes, uint32 inboxInsnIndex, bytes32[] _messageAccs, bytes32[] _logAccs, uint64[] _outCounts, uint64[] _gases, uint64 _totalSteps) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) BisectAssertion(_beforeInbox [32]byte, _machineHashes [][32]byte, inboxInsnIndex uint32, _messageAccs [][32]byte, _logAccs [][32]byte, _outCounts []uint64, _gases []uint64, _totalSteps uint64) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.BisectAssertion(&_ExecutionChallenge.TransactOpts, _beforeInbox, _machineHashes, inboxInsnIndex, _messageAccs, _logAccs, _outCounts, _gases, _totalSteps)
}

// BisectAssertion is a paid mutator transaction binding the contract method 0x6f537a39.
//
// Solidity: function bisectAssertion(bytes32 _beforeInbox, bytes32[] _machineHashes, uint32 inboxInsnIndex, bytes32[] _messageAccs, bytes32[] _logAccs, uint64[] _outCounts, uint64[] _gases, uint64 _totalSteps) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) BisectAssertion(_beforeInbox [32]byte, _machineHashes [][32]byte, inboxInsnIndex uint32, _messageAccs [][32]byte, _logAccs [][32]byte, _outCounts []uint64, _gases []uint64, _totalSteps uint64) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.BisectAssertion(&_ExecutionChallenge.TransactOpts, _beforeInbox, _machineHashes, inboxInsnIndex, _messageAccs, _logAccs, _outCounts, _gases, _totalSteps)
}

// ChooseSegment is a paid mutator transaction binding the contract method 0x79a9ad85.
//
// Solidity: function chooseSegment(uint256 _segmentToChallenge, bytes _proof, bytes32 _bisectionRoot, bytes32 _bisectionHash) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) ChooseSegment(opts *bind.TransactOpts, _segmentToChallenge *big.Int, _proof []byte, _bisectionRoot [32]byte, _bisectionHash [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "chooseSegment", _segmentToChallenge, _proof, _bisectionRoot, _bisectionHash)
}

// ChooseSegment is a paid mutator transaction binding the contract method 0x79a9ad85.
//
// Solidity: function chooseSegment(uint256 _segmentToChallenge, bytes _proof, bytes32 _bisectionRoot, bytes32 _bisectionHash) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) ChooseSegment(_segmentToChallenge *big.Int, _proof []byte, _bisectionRoot [32]byte, _bisectionHash [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ChooseSegment(&_ExecutionChallenge.TransactOpts, _segmentToChallenge, _proof, _bisectionRoot, _bisectionHash)
}

// ChooseSegment is a paid mutator transaction binding the contract method 0x79a9ad85.
//
// Solidity: function chooseSegment(uint256 _segmentToChallenge, bytes _proof, bytes32 _bisectionRoot, bytes32 _bisectionHash) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) ChooseSegment(_segmentToChallenge *big.Int, _proof []byte, _bisectionRoot [32]byte, _bisectionHash [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.ChooseSegment(&_ExecutionChallenge.TransactOpts, _segmentToChallenge, _proof, _bisectionRoot, _bisectionHash)
}

// InitializeBisection is a paid mutator transaction binding the contract method 0x02ad1e4e.
//
// Solidity: function initializeBisection(address _rollupAddress, address _asserter, address _challenger, uint256 _challengePeriodTicks, bytes32 _challengeState) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) InitializeBisection(opts *bind.TransactOpts, _rollupAddress common.Address, _asserter common.Address, _challenger common.Address, _challengePeriodTicks *big.Int, _challengeState [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "initializeBisection", _rollupAddress, _asserter, _challenger, _challengePeriodTicks, _challengeState)
}

// InitializeBisection is a paid mutator transaction binding the contract method 0x02ad1e4e.
//
// Solidity: function initializeBisection(address _rollupAddress, address _asserter, address _challenger, uint256 _challengePeriodTicks, bytes32 _challengeState) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) InitializeBisection(_rollupAddress common.Address, _asserter common.Address, _challenger common.Address, _challengePeriodTicks *big.Int, _challengeState [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.InitializeBisection(&_ExecutionChallenge.TransactOpts, _rollupAddress, _asserter, _challenger, _challengePeriodTicks, _challengeState)
}

// InitializeBisection is a paid mutator transaction binding the contract method 0x02ad1e4e.
//
// Solidity: function initializeBisection(address _rollupAddress, address _asserter, address _challenger, uint256 _challengePeriodTicks, bytes32 _challengeState) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) InitializeBisection(_rollupAddress common.Address, _asserter common.Address, _challenger common.Address, _challengePeriodTicks *big.Int, _challengeState [32]byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.InitializeBisection(&_ExecutionChallenge.TransactOpts, _rollupAddress, _asserter, _challenger, _challengePeriodTicks, _challengeState)
}

// OneStepProof is a paid mutator transaction binding the contract method 0x82498b81.
//
// Solidity: function oneStepProof(bytes32 _beforeHash, bytes32 _beforeInbox, uint256 _beforeInboxValueSize, bytes32 _afterHash, bool _didInboxInsns, bytes32 _firstMessage, bytes32 _lastMessage, bytes32 _firstLog, bytes32 _lastLog, uint64 _gas, bytes _proof) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) OneStepProof(opts *bind.TransactOpts, _beforeHash [32]byte, _beforeInbox [32]byte, _beforeInboxValueSize *big.Int, _afterHash [32]byte, _didInboxInsns bool, _firstMessage [32]byte, _lastMessage [32]byte, _firstLog [32]byte, _lastLog [32]byte, _gas uint64, _proof []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "oneStepProof", _beforeHash, _beforeInbox, _beforeInboxValueSize, _afterHash, _didInboxInsns, _firstMessage, _lastMessage, _firstLog, _lastLog, _gas, _proof)
}

// OneStepProof is a paid mutator transaction binding the contract method 0x82498b81.
//
// Solidity: function oneStepProof(bytes32 _beforeHash, bytes32 _beforeInbox, uint256 _beforeInboxValueSize, bytes32 _afterHash, bool _didInboxInsns, bytes32 _firstMessage, bytes32 _lastMessage, bytes32 _firstLog, bytes32 _lastLog, uint64 _gas, bytes _proof) returns()
func (_ExecutionChallenge *ExecutionChallengeSession) OneStepProof(_beforeHash [32]byte, _beforeInbox [32]byte, _beforeInboxValueSize *big.Int, _afterHash [32]byte, _didInboxInsns bool, _firstMessage [32]byte, _lastMessage [32]byte, _firstLog [32]byte, _lastLog [32]byte, _gas uint64, _proof []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.OneStepProof(&_ExecutionChallenge.TransactOpts, _beforeHash, _beforeInbox, _beforeInboxValueSize, _afterHash, _didInboxInsns, _firstMessage, _lastMessage, _firstLog, _lastLog, _gas, _proof)
}

// OneStepProof is a paid mutator transaction binding the contract method 0x82498b81.
//
// Solidity: function oneStepProof(bytes32 _beforeHash, bytes32 _beforeInbox, uint256 _beforeInboxValueSize, bytes32 _afterHash, bool _didInboxInsns, bytes32 _firstMessage, bytes32 _lastMessage, bytes32 _firstLog, bytes32 _lastLog, uint64 _gas, bytes _proof) returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) OneStepProof(_beforeHash [32]byte, _beforeInbox [32]byte, _beforeInboxValueSize *big.Int, _afterHash [32]byte, _didInboxInsns bool, _firstMessage [32]byte, _lastMessage [32]byte, _firstLog [32]byte, _lastLog [32]byte, _gas uint64, _proof []byte) (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.OneStepProof(&_ExecutionChallenge.TransactOpts, _beforeHash, _beforeInbox, _beforeInboxValueSize, _afterHash, _didInboxInsns, _firstMessage, _lastMessage, _firstLog, _lastLog, _gas, _proof)
}

// TimeoutChallenge is a paid mutator transaction binding the contract method 0xced5c1bf.
//
// Solidity: function timeoutChallenge() returns()
func (_ExecutionChallenge *ExecutionChallengeTransactor) TimeoutChallenge(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExecutionChallenge.contract.Transact(opts, "timeoutChallenge")
}

// TimeoutChallenge is a paid mutator transaction binding the contract method 0xced5c1bf.
//
// Solidity: function timeoutChallenge() returns()
func (_ExecutionChallenge *ExecutionChallengeSession) TimeoutChallenge() (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.TimeoutChallenge(&_ExecutionChallenge.TransactOpts)
}

// TimeoutChallenge is a paid mutator transaction binding the contract method 0xced5c1bf.
//
// Solidity: function timeoutChallenge() returns()
func (_ExecutionChallenge *ExecutionChallengeTransactorSession) TimeoutChallenge() (*types.Transaction, error) {
	return _ExecutionChallenge.Contract.TimeoutChallenge(&_ExecutionChallenge.TransactOpts)
}

// ExecutionChallengeAsserterTimedOutIterator is returned from FilterAsserterTimedOut and is used to iterate over the raw logs and unpacked data for AsserterTimedOut events raised by the ExecutionChallenge contract.
type ExecutionChallengeAsserterTimedOutIterator struct {
	Event *ExecutionChallengeAsserterTimedOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeAsserterTimedOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeAsserterTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeAsserterTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeAsserterTimedOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeAsserterTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeAsserterTimedOut represents a AsserterTimedOut event raised by the ExecutionChallenge contract.
type ExecutionChallengeAsserterTimedOut struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAsserterTimedOut is a free log retrieval operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterAsserterTimedOut(opts *bind.FilterOpts) (*ExecutionChallengeAsserterTimedOutIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "AsserterTimedOut")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeAsserterTimedOutIterator{contract: _ExecutionChallenge.contract, event: "AsserterTimedOut", logs: logs, sub: sub}, nil
}

// WatchAsserterTimedOut is a free log subscription operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchAsserterTimedOut(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeAsserterTimedOut) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "AsserterTimedOut")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeAsserterTimedOut)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "AsserterTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAsserterTimedOut is a log parse operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseAsserterTimedOut(log types.Log) (*ExecutionChallengeAsserterTimedOut, error) {
	event := new(ExecutionChallengeAsserterTimedOut)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "AsserterTimedOut", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeBisectedAssertionIterator is returned from FilterBisectedAssertion and is used to iterate over the raw logs and unpacked data for BisectedAssertion events raised by the ExecutionChallenge contract.
type ExecutionChallengeBisectedAssertionIterator struct {
	Event *ExecutionChallengeBisectedAssertion // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeBisectedAssertionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeBisectedAssertion)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeBisectedAssertion)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeBisectedAssertionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeBisectedAssertionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeBisectedAssertion represents a BisectedAssertion event raised by the ExecutionChallenge contract.
type ExecutionChallengeBisectedAssertion struct {
	MachineHashes  [][32]byte
	InboxInsnIndex uint32
	MessageAccs    [][32]byte
	LogAccs        [][32]byte
	OutCounts      []uint64
	Gases          []uint64
	TotalSteps     uint64
	DeadlineTicks  *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterBisectedAssertion is a free log retrieval operation binding the contract event 0xfdfc7d7356ac103488916cfffd6e537843dadc44dc71695a7ed504d9f6685287.
//
// Solidity: event BisectedAssertion(bytes32[] machineHashes, uint32 inboxInsnIndex, bytes32[] messageAccs, bytes32[] logAccs, uint64[] outCounts, uint64[] gases, uint64 totalSteps, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterBisectedAssertion(opts *bind.FilterOpts) (*ExecutionChallengeBisectedAssertionIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "BisectedAssertion")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeBisectedAssertionIterator{contract: _ExecutionChallenge.contract, event: "BisectedAssertion", logs: logs, sub: sub}, nil
}

// WatchBisectedAssertion is a free log subscription operation binding the contract event 0xfdfc7d7356ac103488916cfffd6e537843dadc44dc71695a7ed504d9f6685287.
//
// Solidity: event BisectedAssertion(bytes32[] machineHashes, uint32 inboxInsnIndex, bytes32[] messageAccs, bytes32[] logAccs, uint64[] outCounts, uint64[] gases, uint64 totalSteps, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchBisectedAssertion(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeBisectedAssertion) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "BisectedAssertion")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeBisectedAssertion)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "BisectedAssertion", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBisectedAssertion is a log parse operation binding the contract event 0xfdfc7d7356ac103488916cfffd6e537843dadc44dc71695a7ed504d9f6685287.
//
// Solidity: event BisectedAssertion(bytes32[] machineHashes, uint32 inboxInsnIndex, bytes32[] messageAccs, bytes32[] logAccs, uint64[] outCounts, uint64[] gases, uint64 totalSteps, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseBisectedAssertion(log types.Log) (*ExecutionChallengeBisectedAssertion, error) {
	event := new(ExecutionChallengeBisectedAssertion)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "BisectedAssertion", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeChallengerTimedOutIterator is returned from FilterChallengerTimedOut and is used to iterate over the raw logs and unpacked data for ChallengerTimedOut events raised by the ExecutionChallenge contract.
type ExecutionChallengeChallengerTimedOutIterator struct {
	Event *ExecutionChallengeChallengerTimedOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeChallengerTimedOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeChallengerTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeChallengerTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeChallengerTimedOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeChallengerTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeChallengerTimedOut represents a ChallengerTimedOut event raised by the ExecutionChallenge contract.
type ExecutionChallengeChallengerTimedOut struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterChallengerTimedOut is a free log retrieval operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterChallengerTimedOut(opts *bind.FilterOpts) (*ExecutionChallengeChallengerTimedOutIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "ChallengerTimedOut")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeChallengerTimedOutIterator{contract: _ExecutionChallenge.contract, event: "ChallengerTimedOut", logs: logs, sub: sub}, nil
}

// WatchChallengerTimedOut is a free log subscription operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchChallengerTimedOut(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeChallengerTimedOut) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "ChallengerTimedOut")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeChallengerTimedOut)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengerTimedOut is a log parse operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseChallengerTimedOut(log types.Log) (*ExecutionChallengeChallengerTimedOut, error) {
	event := new(ExecutionChallengeChallengerTimedOut)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeContinuedIterator is returned from FilterContinued and is used to iterate over the raw logs and unpacked data for Continued events raised by the ExecutionChallenge contract.
type ExecutionChallengeContinuedIterator struct {
	Event *ExecutionChallengeContinued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeContinuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeContinued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeContinued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeContinuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeContinuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeContinued represents a Continued event raised by the ExecutionChallenge contract.
type ExecutionChallengeContinued struct {
	SegmentIndex  *big.Int
	DeadlineTicks *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterContinued is a free log retrieval operation binding the contract event 0x1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e4.
//
// Solidity: event Continued(uint256 segmentIndex, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterContinued(opts *bind.FilterOpts) (*ExecutionChallengeContinuedIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "Continued")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeContinuedIterator{contract: _ExecutionChallenge.contract, event: "Continued", logs: logs, sub: sub}, nil
}

// WatchContinued is a free log subscription operation binding the contract event 0x1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e4.
//
// Solidity: event Continued(uint256 segmentIndex, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchContinued(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeContinued) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "Continued")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeContinued)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "Continued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContinued is a log parse operation binding the contract event 0x1e1c1e4e68a25c69a078a396e73975691c071d69ef789015dc16a562957804e4.
//
// Solidity: event Continued(uint256 segmentIndex, uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseContinued(log types.Log) (*ExecutionChallengeContinued, error) {
	event := new(ExecutionChallengeContinued)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "Continued", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeInitiatedChallengeIterator is returned from FilterInitiatedChallenge and is used to iterate over the raw logs and unpacked data for InitiatedChallenge events raised by the ExecutionChallenge contract.
type ExecutionChallengeInitiatedChallengeIterator struct {
	Event *ExecutionChallengeInitiatedChallenge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeInitiatedChallengeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeInitiatedChallenge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeInitiatedChallenge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeInitiatedChallengeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeInitiatedChallengeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeInitiatedChallenge represents a InitiatedChallenge event raised by the ExecutionChallenge contract.
type ExecutionChallengeInitiatedChallenge struct {
	DeadlineTicks *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterInitiatedChallenge is a free log retrieval operation binding the contract event 0xe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc67.
//
// Solidity: event InitiatedChallenge(uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterInitiatedChallenge(opts *bind.FilterOpts) (*ExecutionChallengeInitiatedChallengeIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "InitiatedChallenge")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeInitiatedChallengeIterator{contract: _ExecutionChallenge.contract, event: "InitiatedChallenge", logs: logs, sub: sub}, nil
}

// WatchInitiatedChallenge is a free log subscription operation binding the contract event 0xe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc67.
//
// Solidity: event InitiatedChallenge(uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchInitiatedChallenge(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeInitiatedChallenge) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "InitiatedChallenge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeInitiatedChallenge)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiatedChallenge is a log parse operation binding the contract event 0xe070f23072cbc6c0fc7253b8d0120649d5f9d6e19a8aeab79eb50aa6360bcc67.
//
// Solidity: event InitiatedChallenge(uint256 deadlineTicks)
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseInitiatedChallenge(log types.Log) (*ExecutionChallengeInitiatedChallenge, error) {
	event := new(ExecutionChallengeInitiatedChallenge)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExecutionChallengeOneStepProofCompletedIterator is returned from FilterOneStepProofCompleted and is used to iterate over the raw logs and unpacked data for OneStepProofCompleted events raised by the ExecutionChallenge contract.
type ExecutionChallengeOneStepProofCompletedIterator struct {
	Event *ExecutionChallengeOneStepProofCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExecutionChallengeOneStepProofCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExecutionChallengeOneStepProofCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExecutionChallengeOneStepProofCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExecutionChallengeOneStepProofCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExecutionChallengeOneStepProofCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExecutionChallengeOneStepProofCompleted represents a OneStepProofCompleted event raised by the ExecutionChallenge contract.
type ExecutionChallengeOneStepProofCompleted struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOneStepProofCompleted is a free log retrieval operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_ExecutionChallenge *ExecutionChallengeFilterer) FilterOneStepProofCompleted(opts *bind.FilterOpts) (*ExecutionChallengeOneStepProofCompletedIterator, error) {

	logs, sub, err := _ExecutionChallenge.contract.FilterLogs(opts, "OneStepProofCompleted")
	if err != nil {
		return nil, err
	}
	return &ExecutionChallengeOneStepProofCompletedIterator{contract: _ExecutionChallenge.contract, event: "OneStepProofCompleted", logs: logs, sub: sub}, nil
}

// WatchOneStepProofCompleted is a free log subscription operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_ExecutionChallenge *ExecutionChallengeFilterer) WatchOneStepProofCompleted(opts *bind.WatchOpts, sink chan<- *ExecutionChallengeOneStepProofCompleted) (event.Subscription, error) {

	logs, sub, err := _ExecutionChallenge.contract.WatchLogs(opts, "OneStepProofCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExecutionChallengeOneStepProofCompleted)
				if err := _ExecutionChallenge.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOneStepProofCompleted is a log parse operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_ExecutionChallenge *ExecutionChallengeFilterer) ParseOneStepProofCompleted(log types.Log) (*ExecutionChallengeOneStepProofCompleted, error) {
	event := new(ExecutionChallengeOneStepProofCompleted)
	if err := _ExecutionChallenge.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// KeccakABI is the input ABI used to generate the binding from.
const KeccakABI = "[]"

// KeccakBin is the compiled bytecode used for deploying new contracts.
var KeccakBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723158207643f5179a8e7d98fca39c6dbdc84e9cb36d9518d13abca0e699a56ea0ce9aab64736f6c63430005110032"

// DeployKeccak deploys a new Ethereum contract, binding an instance of Keccak to it.
func DeployKeccak(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Keccak, error) {
	parsed, err := abi.JSON(strings.NewReader(KeccakABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(KeccakBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Keccak{KeccakCaller: KeccakCaller{contract: contract}, KeccakTransactor: KeccakTransactor{contract: contract}, KeccakFilterer: KeccakFilterer{contract: contract}}, nil
}

// Keccak is an auto generated Go binding around an Ethereum contract.
type Keccak struct {
	KeccakCaller     // Read-only binding to the contract
	KeccakTransactor // Write-only binding to the contract
	KeccakFilterer   // Log filterer for contract events
}

// KeccakCaller is an auto generated read-only Go binding around an Ethereum contract.
type KeccakCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeccakTransactor is an auto generated write-only Go binding around an Ethereum contract.
type KeccakTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeccakFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type KeccakFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeccakSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type KeccakSession struct {
	Contract     *Keccak           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KeccakCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type KeccakCallerSession struct {
	Contract *KeccakCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// KeccakTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type KeccakTransactorSession struct {
	Contract     *KeccakTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KeccakRaw is an auto generated low-level Go binding around an Ethereum contract.
type KeccakRaw struct {
	Contract *Keccak // Generic contract binding to access the raw methods on
}

// KeccakCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type KeccakCallerRaw struct {
	Contract *KeccakCaller // Generic read-only contract binding to access the raw methods on
}

// KeccakTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type KeccakTransactorRaw struct {
	Contract *KeccakTransactor // Generic write-only contract binding to access the raw methods on
}

// NewKeccak creates a new instance of Keccak, bound to a specific deployed contract.
func NewKeccak(address common.Address, backend bind.ContractBackend) (*Keccak, error) {
	contract, err := bindKeccak(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Keccak{KeccakCaller: KeccakCaller{contract: contract}, KeccakTransactor: KeccakTransactor{contract: contract}, KeccakFilterer: KeccakFilterer{contract: contract}}, nil
}

// NewKeccakCaller creates a new read-only instance of Keccak, bound to a specific deployed contract.
func NewKeccakCaller(address common.Address, caller bind.ContractCaller) (*KeccakCaller, error) {
	contract, err := bindKeccak(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &KeccakCaller{contract: contract}, nil
}

// NewKeccakTransactor creates a new write-only instance of Keccak, bound to a specific deployed contract.
func NewKeccakTransactor(address common.Address, transactor bind.ContractTransactor) (*KeccakTransactor, error) {
	contract, err := bindKeccak(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &KeccakTransactor{contract: contract}, nil
}

// NewKeccakFilterer creates a new log filterer instance of Keccak, bound to a specific deployed contract.
func NewKeccakFilterer(address common.Address, filterer bind.ContractFilterer) (*KeccakFilterer, error) {
	contract, err := bindKeccak(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &KeccakFilterer{contract: contract}, nil
}

// bindKeccak binds a generic wrapper to an already deployed contract.
func bindKeccak(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(KeccakABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Keccak *KeccakRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Keccak.Contract.KeccakCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Keccak *KeccakRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Keccak.Contract.KeccakTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Keccak *KeccakRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Keccak.Contract.KeccakTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Keccak *KeccakCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Keccak.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Keccak *KeccakTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Keccak.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Keccak *KeccakTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Keccak.Contract.contract.Transact(opts, method, params...)
}

// OneStepProofABI is the input ABI used to generate the binding from.
const OneStepProofABI = "[]"

// OneStepProofBin is the compiled bytecode used for deploying new contracts.
var OneStepProofBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820ec3c10d8a9d3eb89b6118709e234281fb27e3847530250b4137fd6ed1bf219a764736f6c63430005110032"

// DeployOneStepProof deploys a new Ethereum contract, binding an instance of OneStepProof to it.
func DeployOneStepProof(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// OneStepProof is an auto generated Go binding around an Ethereum contract.
type OneStepProof struct {
	OneStepProofCaller     // Read-only binding to the contract
	OneStepProofTransactor // Write-only binding to the contract
	OneStepProofFilterer   // Log filterer for contract events
}

// OneStepProofCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofSession struct {
	Contract     *OneStepProof     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProofCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofCallerSession struct {
	Contract *OneStepProofCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// OneStepProofTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTransactorSession struct {
	Contract     *OneStepProofTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// OneStepProofRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofRaw struct {
	Contract *OneStepProof // Generic contract binding to access the raw methods on
}

// OneStepProofCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofCallerRaw struct {
	Contract *OneStepProofCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTransactorRaw struct {
	Contract *OneStepProofTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof creates a new instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProof(address common.Address, backend bind.ContractBackend) (*OneStepProof, error) {
	contract, err := bindOneStepProof(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// NewOneStepProofCaller creates a new read-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofCaller, error) {
	contract, err := bindOneStepProof(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofCaller{contract: contract}, nil
}

// NewOneStepProofTransactor creates a new write-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTransactor, error) {
	contract, err := bindOneStepProof(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTransactor{contract: contract}, nil
}

// NewOneStepProofFilterer creates a new log filterer instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofFilterer, error) {
	contract, err := bindOneStepProof(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofFilterer{contract: contract}, nil
}

// bindOneStepProof binds a generic wrapper to an already deployed contract.
func bindOneStepProof(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.OneStepProofCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transact(opts, method, params...)
}
