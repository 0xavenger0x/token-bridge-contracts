syntax = "proto3";
package valprotocol;
import "arb-util/common/common.proto";
option go_package = "github.com/offchainlabs/arbitrum/packages/arb-validator-core/valprotocol";

message PreconditionBuf {
    common.HashBuf beforeHash = 1;
    common.HashBuf beforeInbox = 2;
}

message ExecutionAssertionStubBuf {
    common.HashBuf afterHash = 1;
    bool   didInboxInsn = 2;
    uint64 numGas = 3;
    common.HashBuf firstMessageHash = 4;
    common.HashBuf lastMessageHash = 5;
    uint64 messageCount = 6;
    common.HashBuf firstLogHash = 7;
    common.HashBuf lastLogHash = 8;
    uint64 logCount = 9;
}

message ChainParamsBuf {
    common.BigIntegerBuf stakeRequirement = 1;
    common.TimeTicksBuf gracePeriod = 2;
    uint64 maxExecutionSteps = 3;
    uint64 ArbGasSpeedLimitPerTick = 4;
}

message VMProtoDataBuf {
    common.HashBuf machineHash = 1;
    common.HashBuf inboxTop = 2;
    common.BigIntegerBuf inboxCount = 3;
    common.BigIntegerBuf messageCount = 4;
    common.BigIntegerBuf logCount = 5;
}

message AssertionParamsBuf {
    uint64 numSteps = 1;
    common.BigIntegerBuf importedMessageCount = 2;
}

message AssertionClaimBuf {
    common.HashBuf afterInboxTop = 1;
    common.HashBuf importedMessagesSlice = 2;
    valprotocol.ExecutionAssertionStubBuf assertionStub = 3;
}

message DisputableNodeBuf {
    AssertionParamsBuf assertionParams = 1;
    AssertionClaimBuf assertionClaim = 2;
    common.HashBuf maxInboxTop = 3;
    common.BigIntegerBuf maxInboxCount = 4;
}
