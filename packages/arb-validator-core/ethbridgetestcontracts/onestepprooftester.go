// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgetestcontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProofABI is the input ABI used to generate the binding from.
const OneStepProofABI = "[]"

// OneStepProofBin is the compiled bytecode used for deploying new contracts.
var OneStepProofBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820ca8a5c5e2068c0d906d826ad9e35880d508375525a7b1d17908f2ae627aa354f64736f6c63430005110032"

// DeployOneStepProof deploys a new Ethereum contract, binding an instance of OneStepProof to it.
func DeployOneStepProof(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// OneStepProof is an auto generated Go binding around an Ethereum contract.
type OneStepProof struct {
	OneStepProofCaller     // Read-only binding to the contract
	OneStepProofTransactor // Write-only binding to the contract
	OneStepProofFilterer   // Log filterer for contract events
}

// OneStepProofCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofSession struct {
	Contract     *OneStepProof     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProofCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofCallerSession struct {
	Contract *OneStepProofCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// OneStepProofTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTransactorSession struct {
	Contract     *OneStepProofTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// OneStepProofRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofRaw struct {
	Contract *OneStepProof // Generic contract binding to access the raw methods on
}

// OneStepProofCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofCallerRaw struct {
	Contract *OneStepProofCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTransactorRaw struct {
	Contract *OneStepProofTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof creates a new instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProof(address common.Address, backend bind.ContractBackend) (*OneStepProof, error) {
	contract, err := bindOneStepProof(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// NewOneStepProofCaller creates a new read-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofCaller, error) {
	contract, err := bindOneStepProof(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofCaller{contract: contract}, nil
}

// NewOneStepProofTransactor creates a new write-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTransactor, error) {
	contract, err := bindOneStepProof(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTransactor{contract: contract}, nil
}

// NewOneStepProofFilterer creates a new log filterer instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofFilterer, error) {
	contract, err := bindOneStepProof(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofFilterer{contract: contract}, nil
}

// bindOneStepProof binds a generic wrapper to an already deployed contract.
func bindOneStepProof(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.OneStepProofCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transact(opts, method, params...)
}

// OneStepProofTesterABI is the input ABI used to generate the binding from.
const OneStepProofTesterABI = "[{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"afterInboxHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"firstMessage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"firstLog\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"startHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"endHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"beforeInboxHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"logAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"messageAcc\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// OneStepProofTesterFuncSigs maps the 4-byte function signature to its string representation.
var OneStepProofTesterFuncSigs = map[string]string{
	"385bc114": "executeStep(bytes32,bytes32,bytes32,bytes)",
}

// OneStepProofTesterBin is the compiled bytecode used for deploying new contracts.
var OneStepProofTesterBin = "0x608060405234801561001057600080fd5b506143cb806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063385bc11414610030575b600080fd5b6100e96004803603608081101561004657600080fd5b8135916020810135916040820135919081019060808101606082013564010000000081111561007457600080fd5b82018360208201111561008657600080fd5b803590602001918460018302840111640100000000831117156100a857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610125945050505050565b60408051968752602087019590955285850193909352606085019190915260808401526001600160401b031660a0830152519081900360c00190f35b6000806000806000806101366141d6565b6101428b8b8b8b610191565b905061014d81610588565b80516101589061088f565b610165826020015161088f565b60408301516080840151606085015160a090950151939f929e50909c509a509198509650945050505050565b6101996141d6565b6000826000815181106101a857fe5b602001015160f81c60f81b60f81c90506000836001815181106101c757fe5b602001015160f81c60f81b60f81c905060006002905060608360040160ff1660405190808252806020026020018201604052801561021f57816020015b61020c61424e565b8152602001906001900390816102045790505b50905060608360040160ff1660405190808252806020026020018201604052801561026457816020015b61025161424e565b8152602001906001900390816102495790505b50905060005b8560ff168110156102a25761027f8885610954565b845185908490811061028d57fe5b6020908102919091010152935060010161026a565b5060005b8460ff168110156102de576102bb8885610954565b83518490849081106102c957fe5b602090810291909101015293506001016102a6565b506102e7614282565b6102f18885610ae6565b8092508195505050600088858151811061030757fe5b602001015160f81c60f81b60f81c9050600089866001018151811061032857fe5b01602001516002969096019560f81c90506103416141d6565b60405180610180016040528085815260200161035c86610b86565b81526020018f81526020018e81526020018d815260200160006001600160401b0316815260200160405180604001604052808c60ff16815260200189815250815260200160405180604001604052808b60ff1681526020018881525081526020018460ff16600114151581526020018360ff1681526020018c81526020018881525090508260ff16600014806103f557508260ff166001145b610446576040805162461bcd60e51b815260206004820152601c60248201527f50726f6f662068616420626164206f7065726174696f6e207479706500000000604482015290519081900360640190fd5b61044e61424e565b60ff841661046b57815151610464908490610bef565b90506104e5565b60008751116104b6576040805162461bcd60e51b81526020600482015260126024820152716e6f20696d6d6564696174652076616c756560701b604482015290519081900360640190fd5b6104e2838360000151600001518960018e0360ff16815181106104d557fe5b6020026020010151610c51565b90505b6104ee81610cd5565b82515260005b848b0360ff168110156105335761052b88828151811061051057fe5b60200260200101518460000151610df590919063ffffffff16565b6001016104f4565b5060005b8960ff168110156105745761056c87828151811061055157fe5b60200260200101518460000151610e0f90919063ffffffff16565b600101610537565b50909e9d5050505050505050505050505050565b60008060006120dd6105a185610120015160ff16610e29565b6001600160401b03821660a0808b0182905260208b01518101805183900390528a510151949850929650909450925011156105f657602085015160001960a0909101526105ed856115e4565b5050505061088c565b60c08501515184111561067f5761061361060e61164d565b610cd5565b610624866020015160200151610cd5565b14610676576040805162461bcd60e51b815260206004820152601d60248201527f737461636b206974656d206d697373696e672066726f6d2070726f6f66000000604482015290519081900360640190fd5b6105ed856115e4565b60e0850151518311156106fa5761069761060e61164d565b6106a8866020015160400151610cd5565b14610676576040805162461bcd60e51b815260206004820181905260248201527f617578737461636b206974656d206d697373696e672066726f6d2070726f6f66604482015290519081900360640190fd5b600084118061070c5750846101000151155b801561071c575060c08501515184145b8061074357508461010001518015610732575083155b8015610743575060c0850151516001145b61078b576040805162461bcd60e51b8152602060048201526014602482015273746f6f206d616e7920737461636b206974656d7360601b604482015290519081900360640190fd5b60e08501515183146107e4576040805162461bcd60e51b815260206004820152601760248201527f746f6f206d616e7920617578737461636b206974656d73000000000000000000604482015290519081900360640190fd5b6107f1858263ffffffff16565b60005b60c08601515181101561083b576108338660c0015160200151828151811061081857fe5b60200260200101518760200151610df590919063ffffffff16565b6001016107f4565b5060005b60e0860151518110156108865761087e8660e0015160200151828151811061086357fe5b60200260200101518760200151610e0f90919063ffffffff16565b60010161083f565b50505050505b50565b600060028260e0015114156108a65750600061094f565b60018260e0015114156108bb5750600161094f565b815160208301516108cb90610cd5565b6108d88460400151610cd5565b6108e58560600151610cd5565b6108f28660800151610cd5565b8660a001518760c00151604051602001808881526020018781526020018681526020018581526020018481526020018381526020018281526020019750505050505050506040516020818303038152906040528051906020012090505b919050565b600061095e61424e565b835183106109a4576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b6000806109b18686611694565b915091506109bd6116bb565b60ff168160ff1614156109f15760006109d687846116c0565b9093509050826109e582611734565b94509450505050610adf565b6109f96117e6565b60ff168160ff161415610a1b57610a1086836117eb565b935093505050610adf565b610a2361188d565b60ff168160ff161415610a3a57610a108683611892565b610a42611926565b60ff168160ff1610158015610a635750610a5a61192b565b60ff168160ff16105b15610a9f576000610a72611926565b820390506060610a83828986611930565b909450905083610a92826119c9565b9550955050505050610adf565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b6000610af0614282565b610af8614282565b600060e0820181905280610b0c87876116c0565b9096509150610b1b8787611892565b60208501529550610b2c8787611892565b60408501529550610b3d8787610954565b60608501529550610b4e8787610954565b60808501529550610b5f87876116c0565b60a08501529550610b7087876116c0565b92845260c0840192909252509590945092505050565b610b8e614282565b60405180610100016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e001518152509050919050565b610bf761424e565b6040805160608101825260ff851681526020808201859052825160008082529181018452610c4a93830191610c42565b610c2f61424e565b815260200190600190039081610c275790505b509052611adb565b9392505050565b610c5961424e565b604080516001808252818301909252606091816020015b610c7861424e565b815260200190600190039081610c705790505090508281600081518110610c9b57fe5b6020026020010181905250610ccc60405180606001604052808760ff16815260200186815260200183815250611adb565b95945050505050565b6000610cdf6116bb565b60ff16826060015160ff161415610d02578151610cfb90611b42565b905061094f565b610d0a6117e6565b60ff16826060015160ff161415610d2857610cfb8260200151611b66565b610d3061188d565b60ff16826060015160ff161415610d525781516080830151610cfb9190611c63565b610d5a611926565b60ff16826060015160ff161415610d9357610d7361424e565b610d808360400151611cb4565b9050610d8b81610cd5565b91505061094f565b610d9b611e16565b60ff16826060015160ff161415610db45750805161094f565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b610e03826020015182611e1b565b82602001819052505050565b610e1d826040015182611e1b565b82604001819052505050565b600080806120dd6001851415610e4e5750600292506000915060039050611e996115dd565b6002851415610e6c5750600292506000915060039050611e996115dd565b6003851415610e8a5750600292506000915060039050611e996115dd565b6004851415610ea857506002925060009150600490506120fc6115dd565b6005851415610ec657506002925060009150600790506120fc6115dd565b6006851415610ee457506002925060009150600490506120fc6115dd565b6007851415610f0257506002925060009150600790506120fc6115dd565b6008851415610f2057506003925060009150600490506121cc6115dd565b6009851415610f3e57506003925060009150600490506121cc6115dd565b600a851415610f5c5750600292506000915060199050611e996115dd565b600b851415610f7a5750600292506000915060079050611e996115dd565b6010851415610f9757506002925060009150829050611e996115dd565b6011851415610fb457506002925060009150829050611e996115dd565b6012851415610fd157506002925060009150829050611e996115dd565b6013851415610fee57506002925060009150829050611e996115dd565b601485141561100b575060029250600091508290506122c16115dd565b6015851415611028575060019250600091508290506123236115dd565b601685141561104557506002925060009150829050611e996115dd565b601785141561106257506002925060009150829050611e996115dd565b601885141561107f57506002925060009150829050611e996115dd565b601985141561109c575060019250600091508290506123926115dd565b601a8514156110ba5750600292506000915060049050611e996115dd565b601b8514156110d85750600292506000915060049050611e996115dd565b601c8514156110f65750600292506000915060049050611e996115dd565b601d8514156111145750600292506000915060049050611e996115dd565b602085141561113257506001925060009150600790506123d56115dd565b602185141561115057506001925060009150600390506124006115dd565b602285141561116e5750600292506000915060089050611e996115dd565b602385141561118d5750600192506000915061025890506124236115dd565b60308514156111aa5750600192506000915082905061260b6115dd565b60318514156111c7575060009250829150600190506126186115dd565b60328514156111e4575060009250829150600190506126356115dd565b603385141561120257506001925060009150600290506126526115dd565b6034851415611220575060019250600091506004905061266b6115dd565b603585141561123e57506002925060009150600490506126ab6115dd565b603685141561125b5750600092508291506002905061271d6115dd565b60378514156112785750600092508291506001905061275a6115dd565b60388514156112955750600192506000915082905061277d6115dd565b60398514156112b25750600092506001915081905061279e6115dd565b603a8514156112cf575060009250829150600290506127ae6115dd565b603b8514156112ec5750600092508291506001905061088c6115dd565b603c851415611309575060009250829150600190506127db6115dd565b603d851415611326575060019250600091508290506127f16115dd565b6040851415611343575060019250600091508290506128346115dd565b604185141561136157506002925060009150600190506128766115dd565b604285141561137f57506003925060009150600190506128e46115dd565b604385141561139d575060029250600091506001905061297e6115dd565b60448514156113bb57506003925060009150600190506129c26115dd565b60508514156113d857506002925060009150829050612a326115dd565b60518514156113f65750600392506000915060289050612ad56115dd565b60528514156114145750600192506000915060029050612b896115dd565b605385141561143157506001925082915060039050612bcd6115dd565b605485141561144f5750600292506001915060299050612c536115dd565b606085141561146c5750600092508291506064905061088c6115dd565b606185141561148a5750600192506000915060649050612d186115dd565b60708514156114a85750600192506000915060649050612d5e6115dd565b60728514156114c557506000925082915060289050612de56115dd565b60738514156114e257506000925082915060059050612e3c6115dd565b60748514156114ff575060009250829150600a9050612e456115dd565b607585141561151c57506001925060009150819050612e526115dd565b607685141561153957506000925082915060019050612e8c6115dd565b607785141561155657506000925082915060199050612ea06115dd565b60788514156115745750600292506000915060199050612eea6115dd565b60798514156115925750600392506000915060199050612f5a6115dd565b607b8514156115af575060009250829150600a9050612fe26115dd565b60808514156115ce57506004925060009150614e2090506130246115dd565b5060009250829150819050612e3c5b9193509193565b60408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051908201209082015160c0015114156116405761163b81602001516131af565b61088c565b6020015160c08101519052565b61165561424e565b6040805160008082526020820190925261168f91611689565b61167661424e565b81526020019060019003908161166e5790505b506119c9565b905090565b600080826001018484815181106116a757fe5b016020015190925060f81c90509250929050565b600090565b600080828451101580156116d8575060208385510310155b611715576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b60208301611729858563ffffffff6131b916565b915091509250929050565b61173c61424e565b6040805160a0810182528381528151606081018352600080825260208281018290528451828152808201865293949085019390830191611792565b61177f61424e565b8152602001906001900390816117775790505b509052815260408051600080825260208281019093529190920191906117ce565b6117bb61424e565b8152602001906001900390816117b35790505b50815260006020820152600160409091015292915050565b600190565b60006117f561424e565b8260008061180161424e565b600061180d8986611694565b909550935061181c8986611694565b9095509250600160ff8516141561183d576118378986610954565b90955091505b61184789866131d5565b9095509050600160ff851614156118725784611864848385610c51565b965096505050505050610adf565b8461187d8483610bef565b9650965050505050509250929050565b600290565b600061189c61424e565b828451101580156118b1575060408385510310155b6118ed576040805162461bcd60e51b81526020600482015260086024820152671d1bc81cda1bdc9d60c21b604482015290519081900360640190fd5b6000806118fa86866131d5565b909450915061190986856116c0565b90945090508361191983836131ec565b9350935050509250929050565b600390565b600c90565b60006060600083905060608660ff1660405190808252806020026020018201604052801561197857816020015b61196561424e565b81526020019060019003908161195d5790505b50905060005b8760ff168160ff1610156119bc576119968784610954565b8351849060ff85169081106119a757fe5b6020908102919091010152925060010161197e565b5090969095509350505050565b6119d161424e565b6119db825161329d565b611a2c576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b8351811015611a6357838181518110611a4657fe5b602002602001015160800151820191508080600101915050611a31565b506040805160a0810182526000808252825160608101845281815260208181018390528451838152808201865293949085019391929083019190611abd565b611aaa61424e565b815260200190600190039081611aa25790505b50905281526020810194909452600360408501526060909301525090565b611ae361424e565b6040805160a0810182526000808252602080830186905283518281529081018452919283019190611b2a565b611b1761424e565b815260200190600190039081611b0f5790505b50815260016020820181905260409091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b6000600282604001515110611b7757fe5b604082015151611bdc57611b896117e6565b8251602080850151604080516001600160f81b031960f896871b8116828601529490951b90931660218501526022808501919091528251808503909101815260429093019091528151910120905061094f565b611be46117e6565b8260000151611c0a8460400151600081518110611bfd57fe5b6020026020010151610cd5565b8460200151604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b6000611c6d611926565b8383604051602001808460ff1660ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b611cbc61424e565b600882511115611d0a576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b60608251604051908082528060200260200182016040528015611d37578160200160208202803883390190505b508051909150600160005b82811015611d9a57611d59868281518110611bfd57fe5b848281518110611d6557fe5b602002602001018181525050858181518110611d7d57fe5b602002602001015160800151820191508080600101915050611d42565b506000835184604051602001808360ff1660ff1660f81b8152600101828051906020019060200280838360005b83811015611ddf578181015183820152602001611dc7565b5050505090500192505050604051602081830303815290604052805190602001209050611e0c81836131ec565b9695505050505050565b606490565b611e2361424e565b6040805160028082526060828101909352816020015b611e4161424e565b815260200190600190039081611e395790505090508281600081518110611e6457fe5b60200260200101819052508381600181518110611e7d57fe5b6020026020010181905250611e9181611cb4565b949350505050565b611ea161424e565b611eae8260c001516132a4565b9050611eb861424e565b611ec58360c001516132a4565b9050611ed0826132e6565b1580611ee25750611ee0816132e6565b155b15611ef757611ef0836132f1565b505061088c565b8151815161012085015160009060ff1660011415611f1857508181016120df565b61012086015160ff1660021415611f3257508181026120df565b61012086015160ff1660031415611f4c57508082036120df565b61012086015160ff16600a1415611f66575080820a6120df565b61012086015160ff16600b1415611f80575080820b6120df565b61012086015160ff1660101415611f9a57508082106120df565b61012086015160ff1660111415611fb457508082116120df565b61012086015160ff1660121415611fce57508082126120df565b61012086015160ff1660131415611fe857508082136120df565b61012086015160ff166016141561200257508181166120df565b61012086015160ff166017141561201c57508181176120df565b61012086015160ff166018141561203657508181186120df565b61012086015160ff16601a1415612050575080821a6120df565b61012086015160ff16601b141561206a575080821b6120df565b61012086015160ff16601c1415612084575080821c6120df565b61012086015160ff16601d141561209e575080821d6120df565b61012086015160ff16602214156120dd5750604080516020808201859052818301849052825180830384018152606090920190925280519101206120df565bfe5b6108866120eb82611734565b60c08801519063ffffffff61330e16565b61210461424e565b6121118260c001516132a4565b905061211b61424e565b6121288360c001516132a4565b9050612133826132e6565b15806121455750612143816132e6565b155b8061214f57508051155b1561215d57611ef0836132f1565b8151815161012085015160009060ff166004141561217e57508082046120df565b61012086015160ff166005141561219857508082056120df565b61012086015160ff16600614156121b257508082066120df565b61012086015160ff16600714156120dd57508082076120df565b6121d461424e565b6121e18260c001516132a4565b90506121eb61424e565b6121f88360c001516132a4565b905061220261424e565b61220f8460c001516132a4565b905061221a836132e6565b158061222c575061222a826132e6565b155b8061223d575061223b816132e6565b155b8061224757508051155b1561225d57612255846132f1565b50505061088c565b82518251825161012087015160009060ff16600814156122825781838508905061229a565b61012088015160ff16600914156120dd578183850990505b6122b76122a682611734565b60c08a01519063ffffffff61330e16565b5050505050505050565b6122c961424e565b6122d68260c001516132a4565b90506122e061424e565b6122ed8360c001516132a4565b905061231e61230d6122fe83610cd5565b61230785610cd5565b14613338565b60c08501519063ffffffff61330e16565b505050565b61232b61424e565b6123388260c001516132a4565b9050612343816132e6565b61236a576123656123546000611734565b60c08401519063ffffffff61330e16565b61238e565b8051801561238b61237a82611734565b60c08601519063ffffffff61330e16565b50505b5050565b61239a61424e565b6123a78260c001516132a4565b90506123b2816132e6565b6123c5576123bf826132f1565b5061088c565b8051801961238b61237a82611734565b6123dd61424e565b6123ea8260c001516132a4565b905061238e6123546123fb83610cd5565b611734565b61240861424e565b6124158260c001516132a4565b905061238e6123548261335a565b61242b61424e565b6124388260c001516132a4565b9050612443816133bf565b15806124555750806040015151600714155b15612463576123bf826132f1565b604081015160005b60078110156124a55761249082828151811061248357fe5b60200260200101516132e6565b61249d57612255846132f1565b60010161246b565b506124ae6142e0565b60005b601981101561251257604060038216028360048304815181106124d057fe5b602002602001015160000151901c6001600160401b031682600583816124f257fe5b0460058406600502016019811061250557fe5b60200201526001016124b1565b5061251c816133cc565b604080516007808252610100820190925291925060609190816020015b61254161424e565b81526020019060019003908161253957905050905060005b600781101561258b5761256c6000611734565b82828151811061257857fe5b6020908102919091010152600101612559565b5060005b60198110156125e6576040600382160283600583046005840660050201601981106125b657fe5b6020020151901b8260048304815181106125cc57fe5b60209081029190910101518051909117905260010161258f565b506126046125f3826119c9565b60c08701519063ffffffff61330e16565b5050505050565b61238e8160c001516132a4565b60208101516080015160c082015161088c9163ffffffff61330e16565b60208101516060015160c082015161088c9163ffffffff61330e16565b61265f8160c001516132a4565b60209091015160600152565b61267361424e565b6126808260c001516132a4565b905061268b81613fbd565b612698576123bf826132f1565b6126a181610cd5565b6020830151525050565b6126b361424e565b6126c08260c001516132a4565b90506126ca61424e565b6126d78360c001516132a4565b90506126e282613fbd565b15806126f457506126f2816132e6565b155b1561270257611ef0836132f1565b80511561231e5761271282610cd5565b602084015152505050565b60c08101515160009015801561274c575061273961060e61164d565b61274a836020015160200151610cd5565b145b905061238e61235482613338565b80515161088c9061276c906001613fca565b60c08301519063ffffffff61330e16565b61088c61278d8260c001516132a4565b60e08301519063ffffffff61330e16565b61088c61276c8260e001516132a4565b60e08101515160009015801561274c57506127ca61060e61164d565b61274a836020015160400151610cd5565b61088c61276c826020015160c001516001613fca565b6127f961424e565b6128068260c001516132a4565b905061281181613fbd565b61281e576123bf826132f1565b61282781610cd5565b602083015160c001525050565b61283c61424e565b6128498260c001516132a4565b60c0830151909150612861908263ffffffff61330e16565b60c082015161238e908263ffffffff61330e16565b61287e61424e565b61288b8260c001516132a4565b905061289561424e565b6128a28360c001516132a4565b60c08401519091506128ba908263ffffffff61330e16565b60c08301516128cf908363ffffffff61330e16565b60c083015161231e908263ffffffff61330e16565b6128ec61424e565b6128f98260c001516132a4565b905061290361424e565b6129108360c001516132a4565b905061291a61424e565b6129278460c001516132a4565b60c085015190915061293f908263ffffffff61330e16565b60c0840151612954908363ffffffff61330e16565b60c0840151612969908463ffffffff61330e16565b60c084015161238b908263ffffffff61330e16565b61298661424e565b6129938260c001516132a4565b905061299d61424e565b6129aa8360c001516132a4565b60c08401519091506128cf908363ffffffff61330e16565b6129ca61424e565b6129d78260c001516132a4565b90506129e161424e565b6129ee8360c001516132a4565b90506129f861424e565b612a058460c001516132a4565b60c0850151909150612a1d908463ffffffff61330e16565b60c0840151612969908363ffffffff61330e16565b612a3a61424e565b612a478260c001516132a4565b9050612a5161424e565b612a5e8360c001516132a4565b9050612a69826132e6565b1580612a7b5750612a79816133bf565b155b80612a955750612a8a8161407b565b60ff16826000015110155b15612aa357611ef0836132f1565b61231e8160400151836000015181518110612aba57fe5b60200260200101518460c0015161330e90919063ffffffff16565b612add61424e565b612aea8260c001516132a4565b9050612af461424e565b612b018360c001516132a4565b9050612b0b61424e565b612b188460c001516132a4565b9050612b23836132e6565b1580612b355750612b33826133bf565b155b80612b4f5750612b448261407b565b60ff16836000015110155b15612b5d57612255846132f1565b604082015183518151839183918110612b7257fe5b60200260200101819052506126046125f3826119c9565b612b9161424e565b612b9e8260c001516132a4565b9050612ba9816133bf565b612bb6576123bf826132f1565b61238e612354612bc58361407b565b60ff16611734565b612bd561424e565b612be28260c001516132a4565b9050612bec61424e565b612bf98360e001516132a4565b9050612c04826132e6565b1580612c165750612c14816133bf565b155b80612c305750612c258161407b565b60ff16826000015110155b15612c3e57611ef0836132f1565b60e0830151612aa3908263ffffffff61330e16565b612c5b61424e565b612c688260c001516132a4565b9050612c7261424e565b612c7f8360c001516132a4565b9050612c8961424e565b612c968460e001516132a4565b9050612ca1816133bf565b1580612cb35750612cb1836132e6565b155b80612ccd5750612cc28161407b565b60ff16836000015110155b15612cdb57612255846132f1565b604081015183518151849183918110612cf057fe5b6020026020010181905250612604612d07826119c9565b60e08701519063ffffffff61330e16565b8060800151612d2d61060e8360c001516132a4565b6040805160208082019490945280820192909252805180830382018152606090920190528051910120608090910152565b612d6661424e565b612d738260c001516132a4565b905061271081608001511180612d8f5750612d8d816140a2565b155b15612d9d576123bf826132f1565b8160600151612dab82610cd5565b6040516020018083815260200182815260200192505050604051602081830303815290604052805190602001208260600181815250505050565b612ded61424e565b612e01826101400151836101600151610954565b60c0840151909250612e1a91508263ffffffff61330e16565b612e308260400151612e2b83610cd5565b6141a0565b60409092019190915250565b61088c816132f1565b61088c81602001516141cc565b612e5a61424e565b612e678260c001516132a4565b9050612e72816132e6565b612e7f576123bf826132f1565b51602082015160a0015250565b61088c61276c826020015160a00151611734565b60408051600160f81b602080830191909152600060218301819052602280840191909152835180840390910181526042909201909252805191012061088c9061276c906001613fca565b612ef261424e565b612eff8260c001516132a4565b9050612f0961424e565b612f168360c001516132a4565b9050612f21826132e6565b1580612f335750612f3181613fbd565b155b15612f4157611ef0836132f1565b61231e61230d8360000151612f5584610cd5565b610bef565b612f6261424e565b612f6f8260c001516132a4565b9050612f7961424e565b612f868360c001516132a4565b9050612f9061424e565b612f9d8460c001516132a4565b9050612fa8836132e6565b1580612fba5750612fb881613fbd565b155b15612fc857612255846132f1565b61238b61237a8460000151612fdc84610cd5565b85610c51565b60408051600080825260208201909252606091613015565b61300261424e565b815260200190600190039081612ffa5790505b50905061238e612354826119c9565b61302c61424e565b6130398260c001516132a4565b905061304361424e565b6130508360c001516132a4565b905061305a61424e565b6130678460c001516132a4565b905061307161424e565b61307e8560c001516132a4565b9050613089846132e6565b158061309b5750613099836132e6565b155b806130ac57506130aa826132e6565b155b806130bd57506130bb816132e6565b155b156130cb576105ed856132f1565b835183518351158015906130e157508351600114155b1561310f576131046130f36000611734565b60c08901519063ffffffff61330e16565b50505050505061088c565b83518351604080516000808252602080830180855285905260ff601b9096019586168385015260608301889052608083018790529251909260019260a080820193601f1981019281900390910190855afa158015613171573d6000803e3d6000fd5b5050506020604051035190506131a3613192826001600160a01b0316611734565b60c08c01519063ffffffff61330e16565b50505050505050505050565b600160e090910152565b600081602001835110156131cc57600080fd5b50016020015190565b60008060208301611729858563ffffffff6131b916565b6131f461424e565b6040805160a081018252848152815160608101835260008082526020828101829052845182815280820186529394908501939083019161324a565b61323761424e565b81526020019060019003908161322f5790505b50905281526040805160008082526020828101909352919092019190613286565b61327361424e565b81526020019060019003908161326b5790505b508152600260208201526040019290925250919050565b6008101590565b6132ac61424e565b6132b461424e565b82602001516001846000015103815181106132cb57fe5b60209081029190910101518351600019018452915050919050565b6060015160ff161590565b6132fa816115e4565b60c081015160009081905260e09091015152565b80826020015183600001518151811061332357fe5b60209081029190910101525080516001019052565b61334061424e565b811561335057610cfb6001611734565b610cfb6000611734565b61336261424e565b816060015160ff16600214156133a95760405162461bcd60e51b81526004018080602001828103825260218152602001806143766021913960400191505060405180910390fd5b6133b9826060015160ff16611734565b92915050565b6060015160ff1660031490565b6133d46142e0565b6133dc6142ff565b6133e46142ff565b6133ec6142e0565b6133f461431d565b60405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060008090505b6018811015613fb2576080878101516060808a01516040808c01516020808e01518e511890911890921890931889526101208b01516101008c015160e08d015160c08e015160a08f0151181818189089018190526101c08b01516101a08c01516101808d01516101608e01516101408f0151181818189289019283526102608b01516102408c01516102208d01516102008e01516101e08f015118181818918901919091526103008a01516102e08b01516102c08c01516102a08d01516102808e0151181818189288018390526001600160401b0360028202166001603f1b91829004179092188652510485600260200201516002026001600160401b03161785600060200201511884600160200201526001603f1b85600360200201518161364057fe5b0485600360200201516002026001600160401b03161785600160200201511884600260200201526001603f1b85600460200201518161367b57fe5b0485600460200201516002026001600160401b0316178560026005811061369e57fe5b602002015118606085015284516001603f1b9086516060808901519390920460029091026001600160401b031617909118608086810191825286518a5118808b5287516020808d018051909218825289516040808f0180519092189091528a518e8801805190911890528a51948e0180519095189094528901805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291880180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292870180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a01805190911890529084525163100000009060208901516001600160401b03641000000000909102169190041761010084015260408701516001603d1b9060408901516001600160401b03600890910216919004176101608401526060870151628000009060608901516001600160401b036502000000000090910216919004176102608401526080870151654000000000009060808901516001600160401b036204000090910216919004176102c084015260a08701516001603f1b900487600560200201516002026001600160401b0316178360026019811061390857fe5b602002015260c0870151621000008104651000000000009091026001600160401b039081169190911760a085015260e0880151664000000000000081046104009091028216176101a08501526101008801516208000081046520000000000090910282161761020085015261012088015160048082029092166001603e1b909104176103008501526101408801516101408901516001600160401b036001603e1b90910216919004176080840152610160870151670400000000000000906101608901516001600160401b036040909102169190041760e084015261018087015162200000906101808901516001600160401b036508000000000090910216919004176101408401526101a08701516602000000000000906101a08901516001600160401b0361800090910216919004176102408401526101c08701516008906101c08901516001600160401b036001603d1b90910216919004176102a08401526101e0870151641000000000906101e08901516001600160401b03631000000090910216919004176020840152610200808801516102008901516001600160401b0366800000000000009091021691900417610120840152610220870151648000000000906102208901516001600160401b036302000000909102169190041761018084015261024087015165080000000000906102408901516001600160401b036220000090910216919004176101e0840152610260870151610100906102608901516001600160401b03600160381b90910216919004176102e0840152610280870151642000000000906102808901516001600160401b036308000000909102169190041760608401526102a087015165100000000000906102a08901516001600160401b0362100000909102169190041760c08401526102c08701516302000000906102c08901516001600160401b0364800000000090910216919004176101c08401526102e0870151600160381b906102e08901516001600160401b036101009091021691900417610220840152610300870151660400000000000090048760186020020151614000026001600160401b031617836014602002015282600a602002015183600560200201511916836000602002015118876000602002015282600b602002015183600660200201511916836001602002015118876001602002015282600c602002015183600760200201511916836002602002015118876002602002015282600d602002015183600860200201511916836003602002015118876003602002015282600e602002015183600960200201511916836004602002015118876004602002015282600f602002015183600a602002015119168360056020020151188760056020020152826010602002015183600b602002015119168360066020020151188760066020020152826011602002015183600c602002015119168360076020020151188760076020020152826012602002015183600d602002015119168360086020020151188760086020020152826013602002015183600e602002015119168360096020020151188760096020020152826014602002015183600f6020020151191683600a60200201511887600a602002015282601560200201518360106020020151191683600b60200201511887600b602002015282601660200201518360116020020151191683600c60200201511887600c602002015282601760200201518360126020020151191683600d60200201511887600d602002015282601860200201518360136020020151191683600e60200201511887600e602002015282600060200201518360146020020151191683600f60200201511887600ffa057fe5b6020020151875118875260010161351b565b509495945050505050565b6060015160ff1660011490565b613fd261424e565b6040805160a0810182528481528151606081018352600080825260208281018290528451828152808201865293949085019390830191614028565b61401561424e565b81526020019060019003908161400d5790505b50905281526040805160008082526020828101909352919092019190614064565b61405161424e565b8152602001906001900390816140495790505b508152606460208201526040019290925250919050565b606081015160009060ff166003141561409a575060408101515161094f565b50600161094f565b606081015160009060ff166140b95750600161094f565b606082015160ff16600114156140d15750600061094f565b606082015160ff1660021415614125576040805162461bcd60e51b81526020600482015260146024820152736d75737420686176652066756c6c2076616c756560601b604482015290519081900360640190fd5b606082015160ff16600314156141885760408201515160005b8181101561417d576141668460400151828151811061415957fe5b60200260200101516140a2565b6141755760009250505061094f565b60010161413e565b50600191505061094f565b606082015160ff1660641415610db45750600061094f565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600260e090910152565b6040518061018001604052806141ea614282565b81526020016141f7614282565b81526000602082018190526040820181905260608201819052608082015260a00161422061433c565b815260200161422d61433c565b81526000602082018190526040820181905260608083015260809091015290565b6040518060a0016040528060008152602001614268614356565b815260606020820181905260006040830181905291015290565b604080516101008101909152600081526020810161429e61424e565b81526020016142ab61424e565b81526020016142b861424e565b81526020016142c561424e565b81526000602082018190526040820181905260609091015290565b6040518061032001604052806019906020820280388339509192915050565b6040518060a001604052806005906020820280388339509192915050565b6040518061030001604052806018906020820280388339509192915050565b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fe56616c7565206d757374206861766520612076616c6964207479706520636f6465a265627a7a723158201f7b063d7837245496a13b2a4457109d10f71ae0e46fe9e51e31d575e59f8ccf64736f6c63430005110032"

// DeployOneStepProofTester deploys a new Ethereum contract, binding an instance of OneStepProofTester to it.
func DeployOneStepProofTester(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProofTester, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofTesterABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofTesterBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProofTester{OneStepProofTesterCaller: OneStepProofTesterCaller{contract: contract}, OneStepProofTesterTransactor: OneStepProofTesterTransactor{contract: contract}, OneStepProofTesterFilterer: OneStepProofTesterFilterer{contract: contract}}, nil
}

// OneStepProofTester is an auto generated Go binding around an Ethereum contract.
type OneStepProofTester struct {
	OneStepProofTesterCaller     // Read-only binding to the contract
	OneStepProofTesterTransactor // Write-only binding to the contract
	OneStepProofTesterFilterer   // Log filterer for contract events
}

// OneStepProofTesterCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofTesterCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTesterTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTesterTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTesterFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofTesterFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTesterSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofTesterSession struct {
	Contract     *OneStepProofTester // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// OneStepProofTesterCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofTesterCallerSession struct {
	Contract *OneStepProofTesterCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// OneStepProofTesterTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTesterTransactorSession struct {
	Contract     *OneStepProofTesterTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// OneStepProofTesterRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofTesterRaw struct {
	Contract *OneStepProofTester // Generic contract binding to access the raw methods on
}

// OneStepProofTesterCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofTesterCallerRaw struct {
	Contract *OneStepProofTesterCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTesterTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTesterTransactorRaw struct {
	Contract *OneStepProofTesterTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProofTester creates a new instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTester(address common.Address, backend bind.ContractBackend) (*OneStepProofTester, error) {
	contract, err := bindOneStepProofTester(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTester{OneStepProofTesterCaller: OneStepProofTesterCaller{contract: contract}, OneStepProofTesterTransactor: OneStepProofTesterTransactor{contract: contract}, OneStepProofTesterFilterer: OneStepProofTesterFilterer{contract: contract}}, nil
}

// NewOneStepProofTesterCaller creates a new read-only instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTesterCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofTesterCaller, error) {
	contract, err := bindOneStepProofTester(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTesterCaller{contract: contract}, nil
}

// NewOneStepProofTesterTransactor creates a new write-only instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTesterTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTesterTransactor, error) {
	contract, err := bindOneStepProofTester(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTesterTransactor{contract: contract}, nil
}

// NewOneStepProofTesterFilterer creates a new log filterer instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTesterFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofTesterFilterer, error) {
	contract, err := bindOneStepProofTester(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTesterFilterer{contract: contract}, nil
}

// bindOneStepProofTester binds a generic wrapper to an already deployed contract.
func bindOneStepProofTester(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofTesterABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofTester *OneStepProofTesterRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProofTester.Contract.OneStepProofTesterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofTester *OneStepProofTesterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.OneStepProofTesterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofTester *OneStepProofTesterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.OneStepProofTesterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofTester *OneStepProofTesterCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProofTester.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofTester *OneStepProofTesterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofTester *OneStepProofTesterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.contract.Transact(opts, method, params...)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x385bc114.
//
// Solidity: function executeStep(bytes32 afterInboxHash, bytes32 firstMessage, bytes32 firstLog, bytes proof) pure returns(bytes32 startHash, bytes32 endHash, bytes32 beforeInboxHash, bytes32 logAcc, bytes32 messageAcc, uint64 gas)
func (_OneStepProofTester *OneStepProofTesterCaller) ExecuteStep(opts *bind.CallOpts, afterInboxHash [32]byte, firstMessage [32]byte, firstLog [32]byte, proof []byte) (struct {
	StartHash       [32]byte
	EndHash         [32]byte
	BeforeInboxHash [32]byte
	LogAcc          [32]byte
	MessageAcc      [32]byte
	Gas             uint64
}, error) {
	ret := new(struct {
		StartHash       [32]byte
		EndHash         [32]byte
		BeforeInboxHash [32]byte
		LogAcc          [32]byte
		MessageAcc      [32]byte
		Gas             uint64
	})
	out := ret
	err := _OneStepProofTester.contract.Call(opts, out, "executeStep", afterInboxHash, firstMessage, firstLog, proof)
	return *ret, err
}

// ExecuteStep is a free data retrieval call binding the contract method 0x385bc114.
//
// Solidity: function executeStep(bytes32 afterInboxHash, bytes32 firstMessage, bytes32 firstLog, bytes proof) pure returns(bytes32 startHash, bytes32 endHash, bytes32 beforeInboxHash, bytes32 logAcc, bytes32 messageAcc, uint64 gas)
func (_OneStepProofTester *OneStepProofTesterSession) ExecuteStep(afterInboxHash [32]byte, firstMessage [32]byte, firstLog [32]byte, proof []byte) (struct {
	StartHash       [32]byte
	EndHash         [32]byte
	BeforeInboxHash [32]byte
	LogAcc          [32]byte
	MessageAcc      [32]byte
	Gas             uint64
}, error) {
	return _OneStepProofTester.Contract.ExecuteStep(&_OneStepProofTester.CallOpts, afterInboxHash, firstMessage, firstLog, proof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x385bc114.
//
// Solidity: function executeStep(bytes32 afterInboxHash, bytes32 firstMessage, bytes32 firstLog, bytes proof) pure returns(bytes32 startHash, bytes32 endHash, bytes32 beforeInboxHash, bytes32 logAcc, bytes32 messageAcc, uint64 gas)
func (_OneStepProofTester *OneStepProofTesterCallerSession) ExecuteStep(afterInboxHash [32]byte, firstMessage [32]byte, firstLog [32]byte, proof []byte) (struct {
	StartHash       [32]byte
	EndHash         [32]byte
	BeforeInboxHash [32]byte
	LogAcc          [32]byte
	MessageAcc      [32]byte
	Gas             uint64
}, error) {
	return _OneStepProofTester.Contract.ExecuteStep(&_OneStepProofTester.CallOpts, afterInboxHash, firstMessage, firstLog, proof)
}
