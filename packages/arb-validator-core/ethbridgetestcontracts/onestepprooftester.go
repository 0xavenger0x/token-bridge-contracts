// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgetestcontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProofABI is the input ABI used to generate the binding from.
const OneStepProofABI = "[]"

// OneStepProofBin is the compiled bytecode used for deploying new contracts.
var OneStepProofBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820b87bd8d044a70cd66c98b840f683e4e582e2832181822ebc61ff78ec6f88cd3964736f6c63430005110032"

// DeployOneStepProof deploys a new Ethereum contract, binding an instance of OneStepProof to it.
func DeployOneStepProof(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// OneStepProof is an auto generated Go binding around an Ethereum contract.
type OneStepProof struct {
	OneStepProofCaller     // Read-only binding to the contract
	OneStepProofTransactor // Write-only binding to the contract
	OneStepProofFilterer   // Log filterer for contract events
}

// OneStepProofCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofSession struct {
	Contract     *OneStepProof     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProofCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofCallerSession struct {
	Contract *OneStepProofCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// OneStepProofTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTransactorSession struct {
	Contract     *OneStepProofTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// OneStepProofRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofRaw struct {
	Contract *OneStepProof // Generic contract binding to access the raw methods on
}

// OneStepProofCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofCallerRaw struct {
	Contract *OneStepProofCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTransactorRaw struct {
	Contract *OneStepProofTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof creates a new instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProof(address common.Address, backend bind.ContractBackend) (*OneStepProof, error) {
	contract, err := bindOneStepProof(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// NewOneStepProofCaller creates a new read-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofCaller, error) {
	contract, err := bindOneStepProof(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofCaller{contract: contract}, nil
}

// NewOneStepProofTransactor creates a new write-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTransactor, error) {
	contract, err := bindOneStepProof(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTransactor{contract: contract}, nil
}

// NewOneStepProofFilterer creates a new log filterer instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofFilterer, error) {
	contract, err := bindOneStepProof(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofFilterer{contract: contract}, nil
}

// bindOneStepProof binds a generic wrapper to an already deployed contract.
func bindOneStepProof(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.OneStepProofCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transact(opts, method, params...)
}

// OneStepProofTesterABI is the input ABI used to generate the binding from.
const OneStepProofTesterABI = "[{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beforeInbox\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"beforeInboxValueSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"firstMessage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"firstLog\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"startHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"endHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"logAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"messageAcc\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"didInboxInsn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// OneStepProofTesterFuncSigs maps the 4-byte function signature to its string representation.
var OneStepProofTesterFuncSigs = map[string]string{
	"799b4835": "executeStep(bytes32,uint256,bytes32,bytes32,bytes)",
}

// OneStepProofTesterBin is the compiled bytecode used for deploying new contracts.
var OneStepProofTesterBin = "0x608060405234801561001057600080fd5b5061435c806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063799b483514610030575b600080fd5b6100ee600480360360a081101561004657600080fd5b81359160208101359160408201359160608101359181019060a08101608082013564010000000081111561007957600080fd5b82018360208201111561008b57600080fd5b803590602001918460018302840111640100000000831117156100ad57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061012c945050505050565b6040805196875260208701959095528585019390935260608501919091526001600160401b03166080840152151560a0830152519081900360c00190f35b60008060008060008061013d614167565b6101478c8c6101af565b905061015161419b565b61015d828c8c8c610260565b905061016881610654565b805161017390610961565b6101808260200151610961565b8260a0015183608001518460c00151856060015197509750975097509750975050509550955095509550955095565b6101b7614167565b6040805160a081018252848152815160608101835260008082526020828101829052845182815280820186529394908501939083019161020d565b6101fa614167565b8152602001906001900390816101f25790505b50905281526040805160008082526020828101909352919092019190610249565b610236614167565b81526020019060019003908161022e5790505b508152600260208201526040019290925250919050565b61026861419b565b60008260008151811061027757fe5b602001015160f81c60f81b60f81c905060008360018151811061029657fe5b602001015160f81c60f81b60f81c905060006002905060608360040160ff166040519080825280602002602001820160405280156102ee57816020015b6102db614167565b8152602001906001900390816102d35790505b50905060608360040160ff1660405190808252806020026020018201604052801561033357816020015b610320614167565b8152602001906001900390816103185790505b50905060005b8560ff168110156103715761034e8885610a26565b845185908490811061035c57fe5b60209081029190910101529350600101610339565b5060005b8460ff168110156103ad5761038a8885610a26565b835184908490811061039857fe5b60209081029190910101529350600101610375565b506103b6614213565b6103c08885610bb8565b809250819550505060008885815181106103d657fe5b602001015160f81c60f81b60f81c905060008986600101815181106103f757fe5b01602001516002969096019560f81c905061041061419b565b60405180610160016040528085815260200161042b86610c58565b81526020018f81526020016000151581526020018e81526020018d815260200160006001600160401b0316815260200160405180604001604052808c60ff16815260200189815250815260200160405180604001604052808b60ff1681526020018881525081526020018460ff16600114151581526020018360ff1681525090508260ff16600014806104c157508260ff166001145b610512576040805162461bcd60e51b815260206004820152601c60248201527f50726f6f662068616420626164206f7065726174696f6e207479706500000000604482015290519081900360640190fd5b61051a614167565b60ff841661053757815151610530908490610cc1565b90506105b1565b6000875111610582576040805162461bcd60e51b81526020600482015260126024820152716e6f20696d6d6564696174652076616c756560701b604482015290519081900360640190fd5b6105ae838360000151600001518960018e0360ff16815181106105a157fe5b6020026020010151610d23565b90505b6105ba81610da7565b82515260005b848b0360ff168110156105ff576105f78882815181106105dc57fe5b60200260200101518460000151610ec790919063ffffffff16565b6001016105c0565b5060005b8960ff168110156106405761063887828151811061061d57fe5b60200260200101518460000151610ee190919063ffffffff16565b600101610603565b50909e9d5050505050505050505050505050565b600080600061210761066d85610140015160ff16610efb565b6001600160401b03821660c08a0181905260208a015160a0908101805183900390528a510151949850929650909450925011156106c457602085015160001960a0909101526106bb8561165c565b5050505061095e565b60e08501515184111561074d576106e16106dc6116c5565b610da7565b6106f2866020015160200151610da7565b14610744576040805162461bcd60e51b815260206004820152601d60248201527f737461636b206974656d206d697373696e672066726f6d2070726f6f66000000604482015290519081900360640190fd5b6106bb8561165c565b610100850151518311156107c9576107666106dc6116c5565b610777866020015160400151610da7565b14610744576040805162461bcd60e51b815260206004820181905260248201527f617578737461636b206974656d206d697373696e672066726f6d2070726f6f66604482015290519081900360640190fd5b60008411806107db5750846101200151155b80156107eb575060e08501515184145b8061081257508461012001518015610801575083155b8015610812575060e0850151516001145b61085a576040805162461bcd60e51b8152602060048201526014602482015273746f6f206d616e7920737461636b206974656d7360601b604482015290519081900360640190fd5b6101008501515183146108b4576040805162461bcd60e51b815260206004820152601760248201527f746f6f206d616e7920617578737461636b206974656d73000000000000000000604482015290519081900360640190fd5b6108c1858263ffffffff16565b60005b60e08601515181101561090b576109038660e001516020015182815181106108e857fe5b60200260200101518760200151610ec790919063ffffffff16565b6001016108c4565b5060005b610100860151518110156109585761095086610100015160200151828151811061093557fe5b60200260200101518760200151610ee190919063ffffffff16565b60010161090f565b50505050505b50565b600060028260e00151141561097857506000610a21565b60018260e00151141561098d57506001610a21565b8151602083015161099d90610da7565b6109aa8460400151610da7565b6109b78560600151610da7565b6109c48660800151610da7565b8660a001518760c00151604051602001808881526020018781526020018681526020018581526020018481526020018381526020018281526020019750505050505050506040516020818303038152906040528051906020012090505b919050565b6000610a30614167565b83518310610a76576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b600080610a83868661170c565b91509150610a8f611733565b60ff168160ff161415610ac3576000610aa88784611738565b909350905082610ab7826117ac565b94509450505050610bb1565b610acb61185e565b60ff168160ff161415610aed57610ae28683611863565b935093505050610bb1565b610af5611905565b60ff168160ff161415610b0c57610ae2868361190a565b610b1461199e565b60ff168160ff1610158015610b355750610b2c6119a3565b60ff168160ff16105b15610b71576000610b4461199e565b820390506060610b558289866119a8565b909450905083610b6482611a41565b9550955050505050610bb1565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b6000610bc2614213565b610bca614213565b600060e0820181905280610bde8787611738565b9096509150610bed878761190a565b60208501529550610bfe878761190a565b60408501529550610c0f8787610a26565b60608501529550610c208787610a26565b60808501529550610c318787611738565b60a08501529550610c428787611738565b92845260c0840192909252509590945092505050565b610c60614213565b60405180610100016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e001518152509050919050565b610cc9614167565b6040805160608101825260ff851681526020808201859052825160008082529181018452610d1c93830191610d14565b610d01614167565b815260200190600190039081610cf95790505b509052611b53565b9392505050565b610d2b614167565b604080516001808252818301909252606091816020015b610d4a614167565b815260200190600190039081610d425790505090508281600081518110610d6d57fe5b6020026020010181905250610d9e60405180606001604052808760ff16815260200186815260200183815250611b53565b95945050505050565b6000610db1611733565b60ff16826060015160ff161415610dd4578151610dcd90611bba565b9050610a21565b610ddc61185e565b60ff16826060015160ff161415610dfa57610dcd8260200151611bde565b610e02611905565b60ff16826060015160ff161415610e245781516080830151610dcd9190611cdb565b610e2c61199e565b60ff16826060015160ff161415610e6557610e45614167565b610e528360400151611d2c565b9050610e5d81610da7565b915050610a21565b610e6d611e8e565b60ff16826060015160ff161415610e8657508051610a21565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b610ed5826020015182611e93565b82602001819052505050565b610eef826040015182611e93565b82604001819052505050565b600080806121076001851415610f205750600292506000915060039050611f11611655565b6002851415610f3e5750600292506000915060039050611f11611655565b6003851415610f5c5750600292506000915060039050611f11611655565b6004851415610f7a5750600292506000915060049050612126611655565b6005851415610f985750600292506000915060079050612126611655565b6006851415610fb65750600292506000915060049050612126611655565b6007851415610fd45750600292506000915060079050612126611655565b6008851415610ff257506003925060009150600490506121f6611655565b600985141561101057506003925060009150600490506121f6611655565b600a85141561102e5750600292506000915060199050611f11611655565b601085141561104b57506002925060009150829050611f11611655565b601185141561106857506002925060009150829050611f11611655565b601285141561108557506002925060009150829050611f11611655565b60138514156110a257506002925060009150829050611f11611655565b60148514156110bf575060029250600091508290506122eb611655565b60158514156110dc5750600192506000915082905061234d611655565b60168514156110f957506002925060009150829050611f11611655565b601785141561111657506002925060009150829050611f11611655565b601885141561113357506002925060009150829050611f11611655565b6019851415611150575060019250600091508290506123bc611655565b601a85141561116e5750600292506000915060049050611f11611655565b601b85141561118c5750600292506000915060079050611f11611655565b60208514156111aa57506001925060009150600790506123ff611655565b60218514156111c8575060019250600091506003905061242a611655565b60228514156111e65750600292506000915060089050611f11611655565b602385141561120557506001925060009150610258905061244d611655565b603085141561122257506001925060009150829050612635611655565b603185141561123f57506000925082915060019050612642611655565b603285141561125c5750600092508291506001905061265f611655565b603385141561127a575060019250600091506002905061267c611655565b60348514156112985750600192506000915060049050612695611655565b60358514156112b657506002925060009150600490506126d5611655565b60368514156112d357506000925082915060029050612747611655565b60378514156112f057506000925082915060019050612784611655565b603885141561130d575060019250600091508290506127a7611655565b603985141561132a575060009250600191508190506127c9611655565b603a851415611347575060009250829150600290506127da611655565b603b8514156113645750600092508291506001905061095e611655565b603c85141561138157506000925082915060019050612808611655565b603d85141561139e5750600192506000915082905061281e611655565b60408514156113bb57506001925060009150829050612861611655565b60418514156113d957506002925060009150600190506128a3611655565b60428514156113f75750600392506000915060019050612911611655565b604385141561141557506002925060009150600190506129ab611655565b604485141561143357506003925060009150600190506129ef611655565b605085141561145057506002925060009150829050612a5f611655565b605185141561146e5750600392506000915060289050612b02611655565b605285141561148c5750600192506000915060029050612bb6611655565b60538514156114a957506001925082915060039050612bfa611655565b60548514156114c75750600292506001915060299050612c82611655565b60608514156114e45750600092508291506064905061095e611655565b60618514156115025750600192506000915060649050612d49611655565b60708514156115205750600192506000915060649050612d8f611655565b607285141561153d57506000925082915060289050612e0e611655565b607385141561155a57506000925082915060059050612ea9611655565b6074851415611577575060009250829150600a9050612eb2611655565b607585141561159457506001925060009150819050612ebf611655565b60768514156115b157506000925082915060019050612ef9611655565b60778514156115ce57506000925082915060199050612f0d611655565b60788514156115ec5750600292506000915060199050612f57611655565b607985141561160a5750600392506000915060199050612fc7611655565b607b851415611627575060009250829150600a905061304f611655565b608085141561164657506004925060009150614e209050613091611655565b5060009250829150819050612ea95b9193509193565b60408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051908201209082015160c0015114156116b8576116b3816020015161321c565b61095e565b6020015160c08101519052565b6116cd614167565b6040805160008082526020820190925261170791611701565b6116ee614167565b8152602001906001900390816116e65790505b50611a41565b905090565b6000808260010184848151811061171f57fe5b016020015190925060f81c90509250929050565b600090565b60008082845110158015611750575060208385510310155b61178d576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b602083016117a1858563ffffffff61322616565b915091509250929050565b6117b4614167565b6040805160a081018252838152815160608101835260008082526020828101829052845182815280820186529394908501939083019161180a565b6117f7614167565b8152602001906001900390816117ef5790505b50905281526040805160008082526020828101909352919092019190611846565b611833614167565b81526020019060019003908161182b5790505b50815260006020820152600160409091015292915050565b600190565b600061186d614167565b82600080611879614167565b6000611885898661170c565b9095509350611894898661170c565b9095509250600160ff851614156118b5576118af8986610a26565b90955091505b6118bf8986613242565b9095509050600160ff851614156118ea57846118dc848385610d23565b965096505050505050610bb1565b846118f58483610cc1565b9650965050505050509250929050565b600290565b6000611914614167565b82845110158015611929575060408385510310155b611965576040805162461bcd60e51b81526020600482015260086024820152671d1bc81cda1bdc9d60c21b604482015290519081900360640190fd5b6000806119728686613242565b90945091506119818685611738565b90945090508361199183836101af565b9350935050509250929050565b600390565b600c90565b60006060600083905060608660ff166040519080825280602002602001820160405280156119f057816020015b6119dd614167565b8152602001906001900390816119d55790505b50905060005b8760ff168160ff161015611a3457611a0e8784610a26565b8351849060ff8516908110611a1f57fe5b602090810291909101015292506001016119f6565b5090969095509350505050565b611a49614167565b611a538251613259565b611aa4576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b8351811015611adb57838181518110611abe57fe5b602002602001015160800151820191508080600101915050611aa9565b506040805160a0810182526000808252825160608101845281815260208181018390528451838152808201865293949085019391929083019190611b35565b611b22614167565b815260200190600190039081611b1a5790505b50905281526020810194909452600360408501526060909301525090565b611b5b614167565b6040805160a0810182526000808252602080830186905283518281529081018452919283019190611ba2565b611b8f614167565b815260200190600190039081611b875790505b50815260016020820181905260409091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b6000600282604001515110611bef57fe5b604082015151611c5457611c0161185e565b8251602080850151604080516001600160f81b031960f896871b8116828601529490951b909316602185015260228085019190915282518085039091018152604290930190915281519101209050610a21565b611c5c61185e565b8260000151611c828460400151600081518110611c7557fe5b6020026020010151610da7565b8460200151604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b6000611ce561199e565b8383604051602001808460ff1660ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b611d34614167565b600882511115611d82576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b60608251604051908082528060200260200182016040528015611daf578160200160208202803883390190505b508051909150600160005b82811015611e1257611dd1868281518110611c7557fe5b848281518110611ddd57fe5b602002602001018181525050858181518110611df557fe5b602002602001015160800151820191508080600101915050611dba565b506000835184604051602001808360ff1660ff1660f81b8152600101828051906020019060200280838360005b83811015611e57578181015183820152602001611e3f565b5050505090500192505050604051602081830303815290604052805190602001209050611e8481836101af565b9695505050505050565b606490565b611e9b614167565b6040805160028082526060828101909352816020015b611eb9614167565b815260200190600190039081611eb15790505090508281600081518110611edc57fe5b60200260200101819052508381600181518110611ef557fe5b6020026020010181905250611f0981611d2c565b949350505050565b611f19614167565b611f268260e00151613260565b9050611f30614167565b611f3d8360e00151613260565b9050611f48826132a2565b1580611f5a5750611f58816132a2565b155b15611f6f57611f68836132ad565b505061095e565b8151815161014085015160009060ff1660011415611f905750818101612109565b61014086015160ff1660021415611faa5750818102612109565b61014086015160ff1660031415611fc45750808203612109565b61014086015160ff16600a1415611fde575080820a612109565b61014086015160ff1660101415611ff85750808210612109565b61014086015160ff16601114156120125750808211612109565b61014086015160ff166012141561202c5750808212612109565b61014086015160ff16601314156120465750808213612109565b61014086015160ff16601614156120605750818116612109565b61014086015160ff166017141561207a5750818117612109565b61014086015160ff16601814156120945750818118612109565b61014086015160ff16601a14156120ae575081811a612109565b61014086015160ff16601b14156120c8575081810b612109565b61014086015160ff1660221415612107575060408051602080820185905281830184905282518083038401815260609092019092528051910120612109565bfe5b610958612115826117ac565b60e08801519063ffffffff6132cb16565b61212e614167565b61213b8260e00151613260565b9050612145614167565b6121528360e00151613260565b905061215d826132a2565b158061216f575061216d816132a2565b155b8061217957508051155b1561218757611f68836132ad565b8151815161014085015160009060ff16600414156121a85750808204612109565b61014086015160ff16600514156121c25750808205612109565b61014086015160ff16600614156121dc5750808206612109565b61014086015160ff16600714156121075750808207612109565b6121fe614167565b61220b8260e00151613260565b9050612215614167565b6122228360e00151613260565b905061222c614167565b6122398460e00151613260565b9050612244836132a2565b15806122565750612254826132a2565b155b806122675750612265816132a2565b155b8061227157508051155b156122875761227f846132ad565b50505061095e565b82518251825161014087015160009060ff16600814156122ac578183850890506122c4565b61014088015160ff1660091415612107578183850990505b6122e16122d0826117ac565b60e08a01519063ffffffff6132cb16565b5050505050505050565b6122f3614167565b6123008260e00151613260565b905061230a614167565b6123178360e00151613260565b905061234861233761232883610da7565b61233185610da7565b146132f5565b60e08501519063ffffffff6132cb16565b505050565b612355614167565b6123628260e00151613260565b905061236d816132a2565b6123945761238f61237e60006117ac565b60e08401519063ffffffff6132cb16565b6123b8565b805180156123b56123a4826117ac565b60e08601519063ffffffff6132cb16565b50505b5050565b6123c4614167565b6123d18260e00151613260565b90506123dc816132a2565b6123ef576123e9826132ad565b5061095e565b805180196123b56123a4826117ac565b612407614167565b6124148260e00151613260565b90506123b861237e61242583610da7565b6117ac565b612432614167565b61243f8260e00151613260565b90506123b861237e82613317565b612455614167565b6124628260e00151613260565b905061246d8161337c565b158061247f5750806040015151600714155b1561248d576123e9826132ad565b604081015160005b60078110156124cf576124ba8282815181106124ad57fe5b60200260200101516132a2565b6124c75761227f846132ad565b600101612495565b506124d8614271565b60005b601981101561253c57604060038216028360048304815181106124fa57fe5b602002602001015160000151901c6001600160401b0316826005838161251c57fe5b0460058406600502016019811061252f57fe5b60200201526001016124db565b5061254681613389565b604080516007808252610100820190925291925060609190816020015b61256b614167565b81526020019060019003908161256357905050905060005b60078110156125b55761259660006117ac565b8282815181106125a257fe5b6020908102919091010152600101612583565b5060005b6019811015612610576040600382160283600583046005840660050201601981106125e057fe5b6020020151901b8260048304815181106125f657fe5b6020908102919091010151805190911790526001016125b9565b5061262e61261d82611a41565b60e08701519063ffffffff6132cb16565b5050505050565b6123b88160e00151613260565b60208101516080015160e082015161095e9163ffffffff6132cb16565b60208101516060015160e082015161095e9163ffffffff6132cb16565b6126898160e00151613260565b60209091015160600152565b61269d614167565b6126aa8260e00151613260565b90506126b581613f7a565b6126c2576123e9826132ad565b6126cb81610da7565b6020830151525050565b6126dd614167565b6126ea8260e00151613260565b90506126f4614167565b6127018360e00151613260565b905061270c82613f7a565b158061271e575061271c816132a2565b155b1561272c57611f68836132ad565b8051156123485761273c82610da7565b602084015152505050565b60e08101515160009015801561277657506127636106dc6116c5565b612774836020015160200151610da7565b145b90506123b861237e826132f5565b80515161095e90612796906001613f87565b60e08301519063ffffffff6132cb16565b61095e6127b78260e00151613260565b6101008301519063ffffffff6132cb16565b61095e612796826101000151613260565b6101008101515160009015801561277657506127f76106dc6116c5565b612774836020015160400151610da7565b61095e612796826020015160c001516001613f87565b612826614167565b6128338260e00151613260565b905061283e81613f7a565b61284b576123e9826132ad565b61285481610da7565b602083015160c001525050565b612869614167565b6128768260e00151613260565b60e083015190915061288e908263ffffffff6132cb16565b60e08201516123b8908263ffffffff6132cb16565b6128ab614167565b6128b88260e00151613260565b90506128c2614167565b6128cf8360e00151613260565b60e08401519091506128e7908263ffffffff6132cb16565b60e08301516128fc908363ffffffff6132cb16565b60e0830151612348908263ffffffff6132cb16565b612919614167565b6129268260e00151613260565b9050612930614167565b61293d8360e00151613260565b9050612947614167565b6129548460e00151613260565b60e085015190915061296c908263ffffffff6132cb16565b60e0840151612981908363ffffffff6132cb16565b60e0840151612996908463ffffffff6132cb16565b60e08401516123b5908263ffffffff6132cb16565b6129b3614167565b6129c08260e00151613260565b90506129ca614167565b6129d78360e00151613260565b60e08401519091506128fc908363ffffffff6132cb16565b6129f7614167565b612a048260e00151613260565b9050612a0e614167565b612a1b8360e00151613260565b9050612a25614167565b612a328460e00151613260565b60e0850151909150612a4a908463ffffffff6132cb16565b60e0840151612996908363ffffffff6132cb16565b612a67614167565b612a748260e00151613260565b9050612a7e614167565b612a8b8360e00151613260565b9050612a96826132a2565b1580612aa85750612aa68161337c565b155b80612ac25750612ab781614038565b60ff16826000015110155b15612ad057611f68836132ad565b6123488160400151836000015181518110612ae757fe5b60200260200101518460e001516132cb90919063ffffffff16565b612b0a614167565b612b178260e00151613260565b9050612b21614167565b612b2e8360e00151613260565b9050612b38614167565b612b458460e00151613260565b9050612b50836132a2565b1580612b625750612b608261337c565b155b80612b7c5750612b7182614038565b60ff16836000015110155b15612b8a5761227f846132ad565b604082015183518151839183918110612b9f57fe5b602002602001018190525061262e61261d82611a41565b612bbe614167565b612bcb8260e00151613260565b9050612bd68161337c565b612be3576123e9826132ad565b6123b861237e612bf283614038565b60ff166117ac565b612c02614167565b612c0f8260e00151613260565b9050612c19614167565b612c27836101000151613260565b9050612c32826132a2565b1580612c445750612c428161337c565b155b80612c5e5750612c5381614038565b60ff16826000015110155b15612c6c57611f68836132ad565b610100830151612ad0908263ffffffff6132cb16565b612c8a614167565b612c978260e00151613260565b9050612ca1614167565b612cae8360e00151613260565b9050612cb8614167565b612cc6846101000151613260565b9050612cd18161337c565b1580612ce35750612ce1836132a2565b155b80612cfd5750612cf281614038565b60ff16836000015110155b15612d0b5761227f846132ad565b604081015183518151849183918110612d2057fe5b602002602001018190525061262e612d3782611a41565b6101008701519063ffffffff6132cb16565b8060a00151612d5e6106dc8360e00151613260565b604080516020808201949094528082019290925280518083038201815260609092019052805191012060a090910152565b612d97614167565b612da48260e00151613260565b905061271081608001511180612dc05750612dbe8161405f565b155b15612dce576123e9826132ad565b8160800151612ddc82610da7565b604080516020808201949094528082019290925280518083038201815260609092019052805191012060808301525050565b612e196106dc6116c5565b612e268260400151610da7565b1415612e79576040805162461bcd60e51b815260206004820152601d60248201527f496e626f7820696e737472756374696f6e2077617320626c6f636b6564000000604482015290519081900360640190fd5b604081015160e0820151612e929163ffffffff6132cb16565b612e9a6116c5565b60408201526001606090910152565b61095e816132ad565b61095e816020015161415d565b612ec7614167565b612ed48260e00151613260565b9050612edf816132a2565b612eec576123e9826132ad565b51602082015160a0015250565b61095e612796826020015160a001516117ac565b60408051600160f81b602080830191909152600060218301819052602280840191909152835180840390910181526042909201909252805191012061095e90612796906001613f87565b612f5f614167565b612f6c8260e00151613260565b9050612f76614167565b612f838360e00151613260565b9050612f8e826132a2565b1580612fa05750612f9e81613f7a565b155b15612fae57611f68836132ad565b6123486123378360000151612fc284610da7565b610cc1565b612fcf614167565b612fdc8260e00151613260565b9050612fe6614167565b612ff38360e00151613260565b9050612ffd614167565b61300a8460e00151613260565b9050613015836132a2565b1580613027575061302581613f7a565b155b156130355761227f846132ad565b6123b56123a4846000015161304984610da7565b85610d23565b60408051600080825260208201909252606091613082565b61306f614167565b8152602001906001900390816130675790505b5090506123b861237e82611a41565b613099614167565b6130a68260e00151613260565b90506130b0614167565b6130bd8360e00151613260565b90506130c7614167565b6130d48460e00151613260565b90506130de614167565b6130eb8560e00151613260565b90506130f6846132a2565b15806131085750613106836132a2565b155b806131195750613117826132a2565b155b8061312a5750613128816132a2565b155b15613138576106bb856132ad565b8351835183511580159061314e57508351600114155b1561317c5761317161316060006117ac565b60e08901519063ffffffff6132cb16565b50505050505061095e565b83518351604080516000808252602080830180855285905260ff601b9096019586168385015260608301889052608083018790529251909260019260a080820193601f1981019281900390910190855afa1580156131de573d6000803e3d6000fd5b5050506020604051035190506132106131ff826001600160a01b03166117ac565b60e08c01519063ffffffff6132cb16565b50505050505050505050565b600160e090910152565b6000816020018351101561323957600080fd5b50016020015190565b600080602083016117a1858563ffffffff61322616565b6008101590565b613268614167565b613270614167565b826020015160018460000151038151811061328757fe5b60209081029190910101518351600019018452915050919050565b6060015160ff161590565b6132b68161165c565b60e08101516000908190526101009091015152565b8082602001518360000151815181106132e057fe5b60209081029190910101525080516001019052565b6132fd614167565b811561330d57610dcd60016117ac565b610dcd60006117ac565b61331f614167565b816060015160ff16600214156133665760405162461bcd60e51b81526004018080602001828103825260218152602001806143076021913960400191505060405180910390fd5b613376826060015160ff166117ac565b92915050565b6060015160ff1660031490565b613391614271565b613399614290565b6133a1614290565b6133a9614271565b6133b16142ae565b60405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060008090505b6018811015613f6f576080878101516060808a01516040808c01516020808e01518e511890911890921890931889526101208b01516101008c015160e08d015160c08e015160a08f0151181818189089018190526101c08b01516101a08c01516101808d01516101608e01516101408f0151181818189289019283526102608b01516102408c01516102208d01516102008e01516101e08f015118181818918901919091526103008a01516102e08b01516102c08c01516102a08d01516102808e0151181818189288018390526001600160401b0360028202166001603f1b91829004179092188652510485600260200201516002026001600160401b03161785600060200201511884600160200201526001603f1b8560036020020151816135fd57fe5b0485600360200201516002026001600160401b03161785600160200201511884600260200201526001603f1b85600460200201518161363857fe5b0485600460200201516002026001600160401b0316178560026005811061365b57fe5b602002015118606085015284516001603f1b9086516060808901519390920460029091026001600160401b031617909118608086810191825286518a5118808b5287516020808d018051909218825289516040808f0180519092189091528a518e8801805190911890528a51948e0180519095189094528901805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291880180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292870180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a01805190911890529084525163100000009060208901516001600160401b03641000000000909102169190041761010084015260408701516001603d1b9060408901516001600160401b03600890910216919004176101608401526060870151628000009060608901516001600160401b036502000000000090910216919004176102608401526080870151654000000000009060808901516001600160401b036204000090910216919004176102c084015260a08701516001603f1b900487600560200201516002026001600160401b031617836002601981106138c557fe5b602002015260c0870151621000008104651000000000009091026001600160401b039081169190911760a085015260e0880151664000000000000081046104009091028216176101a08501526101008801516208000081046520000000000090910282161761020085015261012088015160048082029092166001603e1b909104176103008501526101408801516101408901516001600160401b036001603e1b90910216919004176080840152610160870151670400000000000000906101608901516001600160401b036040909102169190041760e084015261018087015162200000906101808901516001600160401b036508000000000090910216919004176101408401526101a08701516602000000000000906101a08901516001600160401b0361800090910216919004176102408401526101c08701516008906101c08901516001600160401b036001603d1b90910216919004176102a08401526101e0870151641000000000906101e08901516001600160401b03631000000090910216919004176020840152610200808801516102008901516001600160401b0366800000000000009091021691900417610120840152610220870151648000000000906102208901516001600160401b036302000000909102169190041761018084015261024087015165080000000000906102408901516001600160401b036220000090910216919004176101e0840152610260870151610100906102608901516001600160401b03600160381b90910216919004176102e0840152610280870151642000000000906102808901516001600160401b036308000000909102169190041760608401526102a087015165100000000000906102a08901516001600160401b0362100000909102169190041760c08401526102c08701516302000000906102c08901516001600160401b0364800000000090910216919004176101c08401526102e0870151600160381b906102e08901516001600160401b036101009091021691900417610220840152610300870151660400000000000090048760186020020151614000026001600160401b031617836014602002015282600a602002015183600560200201511916836000602002015118876000602002015282600b602002015183600660200201511916836001602002015118876001602002015282600c602002015183600760200201511916836002602002015118876002602002015282600d602002015183600860200201511916836003602002015118876003602002015282600e602002015183600960200201511916836004602002015118876004602002015282600f602002015183600a602002015119168360056020020151188760056020020152826010602002015183600b602002015119168360066020020151188760066020020152826011602002015183600c602002015119168360076020020151188760076020020152826012602002015183600d602002015119168360086020020151188760086020020152826013602002015183600e602002015119168360096020020151188760096020020152826014602002015183600f6020020151191683600a60200201511887600a602002015282601560200201518360106020020151191683600b60200201511887600b602002015282601660200201518360116020020151191683600c60200201511887600c602002015282601760200201518360126020020151191683600d60200201511887600d602002015282601860200201518360136020020151191683600e60200201511887600e602002015282600060200201518360146020020151191683600f60200201511887600ff5d57fe5b602002015187511887526001016134d8565b509495945050505050565b6060015160ff1660011490565b613f8f614167565b6040805160a0810182528481528151606081018352600080825260208281018290528451828152808201865293949085019390830191613fe5565b613fd2614167565b815260200190600190039081613fca5790505b50905281526040805160008082526020828101909352919092019190614021565b61400e614167565b8152602001906001900390816140065790505b508152606460208201526040019290925250919050565b606081015160009060ff16600314156140575750604081015151610a21565b506001610a21565b606081015160009060ff1661407657506001610a21565b606082015160ff166001141561408e57506000610a21565b606082015160ff16600214156140e2576040805162461bcd60e51b81526020600482015260146024820152736d75737420686176652066756c6c2076616c756560601b604482015290519081900360640190fd5b606082015160ff16600314156141455760408201515160005b8181101561413a576141238460400151828151811061411657fe5b602002602001015161405f565b61413257600092505050610a21565b6001016140fb565b506001915050610a21565b606082015160ff1660641415610e8657506000610a21565b600260e090910152565b6040518060a00160405280600081526020016141816142cd565b815260606020820181905260006040830181905291015290565b6040518061016001604052806141af614213565b81526020016141bc614213565b81526020016141c9614167565b81526000602082018190526040820181905260608201819052608082015260a0016141f26142ec565b81526020016141ff6142ec565b815260006020820181905260409091015290565b604080516101008101909152600081526020810161422f614167565b815260200161423c614167565b8152602001614249614167565b8152602001614256614167565b81526000602082018190526040820181905260609091015290565b6040518061032001604052806019906020820280388339509192915050565b6040518060a001604052806005906020820280388339509192915050565b6040518061030001604052806018906020820280388339509192915050565b6040805160608082018352600080835260208301529181019190915290565b60405180604001604052806000815260200160608152509056fe56616c7565206d757374206861766520612076616c6964207479706520636f6465a265627a7a72315820e8f4a4f97a27990a43b5eaaf23dd40f0db968d2f12993237e4a0949f1dd928e164736f6c63430005110032"

// DeployOneStepProofTester deploys a new Ethereum contract, binding an instance of OneStepProofTester to it.
func DeployOneStepProofTester(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProofTester, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofTesterABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofTesterBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProofTester{OneStepProofTesterCaller: OneStepProofTesterCaller{contract: contract}, OneStepProofTesterTransactor: OneStepProofTesterTransactor{contract: contract}, OneStepProofTesterFilterer: OneStepProofTesterFilterer{contract: contract}}, nil
}

// OneStepProofTester is an auto generated Go binding around an Ethereum contract.
type OneStepProofTester struct {
	OneStepProofTesterCaller     // Read-only binding to the contract
	OneStepProofTesterTransactor // Write-only binding to the contract
	OneStepProofTesterFilterer   // Log filterer for contract events
}

// OneStepProofTesterCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofTesterCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTesterTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTesterTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTesterFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofTesterFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTesterSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofTesterSession struct {
	Contract     *OneStepProofTester // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// OneStepProofTesterCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofTesterCallerSession struct {
	Contract *OneStepProofTesterCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// OneStepProofTesterTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTesterTransactorSession struct {
	Contract     *OneStepProofTesterTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// OneStepProofTesterRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofTesterRaw struct {
	Contract *OneStepProofTester // Generic contract binding to access the raw methods on
}

// OneStepProofTesterCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofTesterCallerRaw struct {
	Contract *OneStepProofTesterCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTesterTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTesterTransactorRaw struct {
	Contract *OneStepProofTesterTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProofTester creates a new instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTester(address common.Address, backend bind.ContractBackend) (*OneStepProofTester, error) {
	contract, err := bindOneStepProofTester(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTester{OneStepProofTesterCaller: OneStepProofTesterCaller{contract: contract}, OneStepProofTesterTransactor: OneStepProofTesterTransactor{contract: contract}, OneStepProofTesterFilterer: OneStepProofTesterFilterer{contract: contract}}, nil
}

// NewOneStepProofTesterCaller creates a new read-only instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTesterCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofTesterCaller, error) {
	contract, err := bindOneStepProofTester(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTesterCaller{contract: contract}, nil
}

// NewOneStepProofTesterTransactor creates a new write-only instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTesterTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTesterTransactor, error) {
	contract, err := bindOneStepProofTester(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTesterTransactor{contract: contract}, nil
}

// NewOneStepProofTesterFilterer creates a new log filterer instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTesterFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofTesterFilterer, error) {
	contract, err := bindOneStepProofTester(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTesterFilterer{contract: contract}, nil
}

// bindOneStepProofTester binds a generic wrapper to an already deployed contract.
func bindOneStepProofTester(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofTesterABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofTester *OneStepProofTesterRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProofTester.Contract.OneStepProofTesterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofTester *OneStepProofTesterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.OneStepProofTesterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofTester *OneStepProofTesterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.OneStepProofTesterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofTester *OneStepProofTesterCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProofTester.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofTester *OneStepProofTesterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofTester *OneStepProofTesterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.contract.Transact(opts, method, params...)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x799b4835.
//
// Solidity: function executeStep(bytes32 beforeInbox, uint256 beforeInboxValueSize, bytes32 firstMessage, bytes32 firstLog, bytes proof) pure returns(bytes32 startHash, bytes32 endHash, bytes32 logAcc, bytes32 messageAcc, uint64 gas, bool didInboxInsn)
func (_OneStepProofTester *OneStepProofTesterCaller) ExecuteStep(opts *bind.CallOpts, beforeInbox [32]byte, beforeInboxValueSize *big.Int, firstMessage [32]byte, firstLog [32]byte, proof []byte) (struct {
	StartHash    [32]byte
	EndHash      [32]byte
	LogAcc       [32]byte
	MessageAcc   [32]byte
	Gas          uint64
	DidInboxInsn bool
}, error) {
	ret := new(struct {
		StartHash    [32]byte
		EndHash      [32]byte
		LogAcc       [32]byte
		MessageAcc   [32]byte
		Gas          uint64
		DidInboxInsn bool
	})
	out := ret
	err := _OneStepProofTester.contract.Call(opts, out, "executeStep", beforeInbox, beforeInboxValueSize, firstMessage, firstLog, proof)
	return *ret, err
}

// ExecuteStep is a free data retrieval call binding the contract method 0x799b4835.
//
// Solidity: function executeStep(bytes32 beforeInbox, uint256 beforeInboxValueSize, bytes32 firstMessage, bytes32 firstLog, bytes proof) pure returns(bytes32 startHash, bytes32 endHash, bytes32 logAcc, bytes32 messageAcc, uint64 gas, bool didInboxInsn)
func (_OneStepProofTester *OneStepProofTesterSession) ExecuteStep(beforeInbox [32]byte, beforeInboxValueSize *big.Int, firstMessage [32]byte, firstLog [32]byte, proof []byte) (struct {
	StartHash    [32]byte
	EndHash      [32]byte
	LogAcc       [32]byte
	MessageAcc   [32]byte
	Gas          uint64
	DidInboxInsn bool
}, error) {
	return _OneStepProofTester.Contract.ExecuteStep(&_OneStepProofTester.CallOpts, beforeInbox, beforeInboxValueSize, firstMessage, firstLog, proof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x799b4835.
//
// Solidity: function executeStep(bytes32 beforeInbox, uint256 beforeInboxValueSize, bytes32 firstMessage, bytes32 firstLog, bytes proof) pure returns(bytes32 startHash, bytes32 endHash, bytes32 logAcc, bytes32 messageAcc, uint64 gas, bool didInboxInsn)
func (_OneStepProofTester *OneStepProofTesterCallerSession) ExecuteStep(beforeInbox [32]byte, beforeInboxValueSize *big.Int, firstMessage [32]byte, firstLog [32]byte, proof []byte) (struct {
	StartHash    [32]byte
	EndHash      [32]byte
	LogAcc       [32]byte
	MessageAcc   [32]byte
	Gas          uint64
	DidInboxInsn bool
}, error) {
	return _OneStepProofTester.Contract.ExecuteStep(&_OneStepProofTester.CallOpts, beforeInbox, beforeInboxValueSize, firstMessage, firstLog, proof)
}
