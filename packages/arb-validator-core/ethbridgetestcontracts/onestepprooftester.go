// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgetestcontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProofABI is the input ABI used to generate the binding from.
const OneStepProofABI = "[]"

// OneStepProofBin is the compiled bytecode used for deploying new contracts.
var OneStepProofBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820e48bc9fc39684cb6854d35cc18ec647a93c35ee314b645350a7233506c9930cd64736f6c63430005110032"

// DeployOneStepProof deploys a new Ethereum contract, binding an instance of OneStepProof to it.
func DeployOneStepProof(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// OneStepProof is an auto generated Go binding around an Ethereum contract.
type OneStepProof struct {
	OneStepProofCaller     // Read-only binding to the contract
	OneStepProofTransactor // Write-only binding to the contract
	OneStepProofFilterer   // Log filterer for contract events
}

// OneStepProofCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofSession struct {
	Contract     *OneStepProof     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProofCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofCallerSession struct {
	Contract *OneStepProofCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// OneStepProofTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTransactorSession struct {
	Contract     *OneStepProofTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// OneStepProofRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofRaw struct {
	Contract *OneStepProof // Generic contract binding to access the raw methods on
}

// OneStepProofCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofCallerRaw struct {
	Contract *OneStepProofCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTransactorRaw struct {
	Contract *OneStepProofTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof creates a new instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProof(address common.Address, backend bind.ContractBackend) (*OneStepProof, error) {
	contract, err := bindOneStepProof(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// NewOneStepProofCaller creates a new read-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofCaller, error) {
	contract, err := bindOneStepProof(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofCaller{contract: contract}, nil
}

// NewOneStepProofTransactor creates a new write-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTransactor, error) {
	contract, err := bindOneStepProof(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTransactor{contract: contract}, nil
}

// NewOneStepProofFilterer creates a new log filterer instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofFilterer, error) {
	contract, err := bindOneStepProof(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofFilterer{contract: contract}, nil
}

// bindOneStepProof binds a generic wrapper to an already deployed contract.
func bindOneStepProof(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.OneStepProofCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transact(opts, method, params...)
}

// OneStepProofTesterABI is the input ABI used to generate the binding from.
const OneStepProofTesterABI = "[{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beforeInbox\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"beforeInboxValueSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"firstMessage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"firstLog\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"startHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"endHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"logAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"messageAcc\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"didInboxInsn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// OneStepProofTesterFuncSigs maps the 4-byte function signature to its string representation.
var OneStepProofTesterFuncSigs = map[string]string{
	"799b4835": "executeStep(bytes32,uint256,bytes32,bytes32,bytes)",
}

// OneStepProofTesterBin is the compiled bytecode used for deploying new contracts.
var OneStepProofTesterBin = "0x608060405234801561001057600080fd5b50614335806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063799b483514610030575b600080fd5b6100ee600480360360a081101561004657600080fd5b81359160208101359160408201359160608101359181019060a08101608082013564010000000081111561007957600080fd5b82018360208201111561008b57600080fd5b803590602001918460018302840111640100000000831117156100ad57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061012c945050505050565b6040805196875260208701959095528585019390935260608501919091526001600160401b03166080840152151560a0830152519081900360c00190f35b60008060008060008061013d614140565b6101478c8c6101af565b9050610151614174565b61015d828c8c8c610260565b905061016881610649565b80516101739061093d565b610180826020015161093d565b8260a0015183608001518460c00151856060015197509750975097509750975050509550955095509550955095565b6101b7614140565b6040805160a081018252848152815160608101835260008082526020828101829052845182815280820186529394908501939083019161020d565b6101fa614140565b8152602001906001900390816101f25790505b50905281526040805160008082526020828101909352919092019190610249565b610236614140565b81526020019060019003908161022e5790505b508152600260208201526040019290925250919050565b610268614174565b60008260008151811061027757fe5b602001015160f81c60f81b60f81c905060008360018151811061029657fe5b602001015160f81c60f81b60f81c905060608260040160ff166040519080825280602002602001820160405280156102e857816020015b6102d5614140565b8152602001906001900390816102cd5790505b50905060608260040160ff1660405190808252806020026020018201604052801561032d57816020015b61031a614140565b8152602001906001900390816103125790505b509050600260005b8560ff1681101561036d5761034a8883610a02565b855186908490811061035857fe5b60209081029190910101529150600101610335565b5060005b8460ff168110156103a9576103868883610a02565b845185908490811061039457fe5b60209081029190910101529150600101610371565b506103b26141ec565b6103bc8883610b94565b809250819350505060008883815181106103d257fe5b602001015160f81c60f81b60f81c905060008984600101815181106103f357fe5b016020015160f81c9050610405614174565b60405180610160016040528085815260200161042086610c34565b81526020018f81526020016000151581526020018e81526020018d815260200160006001600160401b0316815260200160405180604001604052808c60ff1681526020018a815250815260200160405180604001604052808b60ff1681526020018981525081526020018460ff16600114151581526020018360ff1681525090508260ff16600014806104b657508260ff166001145b610507576040805162461bcd60e51b815260206004820152601c60248201527f50726f6f662068616420626164206f7065726174696f6e207479706500000000604482015290519081900360640190fd5b61050f614140565b60ff841661052c57815151610525908490610c9d565b90506105a6565b6000885111610577576040805162461bcd60e51b81526020600482015260126024820152716e6f20696d6d6564696174652076616c756560701b604482015290519081900360640190fd5b6105a3838360000151600001518a60018e0360ff168151811061059657fe5b6020026020010151610cff565b90505b6105af81610d83565b82515260005b848b0360ff168110156105f4576105ec8982815181106105d157fe5b60200260200101518460000151610ea390919063ffffffff16565b6001016105b5565b5060005b8960ff168110156106355761062d88828151811061061257fe5b60200260200101518460000151610ebd90919063ffffffff16565b6001016105f8565b50909e9d5050505050505050505050505050565b60008060006120e361066285610140015160ff16610ed7565b6001600160401b03821660c08a0181905260208a015160a0908101805183900390528a510151949850929650909450925011156106b957602085015160001960a0909101526106b085611638565b5050505061093a565b60e085015151841115610734576106d66106d16116a1565b610d83565b6106e7866020015160200151610d83565b1461072b576040805162461bcd60e51b815260206004820152600f60248201526e737461636b206e6f7420656d70747960881b604482015290519081900360640190fd5b6106b085611638565b610100850151518311156107a55761074d6106d16116a1565b61075e866020015160400151610d83565b1461072b576040805162461bcd60e51b8152602060048201526012602482015271617578737461636b206e6f7420656d70747960701b604482015290519081900360640190fd5b60008411806107b75750846101200151155b80156107c7575060e08501515184145b806107ee575084610120015180156107dd575083155b80156107ee575060e0850151516001145b610836576040805162461bcd60e51b8152602060048201526014602482015273746f6f206d616e7920737461636b206974656d7360601b604482015290519081900360640190fd5b610100850151518314610890576040805162461bcd60e51b815260206004820152601760248201527f746f6f206d616e7920617578737461636b206974656d73000000000000000000604482015290519081900360640190fd5b61089d858263ffffffff16565b60005b60e0860151518110156108e7576108df8660e001516020015182815181106108c457fe5b60200260200101518760200151610ea390919063ffffffff16565b6001016108a0565b5060005b610100860151518110156109345761092c86610100015160200151828151811061091157fe5b60200260200101518760200151610ebd90919063ffffffff16565b6001016108eb565b50505050505b50565b600060028260e001511415610954575060006109fd565b60018260e001511415610969575060016109fd565b8151602083015161097990610d83565b6109868460400151610d83565b6109938560600151610d83565b6109a08660800151610d83565b8660a001518760c00151604051602001808881526020018781526020018681526020018581526020018481526020018381526020018281526020019750505050505050506040516020818303038152906040528051906020012090505b919050565b6000610a0c614140565b83518310610a52576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b600080610a5f86866116e8565b91509150610a6b61170f565b60ff168160ff161415610a9f576000610a848784611714565b909350905082610a9382611788565b94509450505050610b8d565b610aa761183a565b60ff168160ff161415610ac957610abe868361183f565b935093505050610b8d565b610ad16118e1565b60ff168160ff161415610ae857610abe86836118e6565b610af061197a565b60ff168160ff1610158015610b115750610b0861197f565b60ff168160ff16105b15610b4d576000610b2061197a565b820390506060610b31828986611984565b909450905083610b4082611a1d565b9550955050505050610b8d565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b6000610b9e6141ec565b610ba66141ec565b600060e0820181905280610bba8787611714565b9096509150610bc987876118e6565b60208501529550610bda87876118e6565b60408501529550610beb8787610a02565b60608501529550610bfc8787610a02565b60808501529550610c0d8787611714565b60a08501529550610c1e8787611714565b92845260c0840192909252509590945092505050565b610c3c6141ec565b60405180610100016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e001518152509050919050565b610ca5614140565b6040805160608101825260ff851681526020808201859052825160008082529181018452610cf893830191610cf0565b610cdd614140565b815260200190600190039081610cd55790505b509052611b2f565b9392505050565b610d07614140565b604080516001808252818301909252606091816020015b610d26614140565b815260200190600190039081610d1e5790505090508281600081518110610d4957fe5b6020026020010181905250610d7a60405180606001604052808760ff16815260200186815260200183815250611b2f565b95945050505050565b6000610d8d61170f565b60ff16826060015160ff161415610db0578151610da990611b96565b90506109fd565b610db861183a565b60ff16826060015160ff161415610dd657610da98260200151611bba565b610dde6118e1565b60ff16826060015160ff161415610e005781516080830151610da99190611cb7565b610e0861197a565b60ff16826060015160ff161415610e4157610e21614140565b610e2e8360400151611d08565b9050610e3981610d83565b9150506109fd565b610e49611e6a565b60ff16826060015160ff161415610e62575080516109fd565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b610eb1826020015182611e6f565b82602001819052505050565b610ecb826040015182611e6f565b82604001819052505050565b600080806120e36001851415610efc5750600292506000915060039050611eed611631565b6002851415610f1a5750600292506000915060039050611eed611631565b6003851415610f385750600292506000915060039050611eed611631565b6004851415610f565750600292506000915060049050612102611631565b6005851415610f745750600292506000915060079050612102611631565b6006851415610f925750600292506000915060049050612102611631565b6007851415610fb05750600292506000915060079050612102611631565b6008851415610fce57506003925060009150600490506121d2611631565b6009851415610fec57506003925060009150600490506121d2611631565b600a85141561100a5750600292506000915060199050611eed611631565b601085141561102757506002925060009150829050611eed611631565b601185141561104457506002925060009150829050611eed611631565b601285141561106157506002925060009150829050611eed611631565b601385141561107e57506002925060009150829050611eed611631565b601485141561109b575060029250600091508290506122c7611631565b60158514156110b857506001925060009150829050612329611631565b60168514156110d557506002925060009150829050611eed611631565b60178514156110f257506002925060009150829050611eed611631565b601885141561110f57506002925060009150829050611eed611631565b601985141561112c57506001925060009150829050612398611631565b601a85141561114a5750600292506000915060049050611eed611631565b601b8514156111685750600292506000915060079050611eed611631565b602085141561118657506001925060009150600790506123db611631565b60218514156111a45750600192506000915060039050612406611631565b60228514156111c25750600292506000915060089050611eed611631565b60238514156111e1575060019250600091506103209050612429611631565b60308514156111fe5750600192506000915082905061260e611631565b603185141561121b5750600092508291506001905061261b611631565b603285141561123857506000925082915060019050612638611631565b60338514156112565750600192506000915060029050612655611631565b6034851415611274575060019250600091506004905061266e611631565b603585141561129257506002925060009150600490506126ae611631565b60368514156112af57506000925082915060029050612720611631565b60378514156112cc5750600092508291506001905061275d611631565b60388514156112e957506001925060009150829050612780611631565b6039851415611306575060009250600191508190506127a2611631565b603a851415611323575060009250829150600290506127b3611631565b603b8514156113405750600092508291506001905061093a611631565b603c85141561135d575060009250829150600190506127e1611631565b603d85141561137a575060019250600091508290506127f7611631565b60408514156113975750600192506000915082905061283a611631565b60418514156113b5575060029250600091506001905061287c611631565b60428514156113d357506003925060009150600190506128ea611631565b60438514156113f15750600292506000915060019050612984611631565b604485141561140f57506003925060009150600190506129c8611631565b605085141561142c57506002925060009150829050612a38611631565b605185141561144a5750600392506000915060289050612adb611631565b60528514156114685750600192506000915060029050612b8f611631565b605385141561148557506001925082915060039050612bd3611631565b60548514156114a35750600292506001915060299050612c5b611631565b60608514156114c05750600092508291506064905061093a611631565b60618514156114de5750600192506000915060649050612d22611631565b60708514156114fc5750600192506000915060649050612d68611631565b607285141561151957506000925082915060289050612de7611631565b607385141561153657506000925082915060059050612e82611631565b6074851415611553575060009250829150600a9050612e8b611631565b607585141561157057506001925060009150819050612e98611631565b607685141561158d57506000925082915060019050612ed2611631565b60778514156115aa57506000925082915060199050612ee6611631565b60788514156115c85750600292506000915060199050612f30611631565b60798514156115e65750600392506000915060199050612fa0611631565b607b851415611603575060009250829150600a9050613028611631565b608085141561162257506004925060009150614e20905061306a611631565b5060009250829150819050612e825b9193509193565b60408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051908201209082015160c0015114156116945761168f81602001516131f5565b61093a565b6020015160c08101519052565b6116a9614140565b604080516000808252602082019092526116e3916116dd565b6116ca614140565b8152602001906001900390816116c25790505b50611a1d565b905090565b600080826001018484815181106116fb57fe5b016020015190925060f81c90509250929050565b600090565b6000808284511015801561172c575060208385510310155b611769576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b6020830161177d858563ffffffff6131ff16565b915091509250929050565b611790614140565b6040805160a08101825283815281516060810183526000808252602082810182905284518281528082018652939490850193908301916117e6565b6117d3614140565b8152602001906001900390816117cb5790505b50905281526040805160008082526020828101909352919092019190611822565b61180f614140565b8152602001906001900390816118075790505b50815260006020820152600160409091015292915050565b600190565b6000611849614140565b82600080611855614140565b600061186189866116e8565b909550935061187089866116e8565b9095509250600160ff851614156118915761188b8986610a02565b90955091505b61189b898661321b565b9095509050600160ff851614156118c657846118b8848385610cff565b965096505050505050610b8d565b846118d18483610c9d565b9650965050505050509250929050565b600290565b60006118f0614140565b82845110158015611905575060408385510310155b611941576040805162461bcd60e51b81526020600482015260086024820152671d1bc81cda1bdc9d60c21b604482015290519081900360640190fd5b60008061194e868661321b565b909450915061195d8685611714565b90945090508361196d83836101af565b9350935050509250929050565b600390565b600c90565b60006060600083905060608660ff166040519080825280602002602001820160405280156119cc57816020015b6119b9614140565b8152602001906001900390816119b15790505b50905060005b8760ff168160ff161015611a10576119ea8784610a02565b8351849060ff85169081106119fb57fe5b602090810291909101015292506001016119d2565b5090969095509350505050565b611a25614140565b611a2f8251613232565b611a80576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b8351811015611ab757838181518110611a9a57fe5b602002602001015160800151820191508080600101915050611a85565b506040805160a0810182526000808252825160608101845281815260208181018390528451838152808201865293949085019391929083019190611b11565b611afe614140565b815260200190600190039081611af65790505b50905281526020810194909452600360408501526060909301525090565b611b37614140565b6040805160a0810182526000808252602080830186905283518281529081018452919283019190611b7e565b611b6b614140565b815260200190600190039081611b635790505b50815260016020820181905260409091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b6000600282604001515110611bcb57fe5b604082015151611c3057611bdd61183a565b8251602080850151604080516001600160f81b031960f896871b8116828601529490951b9093166021850152602280850191909152825180850390910181526042909301909152815191012090506109fd565b611c3861183a565b8260000151611c5e8460400151600081518110611c5157fe5b6020026020010151610d83565b8460200151604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b6000611cc161197a565b8383604051602001808460ff1660ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b611d10614140565b600882511115611d5e576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b60608251604051908082528060200260200182016040528015611d8b578160200160208202803883390190505b508051909150600160005b82811015611dee57611dad868281518110611c5157fe5b848281518110611db957fe5b602002602001018181525050858181518110611dd157fe5b602002602001015160800151820191508080600101915050611d96565b506000835184604051602001808360ff1660ff1660f81b8152600101828051906020019060200280838360005b83811015611e33578181015183820152602001611e1b565b5050505090500192505050604051602081830303815290604052805190602001209050611e6081836101af565b9695505050505050565b606490565b611e77614140565b6040805160028082526060828101909352816020015b611e95614140565b815260200190600190039081611e8d5790505090508281600081518110611eb857fe5b60200260200101819052508381600181518110611ed157fe5b6020026020010181905250611ee581611d08565b949350505050565b611ef5614140565b611f028260e00151613239565b9050611f0c614140565b611f198360e00151613239565b9050611f248261327b565b1580611f365750611f348161327b565b155b15611f4b57611f4483613286565b505061093a565b8151815161014085015160009060ff1660011415611f6c57508181016120e5565b61014086015160ff1660021415611f8657508181026120e5565b61014086015160ff1660031415611fa057508082036120e5565b61014086015160ff16600a1415611fba575080820a6120e5565b61014086015160ff1660101415611fd457508082106120e5565b61014086015160ff1660111415611fee57508082116120e5565b61014086015160ff166012141561200857508082126120e5565b61014086015160ff166013141561202257508082136120e5565b61014086015160ff166016141561203c57508181166120e5565b61014086015160ff166017141561205657508181176120e5565b61014086015160ff166018141561207057508181186120e5565b61014086015160ff16601a141561208a575081811a6120e5565b61014086015160ff16601b14156120a4575081810b6120e5565b61014086015160ff16602214156120e35750604080516020808201859052818301849052825180830384018152606090920190925280519101206120e5565bfe5b6109346120f182611788565b60e08801519063ffffffff6132a416565b61210a614140565b6121178260e00151613239565b9050612121614140565b61212e8360e00151613239565b90506121398261327b565b158061214b57506121498161327b565b155b8061215557508051155b1561216357611f4483613286565b8151815161014085015160009060ff166004141561218457508082046120e5565b61014086015160ff166005141561219e57508082056120e5565b61014086015160ff16600614156121b857508082066120e5565b61014086015160ff16600714156120e357508082076120e5565b6121da614140565b6121e78260e00151613239565b90506121f1614140565b6121fe8360e00151613239565b9050612208614140565b6122158460e00151613239565b90506122208361327b565b158061223257506122308261327b565b155b8061224357506122418161327b565b155b8061224d57508051155b156122635761225b84613286565b50505061093a565b82518251825161014087015160009060ff1660081415612288578183850890506122a0565b61014088015160ff16600914156120e3578183850990505b6122bd6122ac82611788565b60e08a01519063ffffffff6132a416565b5050505050505050565b6122cf614140565b6122dc8260e00151613239565b90506122e6614140565b6122f38360e00151613239565b905061232461231361230483610d83565b61230d85610d83565b146132ce565b60e08501519063ffffffff6132a416565b505050565b612331614140565b61233e8260e00151613239565b90506123498161327b565b6123705761236b61235a6000611788565b60e08401519063ffffffff6132a416565b612394565b8051801561239161238082611788565b60e08601519063ffffffff6132a416565b50505b5050565b6123a0614140565b6123ad8260e00151613239565b90506123b88161327b565b6123cb576123c582613286565b5061093a565b8051801961239161238082611788565b6123e3614140565b6123f08260e00151613239565b905061239461235a61240183610d83565b611788565b61240e614140565b61241b8260e00151613239565b905061239461235a826132f0565b612431614140565b61243e8260e00151613239565b905061244981613355565b158061245b5750806040015151600714155b15612469576123c582613286565b604081015160005b60078110156124ab5761249682828151811061248957fe5b602002602001015161327b565b6124a35761225b84613286565b600101612471565b506124b461424a565b60005b6019811015612520578260048204815181106124cf57fe5b6020026020010151600001516001600160401b03168282601981106124f057fe5b6020020152604083600483048151811061250657fe5b6020908102919091010151805190911c90526001016124b7565b5061252a81613362565b604080516007808252610100820190925291925060609190816020015b61254f614140565b81526020019060019003908161254757905050905060005b60078110156125995761257a6000611788565b82828151811061258657fe5b6020908102919091010152600101612567565b5060005b60198110156125e957600481066040028382601981106125b957fe5b6020020151901b8260048304815181106125cf57fe5b60209081029190910101518051909117905260010161259d565b506126076125f682611a1d565b60e08701519063ffffffff6132a416565b5050505050565b6123948160e00151613239565b60208101516080015160e082015161093a9163ffffffff6132a416565b60208101516060015160e082015161093a9163ffffffff6132a416565b6126628160e00151613239565b60209091015160600152565b612676614140565b6126838260e00151613239565b905061268e81613f53565b61269b576123c582613286565b6126a481610d83565b6020830151525050565b6126b6614140565b6126c38260e00151613239565b90506126cd614140565b6126da8360e00151613239565b90506126e582613f53565b15806126f757506126f58161327b565b155b1561270557611f4483613286565b8051156123245761271582610d83565b602084015152505050565b60e08101515160009015801561274f575061273c6106d16116a1565b61274d836020015160200151610d83565b145b905061239461235a826132ce565b80515161093a9061276f906001613f60565b60e08301519063ffffffff6132a416565b61093a6127908260e00151613239565b6101008301519063ffffffff6132a416565b61093a61276f826101000151613239565b6101008101515160009015801561274f57506127d06106d16116a1565b61274d836020015160400151610d83565b61093a61276f826020015160c001516001613f60565b6127ff614140565b61280c8260e00151613239565b905061281781613f53565b612824576123c582613286565b61282d81610d83565b602083015160c001525050565b612842614140565b61284f8260e00151613239565b60e0830151909150612867908263ffffffff6132a416565b60e0820151612394908263ffffffff6132a416565b612884614140565b6128918260e00151613239565b905061289b614140565b6128a88360e00151613239565b60e08401519091506128c0908263ffffffff6132a416565b60e08301516128d5908363ffffffff6132a416565b60e0830151612324908263ffffffff6132a416565b6128f2614140565b6128ff8260e00151613239565b9050612909614140565b6129168360e00151613239565b9050612920614140565b61292d8460e00151613239565b60e0850151909150612945908263ffffffff6132a416565b60e084015161295a908363ffffffff6132a416565b60e084015161296f908463ffffffff6132a416565b60e0840151612391908263ffffffff6132a416565b61298c614140565b6129998260e00151613239565b90506129a3614140565b6129b08360e00151613239565b60e08401519091506128d5908363ffffffff6132a416565b6129d0614140565b6129dd8260e00151613239565b90506129e7614140565b6129f48360e00151613239565b90506129fe614140565b612a0b8460e00151613239565b60e0850151909150612a23908463ffffffff6132a416565b60e084015161296f908363ffffffff6132a416565b612a40614140565b612a4d8260e00151613239565b9050612a57614140565b612a648360e00151613239565b9050612a6f8261327b565b1580612a815750612a7f81613355565b155b80612a9b5750612a9081614011565b60ff16826000015110155b15612aa957611f4483613286565b6123248160400151836000015181518110612ac057fe5b60200260200101518460e001516132a490919063ffffffff16565b612ae3614140565b612af08260e00151613239565b9050612afa614140565b612b078360e00151613239565b9050612b11614140565b612b1e8460e00151613239565b9050612b298361327b565b1580612b3b5750612b3982613355565b155b80612b555750612b4a82614011565b60ff16836000015110155b15612b635761225b84613286565b604082015183518151839183918110612b7857fe5b60200260200101819052506126076125f682611a1d565b612b97614140565b612ba48260e00151613239565b9050612baf81613355565b612bbc576123c582613286565b61239461235a612bcb83614011565b60ff16611788565b612bdb614140565b612be88260e00151613239565b9050612bf2614140565b612c00836101000151613239565b9050612c0b8261327b565b1580612c1d5750612c1b81613355565b155b80612c375750612c2c81614011565b60ff16826000015110155b15612c4557611f4483613286565b610100830151612aa9908263ffffffff6132a416565b612c63614140565b612c708260e00151613239565b9050612c7a614140565b612c878360e00151613239565b9050612c91614140565b612c9f846101000151613239565b9050612caa81613355565b1580612cbc5750612cba8361327b565b155b80612cd65750612ccb81614011565b60ff16836000015110155b15612ce45761225b84613286565b604081015183518151849183918110612cf957fe5b6020026020010181905250612607612d1082611a1d565b6101008701519063ffffffff6132a416565b8060a00151612d376106d18360e00151613239565b604080516020808201949094528082019290925280518083038201815260609092019052805191012060a090910152565b612d70614140565b612d7d8260e00151613239565b905061271081608001511180612d995750612d9781614038565b155b15612da7576123c582613286565b8160800151612db582610d83565b604080516020808201949094528082019290925280518083038201815260609092019052805191012060808301525050565b612df26106d16116a1565b612dff8260400151610d83565b1415612e52576040805162461bcd60e51b815260206004820152601d60248201527f496e626f7820696e737472756374696f6e2077617320626c6f636b6564000000604482015290519081900360640190fd5b604081015160e0820151612e6b9163ffffffff6132a416565b612e736116a1565b60408201526001606090910152565b61093a81613286565b61093a8160200151614136565b612ea0614140565b612ead8260e00151613239565b9050612eb88161327b565b612ec5576123c582613286565b51602082015160a0015250565b61093a61276f826020015160a00151611788565b60408051600160f81b602080830191909152600060218301819052602280840191909152835180840390910181526042909201909252805191012061093a9061276f906001613f60565b612f38614140565b612f458260e00151613239565b9050612f4f614140565b612f5c8360e00151613239565b9050612f678261327b565b1580612f795750612f7781613f53565b155b15612f8757611f4483613286565b6123246123138360000151612f9b84610d83565b610c9d565b612fa8614140565b612fb58260e00151613239565b9050612fbf614140565b612fcc8360e00151613239565b9050612fd6614140565b612fe38460e00151613239565b9050612fee8361327b565b15806130005750612ffe81613f53565b155b1561300e5761225b84613286565b612391612380846000015161302284610d83565b85610cff565b6040805160008082526020820190925260609161305b565b613048614140565b8152602001906001900390816130405790505b50905061239461235a82611a1d565b613072614140565b61307f8260e00151613239565b9050613089614140565b6130968360e00151613239565b90506130a0614140565b6130ad8460e00151613239565b90506130b7614140565b6130c48560e00151613239565b90506130cf8461327b565b15806130e157506130df8361327b565b155b806130f257506130f08261327b565b155b8061310357506131018161327b565b155b15613111576106b085613286565b8351835183511580159061312757508351600114155b156131555761314a6131396000611788565b60e08901519063ffffffff6132a416565b50505050505061093a565b83518351604080516000808252602080830180855285905260ff601b9096019586168385015260608301889052608083018790529251909260019260a080820193601f1981019281900390910190855afa1580156131b7573d6000803e3d6000fd5b5050506020604051035190506131e96131d8826001600160a01b0316611788565b60e08c01519063ffffffff6132a416565b50505050505050505050565b600160e090910152565b6000816020018351101561321257600080fd5b50016020015190565b6000806020830161177d858563ffffffff6131ff16565b6008101590565b613241614140565b613249614140565b826020015160018460000151038151811061326057fe5b60209081029190910101518351600019018452915050919050565b6060015160ff161590565b61328f81611638565b60e08101516000908190526101009091015152565b8082602001518360000151815181106132b957fe5b60209081029190910101525080516001019052565b6132d6614140565b81156132e657610da96001611788565b610da96000611788565b6132f8614140565b816060015160ff166002141561333f5760405162461bcd60e51b81526004018080602001828103825260218152602001806142e06021913960400191505060405180910390fd5b61334f826060015160ff16611788565b92915050565b6060015160ff1660031490565b61336a61424a565b613372614269565b61337a614269565b61338261424a565b61338a614287565b60405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060008090505b6018811015613f48576080878101516060808a01516040808c01516020808e01518e511890911890921890931889526101208b01516101008c015160e08d015160c08e015160a08f0151181818189089018190526101c08b01516101a08c01516101808d01516101608e01516101408f0151181818189289019283526102608b01516102408c01516102208d01516102008e01516101e08f015118181818918901919091526103008a01516102e08b01516102c08c01516102a08d01516102808e0151181818189288018390526001600160401b0360028202166001603f1b91829004179092188652510485600260200201516002026001600160401b03161785600060200201511884600160200201526001603f1b8560036020020151816135d657fe5b0485600360200201516002026001600160401b03161785600160200201511884600260200201526001603f1b85600460200201518161361157fe5b0485600460200201516002026001600160401b0316178560026005811061363457fe5b602002015118606085015284516001603f1b9086516060808901519390920460029091026001600160401b031617909118608086810191825286518a5118808b5287516020808d018051909218825289516040808f0180519092189091528a518e8801805190911890528a51948e0180519095189094528901805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291880180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292870180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a01805190911890529084525163100000009060208901516001600160401b03641000000000909102169190041761010084015260408701516001603d1b9060408901516001600160401b03600890910216919004176101608401526060870151628000009060608901516001600160401b036502000000000090910216919004176102608401526080870151654000000000009060808901516001600160401b036204000090910216919004176102c084015260a08701516001603f1b900487600560200201516002026001600160401b0316178360026019811061389e57fe5b602002015260c0870151621000008104651000000000009091026001600160401b039081169190911760a085015260e0880151664000000000000081046104009091028216176101a08501526101008801516208000081046520000000000090910282161761020085015261012088015160048082029092166001603e1b909104176103008501526101408801516101408901516001600160401b036001603e1b90910216919004176080840152610160870151670400000000000000906101608901516001600160401b036040909102169190041760e084015261018087015162200000906101808901516001600160401b036508000000000090910216919004176101408401526101a08701516602000000000000906101a08901516001600160401b0361800090910216919004176102408401526101c08701516008906101c08901516001600160401b036001603d1b90910216919004176102a08401526101e0870151641000000000906101e08901516001600160401b03631000000090910216919004176020840152610200808801516102008901516001600160401b0366800000000000009091021691900417610120840152610220870151648000000000906102208901516001600160401b036302000000909102169190041761018084015261024087015165080000000000906102408901516001600160401b036220000090910216919004176101e0840152610260870151610100906102608901516001600160401b03600160381b90910216919004176102e0840152610280870151642000000000906102808901516001600160401b036308000000909102169190041760608401526102a087015165100000000000906102a08901516001600160401b0362100000909102169190041760c08401526102c08701516302000000906102c08901516001600160401b0364800000000090910216919004176101c08401526102e0870151600160381b906102e08901516001600160401b036101009091021691900417610220840152610300870151660400000000000090048760186020020151614000026001600160401b031617836014602002015282600a602002015183600560200201511916836000602002015118876000602002015282600b602002015183600660200201511916836001602002015118876001602002015282600c602002015183600760200201511916836002602002015118876002602002015282600d602002015183600860200201511916836003602002015118876003602002015282600e602002015183600960200201511916836004602002015118876004602002015282600f602002015183600a602002015119168360056020020151188760056020020152826010602002015183600b602002015119168360066020020151188760066020020152826011602002015183600c602002015119168360076020020151188760076020020152826012602002015183600d602002015119168360086020020151188760086020020152826013602002015183600e602002015119168360096020020151188760096020020152826014602002015183600f6020020151191683600a60200201511887600a602002015282601560200201518360106020020151191683600b60200201511887600b602002015282601660200201518360116020020151191683600c60200201511887600c602002015282601760200201518360126020020151191683600d60200201511887600d602002015282601860200201518360136020020151191683600e60200201511887600e602002015282600060200201518360146020020151191683600f60200201511887600ff3657fe5b602002015187511887526001016134b1565b509495945050505050565b6060015160ff1660011490565b613f68614140565b6040805160a0810182528481528151606081018352600080825260208281018290528451828152808201865293949085019390830191613fbe565b613fab614140565b815260200190600190039081613fa35790505b50905281526040805160008082526020828101909352919092019190613ffa565b613fe7614140565b815260200190600190039081613fdf5790505b508152606460208201526040019290925250919050565b606081015160009060ff166003141561403057506040810151516109fd565b5060016109fd565b606081015160009060ff1661404f575060016109fd565b606082015160ff1660011415614067575060006109fd565b606082015160ff16600214156140bb576040805162461bcd60e51b81526020600482015260146024820152736d75737420686176652066756c6c2076616c756560601b604482015290519081900360640190fd5b606082015160ff166003141561411e5760408201515160005b81811015614113576140fc846040015182815181106140ef57fe5b6020026020010151614038565b61410b576000925050506109fd565b6001016140d4565b5060019150506109fd565b606082015160ff1660641415610e62575060006109fd565b600260e090910152565b6040518060a001604052806000815260200161415a6142a6565b815260606020820181905260006040830181905291015290565b6040518061016001604052806141886141ec565b81526020016141956141ec565b81526020016141a2614140565b81526000602082018190526040820181905260608201819052608082015260a0016141cb6142c5565b81526020016141d86142c5565b815260006020820181905260409091015290565b6040805161010081019091526000815260208101614208614140565b8152602001614215614140565b8152602001614222614140565b815260200161422f614140565b81526000602082018190526040820181905260609091015290565b6040518061032001604052806019906020820280388339509192915050565b6040518060a001604052806005906020820280388339509192915050565b6040518061030001604052806018906020820280388339509192915050565b6040805160608082018352600080835260208301529181019190915290565b60405180604001604052806000815260200160608152509056fe56616c7565206d757374206861766520612076616c6964207479706520636f6465a265627a7a72315820f252a29a6b16fb5ead9a6846490982647159ebe9c014edc4203e16e4e87bfddb64736f6c63430005110032"

// DeployOneStepProofTester deploys a new Ethereum contract, binding an instance of OneStepProofTester to it.
func DeployOneStepProofTester(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProofTester, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofTesterABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofTesterBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProofTester{OneStepProofTesterCaller: OneStepProofTesterCaller{contract: contract}, OneStepProofTesterTransactor: OneStepProofTesterTransactor{contract: contract}, OneStepProofTesterFilterer: OneStepProofTesterFilterer{contract: contract}}, nil
}

// OneStepProofTester is an auto generated Go binding around an Ethereum contract.
type OneStepProofTester struct {
	OneStepProofTesterCaller     // Read-only binding to the contract
	OneStepProofTesterTransactor // Write-only binding to the contract
	OneStepProofTesterFilterer   // Log filterer for contract events
}

// OneStepProofTesterCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofTesterCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTesterTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTesterTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTesterFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofTesterFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTesterSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofTesterSession struct {
	Contract     *OneStepProofTester // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// OneStepProofTesterCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofTesterCallerSession struct {
	Contract *OneStepProofTesterCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// OneStepProofTesterTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTesterTransactorSession struct {
	Contract     *OneStepProofTesterTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// OneStepProofTesterRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofTesterRaw struct {
	Contract *OneStepProofTester // Generic contract binding to access the raw methods on
}

// OneStepProofTesterCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofTesterCallerRaw struct {
	Contract *OneStepProofTesterCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTesterTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTesterTransactorRaw struct {
	Contract *OneStepProofTesterTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProofTester creates a new instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTester(address common.Address, backend bind.ContractBackend) (*OneStepProofTester, error) {
	contract, err := bindOneStepProofTester(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTester{OneStepProofTesterCaller: OneStepProofTesterCaller{contract: contract}, OneStepProofTesterTransactor: OneStepProofTesterTransactor{contract: contract}, OneStepProofTesterFilterer: OneStepProofTesterFilterer{contract: contract}}, nil
}

// NewOneStepProofTesterCaller creates a new read-only instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTesterCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofTesterCaller, error) {
	contract, err := bindOneStepProofTester(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTesterCaller{contract: contract}, nil
}

// NewOneStepProofTesterTransactor creates a new write-only instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTesterTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTesterTransactor, error) {
	contract, err := bindOneStepProofTester(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTesterTransactor{contract: contract}, nil
}

// NewOneStepProofTesterFilterer creates a new log filterer instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTesterFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofTesterFilterer, error) {
	contract, err := bindOneStepProofTester(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTesterFilterer{contract: contract}, nil
}

// bindOneStepProofTester binds a generic wrapper to an already deployed contract.
func bindOneStepProofTester(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofTesterABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofTester *OneStepProofTesterRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProofTester.Contract.OneStepProofTesterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofTester *OneStepProofTesterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.OneStepProofTesterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofTester *OneStepProofTesterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.OneStepProofTesterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofTester *OneStepProofTesterCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProofTester.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofTester *OneStepProofTesterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofTester *OneStepProofTesterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.contract.Transact(opts, method, params...)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x799b4835.
//
// Solidity: function executeStep(bytes32 beforeInbox, uint256 beforeInboxValueSize, bytes32 firstMessage, bytes32 firstLog, bytes proof) pure returns(bytes32 startHash, bytes32 endHash, bytes32 logAcc, bytes32 messageAcc, uint64 gas, bool didInboxInsn)
func (_OneStepProofTester *OneStepProofTesterCaller) ExecuteStep(opts *bind.CallOpts, beforeInbox [32]byte, beforeInboxValueSize *big.Int, firstMessage [32]byte, firstLog [32]byte, proof []byte) (struct {
	StartHash    [32]byte
	EndHash      [32]byte
	LogAcc       [32]byte
	MessageAcc   [32]byte
	Gas          uint64
	DidInboxInsn bool
}, error) {
	ret := new(struct {
		StartHash    [32]byte
		EndHash      [32]byte
		LogAcc       [32]byte
		MessageAcc   [32]byte
		Gas          uint64
		DidInboxInsn bool
	})
	out := ret
	err := _OneStepProofTester.contract.Call(opts, out, "executeStep", beforeInbox, beforeInboxValueSize, firstMessage, firstLog, proof)
	return *ret, err
}

// ExecuteStep is a free data retrieval call binding the contract method 0x799b4835.
//
// Solidity: function executeStep(bytes32 beforeInbox, uint256 beforeInboxValueSize, bytes32 firstMessage, bytes32 firstLog, bytes proof) pure returns(bytes32 startHash, bytes32 endHash, bytes32 logAcc, bytes32 messageAcc, uint64 gas, bool didInboxInsn)
func (_OneStepProofTester *OneStepProofTesterSession) ExecuteStep(beforeInbox [32]byte, beforeInboxValueSize *big.Int, firstMessage [32]byte, firstLog [32]byte, proof []byte) (struct {
	StartHash    [32]byte
	EndHash      [32]byte
	LogAcc       [32]byte
	MessageAcc   [32]byte
	Gas          uint64
	DidInboxInsn bool
}, error) {
	return _OneStepProofTester.Contract.ExecuteStep(&_OneStepProofTester.CallOpts, beforeInbox, beforeInboxValueSize, firstMessage, firstLog, proof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x799b4835.
//
// Solidity: function executeStep(bytes32 beforeInbox, uint256 beforeInboxValueSize, bytes32 firstMessage, bytes32 firstLog, bytes proof) pure returns(bytes32 startHash, bytes32 endHash, bytes32 logAcc, bytes32 messageAcc, uint64 gas, bool didInboxInsn)
func (_OneStepProofTester *OneStepProofTesterCallerSession) ExecuteStep(beforeInbox [32]byte, beforeInboxValueSize *big.Int, firstMessage [32]byte, firstLog [32]byte, proof []byte) (struct {
	StartHash    [32]byte
	EndHash      [32]byte
	LogAcc       [32]byte
	MessageAcc   [32]byte
	Gas          uint64
	DidInboxInsn bool
}, error) {
	return _OneStepProofTester.Contract.ExecuteStep(&_OneStepProofTester.CallOpts, beforeInbox, beforeInboxValueSize, firstMessage, firstLog, proof)
}
