// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgetestcontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProofABI is the input ABI used to generate the binding from.
const OneStepProofABI = "[]"

// OneStepProofBin is the compiled bytecode used for deploying new contracts.
var OneStepProofBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820cf78b8a4b585c89d4fb6369855dfc43a748ff681b0c3cbd70ea2325ef933d21464736f6c63430005110032"

// DeployOneStepProof deploys a new Ethereum contract, binding an instance of OneStepProof to it.
func DeployOneStepProof(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// OneStepProof is an auto generated Go binding around an Ethereum contract.
type OneStepProof struct {
	OneStepProofCaller     // Read-only binding to the contract
	OneStepProofTransactor // Write-only binding to the contract
	OneStepProofFilterer   // Log filterer for contract events
}

// OneStepProofCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofSession struct {
	Contract     *OneStepProof     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProofCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofCallerSession struct {
	Contract *OneStepProofCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// OneStepProofTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTransactorSession struct {
	Contract     *OneStepProofTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// OneStepProofRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofRaw struct {
	Contract *OneStepProof // Generic contract binding to access the raw methods on
}

// OneStepProofCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofCallerRaw struct {
	Contract *OneStepProofCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTransactorRaw struct {
	Contract *OneStepProofTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof creates a new instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProof(address common.Address, backend bind.ContractBackend) (*OneStepProof, error) {
	contract, err := bindOneStepProof(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// NewOneStepProofCaller creates a new read-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofCaller, error) {
	contract, err := bindOneStepProof(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofCaller{contract: contract}, nil
}

// NewOneStepProofTransactor creates a new write-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTransactor, error) {
	contract, err := bindOneStepProof(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTransactor{contract: contract}, nil
}

// NewOneStepProofFilterer creates a new log filterer instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofFilterer, error) {
	contract, err := bindOneStepProof(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofFilterer{contract: contract}, nil
}

// bindOneStepProof binds a generic wrapper to an already deployed contract.
func bindOneStepProof(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.OneStepProofCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transact(opts, method, params...)
}

// OneStepProofTesterABI is the input ABI used to generate the binding from.
const OneStepProofTesterABI = "[{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beforeInbox\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"beforeInboxValueSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"firstMessage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"firstLog\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"startHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"endHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"logAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"messageAcc\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"didInboxInsn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// OneStepProofTesterFuncSigs maps the 4-byte function signature to its string representation.
var OneStepProofTesterFuncSigs = map[string]string{
	"799b4835": "executeStep(bytes32,uint256,bytes32,bytes32,bytes)",
}

// OneStepProofTesterBin is the compiled bytecode used for deploying new contracts.
var OneStepProofTesterBin = "0x608060405234801561001057600080fd5b506144eb806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063799b483514610030575b600080fd5b6100ee600480360360a081101561004657600080fd5b81359160208101359160408201359160608101359181019060a08101608082013564010000000081111561007957600080fd5b82018360208201111561008b57600080fd5b803590602001918460018302840111640100000000831117156100ad57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061012c945050505050565b6040805196875260208701959095528585019390935260608501919091526001600160401b03166080840152151560a0830152519081900360c00190f35b60008060008060008061013d6142fb565b6101478c8c6101b5565b905061015161432f565b600061015f838d8d8d610266565b9150915061016d8282610641565b815161017890610931565b6101858360200151610931565b8360a0015184608001518560c0015186606001519850985098509850985098505050509550955095509550955095565b6101bd6142fb565b6040805160a0810182528481528151606081018352600080825260208281018290528451828152808201865293949085019390830191610213565b6102006142fb565b8152602001906001900390816101f85790505b5090528152604080516000808252602082810190935291909201919061024f565b61023c6142fb565b8152602001906001900390816102345790505b508152600260208201526040019290925250919050565b61026e61432f565b6000808360008151811061027e57fe5b602001015160f81c60f81b60f81c905060008460018151811061029d57fe5b602001015160f81c60f81b60f81c905060608260040160ff166040519080825280602002602001820160405280156102ef57816020015b6102dc6142fb565b8152602001906001900390816102d45790505b50905060608260040160ff1660405190808252806020026020018201604052801561033457816020015b6103216142fb565b8152602001906001900390816103195790505b509050600260005b8560ff168110156103745761035189836109f6565b855186908490811061035f57fe5b6020908102919091010152915060010161033c565b5060005b8460ff168110156103b05761038d89836109f6565b845185908490811061039b57fe5b60209081029190910101529150600101610378565b506103b96143a0565b6103c38983610b88565b809250819350505060008983815181106103d957fe5b602001015160f81c60f81b60f81c90508983600101815181106103f857fe5b602001015160f81c60f81b60f81c975060405180610140016040528083815260200161042384610c28565b81526020018e81526020016000151581526020018d81526020018c815260200160006001600160401b0316815260200160405180604001604052808a60ff16815260200188815250815260200160405180604001604052808960ff1681526020018781525081526020018260ff16600114151581525098508060ff16600014806104b057508060ff166001145b610501576040805162461bcd60e51b815260206004820152601c60248201527f50726f6f662068616420626164206f7065726174696f6e207479706500000000604482015290519081900360640190fd5b6105096142fb565b60ff82166105265789515161051f908a90610c91565b90506105a0565b6000865111610571576040805162461bcd60e51b81526020600482015260126024820152716e6f20696d6d6564696174652076616c756560701b604482015290519081900360640190fd5b61059d898b60000151600001518860018c0360ff168151811061059057fe5b6020026020010151610cf3565b90505b6105a981610d77565b8a515260005b82890360ff168110156105ee576105e68782815181106105cb57fe5b60200260200101518c60000151610e9790919063ffffffff16565b6001016105af565b5060005b8760ff1681101561062f5761062786828151811061060c57fe5b60200260200101518c60000151610eb190919063ffffffff16565b6001016105f2565b50505050505050505094509492505050565b60008060006143fe6106558560ff16610ecb565b6001600160401b03821660c08b0181905260208b015160a0908101805183900390528b510151949850929650909450925011156106ac57602086015160001960a0909101526106a38661162c565b5050505061092d565b60e086015151841115610727576106c96106c4611698565b610d77565b6106da876020015160200151610d77565b1461071e576040805162461bcd60e51b815260206004820152600f60248201526e737461636b206e6f7420656d70747960881b604482015290519081900360640190fd5b6106a38661162c565b61010086015151831115610798576107406106c4611698565b610751876020015160400151610d77565b1461071e576040805162461bcd60e51b8152602060048201526012602482015271617578737461636b206e6f7420656d70747960701b604482015290519081900360640190fd5b60008411806107aa5750856101200151155b80156107ba575060e08601515184145b806107e1575085610120015180156107d0575083155b80156107e1575060e0860151516001145b610829576040805162461bcd60e51b8152602060048201526014602482015273746f6f206d616e7920737461636b206974656d7360601b604482015290519081900360640190fd5b610100860151518314610883576040805162461bcd60e51b815260206004820152601760248201527f746f6f206d616e7920617578737461636b206974656d73000000000000000000604482015290519081900360640190fd5b610890868263ffffffff16565b60005b60e0870151518110156108da576108d28760e001516020015182815181106108b757fe5b60200260200101518860200151610e9790919063ffffffff16565b600101610893565b5060005b610100870151518110156109275761091f87610100015160200151828151811061090457fe5b60200260200101518860200151610eb190919063ffffffff16565b6001016108de565b50505050505b5050565b600060028260e001511415610948575060006109f1565b60018260e00151141561095d575060016109f1565b8151602083015161096d90610d77565b61097a8460400151610d77565b6109878560600151610d77565b6109948660800151610d77565b8660a001518760c00151604051602001808881526020018781526020018681526020018581526020018481526020018381526020018281526020019750505050505050506040516020818303038152906040528051906020012090505b919050565b6000610a006142fb565b83518310610a46576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b600080610a5386866116df565b91509150610a5f611706565b60ff168160ff161415610a93576000610a78878461170b565b909350905082610a878261177f565b94509450505050610b81565b610a9b611831565b60ff168160ff161415610abd57610ab28683611836565b935093505050610b81565b610ac56118d8565b60ff168160ff161415610adc57610ab286836118dd565b610ae4611971565b60ff168160ff1610158015610b055750610afc611976565b60ff168160ff16105b15610b41576000610b14611971565b820390506060610b2582898661197b565b909450905083610b3482611a14565b9550955050505050610b81565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b6000610b926143a0565b610b9a6143a0565b600060e0820181905280610bae878761170b565b9096509150610bbd87876118dd565b60208501529550610bce87876118dd565b60408501529550610bdf87876109f6565b60608501529550610bf087876109f6565b60808501529550610c01878761170b565b60a08501529550610c12878761170b565b92845260c0840192909252509590945092505050565b610c306143a0565b60405180610100016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e001518152509050919050565b610c996142fb565b6040805160608101825260ff851681526020808201859052825160008082529181018452610cec93830191610ce4565b610cd16142fb565b815260200190600190039081610cc95790505b509052611b26565b9392505050565b610cfb6142fb565b604080516001808252818301909252606091816020015b610d1a6142fb565b815260200190600190039081610d125790505090508281600081518110610d3d57fe5b6020026020010181905250610d6e60405180606001604052808760ff16815260200186815260200183815250611b26565b95945050505050565b6000610d81611706565b60ff16826060015160ff161415610da4578151610d9d90611b8d565b90506109f1565b610dac611831565b60ff16826060015160ff161415610dca57610d9d8260200151611bb1565b610dd26118d8565b60ff16826060015160ff161415610df45781516080830151610d9d9190611cae565b610dfc611971565b60ff16826060015160ff161415610e3557610e156142fb565b610e228360400151611cff565b9050610e2d81610d77565b9150506109f1565b610e3d611e61565b60ff16826060015160ff161415610e56575080516109f1565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b610ea5826020015182611e66565b82602001819052505050565b610ebf826040015182611e66565b82604001819052505050565b600080806143fe6001851415610ef05750600292506000915060039050611ee4611625565b6002851415610f0e5750600292506000915060039050611f35611625565b6003851415610f2c5750600292506000915060039050611f66611625565b6004851415610f4a5750600292506000915060049050611f97611625565b6005851415610f685750600292506000915060079050611fd3611625565b6006851415610f86575060029250600091506004905061200f611625565b6007851415610fa4575060029250600091506007905061204b611625565b6008851415610fc25750600392506000915060049050612087611625565b6009851415610fe057506003925060009150600490506120ed611625565b600a851415610ffe5750600292506000915060199050612131611625565b601085141561101b57506002925060009150829050612162611625565b601185141561103857506002925060009150829050612193611625565b6012851415611055575060029250600091508290506121c4611625565b6013851415611072575060029250600091508290506121f5611625565b601485141561108f57506002925060009150829050612226611625565b60158514156110ac57506001925060009150829050612288611625565b60168514156110c9575060029250600091508290506122f6611625565b60178514156110e657506002925060009150829050612327611625565b601885141561110357506002925060009150829050612358611625565b601985141561112057506001925060009150829050612389611625565b601a85141561113e57506002925060009150600490506123cc611625565b601b85141561115c57506002925060009150600790506123fd611625565b602085141561117a575060019250600091506007905061242e611625565b60218514156111985750600192506000915060039050612459611625565b60228514156111b6575060029250600091506008905061247c611625565b60238514156111d55750600192506000915061032090506124d2611625565b60308514156111f25750600192506000915082905061269f611625565b603185141561120f575060009250829150600190506126ac611625565b603285141561122c575060009250829150600190506126c9611625565b603385141561124a57506001925060009150600290506126e6611625565b603485141561126857506001925060009150600490506126ff611625565b6035851415611286575060029250600091506004905061273f611625565b60368514156112a3575060009250829150600290506127b8611625565b60378514156112c0575060009250829150600190506127f5611625565b60388514156112dd57506001925060009150829050612818611625565b60398514156112fa5750600092506001915081905061283a611625565b603a8514156113175750600092508291506002905061284b611625565b603b85141561133457506000925082915060019050611695611625565b603c85141561135157506000925082915060019050612879611625565b603d85141561136e5750600192506000915082905061288f611625565b604085141561138b575060019250600091508290506128d2611625565b60418514156113a95750600292506000915060019050612914611625565b60428514156113c75750600392506000915060019050612982611625565b60438514156113e55750600292506000915060019050612a1c611625565b60448514156114035750600392506000915060019050612a60611625565b605085141561142057506002925060009150829050612ad0611625565b605185141561143e5750600392506000915060289050612b73611625565b605285141561145c5750600192506000915060029050612c27611625565b605385141561147957506001925082915060039050612c6b611625565b60548514156114975750600292506001915060299050612cf3611625565b60608514156114b457506000925082915060649050611695611625565b60618514156114d25750600192506000915060649050612dba611625565b60708514156114f05750600192506000915060649050612e00611625565b607285141561150d57506000925082915060289050612e7f611625565b607385141561152a57506000925082915060059050612f1a611625565b6074851415611547575060009250829150600a9050612f23611625565b607585141561156457506001925060009150819050612f30611625565b607685141561158157506000925082915060019050612f6a611625565b607785141561159e57506000925082915060199050612f7e611625565b60788514156115bc5750600292506000915060199050612fc8611625565b60798514156115da5750600392506000915060199050613038611625565b607b8514156115f7575060009250829150600a90506130c0611625565b608085141561161657506004925060009150614e209050613102611625565b5060009250829150819050612f1a5b9193509193565b60408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051908201209082015160c00151141561168857611683816020015161328d565b611695565b602081015160c081015190525b50565b6116a06142fb565b604080516000808252602082019092526116da916116d4565b6116c16142fb565b8152602001906001900390816116b95790505b50611a14565b905090565b600080826001018484815181106116f257fe5b016020015190925060f81c90509250929050565b600090565b60008082845110158015611723575060208385510310155b611760576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b60208301611774858563ffffffff61329716565b915091509250929050565b6117876142fb565b6040805160a08101825283815281516060810183526000808252602082810182905284518281528082018652939490850193908301916117dd565b6117ca6142fb565b8152602001906001900390816117c25790505b50905281526040805160008082526020828101909352919092019190611819565b6118066142fb565b8152602001906001900390816117fe5790505b50815260006020820152600160409091015292915050565b600190565b60006118406142fb565b8260008061184c6142fb565b600061185889866116df565b909550935061186789866116df565b9095509250600160ff851614156118885761188289866109f6565b90955091505b61189289866132b3565b9095509050600160ff851614156118bd57846118af848385610cf3565b965096505050505050610b81565b846118c88483610c91565b9650965050505050509250929050565b600290565b60006118e76142fb565b828451101580156118fc575060408385510310155b611938576040805162461bcd60e51b81526020600482015260086024820152671d1bc81cda1bdc9d60c21b604482015290519081900360640190fd5b60008061194586866132b3565b9094509150611954868561170b565b90945090508361196483836101b5565b9350935050509250929050565b600390565b600c90565b60006060600083905060608660ff166040519080825280602002602001820160405280156119c357816020015b6119b06142fb565b8152602001906001900390816119a85790505b50905060005b8760ff168160ff161015611a07576119e187846109f6565b8351849060ff85169081106119f257fe5b602090810291909101015292506001016119c9565b5090969095509350505050565b611a1c6142fb565b611a2682516132ca565b611a77576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b8351811015611aae57838181518110611a9157fe5b602002602001015160800151820191508080600101915050611a7c565b506040805160a0810182526000808252825160608101845281815260208181018390528451838152808201865293949085019391929083019190611b08565b611af56142fb565b815260200190600190039081611aed5790505b50905281526020810194909452600360408501526060909301525090565b611b2e6142fb565b6040805160a0810182526000808252602080830186905283518281529081018452919283019190611b75565b611b626142fb565b815260200190600190039081611b5a5790505b50815260016020820181905260409091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b6000600282604001515110611bc257fe5b604082015151611c2757611bd4611831565b8251602080850151604080516001600160f81b031960f896871b8116828601529490951b9093166021850152602280850191909152825180850390910181526042909301909152815191012090506109f1565b611c2f611831565b8260000151611c558460400151600081518110611c4857fe5b6020026020010151610d77565b8460200151604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b6000611cb8611971565b8383604051602001808460ff1660ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b611d076142fb565b600882511115611d55576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b60608251604051908082528060200260200182016040528015611d82578160200160208202803883390190505b508051909150600160005b82811015611de557611da4868281518110611c4857fe5b848281518110611db057fe5b602002602001018181525050858181518110611dc857fe5b602002602001015160800151820191508080600101915050611d8d565b506000835184604051602001808360ff1660ff1660f81b8152600101828051906020019060200280838360005b83811015611e2a578181015183820152602001611e12565b5050505090500192505050604051602081830303815290604052805190602001209050611e5781836101b5565b9695505050505050565b606490565b611e6e6142fb565b6040805160028082526060828101909352816020015b611e8c6142fb565b815260200190600190039081611e845790505090508281600081518110611eaf57fe5b60200260200101819052508381600181518110611ec857fe5b6020026020010181905250611edc81611cff565b949350505050565b6000806000611ef2846132d1565b92509250925082611f0e57611f068461334b565b505050611695565b818101611f2e611f1d8261177f565b60e08701519063ffffffff61336916565b5050505050565b6000806000611f43846132d1565b92509250925082611f5757611f068461334b565b818102611f2e611f1d8261177f565b6000806000611f74846132d1565b92509250925082611f8857611f068461334b565b808203611f2e611f1d8261177f565b6000806000611fa5846132d1565b925092509250821580611fb6575080155b15611fc457611f068461334b565b808204611f2e611f1d8261177f565b6000806000611fe1846132d1565b925092509250821580611ff2575080155b1561200057611f068461334b565b808205611f2e611f1d8261177f565b600080600061201d846132d1565b92509250925082158061202e575080155b1561203c57611f068461334b565b808206611f2e611f1d8261177f565b6000806000612059846132d1565b92509250925082158061206a575080155b1561207857611f068461334b565b808207611f2e611f1d8261177f565b60008060008061209685613393565b93509350935093508315806120a9575080155b156120c0576120b78561334b565b50505050611695565b60008183850890506120e56120d48261177f565b60e08801519063ffffffff61336916565b505050505050565b6000806000806120fc85613393565b935093509350935083158061210f575080155b1561211d576120b78561334b565b60008183850990506120e56120d48261177f565b600080600061213f846132d1565b9250925092508261215357611f068461334b565b80820a611f2e611f1d8261177f565b6000806000612170846132d1565b9250925092508261218457611f068461334b565b808210611f2e611f1d8261177f565b60008060006121a1846132d1565b925092509250826121b557611f068461334b565b808211611f2e611f1d8261177f565b60008060006121d2846132d1565b925092509250826121e657611f068461334b565b808212611f2e611f1d8261177f565b6000806000612203846132d1565b9250925092508261221757611f068461334b565b808213611f2e611f1d8261177f565b61222e6142fb565b61223b8260e0015161343c565b90506122456142fb565b6122528360e0015161343c565b905061228361227261226383610d77565b61226c85610d77565b1461347e565b60e08501519063ffffffff61336916565b505050565b6122906142fb565b61229d8260e0015161343c565b90506122a8816134a0565b6122cf576122ca6122b9600061177f565b60e08401519063ffffffff61336916565b61092d565b805180156122f06122df8261177f565b60e08601519063ffffffff61336916565b50505050565b6000806000612304846132d1565b9250925092508261231857611f068461334b565b818116611f2e611f1d8261177f565b6000806000612335846132d1565b9250925092508261234957611f068461334b565b818117611f2e611f1d8261177f565b6000806000612366846132d1565b9250925092508261237a57611f068461334b565b818118611f2e611f1d8261177f565b6123916142fb565b61239e8260e0015161343c565b90506123a9816134a0565b6123bc576123b68261334b565b50611695565b805180196122f06122df8261177f565b60008060006123da846132d1565b925092509250826123ee57611f068461334b565b81811a611f2e611f1d8261177f565b600080600061240b846132d1565b9250925092508261241f57611f068461334b565b81810b611f2e611f1d8261177f565b6124366142fb565b6124438260e0015161343c565b905061092d6122b961245483610d77565b61177f565b6124616142fb565b61246e8260e0015161343c565b905061092d6122b9826134ab565b600080600061248a846132d1565b9250925092508261249e57611f068461334b565b60408051602080820185905281830184905282518083038401815260609092019092528051910120611f2e611f1d8261177f565b6124da6142fb565b6124e78260e0015161343c565b90506124f281613510565b15806125045750806040015151600714155b15612512576123b68261334b565b604081015160005b60078110156125545761253f82828151811061253257fe5b60200260200101516134a0565b61254c57611f068461334b565b60010161251a565b5061255d614400565b60005b60198110156125c95782600482048151811061257857fe5b6020026020010151600001516001600160401b031682826019811061259957fe5b602002015260408360048304815181106125af57fe5b6020908102919091010151805190911c9052600101612560565b506125d38161351d565b604080516007808252610100820190925291925060609190816020015b6125f86142fb565b8152602001906001900390816125f057905050905060005b600781101561264257612623600061177f565b82828151811061262f57fe5b6020908102919091010152600101612610565b5060005b6019811015612692576004810660400283826019811061266257fe5b6020020151901b82600483048151811061267857fe5b602090810291909101015180519091179052600101612646565b50611f2e611f1d82611a14565b61092d8160e0015161343c565b60208101516080015160e08201516116959163ffffffff61336916565b60208101516060015160e08201516116959163ffffffff61336916565b6126f38160e0015161343c565b60209091015160600152565b6127076142fb565b6127148260e0015161343c565b905061271f8161410e565b61272c576123b68261334b565b61273581610d77565b6020830151525050565b6127476142fb565b6127548260e0015161343c565b905061275e6142fb565b61276b8360e0015161343c565b90506127768261410e565b15806127885750612786816134a0565b155b1561279d576127968361334b565b5050611695565b805115612283576127ad82610d77565b602084015152505050565b60e0810151516000901580156127e757506127d46106c4611698565b6127e5836020015160200151610d77565b145b905061092d6122b98261347e565b8051516116959061280790600161411b565b60e08301519063ffffffff61336916565b6116956128288260e0015161343c565b6101008301519063ffffffff61336916565b61169561280782610100015161343c565b610100810151516000901580156127e757506128686106c4611698565b6127e5836020015160400151610d77565b611695612807826020015160c00151600161411b565b6128976142fb565b6128a48260e0015161343c565b90506128af8161410e565b6128bc576123b68261334b565b6128c581610d77565b602083015160c001525050565b6128da6142fb565b6128e78260e0015161343c565b60e08301519091506128ff908263ffffffff61336916565b60e082015161092d908263ffffffff61336916565b61291c6142fb565b6129298260e0015161343c565b90506129336142fb565b6129408360e0015161343c565b60e0840151909150612958908263ffffffff61336916565b60e083015161296d908363ffffffff61336916565b60e0830151612283908263ffffffff61336916565b61298a6142fb565b6129978260e0015161343c565b90506129a16142fb565b6129ae8360e0015161343c565b90506129b86142fb565b6129c58460e0015161343c565b60e08501519091506129dd908263ffffffff61336916565b60e08401516129f2908363ffffffff61336916565b60e0840151612a07908463ffffffff61336916565b60e08401516122f0908263ffffffff61336916565b612a246142fb565b612a318260e0015161343c565b9050612a3b6142fb565b612a488360e0015161343c565b60e084015190915061296d908363ffffffff61336916565b612a686142fb565b612a758260e0015161343c565b9050612a7f6142fb565b612a8c8360e0015161343c565b9050612a966142fb565b612aa38460e0015161343c565b60e0850151909150612abb908463ffffffff61336916565b60e0840151612a07908363ffffffff61336916565b612ad86142fb565b612ae58260e0015161343c565b9050612aef6142fb565b612afc8360e0015161343c565b9050612b07826134a0565b1580612b195750612b1781613510565b155b80612b335750612b28816141cc565b60ff16826000015110155b15612b41576127968361334b565b6122838160400151836000015181518110612b5857fe5b60200260200101518460e0015161336990919063ffffffff16565b612b7b6142fb565b612b888260e0015161343c565b9050612b926142fb565b612b9f8360e0015161343c565b9050612ba96142fb565b612bb68460e0015161343c565b9050612bc1836134a0565b1580612bd35750612bd182613510565b155b80612bed5750612be2826141cc565b60ff16836000015110155b15612bfb57611f068461334b565b604082015183518151839183918110612c1057fe5b6020026020010181905250611f2e611f1d82611a14565b612c2f6142fb565b612c3c8260e0015161343c565b9050612c4781613510565b612c54576123b68261334b565b61092d6122b9612c63836141cc565b60ff1661177f565b612c736142fb565b612c808260e0015161343c565b9050612c8a6142fb565b612c9883610100015161343c565b9050612ca3826134a0565b1580612cb55750612cb381613510565b155b80612ccf5750612cc4816141cc565b60ff16826000015110155b15612cdd576127968361334b565b610100830151612b41908263ffffffff61336916565b612cfb6142fb565b612d088260e0015161343c565b9050612d126142fb565b612d1f8360e0015161343c565b9050612d296142fb565b612d3784610100015161343c565b9050612d4281613510565b1580612d545750612d52836134a0565b155b80612d6e5750612d63816141cc565b60ff16836000015110155b15612d7c57611f068461334b565b604081015183518151849183918110612d9157fe5b6020026020010181905250611f2e612da882611a14565b6101008701519063ffffffff61336916565b8060a00151612dcf6106c48360e0015161343c565b604080516020808201949094528082019290925280518083038201815260609092019052805191012060a090910152565b612e086142fb565b612e158260e0015161343c565b905061271081608001511180612e315750612e2f816141f3565b155b15612e3f576123b68261334b565b8160800151612e4d82610d77565b604080516020808201949094528082019290925280518083038201815260609092019052805191012060808301525050565b612e8a6106c4611698565b612e978260400151610d77565b1415612eea576040805162461bcd60e51b815260206004820152601d60248201527f496e626f7820696e737472756374696f6e2077617320626c6f636b6564000000604482015290519081900360640190fd5b604081015160e0820151612f039163ffffffff61336916565b612f0b611698565b60408201526001606090910152565b6116958161334b565b61169581602001516142f1565b612f386142fb565b612f458260e0015161343c565b9050612f50816134a0565b612f5d576123b68261334b565b51602082015160a0015250565b611695612807826020015160a0015161177f565b60408051600160f81b60208083019190915260006021830181905260228084019190915283518084039091018152604290920190925280519101206116959061280790600161411b565b612fd06142fb565b612fdd8260e0015161343c565b9050612fe76142fb565b612ff48360e0015161343c565b9050612fff826134a0565b1580613011575061300f8161410e565b155b1561301f576127968361334b565b612283612272836000015161303384610d77565b610c91565b6130406142fb565b61304d8260e0015161343c565b90506130576142fb565b6130648360e0015161343c565b905061306e6142fb565b61307b8460e0015161343c565b9050613086836134a0565b158061309857506130968161410e565b155b156130a657611f068461334b565b6122f06122df84600001516130ba84610d77565b85610cf3565b604080516000808252602082019092526060916130f3565b6130e06142fb565b8152602001906001900390816130d85790505b50905061092d6122b982611a14565b61310a6142fb565b6131178260e0015161343c565b90506131216142fb565b61312e8360e0015161343c565b90506131386142fb565b6131458460e0015161343c565b905061314f6142fb565b61315c8560e0015161343c565b9050613167846134a0565b15806131795750613177836134a0565b155b8061318a5750613188826134a0565b155b8061319b5750613199816134a0565b155b156131a9576120b78561334b565b835183518351158015906131bf57508351600114155b156131ed576131e26131d1600061177f565b60e08901519063ffffffff61336916565b505050505050611695565b83518351604080516000808252602080830180855285905260ff601b9096019586168385015260608301889052608083018790529251909260019260a080820193601f1981019281900390910190855afa15801561324f573d6000803e3d6000fd5b505050602060405103519050613281613270826001600160a01b031661177f565b60e08c01519063ffffffff61336916565b50505050505050505050565b600160e090910152565b600081602001835110156132aa57600080fd5b50016020015190565b60008060208301611774858563ffffffff61329716565b6008101590565b60008060006132de6142fb565b6132eb8560e0015161343c565b90506132f56142fb565b6133028660e0015161343c565b905061330d826134a0565b158061331f575061331d816134a0565b155b156133365750600093508392508291506133449050565b905190516001945090925090505b9193909250565b6133548161162c565b60e08101516000908190526101009091015152565b80826020015183600001518151811061337e57fe5b60209081029190910101525080516001019052565b6000806000806133a16142fb565b6133ae8660e0015161343c565b90506133b86142fb565b6133c58760e0015161343c565b90506133cf6142fb565b6133dc8860e0015161343c565b90506133e7836134a0565b15806133f957506133f7826134a0565b155b8061340a5750613408816134a0565b155b15613425575060009550859450849350839250611625915050565b915190519151600198919750919550909350915050565b6134446142fb565b61344c6142fb565b826020015160018460000151038151811061346357fe5b60209081029190910101518351600019018452915050919050565b6134866142fb565b811561349657610d9d600161177f565b610d9d600061177f565b6060015160ff161590565b6134b36142fb565b816060015160ff16600214156134fa5760405162461bcd60e51b81526004018080602001828103825260218152602001806144966021913960400191505060405180910390fd5b61350a826060015160ff1661177f565b92915050565b6060015160ff1660031490565b613525614400565b61352d61441f565b61353561441f565b61353d614400565b61354561443d565b60405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060008090505b6018811015614103576080878101516060808a01516040808c01516020808e01518e511890911890921890931889526101208b01516101008c015160e08d015160c08e015160a08f0151181818189089018190526101c08b01516101a08c01516101808d01516101608e01516101408f0151181818189289019283526102608b01516102408c01516102208d01516102008e01516101e08f015118181818918901919091526103008a01516102e08b01516102c08c01516102a08d01516102808e0151181818189288018390526001600160401b0360028202166001603f1b91829004179092188652510485600260200201516002026001600160401b03161785600060200201511884600160200201526001603f1b85600360200201518161379157fe5b0485600360200201516002026001600160401b03161785600160200201511884600260200201526001603f1b8560046020020151816137cc57fe5b0485600460200201516002026001600160401b031617856002600581106137ef57fe5b602002015118606085015284516001603f1b9086516060808901519390920460029091026001600160401b031617909118608086810191825286518a5118808b5287516020808d018051909218825289516040808f0180519092189091528a518e8801805190911890528a51948e0180519095189094528901805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291880180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292870180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a01805190911890529084525163100000009060208901516001600160401b03641000000000909102169190041761010084015260408701516001603d1b9060408901516001600160401b03600890910216919004176101608401526060870151628000009060608901516001600160401b036502000000000090910216919004176102608401526080870151654000000000009060808901516001600160401b036204000090910216919004176102c084015260a08701516001603f1b900487600560200201516002026001600160401b03161783600260198110613a5957fe5b602002015260c0870151621000008104651000000000009091026001600160401b039081169190911760a085015260e0880151664000000000000081046104009091028216176101a08501526101008801516208000081046520000000000090910282161761020085015261012088015160048082029092166001603e1b909104176103008501526101408801516101408901516001600160401b036001603e1b90910216919004176080840152610160870151670400000000000000906101608901516001600160401b036040909102169190041760e084015261018087015162200000906101808901516001600160401b036508000000000090910216919004176101408401526101a08701516602000000000000906101a08901516001600160401b0361800090910216919004176102408401526101c08701516008906101c08901516001600160401b036001603d1b90910216919004176102a08401526101e0870151641000000000906101e08901516001600160401b03631000000090910216919004176020840152610200808801516102008901516001600160401b0366800000000000009091021691900417610120840152610220870151648000000000906102208901516001600160401b036302000000909102169190041761018084015261024087015165080000000000906102408901516001600160401b036220000090910216919004176101e0840152610260870151610100906102608901516001600160401b03600160381b90910216919004176102e0840152610280870151642000000000906102808901516001600160401b036308000000909102169190041760608401526102a087015165100000000000906102a08901516001600160401b0362100000909102169190041760c08401526102c08701516302000000906102c08901516001600160401b0364800000000090910216919004176101c08401526102e0870151600160381b906102e08901516001600160401b036101009091021691900417610220840152610300870151660400000000000090048760186020020151614000026001600160401b031617836014602002015282600a602002015183600560200201511916836000602002015118876000602002015282600b602002015183600660200201511916836001602002015118876001602002015282600c602002015183600760200201511916836002602002015118876002602002015282600d602002015183600860200201511916836003602002015118876003602002015282600e602002015183600960200201511916836004602002015118876004602002015282600f602002015183600a602002015119168360056020020151188760056020020152826010602002015183600b602002015119168360066020020151188760066020020152826011602002015183600c602002015119168360076020020151188760076020020152826012602002015183600d602002015119168360086020020151188760086020020152826013602002015183600e602002015119168360096020020151188760096020020152826014602002015183600f6020020151191683600a60200201511887600a602002015282601560200201518360106020020151191683600b60200201511887600b602002015282601660200201518360116020020151191683600c60200201511887600c602002015282601760200201518360126020020151191683600d60200201511887600d602002015282601860200201518360136020020151191683600e60200201511887600e602002015282600060200201518360146020020151191683600f60200201511887600ff157fe5b6020020151875118875260010161366c565b509495945050505050565b6060015160ff1660011490565b6141236142fb565b6040805160a0810182528481528151606081018352600080825260208281018290528451828152808201865293949085019390830191614179565b6141666142fb565b81526020019060019003908161415e5790505b509052815260408051600080825260208281019093529190920191906141b5565b6141a26142fb565b81526020019060019003908161419a5790505b508152606460208201526040019290925250919050565b606081015160009060ff16600314156141eb57506040810151516109f1565b5060016109f1565b606081015160009060ff1661420a575060016109f1565b606082015160ff1660011415614222575060006109f1565b606082015160ff1660021415614276576040805162461bcd60e51b81526020600482015260146024820152736d75737420686176652066756c6c2076616c756560601b604482015290519081900360640190fd5b606082015160ff16600314156142d95760408201515160005b818110156142ce576142b7846040015182815181106142aa57fe5b60200260200101516141f3565b6142c6576000925050506109f1565b60010161428f565b5060019150506109f1565b606082015160ff1660641415610e56575060006109f1565b600260e090910152565b6040518060a001604052806000815260200161431561445c565b815260606020820181905260006040830181905291015290565b6040518061014001604052806143436143a0565b81526020016143506143a0565b815260200161435d6142fb565b81526000602082018190526040820181905260608201819052608082015260a00161438661447b565b815260200161439361447b565b8152600060209091015290565b60408051610100810190915260008152602081016143bc6142fb565b81526020016143c96142fb565b81526020016143d66142fb565b81526020016143e36142fb565b81526000602082018190526040820181905260609091015290565bfe5b6040518061032001604052806019906020820280388339509192915050565b6040518060a001604052806005906020820280388339509192915050565b6040518061030001604052806018906020820280388339509192915050565b6040805160608082018352600080835260208301529181019190915290565b60405180604001604052806000815260200160608152509056fe56616c7565206d757374206861766520612076616c6964207479706520636f6465a265627a7a7231582006a5a5dda7f605a9490615cd7084f4ab4b082bb1eda3820b81cf71fb93fea61664736f6c63430005110032"

// DeployOneStepProofTester deploys a new Ethereum contract, binding an instance of OneStepProofTester to it.
func DeployOneStepProofTester(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProofTester, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofTesterABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofTesterBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProofTester{OneStepProofTesterCaller: OneStepProofTesterCaller{contract: contract}, OneStepProofTesterTransactor: OneStepProofTesterTransactor{contract: contract}, OneStepProofTesterFilterer: OneStepProofTesterFilterer{contract: contract}}, nil
}

// OneStepProofTester is an auto generated Go binding around an Ethereum contract.
type OneStepProofTester struct {
	OneStepProofTesterCaller     // Read-only binding to the contract
	OneStepProofTesterTransactor // Write-only binding to the contract
	OneStepProofTesterFilterer   // Log filterer for contract events
}

// OneStepProofTesterCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofTesterCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTesterTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTesterTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTesterFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofTesterFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTesterSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofTesterSession struct {
	Contract     *OneStepProofTester // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// OneStepProofTesterCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofTesterCallerSession struct {
	Contract *OneStepProofTesterCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// OneStepProofTesterTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTesterTransactorSession struct {
	Contract     *OneStepProofTesterTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// OneStepProofTesterRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofTesterRaw struct {
	Contract *OneStepProofTester // Generic contract binding to access the raw methods on
}

// OneStepProofTesterCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofTesterCallerRaw struct {
	Contract *OneStepProofTesterCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTesterTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTesterTransactorRaw struct {
	Contract *OneStepProofTesterTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProofTester creates a new instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTester(address common.Address, backend bind.ContractBackend) (*OneStepProofTester, error) {
	contract, err := bindOneStepProofTester(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTester{OneStepProofTesterCaller: OneStepProofTesterCaller{contract: contract}, OneStepProofTesterTransactor: OneStepProofTesterTransactor{contract: contract}, OneStepProofTesterFilterer: OneStepProofTesterFilterer{contract: contract}}, nil
}

// NewOneStepProofTesterCaller creates a new read-only instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTesterCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofTesterCaller, error) {
	contract, err := bindOneStepProofTester(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTesterCaller{contract: contract}, nil
}

// NewOneStepProofTesterTransactor creates a new write-only instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTesterTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTesterTransactor, error) {
	contract, err := bindOneStepProofTester(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTesterTransactor{contract: contract}, nil
}

// NewOneStepProofTesterFilterer creates a new log filterer instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTesterFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofTesterFilterer, error) {
	contract, err := bindOneStepProofTester(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTesterFilterer{contract: contract}, nil
}

// bindOneStepProofTester binds a generic wrapper to an already deployed contract.
func bindOneStepProofTester(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofTesterABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofTester *OneStepProofTesterRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProofTester.Contract.OneStepProofTesterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofTester *OneStepProofTesterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.OneStepProofTesterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofTester *OneStepProofTesterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.OneStepProofTesterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofTester *OneStepProofTesterCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProofTester.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofTester *OneStepProofTesterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofTester *OneStepProofTesterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.contract.Transact(opts, method, params...)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x799b4835.
//
// Solidity: function executeStep(bytes32 beforeInbox, uint256 beforeInboxValueSize, bytes32 firstMessage, bytes32 firstLog, bytes proof) pure returns(bytes32 startHash, bytes32 endHash, bytes32 logAcc, bytes32 messageAcc, uint64 gas, bool didInboxInsn)
func (_OneStepProofTester *OneStepProofTesterCaller) ExecuteStep(opts *bind.CallOpts, beforeInbox [32]byte, beforeInboxValueSize *big.Int, firstMessage [32]byte, firstLog [32]byte, proof []byte) (struct {
	StartHash    [32]byte
	EndHash      [32]byte
	LogAcc       [32]byte
	MessageAcc   [32]byte
	Gas          uint64
	DidInboxInsn bool
}, error) {
	ret := new(struct {
		StartHash    [32]byte
		EndHash      [32]byte
		LogAcc       [32]byte
		MessageAcc   [32]byte
		Gas          uint64
		DidInboxInsn bool
	})
	out := ret
	err := _OneStepProofTester.contract.Call(opts, out, "executeStep", beforeInbox, beforeInboxValueSize, firstMessage, firstLog, proof)
	return *ret, err
}

// ExecuteStep is a free data retrieval call binding the contract method 0x799b4835.
//
// Solidity: function executeStep(bytes32 beforeInbox, uint256 beforeInboxValueSize, bytes32 firstMessage, bytes32 firstLog, bytes proof) pure returns(bytes32 startHash, bytes32 endHash, bytes32 logAcc, bytes32 messageAcc, uint64 gas, bool didInboxInsn)
func (_OneStepProofTester *OneStepProofTesterSession) ExecuteStep(beforeInbox [32]byte, beforeInboxValueSize *big.Int, firstMessage [32]byte, firstLog [32]byte, proof []byte) (struct {
	StartHash    [32]byte
	EndHash      [32]byte
	LogAcc       [32]byte
	MessageAcc   [32]byte
	Gas          uint64
	DidInboxInsn bool
}, error) {
	return _OneStepProofTester.Contract.ExecuteStep(&_OneStepProofTester.CallOpts, beforeInbox, beforeInboxValueSize, firstMessage, firstLog, proof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x799b4835.
//
// Solidity: function executeStep(bytes32 beforeInbox, uint256 beforeInboxValueSize, bytes32 firstMessage, bytes32 firstLog, bytes proof) pure returns(bytes32 startHash, bytes32 endHash, bytes32 logAcc, bytes32 messageAcc, uint64 gas, bool didInboxInsn)
func (_OneStepProofTester *OneStepProofTesterCallerSession) ExecuteStep(beforeInbox [32]byte, beforeInboxValueSize *big.Int, firstMessage [32]byte, firstLog [32]byte, proof []byte) (struct {
	StartHash    [32]byte
	EndHash      [32]byte
	LogAcc       [32]byte
	MessageAcc   [32]byte
	Gas          uint64
	DidInboxInsn bool
}, error) {
	return _OneStepProofTester.Contract.ExecuteStep(&_OneStepProofTester.CallOpts, beforeInbox, beforeInboxValueSize, firstMessage, firstLog, proof)
}
