// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgetestcontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProofABI is the input ABI used to generate the binding from.
const OneStepProofABI = "[]"

// OneStepProofBin is the compiled bytecode used for deploying new contracts.
var OneStepProofBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820271cdd97831c8611f22e28adda58bd2a125b301763121d96c7510873e8f2bbf764736f6c63430005110032"

// DeployOneStepProof deploys a new Ethereum contract, binding an instance of OneStepProof to it.
func DeployOneStepProof(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// OneStepProof is an auto generated Go binding around an Ethereum contract.
type OneStepProof struct {
	OneStepProofCaller     // Read-only binding to the contract
	OneStepProofTransactor // Write-only binding to the contract
	OneStepProofFilterer   // Log filterer for contract events
}

// OneStepProofCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofSession struct {
	Contract     *OneStepProof     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProofCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofCallerSession struct {
	Contract *OneStepProofCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// OneStepProofTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTransactorSession struct {
	Contract     *OneStepProofTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// OneStepProofRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofRaw struct {
	Contract *OneStepProof // Generic contract binding to access the raw methods on
}

// OneStepProofCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofCallerRaw struct {
	Contract *OneStepProofCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTransactorRaw struct {
	Contract *OneStepProofTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof creates a new instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProof(address common.Address, backend bind.ContractBackend) (*OneStepProof, error) {
	contract, err := bindOneStepProof(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// NewOneStepProofCaller creates a new read-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofCaller, error) {
	contract, err := bindOneStepProof(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofCaller{contract: contract}, nil
}

// NewOneStepProofTransactor creates a new write-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTransactor, error) {
	contract, err := bindOneStepProof(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTransactor{contract: contract}, nil
}

// NewOneStepProofFilterer creates a new log filterer instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofFilterer, error) {
	contract, err := bindOneStepProof(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofFilterer{contract: contract}, nil
}

// bindOneStepProof binds a generic wrapper to an already deployed contract.
func bindOneStepProof(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.OneStepProofCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transact(opts, method, params...)
}

// OneStepProofTesterABI is the input ABI used to generate the binding from.
const OneStepProofTesterABI = "[{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"firstInbox\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"firstMessage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"firstLog\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inboxSeqNum\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"msgData\",\"type\":\"bytes\"}],\"name\":\"executeInboxStep\",\"outputs\":[{\"internalType\":\"bytes32[5]\",\"name\":\"fields\",\"type\":\"bytes32[5]\"},{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"firstInbox\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"firstMessage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"firstLog\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"bytes32[5]\",\"name\":\"fields\",\"type\":\"bytes32[5]\"},{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// OneStepProofTesterFuncSigs maps the 4-byte function signature to its string representation.
var OneStepProofTesterFuncSigs = map[string]string{
	"4a95659b": "executeInboxStep(bytes32,bytes32,bytes32,bytes,uint8,uint256,uint256,address,uint256,bytes)",
	"385bc114": "executeStep(bytes32,bytes32,bytes32,bytes)",
}

// OneStepProofTesterBin is the compiled bytecode used for deploying new contracts.
var OneStepProofTesterBin = "0x608060405234801561001057600080fd5b50614a29806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063385bc1141461003b5780634a95659b14610145575b600080fd5b6100f46004803603608081101561005157600080fd5b8135916020810135916040820135919081019060808101606082013564010000000081111561007f57600080fd5b82018360208201111561009157600080fd5b803590602001918460018302840111640100000000831117156100b357600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506102ad945050505050565b604051808360a080838360005b83811015610119578181015183820152602001610101565b50505050905001826001600160401b03166001600160401b031681526020019250505060405180910390f35b6100f4600480360361014081101561015c57600080fd5b8135916020810135916040820135919081019060808101606082013564010000000081111561018a57600080fd5b82018360208201111561019c57600080fd5b803590602001918460018302840111640100000000831117156101be57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929560ff85351695602086013595604081013595506001600160a01b0360608201351694506080810135935060c081019060a0013564010000000081111561023857600080fd5b82018360208201111561024a57600080fd5b8035906020019184600183028401116401000000008311171561026c57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506102e4945050505050565b6102b5614820565b60006102bf61483e565b6102cb87878787610327565b90506102d681610734565b925092505094509492505050565b6102ec614820565b60006102f661483e565b6103088d8d8d8d8d8d8d8d8d8d61079d565b905061031381610734565b92509250509a509a98505050505050505050565b61032f61483e565b60008260008151811061033e57fe5b602001015160f81c60f81b60f81c905060008360018151811061035d57fe5b602001015160f81c60f81b60f81c905060006002905060608360040160ff166040519080825280602002602001820160405280156103b557816020015b6103a26148ca565b81526020019060019003908161039a5790505b50905060608360040160ff166040519080825280602002602001820160405280156103fa57816020015b6103e76148ca565b8152602001906001900390816103df5790505b50905060005b8560ff168110156104385761041588856107f7565b845185908490811061042357fe5b60209081029190910101529350600101610400565b5060005b8460ff168110156104745761045188856107f7565b835184908490811061045f57fe5b6020908102919091010152935060010161043c565b5061047d6148fe565b6104878885610989565b8092508195505050600088858151811061049d57fe5b602001015160f81c60f81b60f81c905060008986600101815181106104be57fe5b01602001516002969096019560f81c90506104d761483e565b604051806101c001604052808581526020016104f286610a29565b81526020018f81526020018e81526020018d815260200160006001600160401b03168152602001610521610a93565b81526020016000801b815260200160405180604001604052808c60ff16815260200189815250815260200160405180604001604052808b60ff1681526020018881525081526020018460ff16600114151581526020018360ff1681526020018c81526020018881525090508260ff16600014806105a157508260ff166001145b6105f2576040805162461bcd60e51b815260206004820152601c60248201527f50726f6f662068616420626164206f7065726174696f6e207479706500000000604482015290519081900360640190fd5b6105fa6148ca565b60ff841661061757815151610610908490610ada565b9050610691565b6000875111610662576040805162461bcd60e51b81526020600482015260126024820152716e6f20696d6d6564696174652076616c756560701b604482015290519081900360640190fd5b61068e838360000151600001518960018e0360ff168151811061068157fe5b6020026020010151610b3c565b90505b61069a81610bc0565b82515260005b848b0360ff168110156106df576106d78882815181106106bc57fe5b60200260200101518460000151610ce090919063ffffffff16565b6001016106a0565b5060005b8960ff16811015610720576107188782815181106106fd57fe5b60200260200101518460000151610cfa90919063ffffffff16565b6001016106e3565b50909e9d5050505050505050505050505050565b61073c614820565b600061074783610d14565b6040518060a0016040528061075f8560000151611024565b81526020016107718560200151611024565b8152604080860151602083015260808601519082015260608086015191015260a0909301519293915050565b6107a561483e565b6107ad61483e565b6107b98c8c8c8c610327565b90506107d0888689898888805190602001206110e8565b60e08201526107e3888888888888611156565b60c0909101529a9950505050505050505050565b60006108016148ca565b83518310610847576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b600080610854868661127e565b915091506108606112a5565b60ff168160ff16141561089457600061087987846112aa565b9093509050826108888261131e565b94509450505050610982565b61089c6113d0565b60ff168160ff1614156108be576108b386836113d5565b935093505050610982565b6108c6611477565b60ff168160ff1614156108dd576108b3868361147c565b6108e5611510565b60ff168160ff161015801561090657506108fd611515565b60ff168160ff16105b15610942576000610915611510565b82039050606061092682898661151a565b909450905083610935826115b3565b9550955050505050610982565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b60006109936148fe565b61099b6148fe565b600060e08201819052806109af87876112aa565b90965091506109be878761147c565b602085015295506109cf878761147c565b604085015295506109e087876107f7565b606085015295506109f187876107f7565b60808501529550610a0287876112aa565b60a08501529550610a1387876112aa565b92845260c0840192909252509590945092505050565b610a316148fe565b60405180610100016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e0015181525090505b919050565b610a9b6148ca565b60408051600080825260208201909252610ad591610acf565b610abc6148ca565b815260200190600190039081610ab45790505b506115b3565b905090565b610ae26148ca565b6040805160608101825260ff851681526020808201859052825160008082529181018452610b3593830191610b2d565b610b1a6148ca565b815260200190600190039081610b125790505b5090526116c5565b9392505050565b610b446148ca565b604080516001808252818301909252606091816020015b610b636148ca565b815260200190600190039081610b5b5790505090508281600081518110610b8657fe5b6020026020010181905250610bb760405180606001604052808760ff168152602001868152602001838152506116c5565b95945050505050565b6000610bca6112a5565b60ff16826060015160ff161415610bed578151610be69061172c565b9050610a8e565b610bf56113d0565b60ff16826060015160ff161415610c1357610be68260200151611750565b610c1b611477565b60ff16826060015160ff161415610c3d5781516080830151610be6919061184d565b610c45611510565b60ff16826060015160ff161415610c7e57610c5e6148ca565b610c6b836040015161189e565b9050610c7681610bc0565b915050610a8e565b610c86611a00565b60ff16826060015160ff161415610c9f57508051610a8e565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b610cee826020015182611a05565b82602001819052505050565b610d08826040015182611a05565b82604001819052505050565b6000806000612799610d2d85610160015160ff16611a83565b6001600160401b03821660a0808b0182905260208b01518101805183900390528a51015194985092965090945092501115610d8257602085015160001960a090910152610d798561223e565b50505050611021565b61010085015151841115610e0c57610da0610d9b610a93565b610bc0565b610db1866020015160200151610bc0565b14610e03576040805162461bcd60e51b815260206004820152601d60248201527f737461636b206974656d206d697373696e672066726f6d2070726f6f66000000604482015290519081900360640190fd5b610d798561223e565b61012085015151831115610e8857610e25610d9b610a93565b610e36866020015160400151610bc0565b14610e03576040805162461bcd60e51b815260206004820181905260248201527f617578737461636b206974656d206d697373696e672066726f6d2070726f6f66604482015290519081900360640190fd5b6000841180610e9a5750846101400151155b8015610eab57506101008501515184145b80610ed357508461014001518015610ec1575083155b8015610ed35750610100850151516001145b610f1b576040805162461bcd60e51b8152602060048201526014602482015273746f6f206d616e7920737461636b206974656d7360601b604482015290519081900360640190fd5b610120850151518314610f75576040805162461bcd60e51b815260206004820152601760248201527f746f6f206d616e7920617578737461636b206974656d73000000000000000000604482015290519081900360640190fd5b610f82858263ffffffff16565b60005b61010086015151811015610fce57610fc6866101000151602001518281518110610fab57fe5b60200260200101518760200151610ce090919063ffffffff16565b600101610f85565b5060005b6101208601515181101561101b57611013866101200151602001518281518110610ff857fe5b60200260200101518760200151610cfa90919063ffffffff16565b600101610fd2565b50505050505b50565b600060028260e00151141561103b57506000610a8e565b60018260e00151141561105057506001610a8e565b8151602083015161106090610bc0565b61106d8460400151610bc0565b61107a8560600151610bc0565b6110878660800151610bc0565b8660a001518760c0015160405160200180888152602001878152602001868152602001858152602001848152602001838152602001828152602001975050505050505050604051602081830303815290604052805190602001209050610a8e565b6040805160f89790971b6001600160f81b03191660208089019190915260609690961b6bffffffffffffffffffffffff191660218801526035870194909452605586019290925260758501526095808501919091528151808503909101815260b59093019052815191012090565b61115e6148ca565b60408051600680825260e08201909252606091816020015b61117e6148ca565b81526020019060019003908161117657905050905061119f8860ff1661131e565b816000815181106111ac57fe5b60200260200101819052506111c08761131e565b816001815181106111cd57fe5b60200260200101819052506111e18661131e565b816002815181106111ee57fe5b602002602001018190525061120b856001600160a01b031661131e565b8160038151811061121857fe5b602002602001018190525061122c8461131e565b8160048151811061123957fe5b602002602001018190525061125183600085516122a7565b8160058151811061125e57fe5b6020026020010181905250611272816115b3565b98975050505050505050565b6000808260010184848151811061129157fe5b016020015190925060f81c90509250929050565b600090565b600080828451101580156112c2575060208385510310155b6112ff576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b60208301611313858563ffffffff61242b16565b915091509250929050565b6113266148ca565b6040805160a081018252838152815160608101835260008082526020828101829052845182815280820186529394908501939083019161137c565b6113696148ca565b8152602001906001900390816113615790505b509052815260408051600080825260208281019093529190920191906113b8565b6113a56148ca565b81526020019060019003908161139d5790505b50815260006020820152600160409091015292915050565b600190565b60006113df6148ca565b826000806113eb6148ca565b60006113f7898661127e565b9095509350611406898661127e565b9095509250600160ff851614156114275761142189866107f7565b90955091505b6114318986612484565b9095509050600160ff8516141561145c578461144e848385610b3c565b965096505050505050610982565b846114678483610ada565b9650965050505050509250929050565b600290565b60006114866148ca565b8284511015801561149b575060408385510310155b6114d7576040805162461bcd60e51b81526020600482015260086024820152671d1bc81cda1bdc9d60c21b604482015290519081900360640190fd5b6000806114e48686612484565b90945091506114f386856112aa565b909450905083611503838361249b565b9350935050509250929050565b600390565b600c90565b60006060600083905060608660ff1660405190808252806020026020018201604052801561156257816020015b61154f6148ca565b8152602001906001900390816115475790505b50905060005b8760ff168160ff1610156115a65761158087846107f7565b8351849060ff851690811061159157fe5b60209081029190910101529250600101611568565b5090969095509350505050565b6115bb6148ca565b6115c5825161254c565b611616576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b835181101561164d5783818151811061163057fe5b60200260200101516080015182019150808060010191505061161b565b506040805160a08101825260008082528251606081018452818152602081810183905284518381528082018652939490850193919290830191906116a7565b6116946148ca565b81526020019060019003908161168c5790505b50905281526020810194909452600360408501526060909301525090565b6116cd6148ca565b6040805160a0810182526000808252602080830186905283518281529081018452919283019190611714565b6117016148ca565b8152602001906001900390816116f95790505b50815260016020820181905260409091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b600060028260400151511061176157fe5b6040820151516117c6576117736113d0565b8251602080850151604080516001600160f81b031960f896871b8116828601529490951b909316602185015260228085019190915282518085039091018152604290930190915281519101209050610a8e565b6117ce6113d0565b82600001516117f484604001516000815181106117e757fe5b6020026020010151610bc0565b8460200151604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b6000611857611510565b8383604051602001808460ff1660ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b6118a66148ca565b6008825111156118f4576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b60608251604051908082528060200260200182016040528015611921578160200160208202803883390190505b508051909150600160005b82811015611984576119438682815181106117e757fe5b84828151811061194f57fe5b60200260200101818152505085818151811061196757fe5b60200260200101516080015182019150808060010191505061192c565b506000835184604051602001808360ff1660ff1660f81b8152600101828051906020019060200280838360005b838110156119c95781810151838201526020016119b1565b50505050905001925050506040516020818303038152906040528051906020012090506119f6818361249b565b9695505050505050565b606490565b611a0d6148ca565b6040805160028082526060828101909352816020015b611a2b6148ca565b815260200190600190039081611a235790505090508281600081518110611a4e57fe5b60200260200101819052508381600181518110611a6757fe5b6020026020010181905250611a7b8161189e565b949350505050565b600080806127996001851415611aa85750600292506000915060039050612553612237565b6002851415611ac65750600292506000915060039050612553612237565b6003851415611ae45750600292506000915060039050612553612237565b6004851415611b0257506002925060009150600490506127b9612237565b6005851415611b2057506002925060009150600790506127b9612237565b6006851415611b3e57506002925060009150600490506127b9612237565b6007851415611b5c57506002925060009150600790506127b9612237565b6008851415611b7a575060039250600091506004905061288b612237565b6009851415611b98575060039250600091506004905061288b612237565b600a851415611bb65750600292506000915060199050612553612237565b600b851415611bd45750600292506000915060079050612553612237565b6010851415611bf157506002925060009150829050612553612237565b6011851415611c0e57506002925060009150829050612553612237565b6012851415611c2b57506002925060009150829050612553612237565b6013851415611c4857506002925060009150829050612553612237565b6014851415611c6557506002925060009150829050612984612237565b6015851415611c82575060019250600091508290506129e9612237565b6016851415611c9f57506002925060009150829050612553612237565b6017851415611cbc57506002925060009150829050612553612237565b6018851415611cd957506002925060009150829050612553612237565b6019851415611cf657506001925060009150829050612a5b612237565b601a851415611d145750600292506000915060049050612553612237565b601b851415611d325750600292506000915060049050612553612237565b601c851415611d505750600292506000915060049050612553612237565b601d851415611d6e5750600292506000915060049050612553612237565b6020851415611d8c5750600192506000915060079050612a9f612237565b6021851415611daa5750600192506000915060039050612ac6612237565b6022851415611dc85750600292506000915060089050612553612237565b6023851415611de7575060019250600091506102589050612aea612237565b6030851415611e0457506001925060009150829050612cd4612237565b6031851415611e2157506000925082915060019050612ce2612237565b6032851415611e3e57506000925082915060019050612d00612237565b6033851415611e5c5750600192506000915060029050612d1e612237565b6034851415611e7a5750600192506000915060049050612d38612237565b6035851415611e985750600292506000915060049050612d79612237565b6036851415611eb557506000925082915060029050612ded612237565b6037851415611ed257506000925082915060019050612e2b612237565b6038851415611eef57506001925060009150829050612e4f612237565b6039851415611f0c57506000925060019150819050612e72612237565b603a851415611f2957506000925082915060029050612e83612237565b603b851415611f4657506000925082915060019050611021612237565b603c851415611f6357506000925082915060019050612eb1612237565b603d851415611f8057506001925060009150829050612ec7612237565b6040851415611f9d57506001925060009150829050612f0b612237565b6041851415611fbb5750600292506000915060019050612f50612237565b6042851415611fd95750600392506000915060019050612fc3612237565b6043851415611ff75750600292506000915060019050613064612237565b604485141561201557506003925060009150600190506130ab612237565b605085141561203257506002925060009150829050613120612237565b605185141561205057506003925060009150602890506131c6612237565b605285141561206e575060019250600091506002905061327d612237565b605385141561208b575060019250829150600390506132c2612237565b60548514156120a9575060029250600191506029905061334b612237565b60608514156120c657506000925082915060649050611021612237565b60618514156120e45750600192506000915060649050613414612237565b6070851415612102575060019250600091506064905061345b612237565b607285141561211f575060009250829150602890506134e3612237565b607385141561213c57506000925082915060059050613563612237565b6074851415612159575060009250829150600a905061356c612237565b607585141561217657506001925060009150819050613579612237565b6076851415612193575060009250829150600190506135b4612237565b60778514156121b0575060009250829150601990506135c8612237565b60788514156121ce5750600292506000915060199050613612612237565b60798514156121ec5750600392506000915060199050613684612237565b607b851415612209575060009250829150600a905061370f612237565b608085141561222857506004925060009150614e209050613751612237565b50600092508291508190506135635b9193509193565b60408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051908201209082015160c00151141561229a5761229581602001516138e2565b611021565b6020015160c08101519052565b6122af6148ca565b602082046122bb6148ca565b6122c3610a93565b60408051600280825260608281019093529293509091816020015b6122e66148ca565b8152602001906001900390816122de57905050905060005b838110156123675761232361231e89602084028a0163ffffffff61242b16565b61131e565b8260008151811061233057fe5b6020026020010181905250828260018151811061234957fe5b602002602001018190525061235d8261189e565b92506001016122fe565b5060208506156123dd57600061238988601f198989010163ffffffff61242b16565b9050602086066020036008021b61239f8161131e565b826000815181106123ac57fe5b602002602001018190525082826001815181106123c557fe5b60200260200101819052506123d98261189e565b9250505b6123e68561131e565b816000815181106123f357fe5b6020026020010181905250818160018151811061240c57fe5b60200260200101819052506124208161189e565b979650505050505050565b6000816020018351101561247b576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b60008060208301611313858563ffffffff61242b16565b6124a36148ca565b6040805160a08101825284815281516060810183526000808252602082810182905284518281528082018652939490850193908301916124f9565b6124e66148ca565b8152602001906001900390816124de5790505b50905281526040805160008082526020828101909352919092019190612535565b6125226148ca565b81526020019060019003908161251a5790505b508152600260208201526040019290925250919050565b6008101590565b61255b6148ca565b6125698261010001516138ec565b90506125736148ca565b6125818361010001516138ec565b905061258c8261392e565b158061259e575061259c8161392e565b155b156125b3576125ac83613939565b5050611021565b8151815161016085015160009060ff16600114156125d4575081810161279b565b61016086015160ff16600214156125ee575081810261279b565b61016086015160ff1660031415612608575080820361279b565b61016086015160ff16600a1415612622575080820a61279b565b61016086015160ff16600b141561263c575080820b61279b565b61016086015160ff1660101415612656575080821061279b565b61016086015160ff1660111415612670575080821161279b565b61016086015160ff166012141561268a575080821261279b565b61016086015160ff16601314156126a4575080821361279b565b61016086015160ff16601614156126be575081811661279b565b61016086015160ff16601714156126d8575081811761279b565b61016086015160ff16601814156126f2575081811861279b565b61016086015160ff16601a141561270c575080821a61279b565b61016086015160ff16601b1415612726575080821b61279b565b61016086015160ff16601c1415612740575080821c61279b565b61016086015160ff16601d141561275a575080821d61279b565b61016086015160ff166022141561279957506040805160208082018590528183018490528251808303840181526060909201909252805191012061279b565bfe5b61101b6127a78261131e565b6101008801519063ffffffff61395816565b6127c16148ca565b6127cf8261010001516138ec565b90506127d96148ca565b6127e78361010001516138ec565b90506127f28261392e565b158061280457506128028161392e565b155b8061280e57508051155b1561281c576125ac83613939565b8151815161016085015160009060ff166004141561283d575080820461279b565b61016086015160ff1660051415612857575080820561279b565b61016086015160ff1660061415612871575080820661279b565b61016086015160ff1660071415612799575080820761279b565b6128936148ca565b6128a18261010001516138ec565b90506128ab6148ca565b6128b98361010001516138ec565b90506128c36148ca565b6128d18461010001516138ec565b90506128dc8361392e565b15806128ee57506128ec8261392e565b155b806128ff57506128fd8161392e565b155b8061290957508051155b1561291f5761291784613939565b505050611021565b82518251825161016087015160009060ff16600814156129445781838508905061295c565b61016088015160ff1660091415612799578183850990505b61297a6129688261131e565b6101008a01519063ffffffff61395816565b5050505050505050565b61298c6148ca565b61299a8261010001516138ec565b90506129a46148ca565b6129b28361010001516138ec565b90506129e46129d26129c383610bc0565b6129cc85610bc0565b14613982565b6101008501519063ffffffff61395816565b505050565b6129f16148ca565b6129ff8261010001516138ec565b9050612a0a8161392e565b612a3257612a2d612a1b600061131e565b6101008401519063ffffffff61395816565b612a57565b80518015612a54612a428261131e565b6101008601519063ffffffff61395816565b50505b5050565b612a636148ca565b612a718261010001516138ec565b9050612a7c8161392e565b612a8f57612a8982613939565b50611021565b80518019612a54612a428261131e565b612aa76148ca565b612ab58261010001516138ec565b9050612a57612a1b61231e83610bc0565b612ace6148ca565b612adc8261010001516138ec565b9050612a57612a1b826139a4565b612af26148ca565b612b008261010001516138ec565b9050612b0b81613a09565b1580612b1d5750806040015151600714155b15612b2b57612a8982613939565b604081015160005b6007811015612b6d57612b58828281518110612b4b57fe5b602002602001015161392e565b612b655761291784613939565b600101612b33565b50612b7661495c565b60005b6019811015612bda5760406003821602836004830481518110612b9857fe5b602002602001015160000151901c6001600160401b03168260058381612bba57fe5b04600584066005020160198110612bcd57fe5b6020020152600101612b79565b50612be481613a16565b604080516007808252610100820190925291925060609190816020015b612c096148ca565b815260200190600190039081612c0157905050905060005b6007811015612c5357612c34600061131e565b828281518110612c4057fe5b6020908102919091010152600101612c21565b5060005b6019811015612cae57604060038216028360058304600584066005020160198110612c7e57fe5b6020020151901b826004830481518110612c9457fe5b602090810291909101015180519091179052600101612c57565b50612ccd612cbb826115b3565b6101008701519063ffffffff61395816565b5050505050565b612a578161010001516138ec565b6020810151608001516101008201516110219163ffffffff61395816565b6020810151606001516101008201516110219163ffffffff61395816565b612d2c8161010001516138ec565b60209091015160600152565b612d406148ca565b612d4e8261010001516138ec565b9050612d5981614607565b612d6657612a8982613939565b612d6f81610bc0565b6020830151525050565b612d816148ca565b612d8f8261010001516138ec565b9050612d996148ca565b612da78361010001516138ec565b9050612db282614607565b1580612dc45750612dc28161392e565b155b15612dd2576125ac83613939565b8051156129e457612de282610bc0565b602084015152505050565b61010081015151600090158015612e1d5750612e0a610d9b610a93565b612e1b836020015160200151610bc0565b145b9050612a57612a1b82613982565b80515161102190612e3d906001614614565b6101008301519063ffffffff61395816565b611021612e608261010001516138ec565b6101208301519063ffffffff61395816565b611021612e3d8261012001516138ec565b61012081015151600090158015612e1d5750612ea0610d9b610a93565b612e1b836020015160400151610bc0565b611021612e3d826020015160c001516001614614565b612ecf6148ca565b612edd8261010001516138ec565b9050612ee881614607565b612ef557612a8982613939565b612efe81610bc0565b602083015160c001525050565b612f136148ca565b612f218261010001516138ec565b610100830151909150612f3a908263ffffffff61395816565b610100820151612a57908263ffffffff61395816565b612f586148ca565b612f668261010001516138ec565b9050612f706148ca565b612f7e8361010001516138ec565b610100840151909150612f97908263ffffffff61395816565b610100830151612fad908363ffffffff61395816565b6101008301516129e4908263ffffffff61395816565b612fcb6148ca565b612fd98261010001516138ec565b9050612fe36148ca565b612ff18361010001516138ec565b9050612ffb6148ca565b6130098461010001516138ec565b610100850151909150613022908263ffffffff61395816565b610100840151613038908363ffffffff61395816565b61010084015161304e908463ffffffff61395816565b610100840151612a54908263ffffffff61395816565b61306c6148ca565b61307a8261010001516138ec565b90506130846148ca565b6130928361010001516138ec565b610100840151909150612fad908363ffffffff61395816565b6130b36148ca565b6130c18261010001516138ec565b90506130cb6148ca565b6130d98361010001516138ec565b90506130e36148ca565b6130f18461010001516138ec565b61010085015190915061310a908463ffffffff61395816565b61010084015161304e908363ffffffff61395816565b6131286148ca565b6131368261010001516138ec565b90506131406148ca565b61314e8361010001516138ec565b90506131598261392e565b158061316b575061316981613a09565b155b80613185575061317a816146c5565b60ff16826000015110155b15613193576125ac83613939565b6129e481604001518360000151815181106131aa57fe5b602002602001015184610100015161395890919063ffffffff16565b6131ce6148ca565b6131dc8261010001516138ec565b90506131e66148ca565b6131f48361010001516138ec565b90506131fe6148ca565b61320c8461010001516138ec565b90506132178361392e565b1580613229575061322782613a09565b155b806132435750613238826146c5565b60ff16836000015110155b156132515761291784613939565b60408201518351815183918391811061326657fe5b6020026020010181905250612ccd612cbb826115b3565b6132856148ca565b6132938261010001516138ec565b905061329e81613a09565b6132ab57612a8982613939565b612a57612a1b6132ba836146c5565b60ff1661131e565b6132ca6148ca565b6132d88261010001516138ec565b90506132e26148ca565b6132f08361012001516138ec565b90506132fb8261392e565b158061330d575061330b81613a09565b155b80613327575061331c816146c5565b60ff16826000015110155b15613335576125ac83613939565b610120830151613193908263ffffffff61395816565b6133536148ca565b6133618261010001516138ec565b905061336b6148ca565b6133798361010001516138ec565b90506133836148ca565b6133918461012001516138ec565b905061339c81613a09565b15806133ae57506133ac8361392e565b155b806133c857506133bd816146c5565b60ff16836000015110155b156133d65761291784613939565b6040810151835181518491839181106133eb57fe5b6020026020010181905250612ccd613402826115b3565b6101208701519063ffffffff61395816565b806080015161342a610d9b8361010001516138ec565b6040805160208082019490945280820192909252805180830382018152606090920190528051910120608090910152565b6134636148ca565b6134718261010001516138ec565b90506127108160800151118061348d575061348b816146ec565b155b1561349b57612a8982613939565b81606001516134a982610bc0565b6040516020018083815260200182815260200192505050604051602081830303815290604052805190602001208260600181815250505050565b60e081015161352f576040805162461bcd60e51b81526020600482015260136024820152726d75737420737570706c79206d65737361676560681b604482015290519081900360640190fd5b60c08101516101008201516135499163ffffffff61395816565b61355b81604001518260e001516147ea565b604090910152565b61102181613939565b6110218160200151614816565b6135816148ca565b61358f8261010001516138ec565b905061359a8161392e565b6135a757612a8982613939565b51602082015160a0015250565b611021612e3d826020015160a0015161131e565b60408051600160f81b602080830191909152600060218301819052602280840191909152835180840390910181526042909201909252805191012061102190612e3d906001614614565b61361a6148ca565b6136288261010001516138ec565b90506136326148ca565b6136408361010001516138ec565b905061364b8261392e565b158061365d575061365b81614607565b155b1561366b576125ac83613939565b6129e46129d2836000015161367f84610bc0565b610ada565b61368c6148ca565b61369a8261010001516138ec565b90506136a46148ca565b6136b28361010001516138ec565b90506136bc6148ca565b6136ca8461010001516138ec565b90506136d58361392e565b15806136e757506136e581614607565b155b156136f55761291784613939565b612a54612a42846000015161370984610bc0565b85610b3c565b60408051600080825260208201909252606091613742565b61372f6148ca565b8152602001906001900390816137275790505b509050612a57612a1b826115b3565b6137596148ca565b6137678261010001516138ec565b90506137716148ca565b61377f8361010001516138ec565b90506137896148ca565b6137978461010001516138ec565b90506137a16148ca565b6137af8561010001516138ec565b90506137ba8461392e565b15806137cc57506137ca8361392e565b155b806137dd57506137db8261392e565b155b806137ee57506137ec8161392e565b155b156137fc57610d7985613939565b8351835183511580159061381257508351600114155b1561384157613836613824600061131e565b6101008901519063ffffffff61395816565b505050505050611021565b83518351604080516000808252602080830180855285905260ff601b9096019586168385015260608301889052608083018790529251909260019260a080820193601f1981019281900390910190855afa1580156138a3573d6000803e3d6000fd5b5050506020604051035190506138d66138c4826001600160a01b031661131e565b6101008c01519063ffffffff61395816565b50505050505050505050565b600160e090910152565b6138f46148ca565b6138fc6148ca565b826020015160018460000151038151811061391357fe5b60209081029190910101518351600019018452915050919050565b6060015160ff161590565b6139428161223e565b6101008101516000908190526101209091015152565b80826020015183600001518151811061396d57fe5b60209081029190910101525080516001019052565b61398a6148ca565b811561399a57610be6600161131e565b610be6600061131e565b6139ac6148ca565b816060015160ff16600214156139f35760405162461bcd60e51b81526004018080602001828103825260218152602001806149d46021913960400191505060405180910390fd5b613a03826060015160ff1661131e565b92915050565b6060015160ff1660031490565b613a1e61495c565b613a26614820565b613a2e614820565b613a3661495c565b613a3e61497b565b60405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060008090505b60188110156145fc576080878101516060808a01516040808c01516020808e01518e511890911890921890931889526101208b01516101008c015160e08d015160c08e015160a08f0151181818189089018190526101c08b01516101a08c01516101808d01516101608e01516101408f0151181818189289019283526102608b01516102408c01516102208d01516102008e01516101e08f015118181818918901919091526103008a01516102e08b01516102c08c01516102a08d01516102808e0151181818189288018390526001600160401b0360028202166001603f1b91829004179092188652510485600260200201516002026001600160401b03161785600060200201511884600160200201526001603f1b856003602002015181613c8a57fe5b0485600360200201516002026001600160401b03161785600160200201511884600260200201526001603f1b856004602002015181613cc557fe5b0485600460200201516002026001600160401b03161785600260058110613ce857fe5b602002015118606085015284516001603f1b9086516060808901519390920460029091026001600160401b031617909118608086810191825286518a5118808b5287516020808d018051909218825289516040808f0180519092189091528a518e8801805190911890528a51948e0180519095189094528901805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291880180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292870180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a01805190911890529084525163100000009060208901516001600160401b03641000000000909102169190041761010084015260408701516001603d1b9060408901516001600160401b03600890910216919004176101608401526060870151628000009060608901516001600160401b036502000000000090910216919004176102608401526080870151654000000000009060808901516001600160401b036204000090910216919004176102c084015260a08701516001603f1b900487600560200201516002026001600160401b03161783600260198110613f5257fe5b602002015260c0870151621000008104651000000000009091026001600160401b039081169190911760a085015260e0880151664000000000000081046104009091028216176101a08501526101008801516208000081046520000000000090910282161761020085015261012088015160048082029092166001603e1b909104176103008501526101408801516101408901516001600160401b036001603e1b90910216919004176080840152610160870151670400000000000000906101608901516001600160401b036040909102169190041760e084015261018087015162200000906101808901516001600160401b036508000000000090910216919004176101408401526101a08701516602000000000000906101a08901516001600160401b0361800090910216919004176102408401526101c08701516008906101c08901516001600160401b036001603d1b90910216919004176102a08401526101e0870151641000000000906101e08901516001600160401b03631000000090910216919004176020840152610200808801516102008901516001600160401b0366800000000000009091021691900417610120840152610220870151648000000000906102208901516001600160401b036302000000909102169190041761018084015261024087015165080000000000906102408901516001600160401b036220000090910216919004176101e0840152610260870151610100906102608901516001600160401b03600160381b90910216919004176102e0840152610280870151642000000000906102808901516001600160401b036308000000909102169190041760608401526102a087015165100000000000906102a08901516001600160401b0362100000909102169190041760c08401526102c08701516302000000906102c08901516001600160401b0364800000000090910216919004176101c08401526102e0870151600160381b906102e08901516001600160401b036101009091021691900417610220840152610300870151660400000000000090048760186020020151614000026001600160401b031617836014602002015282600a602002015183600560200201511916836000602002015118876000602002015282600b602002015183600660200201511916836001602002015118876001602002015282600c602002015183600760200201511916836002602002015118876002602002015282600d602002015183600860200201511916836003602002015118876003602002015282600e602002015183600960200201511916836004602002015118876004602002015282600f602002015183600a602002015119168360056020020151188760056020020152826010602002015183600b602002015119168360066020020151188760066020020152826011602002015183600c602002015119168360076020020151188760076020020152826012602002015183600d602002015119168360086020020151188760086020020152826013602002015183600e602002015119168360096020020151188760096020020152826014602002015183600f6020020151191683600a60200201511887600a602002015282601560200201518360106020020151191683600b60200201511887600b602002015282601660200201518360116020020151191683600c60200201511887600c602002015282601760200201518360126020020151191683600d60200201511887600d602002015282601860200201518360136020020151191683600e60200201511887600e602002015282600060200201518360146020020151191683600f60200201511887600f60200201528260016020020151836015602002015119168360106020020151188760106020020152826002602002015183601660200201511916836011602002015118876011602002015282600360200201518360176020020151191683601260200201511887601260200201528260046020020151836018602002015119168360136020020151188760136020020152826005602002015183600060200201511916836014602002015118876014602002015282600660200201518360016020020151191683601560200201511887601560200201528260076020020151836002602002015119168360166020020151188760166020020152826008602002015183600360200201511916836017602002015118876017602002015282600960200201518360046020020151191683601860200201511887601860200201528181601881106145ea57fe5b60200201518751188752600101613b65565b509495945050505050565b6060015160ff1660011490565b61461c6148ca565b6040805160a0810182528481528151606081018352600080825260208281018290528451828152808201865293949085019390830191614672565b61465f6148ca565b8152602001906001900390816146575790505b509052815260408051600080825260208281019093529190920191906146ae565b61469b6148ca565b8152602001906001900390816146935790505b508152606460208201526040019290925250919050565b606081015160009060ff16600314156146e45750604081015151610a8e565b506001610a8e565b606081015160009060ff1661470357506001610a8e565b606082015160ff166001141561471b57506000610a8e565b606082015160ff166002141561476f576040805162461bcd60e51b81526020600482015260146024820152736d75737420686176652066756c6c2076616c756560601b604482015290519081900360640190fd5b606082015160ff16600314156147d25760408201515160005b818110156147c7576147b0846040015182815181106147a357fe5b60200260200101516146ec565b6147bf57600092505050610a8e565b600101614788565b506001915050610a8e565b606082015160ff1660641415610c9f57506000610a8e565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600260e090910152565b6040518060a001604052806005906020820280388339509192915050565b604051806101c001604052806148526148fe565b815260200161485f6148fe565b81526000602082018190526040820181905260608201819052608082015260a0016148886148ca565b81526000602082015260400161489c61499a565b81526020016148a961499a565b81526000602082018190526040820181905260608083015260809091015290565b6040518060a00160405280600081526020016148e46149b4565b815260606020820181905260006040830181905291015290565b604080516101008101909152600081526020810161491a6148ca565b81526020016149276148ca565b81526020016149346148ca565b81526020016149416148ca565b81526000602082018190526040820181905260609091015290565b6040518061032001604052806019906020820280388339509192915050565b6040518061030001604052806018906020820280388339509192915050565b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fe56616c7565206d757374206861766520612076616c6964207479706520636f6465a265627a7a72315820ccf933636b6e9a01643d680292b6bd542f882667161c8b7cecddb8da04aa016864736f6c63430005110032"

// DeployOneStepProofTester deploys a new Ethereum contract, binding an instance of OneStepProofTester to it.
func DeployOneStepProofTester(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProofTester, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofTesterABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofTesterBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProofTester{OneStepProofTesterCaller: OneStepProofTesterCaller{contract: contract}, OneStepProofTesterTransactor: OneStepProofTesterTransactor{contract: contract}, OneStepProofTesterFilterer: OneStepProofTesterFilterer{contract: contract}}, nil
}

// OneStepProofTester is an auto generated Go binding around an Ethereum contract.
type OneStepProofTester struct {
	OneStepProofTesterCaller     // Read-only binding to the contract
	OneStepProofTesterTransactor // Write-only binding to the contract
	OneStepProofTesterFilterer   // Log filterer for contract events
}

// OneStepProofTesterCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofTesterCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTesterTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTesterTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTesterFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofTesterFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTesterSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofTesterSession struct {
	Contract     *OneStepProofTester // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// OneStepProofTesterCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofTesterCallerSession struct {
	Contract *OneStepProofTesterCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// OneStepProofTesterTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTesterTransactorSession struct {
	Contract     *OneStepProofTesterTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// OneStepProofTesterRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofTesterRaw struct {
	Contract *OneStepProofTester // Generic contract binding to access the raw methods on
}

// OneStepProofTesterCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofTesterCallerRaw struct {
	Contract *OneStepProofTesterCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTesterTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTesterTransactorRaw struct {
	Contract *OneStepProofTesterTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProofTester creates a new instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTester(address common.Address, backend bind.ContractBackend) (*OneStepProofTester, error) {
	contract, err := bindOneStepProofTester(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTester{OneStepProofTesterCaller: OneStepProofTesterCaller{contract: contract}, OneStepProofTesterTransactor: OneStepProofTesterTransactor{contract: contract}, OneStepProofTesterFilterer: OneStepProofTesterFilterer{contract: contract}}, nil
}

// NewOneStepProofTesterCaller creates a new read-only instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTesterCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofTesterCaller, error) {
	contract, err := bindOneStepProofTester(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTesterCaller{contract: contract}, nil
}

// NewOneStepProofTesterTransactor creates a new write-only instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTesterTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTesterTransactor, error) {
	contract, err := bindOneStepProofTester(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTesterTransactor{contract: contract}, nil
}

// NewOneStepProofTesterFilterer creates a new log filterer instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTesterFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofTesterFilterer, error) {
	contract, err := bindOneStepProofTester(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTesterFilterer{contract: contract}, nil
}

// bindOneStepProofTester binds a generic wrapper to an already deployed contract.
func bindOneStepProofTester(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofTesterABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofTester *OneStepProofTesterRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProofTester.Contract.OneStepProofTesterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofTester *OneStepProofTesterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.OneStepProofTesterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofTester *OneStepProofTesterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.OneStepProofTesterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofTester *OneStepProofTesterCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProofTester.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofTester *OneStepProofTesterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofTester *OneStepProofTesterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.contract.Transact(opts, method, params...)
}

// ExecuteInboxStep is a free data retrieval call binding the contract method 0x4a95659b.
//
// Solidity: function executeInboxStep(bytes32 firstInbox, bytes32 firstMessage, bytes32 firstLog, bytes proof, uint8 kind, uint256 blockNumber, uint256 timestamp, address sender, uint256 inboxSeqNum, bytes msgData) pure returns(bytes32[5] fields, uint64 gas)
func (_OneStepProofTester *OneStepProofTesterCaller) ExecuteInboxStep(opts *bind.CallOpts, firstInbox [32]byte, firstMessage [32]byte, firstLog [32]byte, proof []byte, kind uint8, blockNumber *big.Int, timestamp *big.Int, sender common.Address, inboxSeqNum *big.Int, msgData []byte) (struct {
	Fields [5][32]byte
	Gas    uint64
}, error) {
	ret := new(struct {
		Fields [5][32]byte
		Gas    uint64
	})
	out := ret
	err := _OneStepProofTester.contract.Call(opts, out, "executeInboxStep", firstInbox, firstMessage, firstLog, proof, kind, blockNumber, timestamp, sender, inboxSeqNum, msgData)
	return *ret, err
}

// ExecuteInboxStep is a free data retrieval call binding the contract method 0x4a95659b.
//
// Solidity: function executeInboxStep(bytes32 firstInbox, bytes32 firstMessage, bytes32 firstLog, bytes proof, uint8 kind, uint256 blockNumber, uint256 timestamp, address sender, uint256 inboxSeqNum, bytes msgData) pure returns(bytes32[5] fields, uint64 gas)
func (_OneStepProofTester *OneStepProofTesterSession) ExecuteInboxStep(firstInbox [32]byte, firstMessage [32]byte, firstLog [32]byte, proof []byte, kind uint8, blockNumber *big.Int, timestamp *big.Int, sender common.Address, inboxSeqNum *big.Int, msgData []byte) (struct {
	Fields [5][32]byte
	Gas    uint64
}, error) {
	return _OneStepProofTester.Contract.ExecuteInboxStep(&_OneStepProofTester.CallOpts, firstInbox, firstMessage, firstLog, proof, kind, blockNumber, timestamp, sender, inboxSeqNum, msgData)
}

// ExecuteInboxStep is a free data retrieval call binding the contract method 0x4a95659b.
//
// Solidity: function executeInboxStep(bytes32 firstInbox, bytes32 firstMessage, bytes32 firstLog, bytes proof, uint8 kind, uint256 blockNumber, uint256 timestamp, address sender, uint256 inboxSeqNum, bytes msgData) pure returns(bytes32[5] fields, uint64 gas)
func (_OneStepProofTester *OneStepProofTesterCallerSession) ExecuteInboxStep(firstInbox [32]byte, firstMessage [32]byte, firstLog [32]byte, proof []byte, kind uint8, blockNumber *big.Int, timestamp *big.Int, sender common.Address, inboxSeqNum *big.Int, msgData []byte) (struct {
	Fields [5][32]byte
	Gas    uint64
}, error) {
	return _OneStepProofTester.Contract.ExecuteInboxStep(&_OneStepProofTester.CallOpts, firstInbox, firstMessage, firstLog, proof, kind, blockNumber, timestamp, sender, inboxSeqNum, msgData)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x385bc114.
//
// Solidity: function executeStep(bytes32 firstInbox, bytes32 firstMessage, bytes32 firstLog, bytes proof) pure returns(bytes32[5] fields, uint64 gas)
func (_OneStepProofTester *OneStepProofTesterCaller) ExecuteStep(opts *bind.CallOpts, firstInbox [32]byte, firstMessage [32]byte, firstLog [32]byte, proof []byte) (struct {
	Fields [5][32]byte
	Gas    uint64
}, error) {
	ret := new(struct {
		Fields [5][32]byte
		Gas    uint64
	})
	out := ret
	err := _OneStepProofTester.contract.Call(opts, out, "executeStep", firstInbox, firstMessage, firstLog, proof)
	return *ret, err
}

// ExecuteStep is a free data retrieval call binding the contract method 0x385bc114.
//
// Solidity: function executeStep(bytes32 firstInbox, bytes32 firstMessage, bytes32 firstLog, bytes proof) pure returns(bytes32[5] fields, uint64 gas)
func (_OneStepProofTester *OneStepProofTesterSession) ExecuteStep(firstInbox [32]byte, firstMessage [32]byte, firstLog [32]byte, proof []byte) (struct {
	Fields [5][32]byte
	Gas    uint64
}, error) {
	return _OneStepProofTester.Contract.ExecuteStep(&_OneStepProofTester.CallOpts, firstInbox, firstMessage, firstLog, proof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x385bc114.
//
// Solidity: function executeStep(bytes32 firstInbox, bytes32 firstMessage, bytes32 firstLog, bytes proof) pure returns(bytes32[5] fields, uint64 gas)
func (_OneStepProofTester *OneStepProofTesterCallerSession) ExecuteStep(firstInbox [32]byte, firstMessage [32]byte, firstLog [32]byte, proof []byte) (struct {
	Fields [5][32]byte
	Gas    uint64
}, error) {
	return _OneStepProofTester.Contract.ExecuteStep(&_OneStepProofTester.CallOpts, firstInbox, firstMessage, firstLog, proof)
}
