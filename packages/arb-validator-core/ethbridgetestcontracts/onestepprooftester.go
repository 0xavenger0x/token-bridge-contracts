// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgetestcontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProofABI is the input ABI used to generate the binding from.
const OneStepProofABI = "[]"

// OneStepProofBin is the compiled bytecode used for deploying new contracts.
var OneStepProofBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723158200b4ff8c1db7b1e15b1cf46a0d2cb956b0eb548fa1c763ca04352d312bc7101bc64736f6c63430005110032"

// DeployOneStepProof deploys a new Ethereum contract, binding an instance of OneStepProof to it.
func DeployOneStepProof(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// OneStepProof is an auto generated Go binding around an Ethereum contract.
type OneStepProof struct {
	OneStepProofCaller     // Read-only binding to the contract
	OneStepProofTransactor // Write-only binding to the contract
	OneStepProofFilterer   // Log filterer for contract events
}

// OneStepProofCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofSession struct {
	Contract     *OneStepProof     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProofCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofCallerSession struct {
	Contract *OneStepProofCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// OneStepProofTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTransactorSession struct {
	Contract     *OneStepProofTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// OneStepProofRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofRaw struct {
	Contract *OneStepProof // Generic contract binding to access the raw methods on
}

// OneStepProofCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofCallerRaw struct {
	Contract *OneStepProofCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTransactorRaw struct {
	Contract *OneStepProofTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof creates a new instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProof(address common.Address, backend bind.ContractBackend) (*OneStepProof, error) {
	contract, err := bindOneStepProof(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// NewOneStepProofCaller creates a new read-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofCaller, error) {
	contract, err := bindOneStepProof(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofCaller{contract: contract}, nil
}

// NewOneStepProofTransactor creates a new write-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTransactor, error) {
	contract, err := bindOneStepProof(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTransactor{contract: contract}, nil
}

// NewOneStepProofFilterer creates a new log filterer instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofFilterer, error) {
	contract, err := bindOneStepProof(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofFilterer{contract: contract}, nil
}

// bindOneStepProof binds a generic wrapper to an already deployed contract.
func bindOneStepProof(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.OneStepProofCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transact(opts, method, params...)
}

// OneStepProofTesterABI is the input ABI used to generate the binding from.
const OneStepProofTesterABI = "[{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beforeInbox\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"beforeInboxValueSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"firstMessage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"firstLog\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"startHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"endHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"logAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"messageAcc\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"didInboxInsn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// OneStepProofTesterFuncSigs maps the 4-byte function signature to its string representation.
var OneStepProofTesterFuncSigs = map[string]string{
	"799b4835": "executeStep(bytes32,uint256,bytes32,bytes32,bytes)",
}

// OneStepProofTesterBin is the compiled bytecode used for deploying new contracts.
var OneStepProofTesterBin = "0x608060405234801561001057600080fd5b50614404806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063799b483514610030575b600080fd5b6100ee600480360360a081101561004657600080fd5b81359160208101359160408201359160608101359181019060a08101608082013564010000000081111561007957600080fd5b82018360208201111561008b57600080fd5b803590602001918460018302840111640100000000831117156100ad57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061012c945050505050565b6040805196875260208701959095528585019390935260608501919091526001600160401b03166080840152151560a0830152519081900360c00190f35b60008060008060008061013d61420f565b6101478c8c6101af565b9050610151614243565b61015d828c8c8c610260565b905061016881610654565b805161017390610961565b6101808260200151610961565b8260a0015183608001518460c00151856060015197509750975097509750975050509550955095509550955095565b6101b761420f565b6040805160a081018252848152815160608101835260008082526020828101829052845182815280820186529394908501939083019161020d565b6101fa61420f565b8152602001906001900390816101f25790505b50905281526040805160008082526020828101909352919092019190610249565b61023661420f565b81526020019060019003908161022e5790505b508152600260208201526040019290925250919050565b610268614243565b60008260008151811061027757fe5b602001015160f81c60f81b60f81c905060008360018151811061029657fe5b602001015160f81c60f81b60f81c905060006002905060608360040160ff166040519080825280602002602001820160405280156102ee57816020015b6102db61420f565b8152602001906001900390816102d35790505b50905060608360040160ff1660405190808252806020026020018201604052801561033357816020015b61032061420f565b8152602001906001900390816103185790505b50905060005b8560ff168110156103715761034e8885610a26565b845185908490811061035c57fe5b60209081029190910101529350600101610339565b5060005b8460ff168110156103ad5761038a8885610a26565b835184908490811061039857fe5b60209081029190910101529350600101610375565b506103b66142bb565b6103c08885610bb8565b809250819550505060008885815181106103d657fe5b602001015160f81c60f81b60f81c905060008986600101815181106103f757fe5b01602001516002969096019560f81c9050610410614243565b60405180610160016040528085815260200161042b86610c58565b81526020018f81526020016000151581526020018e81526020018d815260200160006001600160401b0316815260200160405180604001604052808c60ff16815260200189815250815260200160405180604001604052808b60ff1681526020018881525081526020018460ff16600114151581526020018360ff1681525090508260ff16600014806104c157508260ff166001145b610512576040805162461bcd60e51b815260206004820152601c60248201527f50726f6f662068616420626164206f7065726174696f6e207479706500000000604482015290519081900360640190fd5b61051a61420f565b60ff841661053757815151610530908490610cc1565b90506105b1565b6000875111610582576040805162461bcd60e51b81526020600482015260126024820152716e6f20696d6d6564696174652076616c756560701b604482015290519081900360640190fd5b6105ae838360000151600001518960018e0360ff16815181106105a157fe5b6020026020010151610d23565b90505b6105ba81610da7565b82515260005b848b0360ff168110156105ff576105f78882815181106105dc57fe5b60200260200101518460000151610ec790919063ffffffff16565b6001016105c0565b5060005b8960ff168110156106405761063887828151811061061d57fe5b60200260200101518460000151610ee190919063ffffffff16565b600101610603565b50909e9d5050505050505050505050505050565b60008060006121af61066d85610140015160ff16610efb565b6001600160401b03821660c08a0181905260208a015160a0908101805183900390528a510151949850929650909450925011156106c457602085015160001960a0909101526106bb856116b6565b5050505061095e565b60e08501515184111561074d576106e16106dc61171f565b610da7565b6106f2866020015160200151610da7565b14610744576040805162461bcd60e51b815260206004820152601d60248201527f737461636b206974656d206d697373696e672066726f6d2070726f6f66000000604482015290519081900360640190fd5b6106bb856116b6565b610100850151518311156107c9576107666106dc61171f565b610777866020015160400151610da7565b14610744576040805162461bcd60e51b815260206004820181905260248201527f617578737461636b206974656d206d697373696e672066726f6d2070726f6f66604482015290519081900360640190fd5b60008411806107db5750846101200151155b80156107eb575060e08501515184145b8061081257508461012001518015610801575083155b8015610812575060e0850151516001145b61085a576040805162461bcd60e51b8152602060048201526014602482015273746f6f206d616e7920737461636b206974656d7360601b604482015290519081900360640190fd5b6101008501515183146108b4576040805162461bcd60e51b815260206004820152601760248201527f746f6f206d616e7920617578737461636b206974656d73000000000000000000604482015290519081900360640190fd5b6108c1858263ffffffff16565b60005b60e08601515181101561090b576109038660e001516020015182815181106108e857fe5b60200260200101518760200151610ec790919063ffffffff16565b6001016108c4565b5060005b610100860151518110156109585761095086610100015160200151828151811061093557fe5b60200260200101518760200151610ee190919063ffffffff16565b60010161090f565b50505050505b50565b600060028260e00151141561097857506000610a21565b60018260e00151141561098d57506001610a21565b8151602083015161099d90610da7565b6109aa8460400151610da7565b6109b78560600151610da7565b6109c48660800151610da7565b8660a001518760c00151604051602001808881526020018781526020018681526020018581526020018481526020018381526020018281526020019750505050505050506040516020818303038152906040528051906020012090505b919050565b6000610a3061420f565b83518310610a76576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b600080610a838686611766565b91509150610a8f61178d565b60ff168160ff161415610ac3576000610aa88784611792565b909350905082610ab782611806565b94509450505050610bb1565b610acb6118b8565b60ff168160ff161415610aed57610ae286836118bd565b935093505050610bb1565b610af561195f565b60ff168160ff161415610b0c57610ae28683611964565b610b146119f8565b60ff168160ff1610158015610b355750610b2c6119fd565b60ff168160ff16105b15610b71576000610b446119f8565b820390506060610b55828986611a02565b909450905083610b6482611a9b565b9550955050505050610bb1565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b6000610bc26142bb565b610bca6142bb565b600060e0820181905280610bde8787611792565b9096509150610bed8787611964565b60208501529550610bfe8787611964565b60408501529550610c0f8787610a26565b60608501529550610c208787610a26565b60808501529550610c318787611792565b60a08501529550610c428787611792565b92845260c0840192909252509590945092505050565b610c606142bb565b60405180610100016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e001518152509050919050565b610cc961420f565b6040805160608101825260ff851681526020808201859052825160008082529181018452610d1c93830191610d14565b610d0161420f565b815260200190600190039081610cf95790505b509052611bad565b9392505050565b610d2b61420f565b604080516001808252818301909252606091816020015b610d4a61420f565b815260200190600190039081610d425790505090508281600081518110610d6d57fe5b6020026020010181905250610d9e60405180606001604052808760ff16815260200186815260200183815250611bad565b95945050505050565b6000610db161178d565b60ff16826060015160ff161415610dd4578151610dcd90611c14565b9050610a21565b610ddc6118b8565b60ff16826060015160ff161415610dfa57610dcd8260200151611c38565b610e0261195f565b60ff16826060015160ff161415610e245781516080830151610dcd9190611d35565b610e2c6119f8565b60ff16826060015160ff161415610e6557610e4561420f565b610e528360400151611d86565b9050610e5d81610da7565b915050610a21565b610e6d611ee8565b60ff16826060015160ff161415610e8657508051610a21565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b610ed5826020015182611eed565b82602001819052505050565b610eef826040015182611eed565b82604001819052505050565b600080806121af6001851415610f205750600292506000915060039050611f6b6116af565b6002851415610f3e5750600292506000915060039050611f6b6116af565b6003851415610f5c5750600292506000915060039050611f6b6116af565b6004851415610f7a57506002925060009150600490506121ce6116af565b6005851415610f9857506002925060009150600790506121ce6116af565b6006851415610fb657506002925060009150600490506121ce6116af565b6007851415610fd457506002925060009150600790506121ce6116af565b6008851415610ff2575060039250600091506004905061229e6116af565b6009851415611010575060039250600091506004905061229e6116af565b600a85141561102e5750600292506000915060199050611f6b6116af565b600b85141561104c5750600292506000915060079050611f6b6116af565b601085141561106957506002925060009150829050611f6b6116af565b601185141561108657506002925060009150829050611f6b6116af565b60128514156110a357506002925060009150829050611f6b6116af565b60138514156110c057506002925060009150829050611f6b6116af565b60148514156110dd575060029250600091508290506123936116af565b60158514156110fa575060019250600091508290506123f56116af565b601685141561111757506002925060009150829050611f6b6116af565b601785141561113457506002925060009150829050611f6b6116af565b601885141561115157506002925060009150829050611f6b6116af565b601985141561116e575060019250600091508290506124646116af565b601a85141561118c5750600292506000915060049050611f6b6116af565b601b8514156111aa5750600292506000915060049050611f6b6116af565b601c8514156111c85750600292506000915060049050611f6b6116af565b601d8514156111e65750600292506000915060049050611f6b6116af565b602085141561120457506001925060009150600790506124a76116af565b602185141561122257506001925060009150600390506124d26116af565b60228514156112405750600292506000915060089050611f6b6116af565b602385141561125f5750600192506000915061025890506124f56116af565b603085141561127c575060019250600091508290506126dd6116af565b6031851415611299575060009250829150600190506126ea6116af565b60328514156112b6575060009250829150600190506127076116af565b60338514156112d457506001925060009150600290506127246116af565b60348514156112f2575060019250600091506004905061273d6116af565b6035851415611310575060029250600091506004905061277d6116af565b603685141561132d575060009250829150600290506127ef6116af565b603785141561134a5750600092508291506001905061282c6116af565b60388514156113675750600192506000915082905061284f6116af565b6039851415611384575060009250600191508190506128716116af565b603a8514156113a1575060009250829150600290506128826116af565b603b8514156113be5750600092508291506001905061095e6116af565b603c8514156113db575060009250829150600190506128b06116af565b603d8514156113f8575060019250600091508290506128c66116af565b6040851415611415575060019250600091508290506129096116af565b6041851415611433575060029250600091506001905061294b6116af565b604285141561145157506003925060009150600190506129b96116af565b604385141561146f5750600292506000915060019050612a536116af565b604485141561148d5750600392506000915060019050612a976116af565b60508514156114aa57506002925060009150829050612b076116af565b60518514156114c85750600392506000915060289050612baa6116af565b60528514156114e65750600192506000915060029050612c5e6116af565b605385141561150357506001925082915060039050612ca26116af565b60548514156115215750600292506001915060299050612d2a6116af565b606085141561153e5750600092508291506064905061095e6116af565b606185141561155c5750600192506000915060649050612df16116af565b607085141561157a5750600192506000915060649050612e376116af565b607285141561159757506000925082915060289050612eb66116af565b60738514156115b457506000925082915060059050612f516116af565b60748514156115d1575060009250829150600a9050612f5a6116af565b60758514156115ee57506001925060009150819050612f676116af565b607685141561160b57506000925082915060019050612fa16116af565b607785141561162857506000925082915060199050612fb56116af565b60788514156116465750600292506000915060199050612fff6116af565b6079851415611664575060039250600091506019905061306f6116af565b607b851415611681575060009250829150600a90506130f76116af565b60808514156116a057506004925060009150614e2090506131396116af565b5060009250829150819050612f515b9193509193565b60408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051908201209082015160c0015114156117125761170d81602001516132c4565b61095e565b6020015160c08101519052565b61172761420f565b604080516000808252602082019092526117619161175b565b61174861420f565b8152602001906001900390816117405790505b50611a9b565b905090565b6000808260010184848151811061177957fe5b016020015190925060f81c90509250929050565b600090565b600080828451101580156117aa575060208385510310155b6117e7576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b602083016117fb858563ffffffff6132ce16565b915091509250929050565b61180e61420f565b6040805160a0810182528381528151606081018352600080825260208281018290528451828152808201865293949085019390830191611864565b61185161420f565b8152602001906001900390816118495790505b509052815260408051600080825260208281019093529190920191906118a0565b61188d61420f565b8152602001906001900390816118855790505b50815260006020820152600160409091015292915050565b600190565b60006118c761420f565b826000806118d361420f565b60006118df8986611766565b90955093506118ee8986611766565b9095509250600160ff8516141561190f576119098986610a26565b90955091505b61191989866132ea565b9095509050600160ff851614156119445784611936848385610d23565b965096505050505050610bb1565b8461194f8483610cc1565b9650965050505050509250929050565b600290565b600061196e61420f565b82845110158015611983575060408385510310155b6119bf576040805162461bcd60e51b81526020600482015260086024820152671d1bc81cda1bdc9d60c21b604482015290519081900360640190fd5b6000806119cc86866132ea565b90945091506119db8685611792565b9094509050836119eb83836101af565b9350935050509250929050565b600390565b600c90565b60006060600083905060608660ff16604051908082528060200260200182016040528015611a4a57816020015b611a3761420f565b815260200190600190039081611a2f5790505b50905060005b8760ff168160ff161015611a8e57611a688784610a26565b8351849060ff8516908110611a7957fe5b60209081029190910101529250600101611a50565b5090969095509350505050565b611aa361420f565b611aad8251613301565b611afe576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b8351811015611b3557838181518110611b1857fe5b602002602001015160800151820191508080600101915050611b03565b506040805160a0810182526000808252825160608101845281815260208181018390528451838152808201865293949085019391929083019190611b8f565b611b7c61420f565b815260200190600190039081611b745790505b50905281526020810194909452600360408501526060909301525090565b611bb561420f565b6040805160a0810182526000808252602080830186905283518281529081018452919283019190611bfc565b611be961420f565b815260200190600190039081611be15790505b50815260016020820181905260409091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b6000600282604001515110611c4957fe5b604082015151611cae57611c5b6118b8565b8251602080850151604080516001600160f81b031960f896871b8116828601529490951b909316602185015260228085019190915282518085039091018152604290930190915281519101209050610a21565b611cb66118b8565b8260000151611cdc8460400151600081518110611ccf57fe5b6020026020010151610da7565b8460200151604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b6000611d3f6119f8565b8383604051602001808460ff1660ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b611d8e61420f565b600882511115611ddc576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b60608251604051908082528060200260200182016040528015611e09578160200160208202803883390190505b508051909150600160005b82811015611e6c57611e2b868281518110611ccf57fe5b848281518110611e3757fe5b602002602001018181525050858181518110611e4f57fe5b602002602001015160800151820191508080600101915050611e14565b506000835184604051602001808360ff1660ff1660f81b8152600101828051906020019060200280838360005b83811015611eb1578181015183820152602001611e99565b5050505090500192505050604051602081830303815290604052805190602001209050611ede81836101af565b9695505050505050565b606490565b611ef561420f565b6040805160028082526060828101909352816020015b611f1361420f565b815260200190600190039081611f0b5790505090508281600081518110611f3657fe5b60200260200101819052508381600181518110611f4f57fe5b6020026020010181905250611f6381611d86565b949350505050565b611f7361420f565b611f808260e00151613308565b9050611f8a61420f565b611f978360e00151613308565b9050611fa28261334a565b1580611fb45750611fb28161334a565b155b15611fc957611fc283613355565b505061095e565b8151815161014085015160009060ff1660011415611fea57508181016121b1565b61014086015160ff166002141561200457508181026121b1565b61014086015160ff166003141561201e57508082036121b1565b61014086015160ff16600a1415612038575080820a6121b1565b61014086015160ff16600b1415612052575080820b6121b1565b61014086015160ff166010141561206c57508082106121b1565b61014086015160ff166011141561208657508082116121b1565b61014086015160ff16601214156120a057508082126121b1565b61014086015160ff16601314156120ba57508082136121b1565b61014086015160ff16601614156120d457508181166121b1565b61014086015160ff16601714156120ee57508181176121b1565b61014086015160ff166018141561210857508181186121b1565b61014086015160ff16601a1415612122575080821a6121b1565b61014086015160ff16601b141561213c575080821b6121b1565b61014086015160ff16601c1415612156575080821c6121b1565b61014086015160ff16601d1415612170575080821d6121b1565b61014086015160ff16602214156121af5750604080516020808201859052818301849052825180830384018152606090920190925280519101206121b1565bfe5b6109586121bd82611806565b60e08801519063ffffffff61337316565b6121d661420f565b6121e38260e00151613308565b90506121ed61420f565b6121fa8360e00151613308565b90506122058261334a565b158061221757506122158161334a565b155b8061222157508051155b1561222f57611fc283613355565b8151815161014085015160009060ff166004141561225057508082046121b1565b61014086015160ff166005141561226a57508082056121b1565b61014086015160ff166006141561228457508082066121b1565b61014086015160ff16600714156121af57508082076121b1565b6122a661420f565b6122b38260e00151613308565b90506122bd61420f565b6122ca8360e00151613308565b90506122d461420f565b6122e18460e00151613308565b90506122ec8361334a565b15806122fe57506122fc8261334a565b155b8061230f575061230d8161334a565b155b8061231957508051155b1561232f5761232784613355565b50505061095e565b82518251825161014087015160009060ff16600814156123545781838508905061236c565b61014088015160ff16600914156121af578183850990505b61238961237882611806565b60e08a01519063ffffffff61337316565b5050505050505050565b61239b61420f565b6123a88260e00151613308565b90506123b261420f565b6123bf8360e00151613308565b90506123f06123df6123d083610da7565b6123d985610da7565b1461339d565b60e08501519063ffffffff61337316565b505050565b6123fd61420f565b61240a8260e00151613308565b90506124158161334a565b61243c576124376124266000611806565b60e08401519063ffffffff61337316565b612460565b8051801561245d61244c82611806565b60e08601519063ffffffff61337316565b50505b5050565b61246c61420f565b6124798260e00151613308565b90506124848161334a565b6124975761249182613355565b5061095e565b8051801961245d61244c82611806565b6124af61420f565b6124bc8260e00151613308565b90506124606124266124cd83610da7565b611806565b6124da61420f565b6124e78260e00151613308565b9050612460612426826133bf565b6124fd61420f565b61250a8260e00151613308565b905061251581613424565b15806125275750806040015151600714155b156125355761249182613355565b604081015160005b60078110156125775761256282828151811061255557fe5b602002602001015161334a565b61256f5761232784613355565b60010161253d565b50612580614319565b60005b60198110156125e457604060038216028360048304815181106125a257fe5b602002602001015160000151901c6001600160401b031682600583816125c457fe5b046005840660050201601981106125d757fe5b6020020152600101612583565b506125ee81613431565b604080516007808252610100820190925291925060609190816020015b61261361420f565b81526020019060019003908161260b57905050905060005b600781101561265d5761263e6000611806565b82828151811061264a57fe5b602090810291909101015260010161262b565b5060005b60198110156126b85760406003821602836005830460058406600502016019811061268857fe5b6020020151901b82600483048151811061269e57fe5b602090810291909101015180519091179052600101612661565b506126d66126c582611a9b565b60e08701519063ffffffff61337316565b5050505050565b6124608160e00151613308565b60208101516080015160e082015161095e9163ffffffff61337316565b60208101516060015160e082015161095e9163ffffffff61337316565b6127318160e00151613308565b60209091015160600152565b61274561420f565b6127528260e00151613308565b905061275d81614022565b61276a5761249182613355565b61277381610da7565b6020830151525050565b61278561420f565b6127928260e00151613308565b905061279c61420f565b6127a98360e00151613308565b90506127b482614022565b15806127c657506127c48161334a565b155b156127d457611fc283613355565b8051156123f0576127e482610da7565b602084015152505050565b60e08101515160009015801561281e575061280b6106dc61171f565b61281c836020015160200151610da7565b145b90506124606124268261339d565b80515161095e9061283e90600161402f565b60e08301519063ffffffff61337316565b61095e61285f8260e00151613308565b6101008301519063ffffffff61337316565b61095e61283e826101000151613308565b6101008101515160009015801561281e575061289f6106dc61171f565b61281c836020015160400151610da7565b61095e61283e826020015160c00151600161402f565b6128ce61420f565b6128db8260e00151613308565b90506128e681614022565b6128f35761249182613355565b6128fc81610da7565b602083015160c001525050565b61291161420f565b61291e8260e00151613308565b60e0830151909150612936908263ffffffff61337316565b60e0820151612460908263ffffffff61337316565b61295361420f565b6129608260e00151613308565b905061296a61420f565b6129778360e00151613308565b60e084015190915061298f908263ffffffff61337316565b60e08301516129a4908363ffffffff61337316565b60e08301516123f0908263ffffffff61337316565b6129c161420f565b6129ce8260e00151613308565b90506129d861420f565b6129e58360e00151613308565b90506129ef61420f565b6129fc8460e00151613308565b60e0850151909150612a14908263ffffffff61337316565b60e0840151612a29908363ffffffff61337316565b60e0840151612a3e908463ffffffff61337316565b60e084015161245d908263ffffffff61337316565b612a5b61420f565b612a688260e00151613308565b9050612a7261420f565b612a7f8360e00151613308565b60e08401519091506129a4908363ffffffff61337316565b612a9f61420f565b612aac8260e00151613308565b9050612ab661420f565b612ac38360e00151613308565b9050612acd61420f565b612ada8460e00151613308565b60e0850151909150612af2908463ffffffff61337316565b60e0840151612a3e908363ffffffff61337316565b612b0f61420f565b612b1c8260e00151613308565b9050612b2661420f565b612b338360e00151613308565b9050612b3e8261334a565b1580612b505750612b4e81613424565b155b80612b6a5750612b5f816140e0565b60ff16826000015110155b15612b7857611fc283613355565b6123f08160400151836000015181518110612b8f57fe5b60200260200101518460e0015161337390919063ffffffff16565b612bb261420f565b612bbf8260e00151613308565b9050612bc961420f565b612bd68360e00151613308565b9050612be061420f565b612bed8460e00151613308565b9050612bf88361334a565b1580612c0a5750612c0882613424565b155b80612c245750612c19826140e0565b60ff16836000015110155b15612c325761232784613355565b604082015183518151839183918110612c4757fe5b60200260200101819052506126d66126c582611a9b565b612c6661420f565b612c738260e00151613308565b9050612c7e81613424565b612c8b5761249182613355565b612460612426612c9a836140e0565b60ff16611806565b612caa61420f565b612cb78260e00151613308565b9050612cc161420f565b612ccf836101000151613308565b9050612cda8261334a565b1580612cec5750612cea81613424565b155b80612d065750612cfb816140e0565b60ff16826000015110155b15612d1457611fc283613355565b610100830151612b78908263ffffffff61337316565b612d3261420f565b612d3f8260e00151613308565b9050612d4961420f565b612d568360e00151613308565b9050612d6061420f565b612d6e846101000151613308565b9050612d7981613424565b1580612d8b5750612d898361334a565b155b80612da55750612d9a816140e0565b60ff16836000015110155b15612db35761232784613355565b604081015183518151849183918110612dc857fe5b60200260200101819052506126d6612ddf82611a9b565b6101008701519063ffffffff61337316565b8060a00151612e066106dc8360e00151613308565b604080516020808201949094528082019290925280518083038201815260609092019052805191012060a090910152565b612e3f61420f565b612e4c8260e00151613308565b905061271081608001511180612e685750612e6681614107565b155b15612e765761249182613355565b8160800151612e8482610da7565b604080516020808201949094528082019290925280518083038201815260609092019052805191012060808301525050565b612ec16106dc61171f565b612ece8260400151610da7565b1415612f21576040805162461bcd60e51b815260206004820152601d60248201527f496e626f7820696e737472756374696f6e2077617320626c6f636b6564000000604482015290519081900360640190fd5b604081015160e0820151612f3a9163ffffffff61337316565b612f4261171f565b60408201526001606090910152565b61095e81613355565b61095e8160200151614205565b612f6f61420f565b612f7c8260e00151613308565b9050612f878161334a565b612f945761249182613355565b51602082015160a0015250565b61095e61283e826020015160a00151611806565b60408051600160f81b602080830191909152600060218301819052602280840191909152835180840390910181526042909201909252805191012061095e9061283e90600161402f565b61300761420f565b6130148260e00151613308565b905061301e61420f565b61302b8360e00151613308565b90506130368261334a565b1580613048575061304681614022565b155b1561305657611fc283613355565b6123f06123df836000015161306a84610da7565b610cc1565b61307761420f565b6130848260e00151613308565b905061308e61420f565b61309b8360e00151613308565b90506130a561420f565b6130b28460e00151613308565b90506130bd8361334a565b15806130cf57506130cd81614022565b155b156130dd5761232784613355565b61245d61244c84600001516130f184610da7565b85610d23565b6040805160008082526020820190925260609161312a565b61311761420f565b81526020019060019003908161310f5790505b50905061246061242682611a9b565b61314161420f565b61314e8260e00151613308565b905061315861420f565b6131658360e00151613308565b905061316f61420f565b61317c8460e00151613308565b905061318661420f565b6131938560e00151613308565b905061319e8461334a565b15806131b057506131ae8361334a565b155b806131c157506131bf8261334a565b155b806131d257506131d08161334a565b155b156131e0576106bb85613355565b835183518351158015906131f657508351600114155b15613224576132196132086000611806565b60e08901519063ffffffff61337316565b50505050505061095e565b83518351604080516000808252602080830180855285905260ff601b9096019586168385015260608301889052608083018790529251909260019260a080820193601f1981019281900390910190855afa158015613286573d6000803e3d6000fd5b5050506020604051035190506132b86132a7826001600160a01b0316611806565b60e08c01519063ffffffff61337316565b50505050505050505050565b600160e090910152565b600081602001835110156132e157600080fd5b50016020015190565b600080602083016117fb858563ffffffff6132ce16565b6008101590565b61331061420f565b61331861420f565b826020015160018460000151038151811061332f57fe5b60209081029190910101518351600019018452915050919050565b6060015160ff161590565b61335e816116b6565b60e08101516000908190526101009091015152565b80826020015183600001518151811061338857fe5b60209081029190910101525080516001019052565b6133a561420f565b81156133b557610dcd6001611806565b610dcd6000611806565b6133c761420f565b816060015160ff166002141561340e5760405162461bcd60e51b81526004018080602001828103825260218152602001806143af6021913960400191505060405180910390fd5b61341e826060015160ff16611806565b92915050565b6060015160ff1660031490565b613439614319565b613441614338565b613449614338565b613451614319565b613459614356565b60405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060008090505b6018811015614017576080878101516060808a01516040808c01516020808e01518e511890911890921890931889526101208b01516101008c015160e08d015160c08e015160a08f0151181818189089018190526101c08b01516101a08c01516101808d01516101608e01516101408f0151181818189289019283526102608b01516102408c01516102208d01516102008e01516101e08f015118181818918901919091526103008a01516102e08b01516102c08c01516102a08d01516102808e0151181818189288018390526001600160401b0360028202166001603f1b91829004179092188652510485600260200201516002026001600160401b03161785600060200201511884600160200201526001603f1b8560036020020151816136a557fe5b0485600360200201516002026001600160401b03161785600160200201511884600260200201526001603f1b8560046020020151816136e057fe5b0485600460200201516002026001600160401b0316178560026005811061370357fe5b602002015118606085015284516001603f1b9086516060808901519390920460029091026001600160401b031617909118608086810191825286518a5118808b5287516020808d018051909218825289516040808f0180519092189091528a518e8801805190911890528a51948e0180519095189094528901805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291880180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292870180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a01805190911890529084525163100000009060208901516001600160401b03641000000000909102169190041761010084015260408701516001603d1b9060408901516001600160401b03600890910216919004176101608401526060870151628000009060608901516001600160401b036502000000000090910216919004176102608401526080870151654000000000009060808901516001600160401b036204000090910216919004176102c084015260a08701516001603f1b900487600560200201516002026001600160401b0316178360026019811061396d57fe5b602002015260c0870151621000008104651000000000009091026001600160401b039081169190911760a085015260e0880151664000000000000081046104009091028216176101a08501526101008801516208000081046520000000000090910282161761020085015261012088015160048082029092166001603e1b909104176103008501526101408801516101408901516001600160401b036001603e1b90910216919004176080840152610160870151670400000000000000906101608901516001600160401b036040909102169190041760e084015261018087015162200000906101808901516001600160401b036508000000000090910216919004176101408401526101a08701516602000000000000906101a08901516001600160401b0361800090910216919004176102408401526101c08701516008906101c08901516001600160401b036001603d1b90910216919004176102a08401526101e0870151641000000000906101e08901516001600160401b03631000000090910216919004176020840152610200808801516102008901516001600160401b0366800000000000009091021691900417610120840152610220870151648000000000906102208901516001600160401b036302000000909102169190041761018084015261024087015165080000000000906102408901516001600160401b036220000090910216919004176101e0840152610260870151610100906102608901516001600160401b03600160381b90910216919004176102e0840152610280870151642000000000906102808901516001600160401b036308000000909102169190041760608401526102a087015165100000000000906102a08901516001600160401b0362100000909102169190041760c08401526102c08701516302000000906102c08901516001600160401b0364800000000090910216919004176101c08401526102e0870151600160381b906102e08901516001600160401b036101009091021691900417610220840152610300870151660400000000000090048760186020020151614000026001600160401b031617836014602002015282600a602002015183600560200201511916836000602002015118876000602002015282600b602002015183600660200201511916836001602002015118876001602002015282600c602002015183600760200201511916836002602002015118876002602002015282600d602002015183600860200201511916836003602002015118876003602002015282600e602002015183600960200201511916836004602002015118876004602002015282600f602002015183600a602002015119168360056020020151188760056020020152826010602002015183600b602002015119168360066020020151188760066020020152826011602002015183600c602002015119168360076020020151188760076020020152826012602002015183600d602002015119168360086020020151188760086020020152826013602002015183600e602002015119168360096020020151188760096020020152826014602002015183600f6020020151191683600a60200201511887600a602002015282601560200201518360106020020151191683600b60200201511887600b602002015282601660200201518360116020020151191683600c60200201511887600c602002015282601760200201518360126020020151191683600d60200201511887600d602002015282601860200201518360136020020151191683600e60200201511887600e602002015282600060200201518360146020020151191683600f60200201511887600ffe5b60200201518751188752600101613580565b509495945050505050565b6060015160ff1660011490565b61403761420f565b6040805160a081018252848152815160608101835260008082526020828101829052845182815280820186529394908501939083019161408d565b61407a61420f565b8152602001906001900390816140725790505b509052815260408051600080825260208281019093529190920191906140c9565b6140b661420f565b8152602001906001900390816140ae5790505b508152606460208201526040019290925250919050565b606081015160009060ff16600314156140ff5750604081015151610a21565b506001610a21565b606081015160009060ff1661411e57506001610a21565b606082015160ff166001141561413657506000610a21565b606082015160ff166002141561418a576040805162461bcd60e51b81526020600482015260146024820152736d75737420686176652066756c6c2076616c756560601b604482015290519081900360640190fd5b606082015160ff16600314156141ed5760408201515160005b818110156141e2576141cb846040015182815181106141be57fe5b6020026020010151614107565b6141da57600092505050610a21565b6001016141a3565b506001915050610a21565b606082015160ff1660641415610e8657506000610a21565b600260e090910152565b6040518060a0016040528060008152602001614229614375565b815260606020820181905260006040830181905291015290565b6040518061016001604052806142576142bb565b81526020016142646142bb565b815260200161427161420f565b81526000602082018190526040820181905260608201819052608082015260a00161429a614394565b81526020016142a7614394565b815260006020820181905260409091015290565b60408051610100810190915260008152602081016142d761420f565b81526020016142e461420f565b81526020016142f161420f565b81526020016142fe61420f565b81526000602082018190526040820181905260609091015290565b6040518061032001604052806019906020820280388339509192915050565b6040518060a001604052806005906020820280388339509192915050565b6040518061030001604052806018906020820280388339509192915050565b6040805160608082018352600080835260208301529181019190915290565b60405180604001604052806000815260200160608152509056fe56616c7565206d757374206861766520612076616c6964207479706520636f6465a265627a7a723158202d10e93a0088b2be90d70eda1ce69b09eaf19767e5eaa144010f96307c77cf1764736f6c63430005110032"

// DeployOneStepProofTester deploys a new Ethereum contract, binding an instance of OneStepProofTester to it.
func DeployOneStepProofTester(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProofTester, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofTesterABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofTesterBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProofTester{OneStepProofTesterCaller: OneStepProofTesterCaller{contract: contract}, OneStepProofTesterTransactor: OneStepProofTesterTransactor{contract: contract}, OneStepProofTesterFilterer: OneStepProofTesterFilterer{contract: contract}}, nil
}

// OneStepProofTester is an auto generated Go binding around an Ethereum contract.
type OneStepProofTester struct {
	OneStepProofTesterCaller     // Read-only binding to the contract
	OneStepProofTesterTransactor // Write-only binding to the contract
	OneStepProofTesterFilterer   // Log filterer for contract events
}

// OneStepProofTesterCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofTesterCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTesterTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTesterTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTesterFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofTesterFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTesterSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofTesterSession struct {
	Contract     *OneStepProofTester // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// OneStepProofTesterCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofTesterCallerSession struct {
	Contract *OneStepProofTesterCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// OneStepProofTesterTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTesterTransactorSession struct {
	Contract     *OneStepProofTesterTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// OneStepProofTesterRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofTesterRaw struct {
	Contract *OneStepProofTester // Generic contract binding to access the raw methods on
}

// OneStepProofTesterCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofTesterCallerRaw struct {
	Contract *OneStepProofTesterCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTesterTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTesterTransactorRaw struct {
	Contract *OneStepProofTesterTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProofTester creates a new instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTester(address common.Address, backend bind.ContractBackend) (*OneStepProofTester, error) {
	contract, err := bindOneStepProofTester(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTester{OneStepProofTesterCaller: OneStepProofTesterCaller{contract: contract}, OneStepProofTesterTransactor: OneStepProofTesterTransactor{contract: contract}, OneStepProofTesterFilterer: OneStepProofTesterFilterer{contract: contract}}, nil
}

// NewOneStepProofTesterCaller creates a new read-only instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTesterCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofTesterCaller, error) {
	contract, err := bindOneStepProofTester(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTesterCaller{contract: contract}, nil
}

// NewOneStepProofTesterTransactor creates a new write-only instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTesterTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTesterTransactor, error) {
	contract, err := bindOneStepProofTester(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTesterTransactor{contract: contract}, nil
}

// NewOneStepProofTesterFilterer creates a new log filterer instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTesterFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofTesterFilterer, error) {
	contract, err := bindOneStepProofTester(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTesterFilterer{contract: contract}, nil
}

// bindOneStepProofTester binds a generic wrapper to an already deployed contract.
func bindOneStepProofTester(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofTesterABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofTester *OneStepProofTesterRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProofTester.Contract.OneStepProofTesterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofTester *OneStepProofTesterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.OneStepProofTesterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofTester *OneStepProofTesterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.OneStepProofTesterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofTester *OneStepProofTesterCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProofTester.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofTester *OneStepProofTesterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofTester *OneStepProofTesterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.contract.Transact(opts, method, params...)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x799b4835.
//
// Solidity: function executeStep(bytes32 beforeInbox, uint256 beforeInboxValueSize, bytes32 firstMessage, bytes32 firstLog, bytes proof) pure returns(bytes32 startHash, bytes32 endHash, bytes32 logAcc, bytes32 messageAcc, uint64 gas, bool didInboxInsn)
func (_OneStepProofTester *OneStepProofTesterCaller) ExecuteStep(opts *bind.CallOpts, beforeInbox [32]byte, beforeInboxValueSize *big.Int, firstMessage [32]byte, firstLog [32]byte, proof []byte) (struct {
	StartHash    [32]byte
	EndHash      [32]byte
	LogAcc       [32]byte
	MessageAcc   [32]byte
	Gas          uint64
	DidInboxInsn bool
}, error) {
	ret := new(struct {
		StartHash    [32]byte
		EndHash      [32]byte
		LogAcc       [32]byte
		MessageAcc   [32]byte
		Gas          uint64
		DidInboxInsn bool
	})
	out := ret
	err := _OneStepProofTester.contract.Call(opts, out, "executeStep", beforeInbox, beforeInboxValueSize, firstMessage, firstLog, proof)
	return *ret, err
}

// ExecuteStep is a free data retrieval call binding the contract method 0x799b4835.
//
// Solidity: function executeStep(bytes32 beforeInbox, uint256 beforeInboxValueSize, bytes32 firstMessage, bytes32 firstLog, bytes proof) pure returns(bytes32 startHash, bytes32 endHash, bytes32 logAcc, bytes32 messageAcc, uint64 gas, bool didInboxInsn)
func (_OneStepProofTester *OneStepProofTesterSession) ExecuteStep(beforeInbox [32]byte, beforeInboxValueSize *big.Int, firstMessage [32]byte, firstLog [32]byte, proof []byte) (struct {
	StartHash    [32]byte
	EndHash      [32]byte
	LogAcc       [32]byte
	MessageAcc   [32]byte
	Gas          uint64
	DidInboxInsn bool
}, error) {
	return _OneStepProofTester.Contract.ExecuteStep(&_OneStepProofTester.CallOpts, beforeInbox, beforeInboxValueSize, firstMessage, firstLog, proof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x799b4835.
//
// Solidity: function executeStep(bytes32 beforeInbox, uint256 beforeInboxValueSize, bytes32 firstMessage, bytes32 firstLog, bytes proof) pure returns(bytes32 startHash, bytes32 endHash, bytes32 logAcc, bytes32 messageAcc, uint64 gas, bool didInboxInsn)
func (_OneStepProofTester *OneStepProofTesterCallerSession) ExecuteStep(beforeInbox [32]byte, beforeInboxValueSize *big.Int, firstMessage [32]byte, firstLog [32]byte, proof []byte) (struct {
	StartHash    [32]byte
	EndHash      [32]byte
	LogAcc       [32]byte
	MessageAcc   [32]byte
	Gas          uint64
	DidInboxInsn bool
}, error) {
	return _OneStepProofTester.Contract.ExecuteStep(&_OneStepProofTester.CallOpts, beforeInbox, beforeInboxValueSize, firstMessage, firstLog, proof)
}
