// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgetestcontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProofABI is the input ABI used to generate the binding from.
const OneStepProofABI = "[]"

// OneStepProofBin is the compiled bytecode used for deploying new contracts.
var OneStepProofBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820f34211ef31111093b03829cbe6f11459e764eb2c9086d80a50e39322fb39e6f164736f6c63430005110032"

// DeployOneStepProof deploys a new Ethereum contract, binding an instance of OneStepProof to it.
func DeployOneStepProof(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// OneStepProof is an auto generated Go binding around an Ethereum contract.
type OneStepProof struct {
	OneStepProofCaller     // Read-only binding to the contract
	OneStepProofTransactor // Write-only binding to the contract
	OneStepProofFilterer   // Log filterer for contract events
}

// OneStepProofCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofSession struct {
	Contract     *OneStepProof     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProofCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofCallerSession struct {
	Contract *OneStepProofCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// OneStepProofTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTransactorSession struct {
	Contract     *OneStepProofTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// OneStepProofRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofRaw struct {
	Contract *OneStepProof // Generic contract binding to access the raw methods on
}

// OneStepProofCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofCallerRaw struct {
	Contract *OneStepProofCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTransactorRaw struct {
	Contract *OneStepProofTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof creates a new instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProof(address common.Address, backend bind.ContractBackend) (*OneStepProof, error) {
	contract, err := bindOneStepProof(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// NewOneStepProofCaller creates a new read-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofCaller, error) {
	contract, err := bindOneStepProof(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofCaller{contract: contract}, nil
}

// NewOneStepProofTransactor creates a new write-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTransactor, error) {
	contract, err := bindOneStepProof(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTransactor{contract: contract}, nil
}

// NewOneStepProofFilterer creates a new log filterer instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofFilterer, error) {
	contract, err := bindOneStepProof(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofFilterer{contract: contract}, nil
}

// bindOneStepProof binds a generic wrapper to an already deployed contract.
func bindOneStepProof(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.OneStepProofCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transact(opts, method, params...)
}

// OneStepProofTesterABI is the input ABI used to generate the binding from.
const OneStepProofTesterABI = "[{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beforeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"beforeInbox\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"beforeInboxValueSize\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"didInboxInsn\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"firstMessage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"lastMessage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"firstLog\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"lastLog\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"validateProof\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// OneStepProofTesterFuncSigs maps the 4-byte function signature to its string representation.
var OneStepProofTesterFuncSigs = map[string]string{
	"3c41485d": "validateProof(bytes32,bytes32,uint256,bool,bytes32,bytes32,bytes32,bytes32,uint64,bytes)",
}

// OneStepProofTesterBin is the compiled bytecode used for deploying new contracts.
var OneStepProofTesterBin = "0x608060405234801561001057600080fd5b50614c34806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80633c41485d14610030575b600080fd5b61011c600480360361014081101561004757600080fd5b813591602081013591604082013591606081013515159160808201359160a08101359160c08201359160e0810135916001600160401b0361010083013516919081019061014081016101208201356401000000008111156100a757600080fd5b8201836020820111156100b957600080fd5b803590602001918460018302840111640100000000831117156100db57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061012e945050505050565b60408051918252519081900360200190f35b600061014a6101458c8c8c8c8c8c8c8c8c8c610159565b6101bd565b9b9a5050505050505050505050565b6101616149dc565b61014a6040518061012001604052808d81526020016101808d8d610282565b81526020018a15158152602001898152602001888152602001878152602001868152602001856001600160401b0316815260200184815250610335565b600060028260e0015114156101d45750600061027d565b60018260e0015114156101e95750600161027d565b815160208301516101f9906114ae565b61020684604001516114ae565b61021385606001516114ae565b61022086608001516114ae565b8660a001518760c00151604051602001808881526020018781526020018681526020018581526020018481526020018381526020018281526020019750505050505050506040516020818303038152906040528051906020012090505b919050565b61028a614a3a565b6040805160a08101825284815281516060810183526000808252602082810182905284518281528082018652939490850193908301916102e0565b6102cd614a3a565b8152602001906001900390816102c55790505b5090528152604080516000808252602082810190935291909201919061031c565b610309614a3a565b8152602001906001900390816103015790505b5081526002602082015260400183905290505b92915050565b61033d6149dc565b6000806000606061034c6149dc565b6103546149dc565b61035d886115ce565b60e08e0151959b50939950929750909550935091506001906000906001600160401b031687146103cb576040805162461bcd60e51b815260206004820152601460248201527324b73b30b634b21033b0b99034b710383937b7b360611b604482015290519081900360640190fd5b896040015180156103df575060ff88166072145b806103fb575089604001511580156103fb575060ff8816607214155b61044c576040805162461bcd60e51b815260206004820152601a60248201527f496e76616c696420646964496e626f78496e736e20636c61696d000000000000604482015290519081900360640190fd5b60a0808401805189900390528401518711156104735760001960a084015260009150611367565b60ff8816600114156104b9576104b2838660008151811061049057fe5b6020026020010151876001815181106104a557fe5b6020026020010151611829565b9150611367565b60ff8816600214156104f8576104b283866000815181106104d657fe5b6020026020010151876001815181106104eb57fe5b6020026020010151611879565b60ff881660031415610537576104b2838660008151811061051557fe5b60200260200101518760018151811061052a57fe5b60200260200101516118ba565b60ff881660041415610576576104b2838660008151811061055457fe5b60200260200101518760018151811061056957fe5b60200260200101516118fb565b60ff8816600514156105b5576104b2838660008151811061059357fe5b6020026020010151876001815181106105a857fe5b602002602001015161194c565b60ff8816600614156105f4576104b283866000815181106105d257fe5b6020026020010151876001815181106105e757fe5b602002602001015161199d565b60ff881660071415610633576104b2838660008151811061061157fe5b60200260200101518760018151811061062657fe5b60200260200101516119ee565b60ff881660081415610687576104b2838660008151811061065057fe5b60200260200101518760018151811061066557fe5b60200260200101518860028151811061067a57fe5b6020026020010151611a3f565b60ff8816600914156106db576104b283866000815181106106a457fe5b6020026020010151876001815181106106b957fe5b6020026020010151886002815181106106ce57fe5b6020026020010151611aa9565b60ff8816600a141561071a576104b283866000815181106106f857fe5b60200260200101518760018151811061070d57fe5b6020026020010151611b02565b60ff881660101415610759576104b2838660008151811061073757fe5b60200260200101518760018151811061074c57fe5b6020026020010151611b43565b60ff881660111415610798576104b2838660008151811061077657fe5b60200260200101518760018151811061078b57fe5b6020026020010151611b84565b60ff8816601214156107d7576104b283866000815181106107b557fe5b6020026020010151876001815181106107ca57fe5b6020026020010151611bc5565b60ff881660131415610816576104b283866000815181106107f457fe5b60200260200101518760018151811061080957fe5b6020026020010151611c06565b60ff881660141415610855576104b2838660008151811061083357fe5b60200260200101518760018151811061084857fe5b6020026020010151611c47565b60ff88166015141561087f576104b2838660008151811061087257fe5b6020026020010151611c7e565b60ff8816601614156108be576104b2838660008151811061089c57fe5b6020026020010151876001815181106108b157fe5b6020026020010151611cc3565b60ff8816601714156108fd576104b283866000815181106108db57fe5b6020026020010151876001815181106108f057fe5b6020026020010151611d04565b60ff88166018141561093c576104b2838660008151811061091a57fe5b60200260200101518760018151811061092f57fe5b6020026020010151611d45565b60ff881660191415610966576104b2838660008151811061095957fe5b6020026020010151611d86565b60ff8816601a14156109a5576104b2838660008151811061098357fe5b60200260200101518760018151811061099857fe5b6020026020010151611dbc565b60ff8816601b14156109e4576104b283866000815181106109c257fe5b6020026020010151876001815181106109d757fe5b6020026020010151611dfd565b60ff881660201415610a0e576104b28386600081518110610a0157fe5b6020026020010151611e3e565b60ff881660211415610a38576104b28386600081518110610a2b57fe5b6020026020010151611e59565b60ff881660221415610a77576104b28386600081518110610a5557fe5b602002602001015187600181518110610a6a57fe5b6020026020010151611e74565b60ff881660231415610aa1576104b28386600081518110610a9457fe5b6020026020010151611eda565b60ff881660301415610acb576104b28386600081518110610abe57fe5b60200260200101516120c6565b60ff881660311415610ae0576104b2836120ce565b60ff881660321415610af5576104b2836120ef565b60ff881660331415610b1f576104b28386600081518110610b1257fe5b6020026020010151612108565b60ff881660341415610b49576104b28386600081518110610b3c57fe5b6020026020010151612114565b60ff881660351415610b88576104b28386600081518110610b6657fe5b602002602001015187600181518110610b7b57fe5b602002602001015161213f565b60ff881660361415610b9d576104b283612187565b60ff881660371415610bb7576104b28385600001516121b4565b60ff881660381415610be1576104b28386600081518110610bd457fe5b60200260200101516121c4565b60ff881660391415610c2f57610bf5614a3a565b610c048b6101000151886121d6565b9097509050610c19858263ffffffff61236816565b610c29848263ffffffff61238216565b50611367565b60ff8816603a1415610c44576104b28361239c565b60ff8816603b1415610c595760019150611367565b60ff8816603c1415610c6e576104b2836123bc565b60ff8816603d1415610c98576104b28386600081518110610c8b57fe5b60200260200101516123d0565b60ff881660401415610cc2576104b28386600081518110610cb557fe5b60200260200101516123fe565b60ff881660411415610d01576104b28386600081518110610cdf57fe5b602002602001015187600181518110610cf457fe5b6020026020010151612420565b60ff881660421415610d55576104b28386600081518110610d1e57fe5b602002602001015187600181518110610d3357fe5b602002602001015188600281518110610d4857fe5b6020026020010151612452565b60ff881660431415610d94576104b28386600081518110610d7257fe5b602002602001015187600181518110610d8757fe5b6020026020010151612494565b60ff881660441415610de8576104b28386600081518110610db157fe5b602002602001015187600181518110610dc657fe5b602002602001015188600281518110610ddb57fe5b60200260200101516124a6565b60ff881660501415610e27576104b28386600081518110610e0557fe5b602002602001015187600181518110610e1a57fe5b60200260200101516124c8565b60ff881660511415610e7b576104b28386600081518110610e4457fe5b602002602001015187600181518110610e5957fe5b602002602001015188600281518110610e6e57fe5b602002602001015161253e565b60ff881660521415610ea5576104b28386600081518110610e9857fe5b60200260200101516125b2565b60ff881660531415610f0457610eb9614a3a565b610ec88b6101000151886121d6565b9097509050610edd858263ffffffff61236816565b610efc8487600081518110610eee57fe5b6020026020010151836125e5565b925050611367565b60ff881660541415610f7057610f18614a3a565b610f278b6101000151886121d6565b9097509050610f3c858263ffffffff61236816565b610efc8487600081518110610f4d57fe5b602002602001015188600181518110610f6257fe5b60200260200101518461263d565b60ff881660601415610f85576104b2836126be565b60ff88166061141561108257610faf8386600081518110610fa257fe5b60200260200101516126c4565b90925090508115611079578960c001518a60a00151826040516020018083815260200182815260200192505050604051602081830303815290604052805190602001201461102e5760405162461bcd60e51b8152600401808060200182810382526025815260200180614bb46025913960400191505060405180910390fd5b89608001518a60600151146110745760405162461bcd60e51b8152600401808060200182810382526027815260200180614bd96027913960400191505060405180910390fd5b61107d565b5060005b611367565b60ff8816607014156111b9576110ac838660008151811061109f57fe5b60200260200101516126dd565b9092509050811561107957806111075789608001518a60600151146111025760405162461bcd60e51b8152600401808060200182810382526038815260200180614b7c6038913960400191505060405180910390fd5b611074565b60808a01516060808c015160408051602080820193909352808201869052815180820383018152930190528151910120146111735760405162461bcd60e51b8152600401808060200182810382526029815260200180614b0c6029913960400191505060405180910390fd5b8960c001518a60a00151146110745760405162461bcd60e51b8152600401808060200182810382526026815260200180614b356026913960400191505060405180910390fd5b60ff8816607214156111d3576104b2838b6020015161271c565b60ff8816607314156111e85760009150611367565b60ff8816607414156111fd5761107d83612785565b60ff881660751415611227576104b2838660008151811061121a57fe5b602002602001015161278f565b60ff88166076141561123c576104b2836127b4565b60ff881660771415611251576104b2836127cd565b60ff881660781415611290576104b2838660008151811061126e57fe5b60200260200101518760018151811061128357fe5b6020026020010151612816565b60ff8816607914156112e4576104b283866000815181106112ad57fe5b6020026020010151876001815181106112c257fe5b6020026020010151886002815181106112d757fe5b602002602001015161285b565b60ff8816607b14156112f9576104b2836128ae565b60ff881660801415611362576104b2838660008151811061131657fe5b60200260200101518760018151811061132b57fe5b60200260200101518860028151811061134057fe5b60200260200101518960038151811061135557fe5b60200260200101516128f1565b600091505b806113f85789608001518a60600151146113b25760405162461bcd60e51b8152600401808060200182810382526027815260200180614bd96027913960400191505060405180910390fd5b8960c001518a60a00151146113f85760405162461bcd60e51b8152600401808060200182810382526026815260200180614b356026913960400191505060405180910390fd5b816114595760408051600160f81b602080830191909152600060218301819052602280840191909152835180840390910181526042909201909252805191012060c084015114156114515761144c83612a10565b611459565b60c083015183525b611462846101bd565b8a51146114a05760405162461bcd60e51b8152600401808060200182810382526022815260200180614aea6022913960400191505060405180910390fd5b509098975050505050505050565b60006114b8612a1a565b60ff16826060015160ff1614156114db5781516114d490612a1f565b905061027d565b6114e3612a43565b60ff16826060015160ff161415611501576114d48260200151612a48565b611509612b45565b60ff16826060015160ff16141561152b57815160808301516114d49190612b4a565b611533612b9b565b60ff16826060015160ff16141561156c5761154c614a3a565b6115598360400151612ba0565b9050611564816114ae565b91505061027d565b611574612d02565b60ff16826060015160ff16141561158d5750805161027d565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b60008060606115db6149dc565b6115e36149dc565b60006115ee83612d07565b6115fd87610100015182612d11565b9350905061160a83612db1565b91506000876101000151828151811061161f57fe5b602001015160f81c60f81b60f81c9050876101000151826001018151811061164357fe5b016020015160f81c9650600061165888612e1a565b60408051838152602080850282010190915290985090915081801561169757816020015b611684614a3a565b81526020019060019003908161167c5790505b5095506002830192508160ff16600014806116b557508160ff166001145b611706576040805162461bcd60e51b815260206004820152601c60248201527f50726f6f662068616420626164206f7065726174696f6e207479706500000000604482015290519081900360640190fd5b60ff821661172b5761172461171f89876000015161338c565b6114ae565b8552611791565b611733614a3a565b6117428a6101000151856121d6565b9094509050811561176b57808760008151811061175b57fe5b602002602001018190525061177b565b61177b858263ffffffff61238216565b61178d61171f8a8860000151846133e7565b8652505b60ff82165b818110156117d0576117ad8a6101000151856121d6565b88518990849081106117bb57fe5b60209081029190910101529350600101611796565b86511561181d575060005b8260ff1687510381101561181d57611815878260018a510303815181106117fe57fe5b60200260200101518761238290919063ffffffff16565b6001016117db565b50505091939550919395565b600061183483613462565b1580611846575061184482613462565b155b1561185357506000611872565b8251825180820161186a878263ffffffff61346d16565b600193505050505b9392505050565b600061188483613462565b1580611896575061189482613462565b155b156118a357506000611872565b8251825180820261186a878263ffffffff61346d16565b60006118c583613462565b15806118d757506118d582613462565b155b156118e457506000611872565b8251825180820361186a878263ffffffff61346d16565b600061190683613462565b1580611918575061191682613462565b155b1561192557506000611872565b825182518061193957600092505050611872565b80820461186a878263ffffffff61346d16565b600061195783613462565b1580611969575061196782613462565b155b1561197657506000611872565b825182518061198a57600092505050611872565b80820561186a878263ffffffff61346d16565b60006119a883613462565b15806119ba57506119b882613462565b155b156119c757506000611872565b82518251806119db57600092505050611872565b80820661186a878263ffffffff61346d16565b60006119f983613462565b1580611a0b5750611a0982613462565b155b15611a1857506000611872565b8251825180611a2c57600092505050611872565b80820761186a878263ffffffff61346d16565b6000611a4a84613462565b1580611a5c5750611a5a83613462565b155b15611a6957506000611aa1565b83518351835180611a805760009350505050611aa1565b6000818385089050611a98898263ffffffff61346d16565b60019450505050505b949350505050565b6000611ab484613462565b1580611ac65750611ac483613462565b155b15611ad357506000611aa1565b83518351835180611aea5760009350505050611aa1565b6000818385099050611a98898263ffffffff61346d16565b6000611b0d83613462565b1580611b1f5750611b1d82613462565b155b15611b2c57506000611872565b8251825180820a61186a878263ffffffff61346d16565b6000611b4e83613462565b1580611b605750611b5e82613462565b155b15611b6d57506000611872565b8251825180821061186a878263ffffffff61346d16565b6000611b8f83613462565b1580611ba15750611b9f82613462565b155b15611bae57506000611872565b8251825180821161186a878263ffffffff61346d16565b6000611bd083613462565b1580611be25750611be082613462565b155b15611bef57506000611872565b8251825180821261186a878263ffffffff61346d16565b6000611c1183613462565b1580611c235750611c2182613462565b155b15611c3057506000611872565b8251825180821361186a878263ffffffff61346d16565b6000611c74611c67611c58846114ae565b611c61866114ae565b14613483565b859063ffffffff61238216565b5060019392505050565b6000611c8982613462565b611ca357611c9e83600063ffffffff61346d16565b611cba565b81518015611cb7858263ffffffff61346d16565b50505b50600192915050565b6000611cce83613462565b1580611ce05750611cde82613462565b155b15611ced57506000611872565b8251825180821661186a878263ffffffff61346d16565b6000611d0f83613462565b1580611d215750611d1f82613462565b155b15611d2e57506000611872565b8251825180821761186a878263ffffffff61346d16565b6000611d5083613462565b1580611d625750611d6082613462565b155b15611d6f57506000611872565b8251825180821861186a878263ffffffff61346d16565b6000611d9182613462565b611d9d5750600061032f565b81518019611db1858263ffffffff61346d16565b506001949350505050565b6000611dc783613462565b1580611dd95750611dd782613462565b155b15611de657506000611872565b8251825181811a61186a878263ffffffff61346d16565b6000611e0883613462565b1580611e1a5750611e1882613462565b155b15611e2757506000611872565b8251825181810b61186a878263ffffffff61346d16565b6000611cba611e4c836114ae565b849063ffffffff61346d16565b6000611cba611e67836134a5565b849063ffffffff61238216565b6000611e7f83613462565b1580611e915750611e8f82613462565b155b15611e9e57506000611872565b825182516040805160208082018590528183018490528251808303840181526060909201909252805191012061186a878263ffffffff61346d16565b6000611ee582613504565b611ef15750600061032f565b60408201518051600714611f0957600091505061032f565b60005b6007811015611f4857611f31828281518110611f2457fe5b6020026020010151613462565b611f405760009250505061032f565b600101611f0c565b50611f51614a6e565b60005b6019811015611fbd57826007820481518110611f6c57fe5b6020026020010151600001516001600160401b0316828260198110611f8d57fe5b60200201526040836007830481518110611fa357fe5b6020908102919091010151805190911b9052600101611f54565b50611fc781613511565b604080516007808252610100820190925291925060609190816020015b611fec614a3a565b815260200190600190039081611fe457905050905060005b6007811015612036576120176000614273565b82828151811061202357fe5b6020908102919091010152600101612004565b5060005b60198110156120a05782816019811061204f57fe5b602002015182600783048151811061206357fe5b602090810291909101015180519091179052604082600783048151811061208657fe5b6020908102919091010151805190911c905260010161203a565b506120ba6120ad82614325565b879063ffffffff61238216565b50600195945050505050565b600192915050565b60006120e782608001518361238290919063ffffffff16565b506001919050565b60006120e782606001518361238290919063ffffffff16565b60609190910152600190565b600061211f82614437565b61212b5750600061032f565b612134826114ae565b835250600192915050565b600061214a83614437565b61215657506000611872565b61215f82613462565b61216b57506000611872565b815115611c745761217b836114ae565b84525060019392505050565b60006120e76121a761219a61171f614444565b611c6185602001516114ae565b839063ffffffff61238216565b6000611cba611e6783600161448b565b6000611cba838363ffffffff61236816565b60006121e0614a3a565b83518310612226576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b600080612233868661453c565b9150915061223f612a1a565b60ff168160ff1614156122735760006122588784614563565b90935090508261226782614273565b94509450505050612361565b61227b612a43565b60ff168160ff16141561229d5761229286836145cc565b935093505050612361565b6122a5612b45565b60ff168160ff1614156122bc57612292868361466e565b6122c4612b9b565b60ff168160ff16101580156122e557506122dc614702565b60ff168160ff16105b156123215760006122f4612b9b565b820390506060612305828986614707565b90945090508361231482614325565b9550955050505050612361565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b6123768260400151826147a0565b82604001819052505050565b6123908260200151826147a0565b82602001819052505050565b60006120e76121a76123af61171f614444565b611c6185604001516114ae565b60006120e76121a78360c00151600161448b565b60006123db82614437565b6123e75750600061032f565b6123f0826114ae565b60c084015250600192915050565b6000612410838363ffffffff61238216565b611cba838363ffffffff61238216565b6000612432848363ffffffff61238216565b612442848463ffffffff61238216565b611c74848363ffffffff61238216565b6000612464858363ffffffff61238216565b612474858463ffffffff61238216565b612484858563ffffffff61238216565b611db1858363ffffffff61238216565b6000612442848463ffffffff61238216565b60006124b8858563ffffffff61238216565b612484858463ffffffff61238216565b60006124d383613462565b15806124e557506124e382613504565b155b156124f257506000611872565b6124fb82614816565b60ff1683600001511061251057506000611872565b611c74826040015184600001518151811061252757fe5b60200260200101518561238290919063ffffffff16565b600061254983613504565b158061255b575061255984613462565b155b1561256857506000611aa1565b61257183614816565b60ff1684600001511061258657506000611aa1565b60408301518451815184918391811061259b57fe5b60200260200101819052506120ba6120ad82614325565b60006125bd82613504565b6125c95750600061032f565b611cba6125d583614816565b849060ff1663ffffffff61346d16565b60006125f083613462565b1580612602575061260082613504565b155b1561260f57506000611872565b61261882614816565b60ff1683600001511061262d57506000611872565b612510848363ffffffff61236816565b600061264882613504565b158061265a575061265884613462565b155b1561266757506000611aa1565b61267082614816565b60ff1684600001511061268557506000611aa1565b60408201518451815185918391811061269a57fe5b60200260200101819052506120ba6126b182614325565b879063ffffffff61236816565b50600190565b60008060016126d2846114ae565b915091509250929050565b600080612710836080015111156126f957506000905080612361565b6127028361483d565b61271157506000905080612361565b60016126d2846114ae565b600061272961171f614444565b612732836114ae565b1415612410576040805162461bcd60e51b815260206004820152601d60248201527f496e626f7820696e737472756374696f6e2077617320626c6f636b6564000000604482015290519081900360640190fd5b600260e090910152565b600061279a82613462565b6127a65750600061032f565b505160a09190910152600190565b60006120e78260a001518361346d90919063ffffffff16565b60408051600160f81b602080830191909152600060218301819052602280840182905284518085039091018152604290930190935281519101206120e7906121a790600161448b565b600061282183613462565b61282d57506000611872565b61283682614437565b61284257506000611872565b611c74611c678460000151612856856114ae565b61338c565b600061286684613462565b61287257506000611aa1565b61287b82614437565b61288757506000611aa1565b611db16128a1856000015161289b856114ae565b866133e7565b869063ffffffff61238216565b60408051600080825260208201909252606090826128e2565b6128cf614a3a565b8152602001906001900390816128c75790505b509050611cba611e6782614325565b60006128fc85613462565b158061290e575061290c84613462565b155b8061291f575061291d83613462565b155b80612930575061292e82613462565b155b1561293d57506000612a07565b8451845184511580159061295357508451600114155b156129745761296988600063ffffffff61346d16565b600192505050612a07565b84518451604080516000808252602080830180855285905260ff601b9096019586168385015260608301889052608083018790529251909260019260a080820193601f1981019281900390910190855afa1580156129d6573d6000803e3d6000fd5b5050604051601f19015191506129fd90508b6001600160a01b03831663ffffffff61346d16565b6001955050505050505b95945050505050565b600160e090910152565b600090565b60408051602080820193909352815180820384018152908201909152805191012090565b600190565b6000600282604001515110612a5957fe5b604082015151612abe57612a6b612a43565b8251602080850151604080516001600160f81b031960f896871b8116828601529490951b90931660218501526022808501919091528251808503909101815260429093019091528151910120905061027d565b612ac6612a43565b8260000151612aec8460400151600081518110612adf57fe5b60200260200101516114ae565b8460200151604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b600290565b6000612b54612b9b565b8383604051602001808460ff1660ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b600390565b612ba8614a3a565b600882511115612bf6576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b60608251604051908082528060200260200182016040528015612c23578160200160208202803883390190505b508051909150600160005b82811015612c8657612c45868281518110612adf57fe5b848281518110612c5157fe5b602002602001018181525050858181518110612c6957fe5b602002602001015160800151820191508080600101915050612c2e565b506000835184604051602001808360ff1660ff1660f81b8152600101828051906020019060200280838360005b83811015612ccb578181015183820152602001612cb3565b5050505090500192505050604051602081830303815290604052805190602001209050612cf88183610282565b9695505050505050565b606490565b600060e090910152565b6000612d1b6149dc565b612d236149dc565b600060e0820181905280612d378787614563565b9096509150612d46878761466e565b60208501529550612d57878761466e565b60408501529550612d6887876121d6565b60608501529550612d7987876121d6565b60808501529550612d8a8787614563565b60a08501529550612d9b8787614563565b92845260c0840192909252509590945092505050565b612db96149dc565b60405180610100016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e001518152509050919050565b6000806001831415612e325750600290506003613387565b6002831415612e475750600290506003613387565b6003831415612e5c5750600290506003613387565b6004831415612e715750600290506004613387565b6005831415612e865750600290506007613387565b6006831415612e9b5750600290506004613387565b6007831415612eb05750600290506007613387565b6008831415612ec55750600390506004613387565b6009831415612eda5750600390506004613387565b600a831415612eef5750600290506019613387565b6010831415612f0357506002905080613387565b6011831415612f1757506002905080613387565b6012831415612f2b57506002905080613387565b6013831415612f3f57506002905080613387565b6014831415612f5357506002905080613387565b6015831415612f6757506001905080613387565b6016831415612f7b57506002905080613387565b6017831415612f8f57506002905080613387565b6018831415612fa357506002905080613387565b6019831415612fb757506001905080613387565b601a831415612fcc5750600290506004613387565b601b831415612fe15750600290506007613387565b6020831415612ff65750600190506007613387565b602183141561300b5750600190506003613387565b60228314156130205750600290506008613387565b60238314156130355750600190506008613387565b603083141561304957506001905080613387565b603183141561305e5750600090506001613387565b60328314156130735750600090506001613387565b60338314156130885750600190506002613387565b603483141561309d5750600190506004613387565b60358314156130b25750600290506004613387565b60368314156130c75750600090506002613387565b60378314156130dc5750600090506001613387565b60388314156130f057506001905080613387565b60398314156131055750600090506001613387565b603a83141561311a5750600090506002613387565b603b83141561312f5750600090506001613387565b603c8314156131445750600090506001613387565b603d83141561315857506001905080613387565b604083141561316c57506001905080613387565b60418314156131815750600290506001613387565b60428314156131965750600390506001613387565b60438314156131ab5750600290506001613387565b60448314156131c05750600390506001613387565b60508314156131d457506002905080613387565b60518314156131e95750600390506028613387565b60528314156131fe5750600190506002613387565b60538314156132135750600190506003613387565b60548314156132285750600290506029613387565b606083141561323d5750600090506064613387565b60618314156132525750600190506064613387565b60708314156132675750600190506064613387565b607283141561327c5750600090506028613387565b60738314156132915750600090506005613387565b60748314156132a6575060009050600a613387565b60758314156132bb5750600190506000613387565b60768314156132d05750600090506001613387565b60778314156132e55750600090506019613387565b60788314156132fa5750600290506019613387565b607983141561330f5750600390506019613387565b607b831415613324575060009050600a613387565b608083141561333a575060049050614e20613387565b6040805162461bcd60e51b815260206004820152601860248201527f496e76616c6964206f70636f64653a206f70496e666f28290000000000000000604482015290519081900360640190fd5b915091565b613394614a3a565b6040805160608101825260ff851681526020808201859052825160008082529181018452611872938301916133df565b6133cc614a3a565b8152602001906001900390816133c45790505b50905261493b565b6133ef614a3a565b604080516001808252818301909252606091816020015b61340e614a3a565b815260200190600190039081613406579050509050828160008151811061343157fe5b6020026020010181905250612a0760405180606001604052808760ff1681526020018681526020018381525061493b565b6060015160ff161590565b612390826020015161347e83614273565b6147a0565b61348b614a3a565b811561349b576114d46001614273565b6114d46000614273565b6134ad614a3a565b816060015160ff16600214156134f45760405162461bcd60e51b8152600401808060200182810382526021815260200180614b5b6021913960400191505060405180910390fd5b61032f826060015160ff16614273565b6060015160ff1660031490565b613519614a6e565b613521614a8d565b613529614a8d565b600080613534614a6e565b61353c614aab565b60405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060008090505b601881101561426657886004602002015189600360200201518a600260200201518b600160200201518c60006020020151181818188760006020020152886009602002015189600860200201518a600760200201518b600660200201518c6005602002015118181818876001602002015288600e602002015189600d60200201518a600c60200201518b600b60200201518c600a6020020151181818188760026020020152886013602002015189601260200201518a601160200201518b601060200201518c600f6020020151181818188760036020020152886018602002015189601760200201518a601660200201518b601560200201518c601460200201511818181887600460200201526001603f1b87600160200201518161378457fe5b0487600160200201516002026001600160401b03161787600460200201511886600060200201526001603f1b8760026020020151816137bf57fe5b0487600260200201516002026001600160401b03161787600060200201511886600160200201526001603f1b8760036020020151816137fa57fe5b0487600360200201516002026001600160401b03161787600160200201511886600260200201526001603f1b87600460200201518161383557fe5b0487600460200201516002026001600160401b0316178760026005811061385857fe5b602002015118606087015286516001603f1b900487600060200201516002026001600160401ba60200201511889600a6020020152856002602002015189600b60200201511889600b6020020152856002602002015189600c60200201511889600c6020020152856002602002015189600d60200201511889600d6020020152856002602002015189600e60200201511889600e6020020152856003602002015189600f60200201511889600fb2757fe5b60208b01519190046410000000009091026001600160401b039081169190911761010085015260408a01516001603d1b8104600890910282161761016085015260608a01516280000081046502000000000090910282161761026085015260808a0151654000000000008104620400009091028216176102c085015260a08a015160028082029092166001603f1b90910417908490602002015260c0890151621000008104651000000000009091026001600160401b039081169190911760a085015260e08a0151664000000000000081046104009091028216176101a08501526101008a0151620800008104652000000000009091028216176102008501526101208a015160048082029092166001603e1b909104176103008501526101408a01516101408b01516001600160401b036001603e1b90910216919004176080840152610160890151670400000000000000906101608b01516001600160401b036040909102169190041760e084015261018089015162200000906101808b01516001600160401b036508000000000090910216919004176101408401526101a08901516602000000000000906101a08b01516001600160401b0361800090910216919004176102408401526101c08901516008906101c08b01516001600160401b036001603d1b90910216919004176102a08401526101e0890151641000000000906101e08b01516001600160401b03631000000090910216919004176020840152610200808a01516102008b01516001600160401b0366800000000000009091021691900417610120840152610220890151648000000000906102208b01516001600160401b036302000000909102169190041761018084015261024089015165080000000000906102408b01516001600160401b036220000090910216919004176101e0840152610260890151610100906102608b01516001600160401b03600160381b90910216919004176102e0840152610280890151642000000000906102808b01516001600160401b036308000000909102169190041760608401526102a089015165100000000000906102a08b01516001600160401b0362100000909102169190041760c08401526102c08901516302000000906102c08b01516001600160401b0364800000000090910216919004176101c08401526102e0890151600160381b906102e08b01516001600160401b036101009091021691900417610220840152610300890151660400000000000090048960186020020151614000026001600160401b031617836014602002015282600a602002015183600560200201511916836000602002015118896000602002015282600b602002015183600660200201511916836001602002015118896001602002015282600c602002015183600760200201511916836002602002015118896002602002015282600d602002015183600860200201511916836003602002015118896003602002015282600e602002015183600960200201511916836004602002015118896004602002015282600f602002015183600a602002015119168360056020020151188960056020020152826010602002015183600b602002015119168360066020020151188960066020020152826011602002015183600c602002015119168360076020020151188960076020020152826012602002015183600d602002015119168360086020020151188960086020020152826013602002015183600e602002015119168360096020020151188960096020020152826014602002015183600f6020020151191683600a60200201511889600a602002015282601560200201518360106020020151191683600b60200201511889600b602002015282601660200201518360116020020151191683600c60200201511889600c602002015282601760200201518360126020020151191683600d60200201511889600d602002015282601860200201518360136020020151191683600e60200201511889600e602002015282600060200201518360146020020151191683600f60200201511889600ffe5b60200201518951188952600101613663565b5096979650505050505050565b61427b614a3a565b6040805160a08101825283815281516060810183526000808252602082810182905284518281528082018652939490850193908301916142d1565b6142be614a3a565b8152602001906001900390816142b65790505b5090528152604080516000808252602082810190935291909201919061430d565b6142fa614a3a565b8152602001906001900390816142f25790505b50815260006020820152600160409091015292915050565b61432d614a3a565b61433782516149a2565b614388576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b83518110156143bf578381815181106143a257fe5b60200260200101516080015182019150808060010191505061438d565b506040805160a0810182526000808252825160608101845281815260208181018390528451838152808201865293949085019391929083019190614419565b614406614a3a565b8152602001906001900390816143fe5790505b50905281526020810194909452600360408501526060909301525090565b6060015160ff1660011490565b61444c614a3a565b6040805160008082526020820190925261448691614480565b61446d614a3a565b8152602001906001900390816144655790505b50614325565b905090565b614493614a3a565b6040805160a08101825284815281516060810183526000808252602082810182905284518281528082018652939490850193908301916144e9565b6144d6614a3a565b8152602001906001900390816144ce5790505b50905281526040805160008082526020828101909352919092019190614525565b614512614a3a565b81526020019060019003908161450a5790505b508152606460208201526040019290925250919050565b6000808260010184848151811061454f57fe5b016020015190925060f81c90509250929050565b6000808284511015801561457b575060208385510310155b6145b8576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b602083016126d2858563ffffffff6149a916565b60006145d6614a3a565b826000806145e2614a3a565b60006145ee898661453c565b90955093506145fd898661453c565b9095509250600160ff8516141561461e5761461889866121d6565b90955091505b61462889866149c5565b9095509050600160ff8516141561465357846146458483856133e7565b965096505050505050612361565b8461465e848361338c565b9650965050505050509250929050565b6000614678614a3a565b8284511015801561468d575060408385510310155b6146c9576040805162461bcd60e51b81526020600482015260086024820152671d1bc81cda1bdc9d60c21b604482015290519081900360640190fd5b6000806146d686866149c5565b90945091506146e58685614563565b9094509050836146f58383610282565b9350935050509250929050565b600c90565b60006060600083905060608660ff1660405190808252806020026020018201604052801561474f57816020015b61473c614a3a565b8152602001906001900390816147345790505b50905060005b8760ff168160ff1610156147935761476d87846121d6565b8351849060ff851690811061477e57fe5b60209081029190910101529250600101614755565b5090969095509350505050565b6147a8614a3a565b6040805160028082526060828101909352816020015b6147c6614a3a565b8152602001906001900390816147be57905050905082816000815181106147e957fe5b6020026020010181905250838160018151811061480257fe5b6020026020010181905250611aa181612ba0565b606081015160009060ff1660031415614835575060408101515161027d565b50600161027d565b606081015160009060ff166148545750600161027d565b606082015160ff166001141561486c5750600061027d565b606082015160ff16600214156148c0576040805162461bcd60e51b81526020600482015260146024820152736d75737420686176652066756c6c2076616c756560601b604482015290519081900360640190fd5b606082015160ff16600314156149235760408201515160005b8181101561491857614901846040015182815181106148f457fe5b602002602001015161483d565b6149105760009250505061027d565b6001016148d9565b50600191505061027d565b606082015160ff166064141561158d5750600061027d565b614943614a3a565b6040805160a081018252600080825260208083018690528351828152908101845291928301919061498a565b614977614a3a565b81526020019060019003908161496f5790505b50815260016020820181905260409091015292915050565b6008101590565b600081602001835110156149bc57600080fd5b50016020015190565b600080602083016126d2858563ffffffff6149a916565b60408051610100810190915260008152602081016149f8614a3a565b8152602001614a05614a3a565b8152602001614a12614a3a565b8152602001614a1f614a3a565b81526000602082018190526040820181905260609091015290565b6040518060a0016040528060008152602001614a54614aca565b815260606020820181905260006040830181905291015290565b6040518061032001604052806019906020820280388339509192915050565b6040518060a001604052806005906020820280388339509192915050565b6040518061030001604052806018906020820280388339509192915050565b604080516060808201835260008083526020830152918101919091529056fe50726f6f6620686164206e6f6e206d61746368696e6720737461727420737461746573656e74206d65737361676520646f65736e2774206d61746368206f7574707574206d6573736167654c6f67206e6f742063616c6c65642c20627574206d657373616765206973206e6f6e7a65726f56616c7565206d757374206861766520612076616c6964207479706520636f646553656e642076616c756520657863656564732073697a65206c696d69742c206e6f206d6573736167652073686f756c642062652073656e744c6f676765642076616c756520646f65736e2774206d61746368206f7574707574206c6f6753656e64206e6f742063616c6c65642c20627574206d657373616765206973206e6f6e7a65726fa265627a7a7231582042896c85c31d419f7251ac8a2d6bf91b8048be9df53118cb2af0279be5db6b0564736f6c63430005110032"

// DeployOneStepProofTester deploys a new Ethereum contract, binding an instance of OneStepProofTester to it.
func DeployOneStepProofTester(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProofTester, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofTesterABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofTesterBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProofTester{OneStepProofTesterCaller: OneStepProofTesterCaller{contract: contract}, OneStepProofTesterTransactor: OneStepProofTesterTransactor{contract: contract}, OneStepProofTesterFilterer: OneStepProofTesterFilterer{contract: contract}}, nil
}

// OneStepProofTester is an auto generated Go binding around an Ethereum contract.
type OneStepProofTester struct {
	OneStepProofTesterCaller     // Read-only binding to the contract
	OneStepProofTesterTransactor // Write-only binding to the contract
	OneStepProofTesterFilterer   // Log filterer for contract events
}

// OneStepProofTesterCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofTesterCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTesterTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTesterTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTesterFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofTesterFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTesterSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofTesterSession struct {
	Contract     *OneStepProofTester // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// OneStepProofTesterCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofTesterCallerSession struct {
	Contract *OneStepProofTesterCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// OneStepProofTesterTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTesterTransactorSession struct {
	Contract     *OneStepProofTesterTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// OneStepProofTesterRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofTesterRaw struct {
	Contract *OneStepProofTester // Generic contract binding to access the raw methods on
}

// OneStepProofTesterCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofTesterCallerRaw struct {
	Contract *OneStepProofTesterCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTesterTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTesterTransactorRaw struct {
	Contract *OneStepProofTesterTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProofTester creates a new instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTester(address common.Address, backend bind.ContractBackend) (*OneStepProofTester, error) {
	contract, err := bindOneStepProofTester(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTester{OneStepProofTesterCaller: OneStepProofTesterCaller{contract: contract}, OneStepProofTesterTransactor: OneStepProofTesterTransactor{contract: contract}, OneStepProofTesterFilterer: OneStepProofTesterFilterer{contract: contract}}, nil
}

// NewOneStepProofTesterCaller creates a new read-only instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTesterCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofTesterCaller, error) {
	contract, err := bindOneStepProofTester(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTesterCaller{contract: contract}, nil
}

// NewOneStepProofTesterTransactor creates a new write-only instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTesterTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTesterTransactor, error) {
	contract, err := bindOneStepProofTester(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTesterTransactor{contract: contract}, nil
}

// NewOneStepProofTesterFilterer creates a new log filterer instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTesterFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofTesterFilterer, error) {
	contract, err := bindOneStepProofTester(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTesterFilterer{contract: contract}, nil
}

// bindOneStepProofTester binds a generic wrapper to an already deployed contract.
func bindOneStepProofTester(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofTesterABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofTester *OneStepProofTesterRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProofTester.Contract.OneStepProofTesterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofTester *OneStepProofTesterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.OneStepProofTesterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofTester *OneStepProofTesterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.OneStepProofTesterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofTester *OneStepProofTesterCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProofTester.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofTester *OneStepProofTesterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofTester *OneStepProofTesterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.contract.Transact(opts, method, params...)
}

// ValidateProof is a free data retrieval call binding the contract method 0x3c41485d.
//
// Solidity: function validateProof(bytes32 beforeHash, bytes32 beforeInbox, uint256 beforeInboxValueSize, bool didInboxInsn, bytes32 firstMessage, bytes32 lastMessage, bytes32 firstLog, bytes32 lastLog, uint64 gas, bytes proof) pure returns(bytes32)
func (_OneStepProofTester *OneStepProofTesterCaller) ValidateProof(opts *bind.CallOpts, beforeHash [32]byte, beforeInbox [32]byte, beforeInboxValueSize *big.Int, didInboxInsn bool, firstMessage [32]byte, lastMessage [32]byte, firstLog [32]byte, lastLog [32]byte, gas uint64, proof []byte) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _OneStepProofTester.contract.Call(opts, out, "validateProof", beforeHash, beforeInbox, beforeInboxValueSize, didInboxInsn, firstMessage, lastMessage, firstLog, lastLog, gas, proof)
	return *ret0, err
}

// ValidateProof is a free data retrieval call binding the contract method 0x3c41485d.
//
// Solidity: function validateProof(bytes32 beforeHash, bytes32 beforeInbox, uint256 beforeInboxValueSize, bool didInboxInsn, bytes32 firstMessage, bytes32 lastMessage, bytes32 firstLog, bytes32 lastLog, uint64 gas, bytes proof) pure returns(bytes32)
func (_OneStepProofTester *OneStepProofTesterSession) ValidateProof(beforeHash [32]byte, beforeInbox [32]byte, beforeInboxValueSize *big.Int, didInboxInsn bool, firstMessage [32]byte, lastMessage [32]byte, firstLog [32]byte, lastLog [32]byte, gas uint64, proof []byte) ([32]byte, error) {
	return _OneStepProofTester.Contract.ValidateProof(&_OneStepProofTester.CallOpts, beforeHash, beforeInbox, beforeInboxValueSize, didInboxInsn, firstMessage, lastMessage, firstLog, lastLog, gas, proof)
}

// ValidateProof is a free data retrieval call binding the contract method 0x3c41485d.
//
// Solidity: function validateProof(bytes32 beforeHash, bytes32 beforeInbox, uint256 beforeInboxValueSize, bool didInboxInsn, bytes32 firstMessage, bytes32 lastMessage, bytes32 firstLog, bytes32 lastLog, uint64 gas, bytes proof) pure returns(bytes32)
func (_OneStepProofTester *OneStepProofTesterCallerSession) ValidateProof(beforeHash [32]byte, beforeInbox [32]byte, beforeInboxValueSize *big.Int, didInboxInsn bool, firstMessage [32]byte, lastMessage [32]byte, firstLog [32]byte, lastLog [32]byte, gas uint64, proof []byte) ([32]byte, error) {
	return _OneStepProofTester.Contract.ValidateProof(&_OneStepProofTester.CallOpts, beforeHash, beforeInbox, beforeInboxValueSize, didInboxInsn, firstMessage, lastMessage, firstLog, lastLog, gas, proof)
}
