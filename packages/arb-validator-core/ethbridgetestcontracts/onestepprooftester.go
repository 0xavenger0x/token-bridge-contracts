// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgetestcontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProofABI is the input ABI used to generate the binding from.
const OneStepProofABI = "[]"

// OneStepProofBin is the compiled bytecode used for deploying new contracts.
var OneStepProofBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723158204feae112ad4f334fbbb080f576ac61acf707104a3b0c2095467b7f00155ef42a64736f6c63430005110032"

// DeployOneStepProof deploys a new Ethereum contract, binding an instance of OneStepProof to it.
func DeployOneStepProof(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// OneStepProof is an auto generated Go binding around an Ethereum contract.
type OneStepProof struct {
	OneStepProofCaller     // Read-only binding to the contract
	OneStepProofTransactor // Write-only binding to the contract
	OneStepProofFilterer   // Log filterer for contract events
}

// OneStepProofCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofSession struct {
	Contract     *OneStepProof     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProofCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofCallerSession struct {
	Contract *OneStepProofCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// OneStepProofTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTransactorSession struct {
	Contract     *OneStepProofTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// OneStepProofRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofRaw struct {
	Contract *OneStepProof // Generic contract binding to access the raw methods on
}

// OneStepProofCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofCallerRaw struct {
	Contract *OneStepProofCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTransactorRaw struct {
	Contract *OneStepProofTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof creates a new instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProof(address common.Address, backend bind.ContractBackend) (*OneStepProof, error) {
	contract, err := bindOneStepProof(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof{OneStepProofCaller: OneStepProofCaller{contract: contract}, OneStepProofTransactor: OneStepProofTransactor{contract: contract}, OneStepProofFilterer: OneStepProofFilterer{contract: contract}}, nil
}

// NewOneStepProofCaller creates a new read-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofCaller, error) {
	contract, err := bindOneStepProof(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofCaller{contract: contract}, nil
}

// NewOneStepProofTransactor creates a new write-only instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTransactor, error) {
	contract, err := bindOneStepProof(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTransactor{contract: contract}, nil
}

// NewOneStepProofFilterer creates a new log filterer instance of OneStepProof, bound to a specific deployed contract.
func NewOneStepProofFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofFilterer, error) {
	contract, err := bindOneStepProof(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofFilterer{contract: contract}, nil
}

// bindOneStepProof binds a generic wrapper to an already deployed contract.
func bindOneStepProof(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.OneStepProofCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.OneStepProofTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof *OneStepProofCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProof.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof *OneStepProofTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof *OneStepProofTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof.Contract.contract.Transact(opts, method, params...)
}

// OneStepProofTesterABI is the input ABI used to generate the binding from.
const OneStepProofTesterABI = "[{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"inboxHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"firstMessage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"firstLog\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"startHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"endHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"logAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"messageAcc\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"didInboxInsn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// OneStepProofTesterFuncSigs maps the 4-byte function signature to its string representation.
var OneStepProofTesterFuncSigs = map[string]string{
	"385bc114": "executeStep(bytes32,bytes32,bytes32,bytes)",
}

// OneStepProofTesterBin is the compiled bytecode used for deploying new contracts.
var OneStepProofTesterBin = "0x608060405234801561001057600080fd5b5061446a806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063385bc11414610030575b600080fd5b6100e96004803603608081101561004657600080fd5b8135916020810135916040820135919081019060808101606082013564010000000081111561007457600080fd5b82018360208201111561008657600080fd5b803590602001918460018302840111640100000000831117156100a857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610127945050505050565b6040805196875260208701959095528585019390935260608501919091526001600160401b03166080840152151560a0830152519081900360c00190f35b60008060008060008061013861426e565b6101448b8b8b8b610193565b905061014f81610593565b805161015a906108a0565b61016782602001516108a0565b60a0830151608084015160c0850151606090950151939f929e50909c509a509198509650945050505050565b61019b61426e565b6000826000815181106101aa57fe5b602001015160f81c60f81b60f81c90506000836001815181106101c957fe5b602001015160f81c60f81b60f81c905060006002905060608360040160ff1660405190808252806020026020018201604052801561022157816020015b61020e6142ed565b8152602001906001900390816102065790505b50905060608360040160ff1660405190808252806020026020018201604052801561026657816020015b6102536142ed565b81526020019060019003908161024b5790505b50905060005b8560ff168110156102a4576102818885610965565b845185908490811061028f57fe5b6020908102919091010152935060010161026c565b5060005b8460ff168110156102e0576102bd8885610965565b83518490849081106102cb57fe5b602090810291909101015293506001016102a8565b506102e9614321565b6102f38885610af7565b8092508195505050600088858151811061030957fe5b602001015160f81c60f81b60f81c9050600089866001018151811061032a57fe5b01602001516002969096019560f81c905061034361426e565b604051806101a0016040528085815260200161035e86610b97565b81526020018f81526020016000151581526020018e81526020018d815260200160006001600160401b0316815260200160405180604001604052808c60ff16815260200189815250815260200160405180604001604052808b60ff1681526020018881525081526020018460ff16600114151581526020018360ff1681526020018c81526020018881525090508260ff166000148061040057508260ff166001145b610451576040805162461bcd60e51b815260206004820152601c60248201527f50726f6f662068616420626164206f7065726174696f6e207479706500000000604482015290519081900360640190fd5b6104596142ed565b60ff84166104765781515161046f908490610c00565b90506104f0565b60008751116104c1576040805162461bcd60e51b81526020600482015260126024820152716e6f20696d6d6564696174652076616c756560701b604482015290519081900360640190fd5b6104ed838360000151600001518960018e0360ff16815181106104e057fe5b6020026020010151610c62565b90505b6104f981610ce6565b82515260005b848b0360ff1681101561053e5761053688828151811061051b57fe5b60200260200101518460000151610e0690919063ffffffff16565b6001016104ff565b5060005b8960ff1681101561057f5761057787828151811061055c57fe5b60200260200101518460000151610e2090919063ffffffff16565b600101610542565b50909e9d5050505050505050505050505050565b60008060006120ee6105ac85610140015160ff16610e3a565b6001600160401b03821660c08a0181905260208a015160a0908101805183900390528a5101519498509296509094509250111561060357602085015160001960a0909101526105fa856115f5565b5050505061089d565b60e08501515184111561068c5761062061061b61165e565b610ce6565b610631866020015160200151610ce6565b14610683576040805162461bcd60e51b815260206004820152601d60248201527f737461636b206974656d206d697373696e672066726f6d2070726f6f66000000604482015290519081900360640190fd5b6105fa856115f5565b61010085015151831115610708576106a561061b61165e565b6106b6866020015160400151610ce6565b14610683576040805162461bcd60e51b815260206004820181905260248201527f617578737461636b206974656d206d697373696e672066726f6d2070726f6f66604482015290519081900360640190fd5b600084118061071a5750846101200151155b801561072a575060e08501515184145b8061075157508461012001518015610740575083155b8015610751575060e0850151516001145b610799576040805162461bcd60e51b8152602060048201526014602482015273746f6f206d616e7920737461636b206974656d7360601b604482015290519081900360640190fd5b6101008501515183146107f3576040805162461bcd60e51b815260206004820152601760248201527f746f6f206d616e7920617578737461636b206974656d73000000000000000000604482015290519081900360640190fd5b610800858263ffffffff16565b60005b60e08601515181101561084a576108428660e0015160200151828151811061082757fe5b60200260200101518760200151610e0690919063ffffffff16565b600101610803565b5060005b610100860151518110156108975761088f86610100015160200151828151811061087457fe5b60200260200101518760200151610e2090919063ffffffff16565b60010161084e565b50505050505b50565b600060028260e0015114156108b757506000610960565b60018260e0015114156108cc57506001610960565b815160208301516108dc90610ce6565b6108e98460400151610ce6565b6108f68560600151610ce6565b6109038660800151610ce6565b8660a001518760c00151604051602001808881526020018781526020018681526020018581526020018481526020018381526020018281526020019750505050505050506040516020818303038152906040528051906020012090505b919050565b600061096f6142ed565b835183106109b5576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b6000806109c286866116a5565b915091506109ce6116cc565b60ff168160ff161415610a025760006109e787846116d1565b9093509050826109f682611745565b94509450505050610af0565b610a0a6117f7565b60ff168160ff161415610a2c57610a2186836117fc565b935093505050610af0565b610a3461189e565b60ff168160ff161415610a4b57610a2186836118a3565b610a53611937565b60ff168160ff1610158015610a745750610a6b61193c565b60ff168160ff16105b15610ab0576000610a83611937565b820390506060610a94828986611941565b909450905083610aa3826119da565b9550955050505050610af0565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b6000610b01614321565b610b09614321565b600060e0820181905280610b1d87876116d1565b9096509150610b2c87876118a3565b60208501529550610b3d87876118a3565b60408501529550610b4e8787610965565b60608501529550610b5f8787610965565b60808501529550610b7087876116d1565b60a08501529550610b8187876116d1565b92845260c0840192909252509590945092505050565b610b9f614321565b60405180610100016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e001518152509050919050565b610c086142ed565b6040805160608101825260ff851681526020808201859052825160008082529181018452610c5b93830191610c53565b610c406142ed565b815260200190600190039081610c385790505b509052611aec565b9392505050565b610c6a6142ed565b604080516001808252818301909252606091816020015b610c896142ed565b815260200190600190039081610c815790505090508281600081518110610cac57fe5b6020026020010181905250610cdd60405180606001604052808760ff16815260200186815260200183815250611aec565b95945050505050565b6000610cf06116cc565b60ff16826060015160ff161415610d13578151610d0c90611b53565b9050610960565b610d1b6117f7565b60ff16826060015160ff161415610d3957610d0c8260200151611b77565b610d4161189e565b60ff16826060015160ff161415610d635781516080830151610d0c9190611c74565b610d6b611937565b60ff16826060015160ff161415610da457610d846142ed565b610d918360400151611cc5565b9050610d9c81610ce6565b915050610960565b610dac611e27565b60ff16826060015160ff161415610dc557508051610960565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b610e14826020015182611e2c565b82602001819052505050565b610e2e826040015182611e2c565b82604001819052505050565b600080806120ee6001851415610e5f5750600292506000915060039050611eaa6115ee565b6002851415610e7d5750600292506000915060039050611eaa6115ee565b6003851415610e9b5750600292506000915060039050611eaa6115ee565b6004851415610eb9575060029250600091506004905061210d6115ee565b6005851415610ed7575060029250600091506007905061210d6115ee565b6006851415610ef5575060029250600091506004905061210d6115ee565b6007851415610f13575060029250600091506007905061210d6115ee565b6008851415610f3157506003925060009150600490506121dd6115ee565b6009851415610f4f57506003925060009150600490506121dd6115ee565b600a851415610f6d5750600292506000915060199050611eaa6115ee565b600b851415610f8b5750600292506000915060079050611eaa6115ee565b6010851415610fa857506002925060009150829050611eaa6115ee565b6011851415610fc557506002925060009150829050611eaa6115ee565b6012851415610fe257506002925060009150829050611eaa6115ee565b6013851415610fff57506002925060009150829050611eaa6115ee565b601485141561101c575060029250600091508290506122d26115ee565b6015851415611039575060019250600091508290506123346115ee565b601685141561105657506002925060009150829050611eaa6115ee565b601785141561107357506002925060009150829050611eaa6115ee565b601885141561109057506002925060009150829050611eaa6115ee565b60198514156110ad575060019250600091508290506123a36115ee565b601a8514156110cb5750600292506000915060049050611eaa6115ee565b601b8514156110e95750600292506000915060049050611eaa6115ee565b601c8514156111075750600292506000915060049050611eaa6115ee565b601d8514156111255750600292506000915060049050611eaa6115ee565b602085141561114357506001925060009150600790506123e66115ee565b602185141561116157506001925060009150600390506124116115ee565b602285141561117f5750600292506000915060089050611eaa6115ee565b602385141561119e5750600192506000915061025890506124346115ee565b60308514156111bb5750600192506000915082905061261c6115ee565b60318514156111d8575060009250829150600190506126296115ee565b60328514156111f5575060009250829150600190506126466115ee565b603385141561121357506001925060009150600290506126636115ee565b6034851415611231575060019250600091506004905061267c6115ee565b603585141561124f57506002925060009150600490506126bc6115ee565b603685141561126c5750600092508291506002905061272e6115ee565b60378514156112895750600092508291506001905061276b6115ee565b60388514156112a65750600192506000915082905061278e6115ee565b60398514156112c3575060009250600191508190506127b06115ee565b603a8514156112e0575060009250829150600290506127c16115ee565b603b8514156112fd5750600092508291506001905061089d6115ee565b603c85141561131a575060009250829150600190506127ef6115ee565b603d851415611337575060019250600091508290506128056115ee565b6040851415611354575060019250600091508290506128486115ee565b6041851415611372575060029250600091506001905061288a6115ee565b604285141561139057506003925060009150600190506128f86115ee565b60438514156113ae57506002925060009150600190506129926115ee565b60448514156113cc57506003925060009150600190506129d66115ee565b60508514156113e957506002925060009150829050612a466115ee565b60518514156114075750600392506000915060289050612ae96115ee565b60528514156114255750600192506000915060029050612b9d6115ee565b605385141561144257506001925082915060039050612be16115ee565b60548514156114605750600292506001915060299050612c696115ee565b606085141561147d5750600092508291506064905061089d6115ee565b606185141561149b5750600192506000915060649050612d306115ee565b60708514156114b95750600192506000915060649050612d766115ee565b60728514156114d657506000925082915060289050612df56115ee565b60738514156114f357506000925082915060059050612eff6115ee565b6074851415611510575060009250829150600a9050612f086115ee565b607585141561152d57506001925060009150819050612f156115ee565b607685141561154a57506000925082915060019050612f4f6115ee565b607785141561156757506000925082915060199050612f636115ee565b60788514156115855750600292506000915060199050612fad6115ee565b60798514156115a3575060039250600091506019905061301d6115ee565b607b8514156115c0575060009250829150600a90506130a56115ee565b60808514156115df57506004925060009150614e2090506130e76115ee565b5060009250829150819050612eff5b9193509193565b60408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051908201209082015160c0015114156116515761164c8160200151613272565b61089d565b6020015160c08101519052565b6116666142ed565b604080516000808252602082019092526116a09161169a565b6116876142ed565b81526020019060019003908161167f5790505b506119da565b905090565b600080826001018484815181106116b857fe5b016020015190925060f81c90509250929050565b600090565b600080828451101580156116e9575060208385510310155b611726576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b6020830161173a858563ffffffff61327c16565b915091509250929050565b61174d6142ed565b6040805160a08101825283815281516060810183526000808252602082810182905284518281528082018652939490850193908301916117a3565b6117906142ed565b8152602001906001900390816117885790505b509052815260408051600080825260208281019093529190920191906117df565b6117cc6142ed565b8152602001906001900390816117c45790505b50815260006020820152600160409091015292915050565b600190565b60006118066142ed565b826000806118126142ed565b600061181e89866116a5565b909550935061182d89866116a5565b9095509250600160ff8516141561184e576118488986610965565b90955091505b6118588986613298565b9095509050600160ff851614156118835784611875848385610c62565b965096505050505050610af0565b8461188e8483610c00565b9650965050505050509250929050565b600290565b60006118ad6142ed565b828451101580156118c2575060408385510310155b6118fe576040805162461bcd60e51b81526020600482015260086024820152671d1bc81cda1bdc9d60c21b604482015290519081900360640190fd5b60008061190b8686613298565b909450915061191a86856116d1565b90945090508361192a83836132af565b9350935050509250929050565b600390565b600c90565b60006060600083905060608660ff1660405190808252806020026020018201604052801561198957816020015b6119766142ed565b81526020019060019003908161196e5790505b50905060005b8760ff168160ff1610156119cd576119a78784610965565b8351849060ff85169081106119b857fe5b6020908102919091010152925060010161198f565b5090969095509350505050565b6119e26142ed565b6119ec8251613360565b611a3d576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b8351811015611a7457838181518110611a5757fe5b602002602001015160800151820191508080600101915050611a42565b506040805160a0810182526000808252825160608101845281815260208181018390528451838152808201865293949085019391929083019190611ace565b611abb6142ed565b815260200190600190039081611ab35790505b50905281526020810194909452600360408501526060909301525090565b611af46142ed565b6040805160a0810182526000808252602080830186905283518281529081018452919283019190611b3b565b611b286142ed565b815260200190600190039081611b205790505b50815260016020820181905260409091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b6000600282604001515110611b8857fe5b604082015151611bed57611b9a6117f7565b8251602080850151604080516001600160f81b031960f896871b8116828601529490951b909316602185015260228085019190915282518085039091018152604290930190915281519101209050610960565b611bf56117f7565b8260000151611c1b8460400151600081518110611c0e57fe5b6020026020010151610ce6565b8460200151604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b6000611c7e611937565b8383604051602001808460ff1660ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b611ccd6142ed565b600882511115611d1b576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b60608251604051908082528060200260200182016040528015611d48578160200160208202803883390190505b508051909150600160005b82811015611dab57611d6a868281518110611c0e57fe5b848281518110611d7657fe5b602002602001018181525050858181518110611d8e57fe5b602002602001015160800151820191508080600101915050611d53565b506000835184604051602001808360ff1660ff1660f81b8152600101828051906020019060200280838360005b83811015611df0578181015183820152602001611dd8565b5050505090500192505050604051602081830303815290604052805190602001209050611e1d81836132af565b9695505050505050565b606490565b611e346142ed565b6040805160028082526060828101909352816020015b611e526142ed565b815260200190600190039081611e4a5790505090508281600081518110611e7557fe5b60200260200101819052508381600181518110611e8e57fe5b6020026020010181905250611ea281611cc5565b949350505050565b611eb26142ed565b611ebf8260e00151613367565b9050611ec96142ed565b611ed68360e00151613367565b9050611ee1826133a9565b1580611ef35750611ef1816133a9565b155b15611f0857611f01836133b4565b505061089d565b8151815161014085015160009060ff1660011415611f2957508181016120f0565b61014086015160ff1660021415611f4357508181026120f0565b61014086015160ff1660031415611f5d57508082036120f0565b61014086015160ff16600a1415611f77575080820a6120f0565b61014086015160ff16600b1415611f91575080820b6120f0565b61014086015160ff1660101415611fab57508082106120f0565b61014086015160ff1660111415611fc557508082116120f0565b61014086015160ff1660121415611fdf57508082126120f0565b61014086015160ff1660131415611ff957508082136120f0565b61014086015160ff166016141561201357508181166120f0565b61014086015160ff166017141561202d57508181176120f0565b61014086015160ff166018141561204757508181186120f0565b61014086015160ff16601a1415612061575080821a6120f0565b61014086015160ff16601b141561207b575080821b6120f0565b61014086015160ff16601c1415612095575080821c6120f0565b61014086015160ff16601d14156120af575080821d6120f0565b61014086015160ff16602214156120ee5750604080516020808201859052818301849052825180830384018152606090920190925280519101206120f0565bfe5b6108976120fc82611745565b60e08801519063ffffffff6133d216565b6121156142ed565b6121228260e00151613367565b905061212c6142ed565b6121398360e00151613367565b9050612144826133a9565b15806121565750612154816133a9565b155b8061216057508051155b1561216e57611f01836133b4565b8151815161014085015160009060ff166004141561218f57508082046120f0565b61014086015160ff16600514156121a957508082056120f0565b61014086015160ff16600614156121c357508082066120f0565b61014086015160ff16600714156120ee57508082076120f0565b6121e56142ed565b6121f28260e00151613367565b90506121fc6142ed565b6122098360e00151613367565b90506122136142ed565b6122208460e00151613367565b905061222b836133a9565b158061223d575061223b826133a9565b155b8061224e575061224c816133a9565b155b8061225857508051155b1561226e57612266846133b4565b50505061089d565b82518251825161014087015160009060ff1660081415612293578183850890506122ab565b61014088015160ff16600914156120ee578183850990505b6122c86122b782611745565b60e08a01519063ffffffff6133d216565b5050505050505050565b6122da6142ed565b6122e78260e00151613367565b90506122f16142ed565b6122fe8360e00151613367565b905061232f61231e61230f83610ce6565b61231885610ce6565b146133fc565b60e08501519063ffffffff6133d216565b505050565b61233c6142ed565b6123498260e00151613367565b9050612354816133a9565b61237b576123766123656000611745565b60e08401519063ffffffff6133d216565b61239f565b8051801561239c61238b82611745565b60e08601519063ffffffff6133d216565b50505b5050565b6123ab6142ed565b6123b88260e00151613367565b90506123c3816133a9565b6123d6576123d0826133b4565b5061089d565b8051801961239c61238b82611745565b6123ee6142ed565b6123fb8260e00151613367565b905061239f61236561240c83610ce6565b611745565b6124196142ed565b6124268260e00151613367565b905061239f6123658261341e565b61243c6142ed565b6124498260e00151613367565b905061245481613483565b15806124665750806040015151600714155b15612474576123d0826133b4565b604081015160005b60078110156124b6576124a182828151811061249457fe5b60200260200101516133a9565b6124ae57612266846133b4565b60010161247c565b506124bf61437f565b60005b601981101561252357604060038216028360048304815181106124e157fe5b602002602001015160000151901c6001600160401b0316826005838161250357fe5b0460058406600502016019811061251657fe5b60200201526001016124c2565b5061252d81613490565b604080516007808252610100820190925291925060609190816020015b6125526142ed565b81526020019060019003908161254a57905050905060005b600781101561259c5761257d6000611745565b82828151811061258957fe5b602090810291909101015260010161256a565b5060005b60198110156125f7576040600382160283600583046005840660050201601981106125c757fe5b6020020151901b8260048304815181106125dd57fe5b6020908102919091010151805190911790526001016125a0565b50612615612604826119da565b60e08701519063ffffffff6133d216565b5050505050565b61239f8160e00151613367565b60208101516080015160e082015161089d9163ffffffff6133d216565b60208101516060015160e082015161089d9163ffffffff6133d216565b6126708160e00151613367565b60209091015160600152565b6126846142ed565b6126918260e00151613367565b905061269c81614081565b6126a9576123d0826133b4565b6126b281610ce6565b6020830151525050565b6126c46142ed565b6126d18260e00151613367565b90506126db6142ed565b6126e88360e00151613367565b90506126f382614081565b15806127055750612703816133a9565b155b1561271357611f01836133b4565b80511561232f5761272382610ce6565b602084015152505050565b60e08101515160009015801561275d575061274a61061b61165e565b61275b836020015160200151610ce6565b145b905061239f612365826133fc565b80515161089d9061277d90600161408e565b60e08301519063ffffffff6133d216565b61089d61279e8260e00151613367565b6101008301519063ffffffff6133d216565b61089d61277d826101000151613367565b6101008101515160009015801561275d57506127de61061b61165e565b61275b836020015160400151610ce6565b61089d61277d826020015160c00151600161408e565b61280d6142ed565b61281a8260e00151613367565b905061282581614081565b612832576123d0826133b4565b61283b81610ce6565b602083015160c001525050565b6128506142ed565b61285d8260e00151613367565b60e0830151909150612875908263ffffffff6133d216565b60e082015161239f908263ffffffff6133d216565b6128926142ed565b61289f8260e00151613367565b90506128a96142ed565b6128b68360e00151613367565b60e08401519091506128ce908263ffffffff6133d216565b60e08301516128e3908363ffffffff6133d216565b60e083015161232f908263ffffffff6133d216565b6129006142ed565b61290d8260e00151613367565b90506129176142ed565b6129248360e00151613367565b905061292e6142ed565b61293b8460e00151613367565b60e0850151909150612953908263ffffffff6133d216565b60e0840151612968908363ffffffff6133d216565b60e084015161297d908463ffffffff6133d216565b60e084015161239c908263ffffffff6133d216565b61299a6142ed565b6129a78260e00151613367565b90506129b16142ed565b6129be8360e00151613367565b60e08401519091506128e3908363ffffffff6133d216565b6129de6142ed565b6129eb8260e00151613367565b90506129f56142ed565b612a028360e00151613367565b9050612a0c6142ed565b612a198460e00151613367565b60e0850151909150612a31908463ffffffff6133d216565b60e084015161297d908363ffffffff6133d216565b612a4e6142ed565b612a5b8260e00151613367565b9050612a656142ed565b612a728360e00151613367565b9050612a7d826133a9565b1580612a8f5750612a8d81613483565b155b80612aa95750612a9e8161413f565b60ff16826000015110155b15612ab757611f01836133b4565b61232f8160400151836000015181518110612ace57fe5b60200260200101518460e001516133d290919063ffffffff16565b612af16142ed565b612afe8260e00151613367565b9050612b086142ed565b612b158360e00151613367565b9050612b1f6142ed565b612b2c8460e00151613367565b9050612b37836133a9565b1580612b495750612b4782613483565b155b80612b635750612b588261413f565b60ff16836000015110155b15612b7157612266846133b4565b604082015183518151839183918110612b8657fe5b6020026020010181905250612615612604826119da565b612ba56142ed565b612bb28260e00151613367565b9050612bbd81613483565b612bca576123d0826133b4565b61239f612365612bd98361413f565b60ff16611745565b612be96142ed565b612bf68260e00151613367565b9050612c006142ed565b612c0e836101000151613367565b9050612c19826133a9565b1580612c2b5750612c2981613483565b155b80612c455750612c3a8161413f565b60ff16826000015110155b15612c5357611f01836133b4565b610100830151612ab7908263ffffffff6133d216565b612c716142ed565b612c7e8260e00151613367565b9050612c886142ed565b612c958360e00151613367565b9050612c9f6142ed565b612cad846101000151613367565b9050612cb881613483565b1580612cca5750612cc8836133a9565b155b80612ce45750612cd98161413f565b60ff16836000015110155b15612cf257612266846133b4565b604081015183518151849183918110612d0757fe5b6020026020010181905250612615612d1e826119da565b6101008701519063ffffffff6133d216565b8060a00151612d4561061b8360e00151613367565b604080516020808201949094528082019290925280518083038201815260609092019052805191012060a090910152565b612d7e6142ed565b612d8b8260e00151613367565b905061271081608001511180612da75750612da581614166565b155b15612db5576123d0826133b4565b8160800151612dc382610ce6565b604080516020808201949094528082019290925280518083038201815260609092019052805191012060808301525050565b612e0061061b61165e565b81604001511415612e58576040805162461bcd60e51b815260206004820152601d60248201527f496e626f7820696e737472756374696f6e2077617320626c6f636b6564000000604482015290519081900360640190fd5b612e606142ed565b612e74826101600151836101800151610965565b9150508160400151612e8582610ce6565b14612ecf576040805162461bcd60e51b8152602060048201526015602482015274696e636f727265637420696e626f782076616c756560581b604482015290519081900360640190fd5b60e0820151612ee4908263ffffffff6133d216565b612eef61061b61165e565b6040830152506001606090910152565b61089d816133b4565b61089d8160200151614264565b612f1d6142ed565b612f2a8260e00151613367565b9050612f35816133a9565b612f42576123d0826133b4565b51602082015160a0015250565b61089d61277d826020015160a00151611745565b60408051600160f81b602080830191909152600060218301819052602280840191909152835180840390910181526042909201909252805191012061089d9061277d90600161408e565b612fb56142ed565b612fc28260e00151613367565b9050612fcc6142ed565b612fd98360e00151613367565b9050612fe4826133a9565b1580612ff65750612ff481614081565b155b1561300457611f01836133b4565b61232f61231e836000015161301884610ce6565b610c00565b6130256142ed565b6130328260e00151613367565b905061303c6142ed565b6130498360e00151613367565b90506130536142ed565b6130608460e00151613367565b905061306b836133a9565b158061307d575061307b81614081565b155b1561308b57612266846133b4565b61239c61238b846000015161309f84610ce6565b85610c62565b604080516000808252602082019092526060916130d8565b6130c56142ed565b8152602001906001900390816130bd5790505b50905061239f612365826119da565b6130ef6142ed565b6130fc8260e00151613367565b90506131066142ed565b6131138360e00151613367565b905061311d6142ed565b61312a8460e00151613367565b90506131346142ed565b6131418560e00151613367565b905061314c846133a9565b158061315e575061315c836133a9565b155b8061316f575061316d826133a9565b155b80613180575061317e816133a9565b155b1561318e576105fa856133b4565b835183518351158015906131a457508351600114155b156131d2576131c76131b66000611745565b60e08901519063ffffffff6133d216565b50505050505061089d565b83518351604080516000808252602080830180855285905260ff601b9096019586168385015260608301889052608083018790529251909260019260a080820193601f1981019281900390910190855afa158015613234573d6000803e3d6000fd5b505050602060405103519050613266613255826001600160a01b0316611745565b60e08c01519063ffffffff6133d216565b50505050505050505050565b600160e090910152565b6000816020018351101561328f57600080fd5b50016020015190565b6000806020830161173a858563ffffffff61327c16565b6132b76142ed565b6040805160a081018252848152815160608101835260008082526020828101829052845182815280820186529394908501939083019161330d565b6132fa6142ed565b8152602001906001900390816132f25790505b50905281526040805160008082526020828101909352919092019190613349565b6133366142ed565b81526020019060019003908161332e5790505b508152600260208201526040019290925250919050565b6008101590565b61336f6142ed565b6133776142ed565b826020015160018460000151038151811061338e57fe5b60209081029190910101518351600019018452915050919050565b6060015160ff161590565b6133bd816115f5565b60e08101516000908190526101009091015152565b8082602001518360000151815181106133e757fe5b60209081029190910101525080516001019052565b6134046142ed565b811561341457610d0c6001611745565b610d0c6000611745565b6134266142ed565b816060015160ff166002141561346d5760405162461bcd60e51b81526004018080602001828103825260218152602001806144156021913960400191505060405180910390fd5b61347d826060015160ff16611745565b92915050565b6060015160ff1660031490565b61349861437f565b6134a061439e565b6134a861439e565b6134b061437f565b6134b86143bc565b60405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060008090505b6018811015614076576080878101516060808a01516040808c01516020808e01518e511890911890921890931889526101208b01516101008c015160e08d015160c08e015160a08f0151181818189089018190526101c08b01516101a08c01516101808d01516101608e01516101408f0151181818189289019283526102608b01516102408c01516102208d01516102008e01516101e08f015118181818918901919091526103008a01516102e08b01516102c08c01516102a08d01516102808e0151181818189288018390526001600160401b0360028202166001603f1b91829004179092188652510485600260200201516002026001600160401b03161785600060200201511884600160200201526001603f1b85600360200201518161370457fe5b0485600360200201516002026001600160401b03161785600160200201511884600260200201526001603f1b85600460200201518161373f57fe5b0485600460200201516002026001600160401b0316178560026005811061376257fe5b602002015118606085015284516001603f1b9086516060808901519390920460029091026001600160401b031617909118608086810191825286518a5118808b5287516020808d018051909218825289516040808f0180519092189091528a518e8801805190911890528a51948e0180519095189094528901805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291880180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292870180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a01805190911890529084525163100000009060208901516001600160401b03641000000000909102169190041761010084015260408701516001603d1b9060408901516001600160401b03600890910216919004176101608401526060870151628000009060608901516001600160401b036502000000000090910216919004176102608401526080870151654000000000009060808901516001600160401b036204000090910216919004176102c084015260a08701516001603f1b900487600560200201516002026001600160401b031617836002601981106139cc57fe5b602002015260c0870151621000008104651000000000009091026001600160401b039081169190911760a085015260e0880151664000000000000081046104009091028216176101a08501526101008801516208000081046520000000000090910282161761020085015261012088015160048082029092166001603e1b909104176103008501526101408801516101408901516001600160401b036001603e1b90910216919004176080840152610160870151670400000000000000906101608901516001600160401b036040909102169190041760e084015261018087015162200000906101808901516001600160401b036508000000000090910216919004176101408401526101a08701516602000000000000906101a08901516001600160401b0361800090910216919004176102408401526101c08701516008906101c08901516001600160401b036001603d1b90910216919004176102a08401526101e0870151641000000000906101e08901516001600160401b03631000000090910216919004176020840152610200808801516102008901516001600160401b0366800000000000009091021691900417610120840152610220870151648000000000906102208901516001600160401b036302000000909102169190041761018084015261024087015165080000000000906102408901516001600160401b036220000090910216919004176101e0840152610260870151610100906102608901516001600160401b03600160381b90910216919004176102e0840152610280870151642000000000906102808901516001600160401b036308000000909102169190041760608401526102a087015165100000000000906102a08901516001600160401b0362100000909102169190041760c08401526102c08701516302000000906102c08901516001600160401b0364800000000090910216919004176101c08401526102e0870151600160381b906102e08901516001600160401b036101009091021691900417610220840152610300870151660400000000000090048760186020020151614000026001600160401b031617836014602002015282600a602002015183600560200201511916836000602002015118876000602002015282600b602002015183600660200201511916836001602002015118876001602002015282600c602002015183600760200201511916836002602002015118876002602002015282600d602002015183600860200201511916836003602002015118876003602002015282600e602002015183600960200201511916836004602002015118876004602002015282600f602002015183600a602002015119168360056020020151188760056020020152826010602002015183600b602002015119168360066020020151188760066020020152826011602002015183600c602002015119168360076020020151188760076020020152826012602002015183600d602002015119168360086020020151188760086020020152826013602002015183600e602002015119168360096020020151188760096020020152826014602002015183600f6020020151191683600a60200201511887600a602002015282601560200201518360106020020151191683600b60200201511887600b602002015282601660200201518360116020020151191683600c60200201511887600c602002015282601760200201518360126020020151191683600d60200201511887600d602002015282601860200201518360136020020151191683600e60200201511887600e602002015282600060200201518360146020020151191683600f60200201511887600ffe5b602002015187511887526001016135df565b509495945050505050565b6060015160ff1660011490565b6140966142ed565b6040805160a08101825284815281516060810183526000808252602082810182905284518281528082018652939490850193908301916140ec565b6140d96142ed565b8152602001906001900390816140d15790505b50905281526040805160008082526020828101909352919092019190614128565b6141156142ed565b81526020019060019003908161410d5790505b508152606460208201526040019290925250919050565b606081015160009060ff166003141561415e5750604081015151610960565b506001610960565b606081015160009060ff1661417d57506001610960565b606082015160ff166001141561419557506000610960565b606082015160ff16600214156141e9576040805162461bcd60e51b81526020600482015260146024820152736d75737420686176652066756c6c2076616c756560601b604482015290519081900360640190fd5b606082015160ff166003141561424c5760408201515160005b818110156142415761422a8460400151828151811061421d57fe5b6020026020010151614166565b61423957600092505050610960565b600101614202565b506001915050610960565b606082015160ff1660641415610dc557506000610960565b600260e090910152565b604051806101a00160405280614282614321565b815260200161428f614321565b815260006020820181905260408201819052606082018190526080820181905260a082015260c0016142bf6143db565b81526020016142cc6143db565b81526000602082018190526040820181905260608083015260809091015290565b6040518060a00160405280600081526020016143076143f5565b815260606020820181905260006040830181905291015290565b604080516101008101909152600081526020810161433d6142ed565b815260200161434a6142ed565b81526020016143576142ed565b81526020016143646142ed565b81526000602082018190526040820181905260609091015290565b6040518061032001604052806019906020820280388339509192915050565b6040518060a001604052806005906020820280388339509192915050565b6040518061030001604052806018906020820280388339509192915050565b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fe56616c7565206d757374206861766520612076616c6964207479706520636f6465a265627a7a72315820c8f2126e4c76597e9ca6d9d5d3aa3c79ef02625b1d4f338b40ccbe8a4703496264736f6c63430005110032"

// DeployOneStepProofTester deploys a new Ethereum contract, binding an instance of OneStepProofTester to it.
func DeployOneStepProofTester(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProofTester, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofTesterABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofTesterBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProofTester{OneStepProofTesterCaller: OneStepProofTesterCaller{contract: contract}, OneStepProofTesterTransactor: OneStepProofTesterTransactor{contract: contract}, OneStepProofTesterFilterer: OneStepProofTesterFilterer{contract: contract}}, nil
}

// OneStepProofTester is an auto generated Go binding around an Ethereum contract.
type OneStepProofTester struct {
	OneStepProofTesterCaller     // Read-only binding to the contract
	OneStepProofTesterTransactor // Write-only binding to the contract
	OneStepProofTesterFilterer   // Log filterer for contract events
}

// OneStepProofTesterCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofTesterCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTesterTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofTesterTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTesterFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofTesterFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofTesterSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofTesterSession struct {
	Contract     *OneStepProofTester // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// OneStepProofTesterCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofTesterCallerSession struct {
	Contract *OneStepProofTesterCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// OneStepProofTesterTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofTesterTransactorSession struct {
	Contract     *OneStepProofTesterTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// OneStepProofTesterRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofTesterRaw struct {
	Contract *OneStepProofTester // Generic contract binding to access the raw methods on
}

// OneStepProofTesterCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofTesterCallerRaw struct {
	Contract *OneStepProofTesterCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofTesterTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofTesterTransactorRaw struct {
	Contract *OneStepProofTesterTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProofTester creates a new instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTester(address common.Address, backend bind.ContractBackend) (*OneStepProofTester, error) {
	contract, err := bindOneStepProofTester(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTester{OneStepProofTesterCaller: OneStepProofTesterCaller{contract: contract}, OneStepProofTesterTransactor: OneStepProofTesterTransactor{contract: contract}, OneStepProofTesterFilterer: OneStepProofTesterFilterer{contract: contract}}, nil
}

// NewOneStepProofTesterCaller creates a new read-only instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTesterCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofTesterCaller, error) {
	contract, err := bindOneStepProofTester(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTesterCaller{contract: contract}, nil
}

// NewOneStepProofTesterTransactor creates a new write-only instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTesterTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofTesterTransactor, error) {
	contract, err := bindOneStepProofTester(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTesterTransactor{contract: contract}, nil
}

// NewOneStepProofTesterFilterer creates a new log filterer instance of OneStepProofTester, bound to a specific deployed contract.
func NewOneStepProofTesterFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofTesterFilterer, error) {
	contract, err := bindOneStepProofTester(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofTesterFilterer{contract: contract}, nil
}

// bindOneStepProofTester binds a generic wrapper to an already deployed contract.
func bindOneStepProofTester(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofTesterABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofTester *OneStepProofTesterRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProofTester.Contract.OneStepProofTesterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofTester *OneStepProofTesterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.OneStepProofTesterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofTester *OneStepProofTesterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.OneStepProofTesterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofTester *OneStepProofTesterCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OneStepProofTester.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofTester *OneStepProofTesterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofTester *OneStepProofTesterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofTester.Contract.contract.Transact(opts, method, params...)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x385bc114.
//
// Solidity: function executeStep(bytes32 inboxHash, bytes32 firstMessage, bytes32 firstLog, bytes proof) pure returns(bytes32 startHash, bytes32 endHash, bytes32 logAcc, bytes32 messageAcc, uint64 gas, bool didInboxInsn)
func (_OneStepProofTester *OneStepProofTesterCaller) ExecuteStep(opts *bind.CallOpts, inboxHash [32]byte, firstMessage [32]byte, firstLog [32]byte, proof []byte) (struct {
	StartHash    [32]byte
	EndHash      [32]byte
	LogAcc       [32]byte
	MessageAcc   [32]byte
	Gas          uint64
	DidInboxInsn bool
}, error) {
	ret := new(struct {
		StartHash    [32]byte
		EndHash      [32]byte
		LogAcc       [32]byte
		MessageAcc   [32]byte
		Gas          uint64
		DidInboxInsn bool
	})
	out := ret
	err := _OneStepProofTester.contract.Call(opts, out, "executeStep", inboxHash, firstMessage, firstLog, proof)
	return *ret, err
}

// ExecuteStep is a free data retrieval call binding the contract method 0x385bc114.
//
// Solidity: function executeStep(bytes32 inboxHash, bytes32 firstMessage, bytes32 firstLog, bytes proof) pure returns(bytes32 startHash, bytes32 endHash, bytes32 logAcc, bytes32 messageAcc, uint64 gas, bool didInboxInsn)
func (_OneStepProofTester *OneStepProofTesterSession) ExecuteStep(inboxHash [32]byte, firstMessage [32]byte, firstLog [32]byte, proof []byte) (struct {
	StartHash    [32]byte
	EndHash      [32]byte
	LogAcc       [32]byte
	MessageAcc   [32]byte
	Gas          uint64
	DidInboxInsn bool
}, error) {
	return _OneStepProofTester.Contract.ExecuteStep(&_OneStepProofTester.CallOpts, inboxHash, firstMessage, firstLog, proof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x385bc114.
//
// Solidity: function executeStep(bytes32 inboxHash, bytes32 firstMessage, bytes32 firstLog, bytes proof) pure returns(bytes32 startHash, bytes32 endHash, bytes32 logAcc, bytes32 messageAcc, uint64 gas, bool didInboxInsn)
func (_OneStepProofTester *OneStepProofTesterCallerSession) ExecuteStep(inboxHash [32]byte, firstMessage [32]byte, firstLog [32]byte, proof []byte) (struct {
	StartHash    [32]byte
	EndHash      [32]byte
	LogAcc       [32]byte
	MessageAcc   [32]byte
	Gas          uint64
	DidInboxInsn bool
}, error) {
	return _OneStepProofTester.Contract.ExecuteStep(&_OneStepProofTester.CallOpts, inboxHash, firstMessage, firstLog, proof)
}
