/*
* Copyright 2020, Offchain Labs, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
 */

package arbostest

import (
	"log"
	"math/big"
	"testing"

	"github.com/offchainlabs/arbitrum/packages/arb-avm-cpp/cmachine"
	"github.com/offchainlabs/arbitrum/packages/arb-util/arbos"
	"github.com/offchainlabs/arbitrum/packages/arb-util/common"
	"github.com/offchainlabs/arbitrum/packages/arb-util/value"
	"github.com/offchainlabs/arbitrum/packages/arb-validator-core/message"
	"github.com/offchainlabs/arbitrum/packages/arb-validator-core/valprotocol"
)

func TestBuddyContract(t *testing.T) {
	//distributionsConstructorData, err := hexutil.Decode(BuddyERC20Bin)
	//if err != nil {
	//	t.Fatal(err)
	//}

	//pointsConstructorData, err := hexutil.Decode(SubredditPointsV0Bin)
	//if err != nil {
	//	t.Fatal(err)
	//}

	//distABI, err := abi.JSON(strings.NewReader(BuddyERC20ABI))
	//if err != nil {
	//	t.Fatal(err)
	//}
	//
	//initializeBuddyContractABI := distABI.Methods["initialize"]
	//instantiateContractSignature, err := hexutil.Decode("0x1c2a2551")
	//if err != nil {
	//	t.Fatal(err)
	//}

	chainTime := message.ChainTime{
		BlockNum:  common.NewTimeBlocksInt(0),
		Timestamp: big.NewInt(0),
	}
	addr := common.Address{1, 2, 3, 4, 5}

	//chainAddress := common.HexToAddress("0xba59937520bd4c1067bac24fb774b981b4b8c115")
	//inboxAddress := common.HexToAddress("0x93fe8c8771c698af5a59a9a049ed02f2c71fefc4")

	//initializeBuddyContractData, err := initializeBuddyContractABI.Inputs.Pack(chainAddress, inboxAddress)
	//if err != nil {
	//	t.Fatal(err)
	//}

	//instantiateContractData, err = initializeBuddyContractABI.Inputs.Pack(inboxAddress)
	//if err != nil {
	//	t.Fatal(err)
	//}

	initMsg := message.Init{
		ChainParams: valprotocol.ChainParams{
			StakeRequirement:        big.NewInt(0),
			GracePeriod:             common.TimeTicks{Val: big.NewInt(0)},
			MaxExecutionSteps:       0,
			ArbGasSpeedLimitPerTick: 0,
		},
		Owner:       common.Address{},
		ExtraConfig: []byte{},
	}
	inbox := value.NewEmptyTuple()
	inbox = value.NewTuple2(inbox, message.NewInboxMessage(initMsg, addr, big.NewInt(0), chainTime).AsValue())

	nestedMsgData := []byte{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 154, 202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 11, 96, 128, 129, 129, 82, 106, 84, 111, 107, 101, 110, 32, 66, 117, 100, 100, 121, 96, 168, 27, 96, 160, 144, 129, 82, 97, 1, 0, 96, 64, 82, 96, 2, 96, 192, 144, 129, 82, 97, 42, 33, 96, 241, 27, 96, 224, 82, 145, 146, 96, 18, 145, 97, 0, 66, 145, 96, 3, 145, 144, 97, 0, 115, 86, 91, 80, 129, 81, 97, 0, 86, 144, 96, 4, 144, 96, 32, 133, 1, 144, 97, 0, 115, 86, 91, 80, 96, 5, 128, 84, 96, 255, 25, 22, 96, 255, 146, 144, 146, 22, 145, 144, 145, 23, 144, 85, 80, 97, 1, 14, 144, 80, 86, 91, 130, 128, 84, 96, 1, 129, 96, 1, 22, 21, 97, 1, 0, 2, 3, 22, 96, 2, 144, 4, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 31, 1, 96, 32, 144, 4, 129, 1, 146, 130, 96, 31, 16, 97, 0, 180, 87, 128, 81, 96, 255, 25, 22, 131, 128, 1, 23, 133, 85, 97, 0, 225, 86, 91, 130, 128, 1, 96, 1, 1, 133, 85, 130, 21, 97, 0, 225, 87, 145, 130, 1, 91, 130, 129, 17, 21, 97, 0, 225, 87, 130, 81, 130, 85, 145, 96, 32, 1, 145, 144, 96, 1, 1, 144, 97, 0, 198, 86, 91, 80, 97, 0, 237, 146, 145, 80, 97, 0, 241, 86, 91, 80, 144, 86, 91, 97, 1, 11, 145, 144, 91, 128, 130, 17, 21, 97, 0, 237, 87, 96, 0, 129, 85, 96, 1, 1, 97, 0, 247, 86, 91, 144, 86, 91, 97, 13, 115, 128, 97, 1, 29, 96, 0, 57, 96, 0, 243, 254, 96, 128, 96, 64, 82, 52, 128, 21, 97, 0, 16, 87, 96, 0, 128, 253, 91, 80, 96, 4, 54, 16, 97, 0, 207, 87, 96, 0, 53, 96, 224, 28, 128, 99, 112, 160, 130, 49, 17, 97, 0, 140, 87, 128, 99, 169, 5, 156, 187, 17, 97, 0, 102, 87, 128, 99, 169, 5, 156, 187, 20, 97, 2, 133, 87, 128, 99, 221, 98, 237, 62, 20, 97, 2, 177, 87, 128, 99, 229, 131, 6, 249, 20, 97, 2, 223, 87, 128, 99, 243, 254, 243, 163, 20, 97, 3, 13, 87, 97, 0, 207, 86, 91, 128, 99, 112, 160, 130, 49, 20, 97, 2, 43, 87, 128, 99, 149, 216, 155, 65, 20, 97, 2, 81, 87, 128, 99, 164, 87, 194, 215, 20, 97, 2, 89, 87, 97, 0, 207, 86, 91, 128, 99, 6, 253, 222, 3, 20, 97, 0, 212, 87, 128, 99, 9, 94, 167, 179, 20, 97, 1, 81, 87, 128, 99, 24, 22, 13, 221, 20, 97, 1, 145, 87, 128, 99, 35, 184, 114, 221, 20, 97, 1, 171, 87, 128, 99, 49, 60, 229, 103, 20, 97, 1, 225, 87, 128, 99, 57, 80, 147, 81, 20, 97, 1, 255, 87, 91, 96, 0, 128, 253, 91, 97, 0, 220, 97, 3, 57, 86, 91, 96, 64, 128, 81, 96, 32, 128, 130, 82, 131, 81, 129, 131, 1, 82, 131, 81, 145, 146, 131, 146, 144, 131, 1, 145, 133, 1, 144, 128, 131, 131, 96, 0, 91, 131, 129, 16, 21, 97, 1, 22, 87, 129, 129, 1, 81, 131, 130, 1, 82, 96, 32, 1, 97, 0, 254, 86, 91, 80, 80, 80, 80, 144, 80, 144, 129, 1, 144, 96, 31, 22, 128, 21, 97, 1, 67, 87, 128, 130, 3, 128, 81, 96, 1, 131, 96, 32, 3, 97, 1, 0, 10, 3, 25, 22, 129, 82, 96, 32, 1, 145, 80, 91, 80, 146, 80, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 1, 125, 96, 4, 128, 54, 3, 96, 64, 129, 16, 21, 97, 1, 103, 87, 96, 0, 128, 253, 91, 80, 96, 1, 96, 1, 96, 160, 27, 3, 129, 53, 22, 144, 96, 32, 1, 53, 97, 3, 207, 86, 91, 96, 64, 128, 81, 145, 21, 21, 130, 82, 81, 144, 129, 144, 3, 96, 32, 1, 144, 243, 91, 97, 1, 153, 97, 3, 236, 86, 91, 96, 64, 128, 81, 145, 130, 82, 81, 144, 129, 144, 3, 96, 32, 1, 144, 243, 91, 97, 1, 125, 96, 4, 128, 54, 3, 96, 96, 129, 16, 21, 97, 1, 193, 87, 96, 0, 128, 253, 91, 80, 96, 1, 96, 1, 96, 160, 27, 3, 129, 53, 129, 22, 145, 96, 32, 129, 1, 53, 144, 145, 22, 144, 96, 64, 1, 53, 97, 3, 242, 86, 91, 97, 1, 233, 97, 4, 127, 86, 91, 96, 64, 128, 81, 96, 255, 144, 146, 22, 130, 82, 81, 144, 129, 144, 3, 96, 32, 1, 144, 243, 91, 97, 1, 125, 96, 4, 128, 54, 3, 96, 64, 129, 16, 21, 97, 2, 21, 87, 96, 0, 128, 253, 91, 80, 96, 1, 96, 1, 96, 160, 27, 3, 129, 53, 22, 144, 96, 32, 1, 53, 97, 4, 136, 86, 91, 97, 1, 153, 96, 4, 128, 54, 3, 96, 32, 129, 16, 21, 97, 2, 65, 87, 96, 0, 128, 253, 91, 80, 53, 96, 1, 96, 1, 96, 160, 27, 3, 22, 97, 4, 220, 86, 91, 97, 0, 220, 97, 4, 247, 86, 91, 97, 1, 125, 96, 4, 128, 54, 3, 96, 64, 129, 16, 21, 97, 2, 111, 87, 96, 0, 128, 253, 91, 80, 96, 1, 96, 1, 96, 160, 27, 3, 129, 53, 22, 144, 96, 32, 1, 53, 97, 5, 88, 86, 91, 97, 1, 125, 96, 4, 128, 54, 3, 96, 64, 129, 16, 21, 97, 2, 155, 87, 96, 0, 128, 253, 91, 80, 96, 1, 96, 1, 96, 160, 27, 3, 129, 53, 22, 144, 96, 32, 1, 53, 97, 5, 198, 86, 91, 97, 1, 153, 96, 4, 128, 54, 3, 96, 64, 129, 16, 21, 97, 2, 199, 87, 96, 0, 128, 253, 91, 80, 96, 1, 96, 1, 96, 160, 27, 3, 129, 53, 129, 22, 145, 96, 32, 1, 53, 22, 97, 5, 218, 86, 91, 97, 3, 11, 96, 4, 128, 54, 3, 96, 64, 129, 16, 21, 97, 2, 245, 87, 96, 0, 128, 253, 91, 80, 96, 1, 96, 1, 96, 160, 27, 3, 129, 53, 22, 144, 96, 32, 1, 53, 97, 6, 5, 86, 91, 0, 91, 97, 3, 11, 96, 4, 128, 54, 3, 96, 64, 129, 16, 21, 97, 3, 35, 87, 96, 0, 128, 253, 91, 80, 96, 1, 96, 1, 96, 160, 27, 3, 129, 53, 22, 144, 96, 32, 1, 53, 97, 6, 19, 86, 91, 96, 3, 128, 84, 96, 64, 128, 81, 96, 32, 96, 31, 96, 2, 96, 0, 25, 97, 1, 0, 96, 1, 136, 22, 21, 2, 1, 144, 149, 22, 148, 144, 148, 4, 147, 132, 1, 129, 144, 4, 129, 2, 130, 1, 129, 1, 144, 146, 82, 130, 129, 82, 96, 96, 147, 144, 146, 144, 145, 131, 1, 130, 130, 128, 21, 97, 3, 197, 87, 128, 96, 31, 16, 97, 3, 154, 87, 97, 1, 0, 128, 131, 84, 4, 2, 131, 82, 145, 96, 32, 1, 145, 97, 3, 197, 86, 91, 130, 1, 145, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 91, 129, 84, 129, 82, 144, 96, 1, 1, 144, 96, 32, 1, 128, 131, 17, 97, 3, 168, 87, 130, 144, 3, 96, 31, 22, 130, 1, 145, 91, 80, 80, 80, 80, 80, 144, 80, 144, 86, 91, 96, 0, 97, 3, 227, 97, 3, 220, 97, 6, 136, 86, 91, 132, 132, 97, 6, 140, 86, 91, 80, 96, 1, 146, 145, 80, 80, 86, 91, 96, 2, 84, 144, 86, 91, 96, 0, 97, 3, 255, 132, 132, 132, 97, 7, 120, 86, 91, 97, 4, 117, 132, 97, 4, 11, 97, 6, 136, 86, 91, 97, 4, 112, 133, 96, 64, 81, 128, 96, 96, 1, 96, 64, 82, 128, 96, 40, 129, 82, 96, 32, 1, 97, 12, 136, 96, 40, 145, 57, 96, 1, 96, 1, 96, 160, 27, 3, 138, 22, 96, 0, 144, 129, 82, 96, 1, 96, 32, 82, 96, 64, 129, 32, 144, 97, 4, 73, 97, 6, 136, 86, 91, 96, 1, 96, 1, 96, 160, 27, 3, 22, 129, 82, 96, 32, 129, 1, 145, 144, 145, 82, 96, 64, 1, 96, 0, 32, 84, 145, 144, 99, 255, 255, 255, 255, 97, 8, 212, 22, 86, 91, 97, 6, 140, 86, 91, 80, 96, 1, 147, 146, 80, 80, 80, 86, 91, 96, 5, 84, 96, 255, 22, 144, 86, 91, 96, 0, 97, 3, 227, 97, 4, 149, 97, 6, 136, 86, 91, 132, 97, 4, 112, 133, 96, 1, 96, 0, 97, 4, 166, 97, 6, 136, 86, 91, 96, 1, 96, 1, 96, 160, 27, 3, 144, 129, 22, 130, 82, 96, 32, 128, 131, 1, 147, 144, 147, 82, 96, 64, 145, 130, 1, 96, 0, 144, 129, 32, 145, 140, 22, 129, 82, 146, 82, 144, 32, 84, 144, 99, 255, 255, 255, 255, 97, 9, 107, 22, 86, 91, 96, 1, 96, 1, 96, 160, 27, 3, 22, 96, 0, 144, 129, 82, 96, 32, 129, 144, 82, 96, 64, 144, 32, 84, 144, 86, 91, 96, 4, 128, 84, 96, 64, 128, 81, 96, 32, 96, 31, 96, 2, 96, 0, 25, 97, 1, 0, 96, 1, 136, 22, 21, 2, 1, 144, 149, 22, 148, 144, 148, 4, 147, 132, 1, 129, 144, 4, 129, 2, 130, 1, 129, 1, 144, 146, 82, 130, 129, 82, 96, 96, 147, 144, 146, 144, 145, 131, 1, 130, 130, 128, 21, 97, 3, 197, 87, 128, 96, 31, 16, 97, 3, 154, 87, 97, 1, 0, 128, 131, 84, 4, 2, 131, 82, 145, 96, 32, 1, 145, 97, 3, 197, 86, 91, 96, 0, 97, 3, 227, 97, 5, 101, 97, 6, 136, 86, 91, 132, 97, 4, 112, 133, 96, 64, 81, 128, 96, 96, 1, 96, 64, 82, 128, 96, 37, 129, 82, 96, 32, 1, 97, 13, 26, 96, 37, 145, 57, 96, 1, 96, 0, 97, 5, 143, 97, 6, 136, 86, 91, 96, 1, 96, 1, 96, 160, 27, 3, 144, 129, 22, 130, 82, 96, 32, 128, 131, 1, 147, 144, 147, 82, 96, 64, 145, 130, 1, 96, 0, 144, 129, 32, 145, 141, 22, 129, 82, 146, 82, 144, 32, 84, 145, 144, 99, 255, 255, 255, 255, 97, 8, 212, 22, 86, 91, 96, 0, 97, 3, 227, 97, 5, 211, 97, 6, 136, 86, 91, 132, 132, 97, 7, 120, 86, 91, 96, 1, 96, 1, 96, 160, 27, 3, 145, 130, 22, 96, 0, 144, 129, 82, 96, 1, 96, 32, 144, 129, 82, 96, 64, 128, 131, 32, 147, 144, 148, 22, 130, 82, 145, 144, 145, 82, 32, 84, 144, 86, 91, 97, 6, 15, 130, 130, 97, 9, 204, 86, 91, 80, 80, 86, 91, 97, 6, 29, 51, 130, 97, 10, 188, 86, 91, 96, 64, 128, 81, 99, 80, 237, 203, 193, 96, 225, 27, 129, 82, 96, 1, 96, 1, 96, 160, 27, 3, 132, 22, 96, 4, 130, 1, 82, 96, 36, 129, 1, 131, 144, 82, 144, 81, 96, 100, 145, 99, 161, 219, 151, 130, 145, 96, 68, 128, 131, 1, 146, 96, 0, 146, 145, 144, 130, 144, 3, 1, 129, 131, 135, 128, 59, 21, 128, 21, 97, 6, 108, 87, 96, 0, 128, 253, 91, 80, 90, 241, 21, 128, 21, 97, 6, 128, 87, 61, 96, 0, 128, 62, 61, 96, 0, 253, 91, 80, 80, 80, 80, 80, 80, 86, 91, 51, 144, 86, 91, 96, 1, 96, 1, 96, 160, 27, 3, 131, 22, 97, 6, 209, 87, 96, 64, 81, 98, 70, 27, 205, 96, 229, 27, 129, 82, 96, 4, 1, 128, 128, 96, 32, 1, 130, 129, 3, 130, 82, 96, 36, 129, 82, 96, 32, 1, 128, 97, 12, 246, 96, 36, 145, 57, 96, 64, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 253, 91, 96, 1, 96, 1, 96, 160, 27, 3, 130, 22, 97, 7, 22, 87, 96, 64, 81, 98, 70, 27, 205, 96, 229, 27, 129, 82, 96, 4, 1, 128, 128, 96, 32, 1, 130, 129, 3, 130, 82, 96, 34, 129, 82, 96, 32, 1, 128, 97, 12, 64, 96, 34, 145, 57, 96, 64, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 253, 91, 96, 1, 96, 1, 96, 160, 27, 3, 128, 132, 22, 96, 0, 129, 129, 82, 96, 1, 96, 32, 144, 129, 82, 96, 64, 128, 131, 32, 148, 135, 22, 128, 132, 82, 148, 130, 82, 145, 130, 144, 32, 133, 144, 85, 129, 81, 133, 129, 82, 145, 81, 127, 140, 91, 225, 229, 235, 236, 125, 91, 209, 79, 113, 66, 125, 30, 132, 243, 221, 3, 20, 192, 247, 178, 41, 30, 91, 32, 10, 200, 199, 195, 185, 37, 146, 129, 144, 3, 144, 145, 1, 144, 163, 80, 80, 80, 86, 91, 96, 1, 96, 1, 96, 160, 27, 3, 131, 22, 97, 7, 189, 87, 96, 64, 81, 98, 70, 27, 205, 96, 229, 27, 129, 82, 96, 4, 1, 128, 128, 96, 32, 1, 130, 129, 3, 130, 82, 96, 37, 129, 82, 96, 32, 1, 128, 97, 12, 209, 96, 37, 145, 57, 96, 64, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 253, 91, 96, 1, 96, 1, 96, 160, 27, 3, 130, 22, 97, 8, 2, 87, 96, 64, 81, 98, 70, 27, 205, 96, 229, 27, 129, 82, 96, 4, 1, 128, 128, 96, 32, 1, 130, 129, 3, 130, 82, 96, 35, 129, 82, 96, 32, 1, 128, 97, 11, 251, 96, 35, 145, 57, 96, 64, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 253, 91, 97, 8, 69, 129, 96, 64, 81, 128, 96, 96, 1, 96, 64, 82, 128, 96, 38, 129, 82, 96, 32, 1, 97, 12, 98, 96, 38, 145, 57, 96, 1, 96, 1, 96, 160, 27, 3, 134, 22, 96, 0, 144, 129, 82, 96, 32, 129, 144, 82, 96, 64, 144, 32, 84, 145, 144, 99, 255, 255, 255, 255, 97, 8, 212, 22, 86, 91, 96, 1, 96, 1, 96, 160, 27, 3, 128, 133, 22, 96, 0, 144, 129, 82, 96, 32, 129, 144, 82, 96, 64, 128, 130, 32, 147, 144, 147, 85, 144, 132, 22, 129, 82, 32, 84, 97, 8, 122, 144, 130, 99, 255, 255, 255, 255, 97, 9, 107, 22, 86, 91, 96, 1, 96, 1, 96, 160, 27, 3, 128, 132, 22, 96, 0, 129, 129, 82, 96, 32, 129, 129, 82, 96, 64, 145, 130, 144, 32, 148, 144, 148, 85, 128, 81, 133, 129, 82, 144, 81, 145, 147, 146, 135, 22, 146, 127, 221, 242, 82, 173, 27, 226, 200, 155, 105, 194, 176, 104, 252, 55, 141, 170, 149, 43, 167, 241, 99, 196, 161, 22, 40, 245, 90, 77, 245, 35, 179, 239, 146, 145, 130, 144, 3, 1, 144, 163, 80, 80, 80, 86, 91, 96, 0, 129, 132, 132, 17, 21, 97, 9, 99, 87, 96, 64, 81, 98, 70, 27, 205, 96, 229, 27, 129, 82, 96, 4, 1, 128, 128, 96, 32, 1, 130, 129, 3, 130, 82, 131, 129, 129, 81, 129, 82, 96, 32, 1, 145, 80, 128, 81, 144, 96, 32, 1, 144, 128, 131, 131, 96, 0, 91, 131, 129, 16, 21, 97, 9, 40, 87, 129, 129, 1, 81, 131, 130, 1, 82, 96, 32, 1, 97, 9, 16, 86, 91, 80, 80, 80, 80, 144, 80, 144, 129, 1, 144, 96, 31, 22, 128, 21, 97, 9, 85, 87, 128, 130, 3, 128, 81, 96, 1, 131, 96, 32, 3, 97, 1, 0, 10, 3, 25, 22, 129, 82, 96, 32, 1, 145, 80, 91, 80, 146, 80, 80, 80, 96, 64, 81, 128, 145, 3, 144, 253, 91, 80, 80, 80, 144, 3, 144, 86, 91, 96, 0, 130, 130, 1, 131, 129, 16, 21, 97, 9, 197, 87, 96, 64, 128, 81, 98, 70, 27, 205, 96, 229, 27, 129, 82, 96, 32, 96, 4, 130, 1, 82, 96, 27, 96, 36, 130, 1, 82, 127, 83, 97, 102, 101, 77, 97, 116, 104, 58, 32, 97, 100, 100, 105, 116, 105, 111, 110, 32, 111, 118, 101, 114, 102, 108, 111, 119, 0, 0, 0, 0, 0, 96, 68, 130, 1, 82, 144, 81, 144, 129, 144, 3, 96, 100, 1, 144, 253, 91, 147, 146, 80, 80, 80, 86, 91, 96, 1, 96, 1, 96, 160, 27, 3, 130, 22, 97, 10, 39, 87, 96, 64, 128, 81, 98, 70, 27, 205, 96, 229, 27, 129, 82, 96, 32, 96, 4, 130, 1, 82, 96, 31, 96, 36, 130, 1, 82, 127, 69, 82, 67, 50, 48, 58, 32, 109, 105, 110, 116, 32, 116, 111, 32, 116, 104, 101, 32, 122, 101, 114, 111, 32, 97, 100, 100, 114, 101, 115, 115, 0, 96, 68, 130, 1, 82, 144, 81, 144, 129, 144, 3, 96, 100, 1, 144, 253, 91, 96, 2, 84, 97, 10, 58, 144, 130, 99, 255, 255, 255, 255, 97, 9, 107, 22, 86, 91, 96, 2, 85, 96, 1, 96, 1, 96, 160, 27, 3, 130, 22, 96, 0, 144, 129, 82, 96, 32, 129, 144, 82, 96, 64, 144, 32, 84, 97, 10, 102, 144, 130, 99, 255, 255, 255, 255, 97, 9, 107, 22, 86, 91, 96, 1, 96, 1, 96, 160, 27, 3, 131, 22, 96, 0, 129, 129, 82, 96, 32, 129, 129, 82, 96, 64, 128, 131, 32, 148, 144, 148, 85, 131, 81, 133, 129, 82, 147, 81, 146, 147, 145, 146, 127, 221, 242, 82, 173, 27, 226, 200, 155, 105, 194, 176, 104, 252, 55, 141, 170, 149, 43, 167, 241, 99, 196, 161, 22, 40, 245, 90, 77, 245, 35, 179, 239, 146, 129, 144, 3, 144, 145, 1, 144, 163, 80, 80, 86, 91, 96, 1, 96, 1, 96, 160, 27, 3, 130, 22, 97, 11, 1, 87, 96, 64, 81, 98, 70, 27, 205, 96, 229, 27, 129, 82, 96, 4, 1, 128, 128, 96, 32, 1, 130, 129, 3, 130, 82, 96, 33, 129, 82, 96, 32, 1, 128, 97, 12, 176, 96, 33, 145, 57, 96, 64, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 253, 91, 97, 11, 68, 129, 96, 64, 81, 128, 96, 96, 1, 96, 64, 82, 128, 96, 34, 129, 82, 96, 32, 1, 97, 12, 30, 96, 34, 145, 57, 96, 1, 96, 1, 96, 160, 27, 3, 133, 22, 96, 0, 144, 129, 82, 96, 32, 129, 144, 82, 96, 64, 144, 32, 84, 145, 144, 99, 255, 255, 255, 255, 97, 8, 212, 22, 86, 91, 96, 1, 96, 1, 96, 160, 27, 3, 131, 22, 96, 0, 144, 129, 82, 96, 32, 129, 144, 82, 96, 64, 144, 32, 85, 96, 2, 84, 97, 11, 112, 144, 130, 99, 255, 255, 255, 255, 97, 11, 184, 22, 86, 91, 96, 2, 85, 96, 64, 128, 81, 130, 129, 82, 144, 81, 96, 0, 145, 96, 1, 96, 1, 96, 160, 27, 3, 133, 22, 145, 127, 221, 242, 82, 173, 27, 226, 200, 155, 105, 194, 176, 104, 252, 55, 141, 170, 149, 43, 167, 241, 99, 196, 161, 22, 40, 245, 90, 77, 245, 35, 179, 239, 145, 129, 144, 3, 96, 32, 1, 144, 163, 80, 80, 86, 91, 96, 0, 97, 9, 197, 131, 131, 96, 64, 81, 128, 96, 64, 1, 96, 64, 82, 128, 96, 30, 129, 82, 96, 32, 1, 127, 83, 97, 102, 101, 77, 97, 116, 104, 58, 32, 115, 117, 98, 116, 114, 97, 99, 116, 105, 111, 110, 32, 111, 118, 101, 114, 102, 108, 111, 119, 0, 0, 129, 82, 80, 97, 8, 212, 86, 254, 69, 82, 67, 50, 48, 58, 32, 116, 114, 97, 110, 115, 102, 101, 114, 32, 116, 111, 32, 116, 104, 101, 32, 122, 101, 114, 111, 32, 97, 100, 100, 114, 101, 115, 115, 69, 82, 67, 50, 48, 58, 32, 98, 117, 114, 110, 32, 97, 109, 111, 117, 110, 116, 32, 101, 120, 99, 101, 101, 100, 115, 32, 98, 97, 108, 97, 110, 99, 101, 69, 82, 67, 50, 48, 58, 32, 97, 112, 112, 114, 111, 118, 101, 32, 116, 111, 32, 116, 104, 101, 32, 122, 101, 114, 111, 32, 97, 100, 100, 114, 101, 115, 115, 69, 82, 67, 50, 48, 58, 32, 116, 114, 97, 110, 115, 102, 101, 114, 32, 97, 109, 111, 117, 110, 116, 32, 101, 120, 99, 101, 101, 100, 115, 32, 98, 97, 108, 97, 110, 99, 101, 69, 82, 67, 50, 48, 58, 32, 116, 114, 97, 110, 115, 102, 101, 114, 32, 97, 109, 111, 117, 110, 116, 32, 101, 120, 99, 101, 101, 100, 115, 32, 97, 108, 108, 111, 119, 97, 110, 99, 101, 69, 82, 67, 50, 48, 58, 32, 98, 117, 114, 110, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 122, 101, 114, 111, 32, 97, 100, 100, 114, 101, 115, 115, 69, 82, 67, 50, 48, 58, 32, 116, 114, 97, 110, 115, 102, 101, 114, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 122, 101, 114, 111, 32, 97, 100, 100, 114, 101, 115, 115, 69, 82, 67, 50, 48, 58, 32, 97, 112, 112, 114, 111, 118, 101, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 122, 101, 114, 111, 32, 97, 100, 100, 114, 101, 115, 115, 69, 82, 67, 50, 48, 58, 32, 100, 101, 99, 114, 101, 97, 115, 101, 100, 32, 97, 108, 108, 111, 119, 97, 110, 99, 101, 32, 98, 101, 108, 111, 119, 32, 122, 101, 114, 111, 162, 101, 98, 122, 122, 114, 49, 88, 32, 106, 27, 181, 215, 101, 24, 67, 189, 213, 21, 119, 136, 255, 23, 181, 55, 103, 217, 34, 253, 20, 90, 55, 148, 198, 80, 119, 237, 60, 81, 156, 33, 100, 115, 111, 108, 99, 67, 0, 5, 16, 0, 50}

	inboxMsg := message.InboxMessage{
		Kind:        message.L2BuddyDeploy,
		Sender:      addr,
		InboxSeqNum: big.NewInt(1),
		ChainTime:   chainTime,
		Data:        nestedMsgData,
	}

	inbox = value.NewTuple2(inbox, inboxMsg.AsValue())

	//inbox = value.NewTuple2(inbox, message.NewInboxMessage(
	//	message.L2Message{Data: l2message.L2MessageAsData(makeConstructorTx(pointsConstructorData, big.NewInt(1)))},
	//	addr,
	//	big.NewInt(2),
	//	chainTime,
	//).AsValue())
	//
	//inbox = value.NewTuple2(inbox, message.NewInboxMessage(
	//	message.L2Message{Data: l2message.L2MessageAsData(l2message.Transaction{
	//		MaxGas:      big.NewInt(1000000000),
	//		GasPriceBid: big.NewInt(0),
	//		SequenceNum: big.NewInt(2),
	//		DestAddress: distributionsAddress,
	//		Payment:     big.NewInt(0),
	//		Data:        append(instantiateContractSignature, initializeBuddyContractData...),
	//	})},
	//	addr,
	//	big.NewInt(3),
	//	chainTime,
	//).AsValue())

	mach, err := cmachine.New(arbos.Path())
	if err != nil {
		t.Fatal(err)
	}

	assertion, _ := mach.ExecuteAssertion(1000000000, inbox, 0)
	data, err := value.TestVectorJSON(inbox, assertion.ParseLogs(), assertion.ParseOutMessages())
	if err != nil {
		t.Fatal(err)
	}
	t.Log(string(data))

	logs := assertion.ParseLogs()
	log.Println("Assertion had", len(logs), "logs")

	//for _, logVal := range assertion.ParseLogs() {
	//	res, err := evm.NewResultFromValue(logVal)
	//	if err != nil {
	//		t.Fatal(err)
	//	}
	//
	//	if res.ResultCode != evm.ReturnCode {
	//		t.Error("tx failed", res.ResultCode)
	//	}
	//	log.Println("ReturnData", hexutil.Encode(res.ReturnData))
	//	if res.L1Message.Kind == message.L2Type {
	//		l2, err := l2message.NewL2MessageFromData(res.L1Message.Data)
	//		if err != nil {
	//			t.Fatal(err)
	//		}
	//		log.Println(l2)
	//	}
	//
	//}
}
