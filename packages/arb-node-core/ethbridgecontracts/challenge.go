// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgecontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ChallengeABI is the input ABI used to generate the binding from.
const ChallengeABI = "[{\"anonymous\":false,\"inputs\":[],\"name\":\"AsserterTimedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"challengeRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengedSegmentStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengedSegmentLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"chainHashes\",\"type\":\"bytes32[]\"}],\"name\":\"Bisected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"challengeRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengedSegmentStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengedSegmentLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"inboxAccHashes\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"inboxDeltaHashes\",\"type\":\"bytes32[]\"}],\"name\":\"BisectedInboxDelta\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ChallengerTimedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ConstraintWin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InitiatedChallenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OneStepProofCompleted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"asserter\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengedSegmentStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengedSegmentLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengedSegmentIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_oldEndHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_chainHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_gasUsedBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_assertionRest\",\"type\":\"bytes32\"}],\"name\":\"bisectExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengedSegmentLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_oldEndHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_chainHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_newSegmentLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_startAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"bisectExecutionStoppedShort\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengedSegmentIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_challengedSegmentStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengedSegmentLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_oldEndHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_chainHashes\",\"type\":\"bytes32[]\"}],\"name\":\"bisectInboxConsistency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengedSegmentIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_challengedSegmentStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengedSegmentLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_oldInboxDelta\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_inboxAccHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_inboxDeltaHashes\",\"type\":\"bytes32[]\"}],\"name\":\"bisectInboxDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeState\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challenger\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengedSegmentStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengedSegmentLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengedSegmentIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_oldEndHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_gasUsedBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_assertionRest\",\"type\":\"bytes32\"}],\"name\":\"constraintWinExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentResponder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadlineBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executionOneStepProofCon\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_executionOneStepProof2Con\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rollupAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_inboxConsistencyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_inboxDeltaHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_executionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_executionCheckTimeBlocks\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"_asserter\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_challenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_challengePeriodBlocks\",\"type\":\"uint256\"}],\"name\":\"initializeChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMaster\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kind\",\"outputs\":[{\"internalType\":\"enumChallenge.Kind\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengedSegmentStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengedSegmentIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_oldEndHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[3]\",\"name\":\"_machineFields\",\"type\":\"bytes32[3]\"},{\"internalType\":\"uint64\",\"name\":\"_initialGasUsed\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_initialMessageCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialLogCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_executionProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_bufferProof\",\"type\":\"bytes\"}],\"name\":\"oneStepProveExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengedSegmentIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_challengedSegmentStart\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_oldEndHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_lowerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"oneStepProveInboxConsistency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengedSegmentStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengedSegmentIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_oldEndHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_prevInboxDelta\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nextInboxAcc\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inboxSeqNum\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_msgData\",\"type\":\"bytes\"}],\"name\":\"oneStepProveInboxDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"_machineFields\",\"type\":\"bytes32[3]\"},{\"internalType\":\"uint64\",\"name\":\"_initialGasUsed\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_initialMessageCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialLogCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_executionProof\",\"type\":\"bytes\"}],\"name\":\"oneStepProveStoppedShortCanRun\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turn\",\"outputs\":[{\"internalType\":\"enumChallenge.Turn\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ChallengeFuncSigs maps the 4-byte function signature to its string representation.
var ChallengeFuncSigs = map[string]string{
	"bb4af0b1": "asserter()",
	"c8af3586": "bisectExecution(uint256,uint256,uint256,bytes,bytes32,bytes32[],uint256,bytes32)",
	"a63bde8d": "bisectExecutionStoppedShort(uint256,bytes32,bytes32[],uint256,bytes32)",
	"3d4dd60a": "bisectInboxConsistency(uint256,bytes,uint256,uint256,bytes32,bytes32[])",
	"93c6e9d7": "bisectInboxDelta(uint256,bytes,uint256,uint256,bytes32,bytes32[],bytes32[])",
	"843d5a5c": "challengeState()",
	"534db0e2": "challenger()",
	"0615e06e": "constraintWinExecution(uint256,uint256,uint256,bytes,bytes32,uint256,bytes32)",
	"8a8cd218": "currentResponder()",
	"2edfb42a": "deadlineBlock()",
	"928afed0": "initializeChallenge(address,address,address,bytes32,bytes32,bytes32,uint256,address,address,uint256)",
	"6f791d29": "isMaster()",
	"04baa00b": "kind()",
	"282a3701": "oneStepProveExecution(uint256,uint256,bytes,bytes32,bytes32[3],uint64,uint256,uint256,bytes,bytes)",
	"ed569319": "oneStepProveInboxConsistency(uint256,bytes,uint256,bytes32,bytes32,bytes32)",
	"225c245c": "oneStepProveInboxDelta(uint256,uint256,bytes,bytes32,bytes32,bytes32,uint8,uint256,uint256,address,uint256,bytes)",
	"5c522251": "oneStepProveStoppedShortCanRun(bytes32[3],uint64,uint256,uint256,bytes)",
	"70dea79a": "timeout()",
	"8b299903": "turn()",
}

// ChallengeBin is the compiled bytecode used for deploying new contracts.
var ChallengeBin = "0x608060405234801561001057600080fd5b506000805460ff19166001179055613b7f8061002d6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806370dea79a116100ad57806393c6e9d71161007157806393c6e9d7146107b0578063a63bde8d146108d7578063bb4af0b114610957578063c8af35861461095f578063ed56931914610a3b57610121565b806370dea79a14610719578063843d5a5c146107215780638a8cd218146107295780638b29990314610731578063928afed01461074957610121565b80632edfb42a116100f45780632edfb42a1461055b5780633d4dd60a14610575578063534db0e21461064c5780635c522251146106705780636f791d29146106fd57610121565b806304baa00b146101265780630615e06e1461014f578063225c245c146101de578063282a37011461034f575b600080fd5b61012e610ac2565b6040518082600481111561013e57fe5b815260200191505060405180910390f35b6101dc600480360360e081101561016557600080fd5b81359160208101359160408201359190810190608081016060820135600160201b81111561019257600080fd5b8201836020820111156101a457600080fd5b803590602001918460018302840111600160201b831117156101c557600080fd5b919350915080359060208101359060400135610acb565b005b6101dc60048036036101808110156101f557600080fd5b813591602081013591810190606081016040820135600160201b81111561021b57600080fd5b82018360208201111561022d57600080fd5b803590602001918460018302840111600160201b8311171561024e57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092958435956020860135956040810135955060ff60608201351694506080810135935060a0810135926001600160a01b0360c0830135169260e0830135926101208101906101000135600160201b8111156102db57600080fd5b8201836020820111156102ed57600080fd5b803590602001918460018302840111600160201b8311171561030e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610d40945050505050565b6101dc600480360361018081101561036657600080fd5b813591602081013591810190606081016040820135600160201b81111561038c57600080fd5b82018360208201111561039e57600080fd5b803590602001918460018302840111600160201b831117156103bf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160608181019092529396853596909590946080820194509250602001906003908390839080828437600092019190915250919467ffffffffffffffff843516946020850135946040810135945091925090608081019060600135600160201b81111561046257600080fd5b82018360208201111561047457600080fd5b803590602001918460018302840111600160201b8311171561049557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156104e757600080fd5b8201836020820111156104f957600080fd5b803590602001918460018302840111600160201b8311171561051a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610ef0945050505050565b61056361133a565b60408051918252519081900360200190f35b6101dc600480360360c081101561058b57600080fd5b81359190810190604081016020820135600160201b8111156105ac57600080fd5b8201836020820111156105be57600080fd5b803590602001918460018302840111600160201b831117156105df57600080fd5b919390928235926020810135926040820135929091608081019060600135600160201b81111561060e57600080fd5b82018360208201111561062057600080fd5b803590602001918460208302840111600160201b8311171561064157600080fd5b509092509050611340565b610654611605565b604080516001600160a01b039092168252519081900360200190f35b6101dc600480360360e081101561068657600080fd5b67ffffffffffffffff6060830135169060808301359060a08401359084018460e0810160c0820135600160201b8111156106bf57600080fd5b8201836020820111156106d157600080fd5b803590602001918460018302840111600160201b831117156106f257600080fd5b509092509050611614565b610705611891565b604080519115158252519081900360200190f35b6101dc61189b565b610563611998565b61065461199e565b610739611a2d565b6040518082600281111561013e57fe5b6101dc600480360361014081101561076057600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359160808201359160a08101359160c08201359160e081013582169161010082013516906101200135611a36565b6101dc600480360360e08110156107c657600080fd5b81359190810190604081016020820135600160201b8111156107e757600080fd5b8201836020820111156107f957600080fd5b803590602001918460018302840111600160201b8311171561081a57600080fd5b919390928235926020810135926040820135929091608081019060600135600160201b81111561084957600080fd5b82018360208201111561085b57600080fd5b803590602001918460208302840111600160201b8311171561087c57600080fd5b919390929091602081019035600160201b81111561089957600080fd5b8201836020820111156108ab57600080fd5b803590602001918460208302840111600160201b831117156108cc57600080fd5b509092509050611b97565b6101dc600480360360a08110156108ed57600080fd5b813591602081013591810190606081016040820135600160201b81111561091357600080fd5b82018360208201111561092557600080fd5b803590602001918460208302840111600160201b8311171561094657600080fd5b919350915080359060200135611f67565b6106546121d7565b6101dc600480360361010081101561097657600080fd5b81359160208101359160408201359190810190608081016060820135600160201b8111156109a357600080fd5b8201836020820111156109b557600080fd5b803590602001918460018302840111600160201b831117156109d657600080fd5b91939092823592604081019060200135600160201b8111156109f757600080fd5b820183602082011115610a0957600080fd5b803590602001918460208302840111600160201b83111715610a2a57600080fd5b9193509150803590602001356121e6565b6101dc600480360360c0811015610a5157600080fd5b81359190810190604081016020820135600160201b811115610a7257600080fd5b820183602082011115610a8457600080fd5b803590602001918460018302840111600160201b83111715610aa557600080fd5b9193509150803590602081013590604081013590606001356125f2565b600a5460ff1681565b6004600a5460ff166004811115610ade57fe5b1415610af757600a805460ff1916600317905560006005555b610b0460036005546127ae565b610b0c61199e565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b81525090610bcc5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b91578181015183820152602001610b79565b50505050905090810190601f168015610bbe5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600b544311156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b81525090610c445760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b91578181015183820152602001610b79565b5060018711610c86576040805162461bcd60e51b81526020600482015260096024820152681513d3c814d213d49560ba1b604482015290519081900360640190fd5b6000610c928383612829565b90506000610ca28a8a8488612855565b9050610ce787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508592508c91506128939050565b888a01841015610cf657600080fd5b84821415610d0357600080fd5b6040517f6af162552a4b84b5de3ae085d52a72f3600612e1900ffd795ee386297eaaa55890600090a1610d3461291f565b50505050505050505050565b610d4d60016004546127ae565b610d5561199e565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b81525090610dd85760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b91578181015183820152602001610b79565b50600b544311156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b81525090610e505760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b91578181015183820152602001610b79565b50610e618888888888888888612948565b891415610e6d57600080fd5b6000610e8e88610e89610e848a8a8a8a8a8a612974565b612a9c565b612829565b9050610eb08b610eaa8f6001610ea4868f612829565b8f612855565b8e612893565b6040517f117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f590600090a1610ee161291f565b50505050505050505050505050565b6004600a5460ff166004811115610f0357fe5b1415610f1c57600a805460ff1916600317905560006005555b610f2960036005546127ae565b610f3161199e565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b81525090610fb45760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b91578181015183820152602001610b79565b50600b544311156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b8152509061102c5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b91578181015183820152602001610b79565b506000611037613acf565b825161116d57600060019054906101000a90046001600160a01b03166001600160a01b0316637a33ec0689866040518363ffffffff1660e01b81526004018083600360200280838360005b8381101561109a578181015183820152602001611082565b5050505090500180602001828103825283818151815260200191508051906020019080838360005b838110156110da5781810151838201526020016110c2565b50505050905090810190601f1680156111075780820380516001836020036101000a031916815260200191505b50935050505060c06040518083038186803b15801561112557600080fd5b505afa158015611139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060c081101561115e57600080fd5b508051925060200190506112ef565b600154604051630e81abbb60e21b81526001600160a01b0390911690633a06aeec908a90879087906004018084606080838360005b838110156111ba5781810151838201526020016111a2565b505050509050018060200180602001838103835285818151815260200191508051906020019080838360005b838110156111fe5781810151838201526020016111e6565b50505050905090810190601f16801561122b5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561125e578181015183820152602001611246565b50505050905090810190601f16801561128b5780820380516001836020036101000a031916815260200191505b509550505050505060c06040518083038186803b1580156112ab57600080fd5b505afa1580156112bf573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060c08110156112e457600080fd5b508051925060200190505b6112fd888888888686612c0e565b89141561130957600080fd5b600061132d8d8467ffffffffffffffff166113278c8c8c8c89612c86565b8d612855565b9050610eb08b828e612893565b600b5481565b61134d60016003546127ae565b61135561199e565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b815250906113d85760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b91578181015183820152602001610b79565b50600b544311156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b815250906114505760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b91578181015183820152602001610b79565b506001841161149c576040805162461bcd60e51b8152602060048201526013602482015272189a5cd958dd1a5bdb881d1bdbc81cda1bdc9d606a1b604482015290519081900360640190fd5b6114a584612cbd565b81146114b057600080fd5b82828260001981018181106114c157fe5b9050602002013514156114d357600080fd5b60006114f48686858560008181106114e757fe5b9050602002013587612855565b905061153988888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508592508d91506128939050565b6115798383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a9250899150612cd79050565b506115846001612e06565b600d547f0a2bdfea671da507e80b0cbae49dd25100a5bdacc5dff43a9163a3fcbd7c3c7d8787868660405180858152602001848152602001806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f191690920182900397509095505050505050a2505050505050505050565b6007546001600160a01b031681565b61161c61199e565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b8152509061169f5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b91578181015183820152602001610b79565b50600b544311156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b815250906117175760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b91578181015183820152602001610b79565b506004600a5460ff16600481111561172b57fe5b1461173557600080fd5b61173d613acf565b600054604051633d19f60360e11b81526101009091046001600160a01b031690637a33ec06908990869086906004018084606080828437600083820152601f01601f1916909101828103602090810182528101849052905060408101848480828437600083820152604051601f909101601f1916909201965060c09550909350505081840390508186803b1580156117d457600080fd5b505afa1580156117e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060c081101561180d57600080fd5b5060055460408051606081810190925260209093019350909161184d918a9060039083908390808284376000920191909152508a91508990508886612c86565b1461185757600080fd5b6040517f117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f590600090a161188861291f565b50505050505050565b60005460ff165b90565b600b5443116040518060400160405280601081526020016f54494d454f55545f444541444c494e4560801b815250906119155760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b91578181015183820152602001610b79565b506001600c5460ff16600281111561192957fe5b1415611965576040517f2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f090600090a1611960612e4a565b611996565b6040517f4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a90600090a1611996612ec6565b565b600d5481565b60006001600c5460ff1660028111156119b357fe5b14156119cb57506006546001600160a01b0316611898565b6002600c5460ff1660028111156119de57fe5b14156119f657506007546001600160a01b0316611898565b6040805162461bcd60e51b81526020600482015260076024820152662727afaa2aa92760c91b604482015290519081900360640190fd5b600c5460ff1681565b6000600c5460ff166002811115611a4957fe5b146040518060400160405280600f81526020016e4348414c5f494e49545f535441544560881b81525090611abe5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b91578181015183820152602001610b79565b5060008054610100600160a81b0319166101006001600160a01b038d811691909102919091178255600180546001600160a01b03199081168d8416179091556002805482168c841617815560038b905560048a905560058990556006805483168885161790556007805490921692861692909217905560088390556009869055600a805460ff199081169091554384018701600b55600c80549091169091179055600d8190556040517f7003482dc89fcecb9f14e280f21ee716bd54187f7f3b0ab5ed78f3648218f2de9190a150505050505050505050565b611ba460016004546127ae565b611bac61199e565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b81525090611c2f5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b91578181015183820152602001610b79565b50600b544311156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b81525090611ca75760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b91578181015183820152602001610b79565b5060018611611cf3576040805162461bcd60e51b8152602060048201526013602482015272189a5cd958dd1a5bdb881d1bdbc81cda1bdc9d606a1b604482015290519081900360640190fd5b82818114611d36576040805162461bcd60e51b815260206004820152600b60248201526a15d493d391d7d0d3d5539560aa1b604482015290519081900360640190fd5b611d3f87612cbd565b8114611d4a57600080fd5b85838360018403818110611d5a57fe5b905060200201351415611d6c57600080fd5b60608167ffffffffffffffff81118015611d8557600080fd5b50604051908082528060200260200182016040528015611daf578160200160208202803683370190505b50905060005b82811015611e0a57611deb878783818110611dcc57fe5b90506020020135868684818110611ddf57fe5b90506020020135612829565b828281518110611df757fe5b6020908102919091010152600101611db5565b506000611e4b8a8a84600081518110611e1f57fe5b6020026020010151611e468b8b60018a03818110611e3957fe5b905060200201358d612829565b612855565b9050611e9c8c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050828f612893565b611ea7828b8b612cd7565b50611eb26001612e06565b600d547f6e5d76fc08059c2b77929c1ea9521cd1219030ea4a6f76c3f89d15975479ea508b8b8a8a8a8a6040518087815260200186815260200180602001806020018381038352878782818152602001925060200280828437600083820152601f01601f19169091018481038352858152602090810191508690860280828437600083820152604051601f909101601f19169092018290039a509098505050505050505050a250505050505050505050505050565b611f6f61199e565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b81525090611ff25760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b91578181015183820152602001610b79565b50600b544311156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b8152509061206a5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b91578181015183820152602001610b79565b506000600a5460ff16600481111561207e57fe5b1461208857600080fd5b61209182612cbd565b831461209c57600080fd5b8582106120a857600080fd5b6005546120b86000888489612855565b146120c257600080fd5b81156121285761210684848080602002602001604051908101604052809392919081815260200183836020028082843760009201829052509250869150612cd79050565b508383600019810181811061211757fe5b60200291909101356005555061212e565b60058190555b600a805460ff19166004908117909155600060038190559081905560055560095461215890612e06565b600d547f0a2bdfea671da507e80b0cbae49dd25100a5bdacc5dff43a9163a3fcbd7c3c7d600088878760405180858152602001848152602001806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f191690920182900397509095505050505050a2505050505050565b6006546001600160a01b031681565b6004600a5460ff1660048111156121f957fe5b141561221257600a805460ff1916600317905560006005555b61221f60036005546127ae565b61222761199e565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b815250906122aa5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b91578181015183820152602001610b79565b50600b544311156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b815250906123225760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b91578181015183820152602001610b79565b5060018911612364576040805162461bcd60e51b81526020600482015260096024820152681513d3d7d4d213d49560ba1b604482015290519081900360640190fd5b61236d89612cbd565b83146123b0576040805162461bcd60e51b815260206004820152600d60248201526c4249534543545f44454752454560981b604482015290519081900360640190fd5b84848460001981018181106123c157fe5b905060200201351415612406576040805162461bcd60e51b815260206004820152600860248201526714d0535157d1539160c21b604482015290519081900360640190fd5b6124108282612829565b8484600081811061241d57fe5b905060200201351461246b576040805162461bcd60e51b81526020600482015260126024820152717365676d656e74207072652d6669656c647360701b604482015290519081900360640190fd5b888a0182106124ba576040805162461bcd60e51b81526020600482015260166024820152750d2dcecc2d8d2c840e6cacedacadce840d8cadccee8d60531b604482015290519081900360640190fd5b60006124db8b8b878760008181106124ce57fe5b9050602002013589612855565b905061252088888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508592508d91506128939050565b6125638585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508f925050508c8101869003612cd7565b5061256f600954612e06565b600d547f0a2bdfea671da507e80b0cbae49dd25100a5bdacc5dff43a9163a3fcbd7c3c7d8c8c888860405180858152602001848152602001806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f191690920182900397509095505050505050a25050505050505050505050565b6125ff60016003546127ae565b61260761199e565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b8152509061268a5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b91578181015183820152602001610b79565b50600b544311156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b815250906127025760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b91578181015183820152602001610b79565b508282141561271057600080fd5b600061271c8383612829565b9050600061272d8660018487612855565b905061277288888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508592508d91506128939050565b6040517f117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f590600090a16127a361291f565b505050505050505050565b6000600a5460ff1660048111156127c157fe5b14156127fe57600d819055600a805483919060ff191660018360048111156127e557fe5b0217905550600060038190556004819055600555612825565b81600481111561280a57fe5b600a5460ff16600481111561281b57fe5b1461282557600080fd5b5050565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b604080516020808201969096528082019490945260608401929092526080808401919091528151808403909101815260a09092019052805191012090565b60006128a3848484600101612f21565b50905080600d5414604051806040016040528060088152602001672124a9afa82922ab60c11b815250906129185760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b91578181015183820152602001610b79565b5050505050565b6001600c5460ff16600281111561293257fe5b141561294057611960612ec6565b611996612e4a565b600061296788610e898b610e898b898c8c8b8b8051906020012061302e565b9998505050505050505050565b61297c613aed565b60408051600680825260e08201909252606091816020015b61299c613aed565b8152602001906001900390816129945790505090506129bd8860ff1661309c565b816000815181106129ca57fe5b60200260200101819052506129de8761309c565b816001815181106129eb57fe5b60200260200101819052506129ff8661309c565b81600281518110612a0c57fe5b6020026020010181905250612a29856001600160a01b031661309c565b81600381518110612a3657fe5b6020026020010181905250612a4a8461309c565b81600481518110612a5757fe5b6020026020010181905250612a6f836000855161315c565b81600581518110612a7c57fe5b6020026020010181905250612a90816132c9565b98975050505050505050565b6000612aa661340b565b60ff16826080015160ff161415612ac9578151612ac290613410565b9050612c09565b612ad1613434565b60ff16826080015160ff161415612aef57612ac28260200151613439565b612af761352e565b60ff16826080015160ff161415612b1957815160a0830151612ac29190613533565b612b21613581565b60ff16826080015160ff161415612b5a57612b3a613aed565b612b478360400151613586565b9050612b5281612a9c565b915050612c09565b612b626136f2565b60ff16826080015160ff161415612b7b57508051612c09565b612b836136f7565b60ff16826080015160ff161415612bc8575060608082015160408051607b60208083019190915281830193909352815180820383018152930190528151910120612c09565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b919050565b6040810151602080830151606084015191890151600093612c7b93878b0167ffffffffffffffff1693610e89939091908114612c4b576001612c4e565b60005b608089015160408f015160ff929092168d01918114612c6e576001612c71565b60005b60ff168c016136fc565b979650505050505050565b8451815160208701516040880151600093612cb39367ffffffffffffffff8a1693610e89938a908a6136fc565b9695505050505050565b60006014821015612ccf575080612c09565b506014612c09565b82516000906000190160608167ffffffffffffffff81118015612cf957600080fd5b50604051908082528060200260200182016040528015612d23578160200160208202803683370190505b5090506000612d328584613747565b90506000869050612d6d81838a600081518110612d4b57fe5b60200260200101518b600181518110612d6057fe5b6020026020010151612855565b83600081518110612d7a57fe5b60209081029190910101528101612d918685613765565b915060015b84811015612de957612dc682848b8481518110612daf57fe5b60200260200101518c8560010181518110612d6057fe5b848281518110612dd257fe5b602090810291909101015290820190600101612d96565b506000612df584613778565b50600d555093979650505050505050565b6002600c5460ff166002811115612e1957fe5b1415612e3157600c805460ff19166001179055612e3f565b600c805460ff191660021790555b600854430101600b55565b60025460075460065460408051637d3c01f360e11b81526001600160a01b039384166004820152918316602483015251919092169163fa7803e691604480830192600092919082900301818387803b158015612ea557600080fd5b505af1158015612eb9573d6000803e3d6000fd5b50505050611996336138e9565b60025460065460075460408051637d3c01f360e11b81526001600160a01b039384166004820152918316602483015251919092169163fa7803e691604480830192600092919082900301818387803b158015612ea557600080fd5b60008080848160205b88518111613020578089015193506020818a510360200181612f4857fe5b0491505b600082118015612f5f5750600287066001145b8015612f6d57508160020a87115b15612f85576002909604600190810196940193612f4c565b60028706612fd0578383604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120925060028781612fc857fe5b049650613012565b828460405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092506002878161300b57fe5b0460010196505b600190940193602001612f2a565b509093505050935093915050565b6040805160f89790971b6001600160f81b03191660208089019190915260609690961b6bffffffffffffffffffffffff191660218801526035870194909452605586019290925260758501526095808501919091528151808503909101815260b59093019052815191012090565b6130a4613aed565b6040805160c08101825283815281516060810183526000808252602080830182905284518281528082018652939490850193908301916130fa565b6130e7613aed565b8152602001906001900390816130df5790505b5090528152602001600060405190808252806020026020018201604052801561313d57816020015b61312a613aed565b8152602001906001900390816131225790505b5081526000602082018190526040820152600160609091015292915050565b613164613aed565b60208204613170613aed565b613178613969565b60408051600280825260608281019093529293509091816020015b61319b613aed565b81526020019060019003908161319357905050905060005b83811015613216576131d26131cd89602084028a016139b0565b61309c565b826000815181106131df57fe5b602002602001018190525082826001815181106131f857fe5b602002602001018190525061320c82613586565b92506001016131b3565b50602085061561328657600061323288601f19898901016139b0565b9050602086066020036008021b6132488161309c565b8260008151811061325557fe5b6020026020010181905250828260018151811061326e57fe5b602002602001018190525061328282613586565b9250505b61328f8561309c565b8160008151811061329c57fe5b602002602001018190525081816001815181106132b557fe5b6020026020010181905250612c7b81613586565b6132d1613aed565b6132db8251613a09565b61332c576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b83518110156133635783818151811061334657fe5b602002602001015160a00151820191508080600101915050613331565b506040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b8152602001600067ffffffffffffffff811180156133ac57600080fd5b506040519080825280602002602001820160405280156133e657816020015b6133d3613aed565b8152602001906001900390816133cb5790505b5090528152602081019490945260006040850152600360608501526080909301525090565b600090565b60408051602080820193909352815180820384018152908201909152805191012090565b600190565b600060028260400151511061344a57fe5b6040820151516134ad5761345c613434565b82600001518360200151604051602001808460ff1660f81b81526001018360ff1660f81b81526001018281526020019350505050604051602081830303815290604052805190602001209050612c09565b6134b5613434565b82600001516134db84604001516000815181106134ce57fe5b6020026020010151612a9c565b8460200151604051602001808560ff1660f81b81526001018460ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b600290565b600061353d613581565b8383604051602001808460ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b600390565b61358e613aed565b6008825111156135dc576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b6060825167ffffffffffffffff811180156135f657600080fd5b50604051908082528060200260200182016040528015613620578160200160208202803683370190505b508051909150600160005b82811015613683576136428682815181106134ce57fe5b84828151811061364e57fe5b60200260200101818152505085818151811061366657fe5b602002602001015160a0015182019150808060010191505061362b565b506000835184604051602001808360ff1660f81b8152600101828051906020019060200280838360005b838110156136c55781810151838201526020016136ad565b5050505090500192505050604051602081830303815290604052805190602001209050612cb38183613a10565b606490565b600c90565b60408051602080820198909852808201969096526060860194909452608085019290925260a084015260c0808401919091528151808403909101815260e09092019052805191012090565b600081838161375257fe5b0682848161375c57fe5b04019392505050565b600081838161377057fe5b049392505050565b60008060018351101561378a57600080fd5b6001835b6001815111156138c857606060028251600101816137a857fe5b0467ffffffffffffffff811180156137bf57600080fd5b506040519080825280602002602001820160405280156137e9578160200160208202803683370190505b50905060005b81518110156138ba5782518160020260010110156138825782816002028151811061381657fe5b602002602001015183826002026001018151811061383057fe5b602002602001015160405160200180838152602001828152602001925050506040516020818303038152906040528051906020012082828151811061387157fe5b6020026020010181815250506138b2565b82816002028151811061389157fe5b60200260200101518282815181106138a557fe5b6020026020010181815250505b6001016137ef565b50600190920191905061378e565b806000815181106138d557fe5b602002602001015182935093505050915091565b6000546040805180820190915260098152684e4f545f434c4f4e4560b81b60208201529060ff161561395c5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b91578181015183820152602001610b79565b50806001600160a01b0316ff5b613971613aed565b604080516000808252602082019092526139ab916139a5565b613992613aed565b81526020019060019003908161398a5790505b506132c9565b905090565b60008160200183511015613a00576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b6008101590565b613a18613aed565b6040805160c0810182528481528151606081018352600080825260208083018290528451828152808201865293949085019390830191613a6e565b613a5b613aed565b815260200190600190039081613a535790505b50905281526020016000604051908082528060200260200182016040528015613ab157816020015b613a9e613aed565b815260200190600190039081613a965790505b50815260006020820152600260408201526060019290925250919050565b6040518060a001604052806005906020820280368337509192915050565b6040518060c0016040528060008152602001613b07613b2a565b815260606020820181905260006040830181905290820181905260809091015290565b604080516060808201835260008083526020830152918101919091529056fea2646970667358221220d2ba12b6ba8e7cd13c31f70a728d9279bf9e8f9e7469894ee9c130963b779d7264736f6c634300060c0033"

// DeployChallenge deploys a new Ethereum contract, binding an instance of Challenge to it.
func DeployChallenge(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Challenge, error) {
	parsed, err := abi.JSON(strings.NewReader(ChallengeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ChallengeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Challenge{ChallengeCaller: ChallengeCaller{contract: contract}, ChallengeTransactor: ChallengeTransactor{contract: contract}, ChallengeFilterer: ChallengeFilterer{contract: contract}}, nil
}

// Challenge is an auto generated Go binding around an Ethereum contract.
type Challenge struct {
	ChallengeCaller     // Read-only binding to the contract
	ChallengeTransactor // Write-only binding to the contract
	ChallengeFilterer   // Log filterer for contract events
}

// ChallengeCaller is an auto generated read-only Go binding around an Ethereum contract.
type ChallengeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChallengeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ChallengeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChallengeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ChallengeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChallengeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ChallengeSession struct {
	Contract     *Challenge        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ChallengeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ChallengeCallerSession struct {
	Contract *ChallengeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ChallengeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ChallengeTransactorSession struct {
	Contract     *ChallengeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ChallengeRaw is an auto generated low-level Go binding around an Ethereum contract.
type ChallengeRaw struct {
	Contract *Challenge // Generic contract binding to access the raw methods on
}

// ChallengeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ChallengeCallerRaw struct {
	Contract *ChallengeCaller // Generic read-only contract binding to access the raw methods on
}

// ChallengeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ChallengeTransactorRaw struct {
	Contract *ChallengeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewChallenge creates a new instance of Challenge, bound to a specific deployed contract.
func NewChallenge(address common.Address, backend bind.ContractBackend) (*Challenge, error) {
	contract, err := bindChallenge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Challenge{ChallengeCaller: ChallengeCaller{contract: contract}, ChallengeTransactor: ChallengeTransactor{contract: contract}, ChallengeFilterer: ChallengeFilterer{contract: contract}}, nil
}

// NewChallengeCaller creates a new read-only instance of Challenge, bound to a specific deployed contract.
func NewChallengeCaller(address common.Address, caller bind.ContractCaller) (*ChallengeCaller, error) {
	contract, err := bindChallenge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ChallengeCaller{contract: contract}, nil
}

// NewChallengeTransactor creates a new write-only instance of Challenge, bound to a specific deployed contract.
func NewChallengeTransactor(address common.Address, transactor bind.ContractTransactor) (*ChallengeTransactor, error) {
	contract, err := bindChallenge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ChallengeTransactor{contract: contract}, nil
}

// NewChallengeFilterer creates a new log filterer instance of Challenge, bound to a specific deployed contract.
func NewChallengeFilterer(address common.Address, filterer bind.ContractFilterer) (*ChallengeFilterer, error) {
	contract, err := bindChallenge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ChallengeFilterer{contract: contract}, nil
}

// bindChallenge binds a generic wrapper to an already deployed contract.
func bindChallenge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ChallengeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Challenge *ChallengeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Challenge.Contract.ChallengeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Challenge *ChallengeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Challenge.Contract.ChallengeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Challenge *ChallengeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Challenge.Contract.ChallengeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Challenge *ChallengeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Challenge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Challenge *ChallengeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Challenge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Challenge *ChallengeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Challenge.Contract.contract.Transact(opts, method, params...)
}

// Asserter is a free data retrieval call binding the contract method 0xbb4af0b1.
//
// Solidity: function asserter() view returns(address)
func (_Challenge *ChallengeCaller) Asserter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Challenge.contract.Call(opts, &out, "asserter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Asserter is a free data retrieval call binding the contract method 0xbb4af0b1.
//
// Solidity: function asserter() view returns(address)
func (_Challenge *ChallengeSession) Asserter() (common.Address, error) {
	return _Challenge.Contract.Asserter(&_Challenge.CallOpts)
}

// Asserter is a free data retrieval call binding the contract method 0xbb4af0b1.
//
// Solidity: function asserter() view returns(address)
func (_Challenge *ChallengeCallerSession) Asserter() (common.Address, error) {
	return _Challenge.Contract.Asserter(&_Challenge.CallOpts)
}

// ChallengeState is a free data retrieval call binding the contract method 0x843d5a5c.
//
// Solidity: function challengeState() view returns(bytes32)
func (_Challenge *ChallengeCaller) ChallengeState(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Challenge.contract.Call(opts, &out, "challengeState")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ChallengeState is a free data retrieval call binding the contract method 0x843d5a5c.
//
// Solidity: function challengeState() view returns(bytes32)
func (_Challenge *ChallengeSession) ChallengeState() ([32]byte, error) {
	return _Challenge.Contract.ChallengeState(&_Challenge.CallOpts)
}

// ChallengeState is a free data retrieval call binding the contract method 0x843d5a5c.
//
// Solidity: function challengeState() view returns(bytes32)
func (_Challenge *ChallengeCallerSession) ChallengeState() ([32]byte, error) {
	return _Challenge.Contract.ChallengeState(&_Challenge.CallOpts)
}

// Challenger is a free data retrieval call binding the contract method 0x534db0e2.
//
// Solidity: function challenger() view returns(address)
func (_Challenge *ChallengeCaller) Challenger(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Challenge.contract.Call(opts, &out, "challenger")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Challenger is a free data retrieval call binding the contract method 0x534db0e2.
//
// Solidity: function challenger() view returns(address)
func (_Challenge *ChallengeSession) Challenger() (common.Address, error) {
	return _Challenge.Contract.Challenger(&_Challenge.CallOpts)
}

// Challenger is a free data retrieval call binding the contract method 0x534db0e2.
//
// Solidity: function challenger() view returns(address)
func (_Challenge *ChallengeCallerSession) Challenger() (common.Address, error) {
	return _Challenge.Contract.Challenger(&_Challenge.CallOpts)
}

// CurrentResponder is a free data retrieval call binding the contract method 0x8a8cd218.
//
// Solidity: function currentResponder() view returns(address)
func (_Challenge *ChallengeCaller) CurrentResponder(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Challenge.contract.Call(opts, &out, "currentResponder")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CurrentResponder is a free data retrieval call binding the contract method 0x8a8cd218.
//
// Solidity: function currentResponder() view returns(address)
func (_Challenge *ChallengeSession) CurrentResponder() (common.Address, error) {
	return _Challenge.Contract.CurrentResponder(&_Challenge.CallOpts)
}

// CurrentResponder is a free data retrieval call binding the contract method 0x8a8cd218.
//
// Solidity: function currentResponder() view returns(address)
func (_Challenge *ChallengeCallerSession) CurrentResponder() (common.Address, error) {
	return _Challenge.Contract.CurrentResponder(&_Challenge.CallOpts)
}

// DeadlineBlock is a free data retrieval call binding the contract method 0x2edfb42a.
//
// Solidity: function deadlineBlock() view returns(uint256)
func (_Challenge *ChallengeCaller) DeadlineBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Challenge.contract.Call(opts, &out, "deadlineBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DeadlineBlock is a free data retrieval call binding the contract method 0x2edfb42a.
//
// Solidity: function deadlineBlock() view returns(uint256)
func (_Challenge *ChallengeSession) DeadlineBlock() (*big.Int, error) {
	return _Challenge.Contract.DeadlineBlock(&_Challenge.CallOpts)
}

// DeadlineBlock is a free data retrieval call binding the contract method 0x2edfb42a.
//
// Solidity: function deadlineBlock() view returns(uint256)
func (_Challenge *ChallengeCallerSession) DeadlineBlock() (*big.Int, error) {
	return _Challenge.Contract.DeadlineBlock(&_Challenge.CallOpts)
}

// IsMaster is a free data retrieval call binding the contract method 0x6f791d29.
//
// Solidity: function isMaster() view returns(bool)
func (_Challenge *ChallengeCaller) IsMaster(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Challenge.contract.Call(opts, &out, "isMaster")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMaster is a free data retrieval call binding the contract method 0x6f791d29.
//
// Solidity: function isMaster() view returns(bool)
func (_Challenge *ChallengeSession) IsMaster() (bool, error) {
	return _Challenge.Contract.IsMaster(&_Challenge.CallOpts)
}

// IsMaster is a free data retrieval call binding the contract method 0x6f791d29.
//
// Solidity: function isMaster() view returns(bool)
func (_Challenge *ChallengeCallerSession) IsMaster() (bool, error) {
	return _Challenge.Contract.IsMaster(&_Challenge.CallOpts)
}

// Kind is a free data retrieval call binding the contract method 0x04baa00b.
//
// Solidity: function kind() view returns(uint8)
func (_Challenge *ChallengeCaller) Kind(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Challenge.contract.Call(opts, &out, "kind")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Kind is a free data retrieval call binding the contract method 0x04baa00b.
//
// Solidity: function kind() view returns(uint8)
func (_Challenge *ChallengeSession) Kind() (uint8, error) {
	return _Challenge.Contract.Kind(&_Challenge.CallOpts)
}

// Kind is a free data retrieval call binding the contract method 0x04baa00b.
//
// Solidity: function kind() view returns(uint8)
func (_Challenge *ChallengeCallerSession) Kind() (uint8, error) {
	return _Challenge.Contract.Kind(&_Challenge.CallOpts)
}

// Turn is a free data retrieval call binding the contract method 0x8b299903.
//
// Solidity: function turn() view returns(uint8)
func (_Challenge *ChallengeCaller) Turn(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Challenge.contract.Call(opts, &out, "turn")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Turn is a free data retrieval call binding the contract method 0x8b299903.
//
// Solidity: function turn() view returns(uint8)
func (_Challenge *ChallengeSession) Turn() (uint8, error) {
	return _Challenge.Contract.Turn(&_Challenge.CallOpts)
}

// Turn is a free data retrieval call binding the contract method 0x8b299903.
//
// Solidity: function turn() view returns(uint8)
func (_Challenge *ChallengeCallerSession) Turn() (uint8, error) {
	return _Challenge.Contract.Turn(&_Challenge.CallOpts)
}

// BisectExecution is a paid mutator transaction binding the contract method 0xc8af3586.
//
// Solidity: function bisectExecution(uint256 _challengedSegmentStart, uint256 _challengedSegmentLength, uint256 _challengedSegmentIndex, bytes _proof, bytes32 _oldEndHash, bytes32[] _chainHashes, uint256 _gasUsedBefore, bytes32 _assertionRest) returns()
func (_Challenge *ChallengeTransactor) BisectExecution(opts *bind.TransactOpts, _challengedSegmentStart *big.Int, _challengedSegmentLength *big.Int, _challengedSegmentIndex *big.Int, _proof []byte, _oldEndHash [32]byte, _chainHashes [][32]byte, _gasUsedBefore *big.Int, _assertionRest [32]byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "bisectExecution", _challengedSegmentStart, _challengedSegmentLength, _challengedSegmentIndex, _proof, _oldEndHash, _chainHashes, _gasUsedBefore, _assertionRest)
}

// BisectExecution is a paid mutator transaction binding the contract method 0xc8af3586.
//
// Solidity: function bisectExecution(uint256 _challengedSegmentStart, uint256 _challengedSegmentLength, uint256 _challengedSegmentIndex, bytes _proof, bytes32 _oldEndHash, bytes32[] _chainHashes, uint256 _gasUsedBefore, bytes32 _assertionRest) returns()
func (_Challenge *ChallengeSession) BisectExecution(_challengedSegmentStart *big.Int, _challengedSegmentLength *big.Int, _challengedSegmentIndex *big.Int, _proof []byte, _oldEndHash [32]byte, _chainHashes [][32]byte, _gasUsedBefore *big.Int, _assertionRest [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.BisectExecution(&_Challenge.TransactOpts, _challengedSegmentStart, _challengedSegmentLength, _challengedSegmentIndex, _proof, _oldEndHash, _chainHashes, _gasUsedBefore, _assertionRest)
}

// BisectExecution is a paid mutator transaction binding the contract method 0xc8af3586.
//
// Solidity: function bisectExecution(uint256 _challengedSegmentStart, uint256 _challengedSegmentLength, uint256 _challengedSegmentIndex, bytes _proof, bytes32 _oldEndHash, bytes32[] _chainHashes, uint256 _gasUsedBefore, bytes32 _assertionRest) returns()
func (_Challenge *ChallengeTransactorSession) BisectExecution(_challengedSegmentStart *big.Int, _challengedSegmentLength *big.Int, _challengedSegmentIndex *big.Int, _proof []byte, _oldEndHash [32]byte, _chainHashes [][32]byte, _gasUsedBefore *big.Int, _assertionRest [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.BisectExecution(&_Challenge.TransactOpts, _challengedSegmentStart, _challengedSegmentLength, _challengedSegmentIndex, _proof, _oldEndHash, _chainHashes, _gasUsedBefore, _assertionRest)
}

// BisectExecutionStoppedShort is a paid mutator transaction binding the contract method 0xa63bde8d.
//
// Solidity: function bisectExecutionStoppedShort(uint256 _challengedSegmentLength, bytes32 _oldEndHash, bytes32[] _chainHashes, uint256 _newSegmentLength, bytes32 _startAssertionHash) returns()
func (_Challenge *ChallengeTransactor) BisectExecutionStoppedShort(opts *bind.TransactOpts, _challengedSegmentLength *big.Int, _oldEndHash [32]byte, _chainHashes [][32]byte, _newSegmentLength *big.Int, _startAssertionHash [32]byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "bisectExecutionStoppedShort", _challengedSegmentLength, _oldEndHash, _chainHashes, _newSegmentLength, _startAssertionHash)
}

// BisectExecutionStoppedShort is a paid mutator transaction binding the contract method 0xa63bde8d.
//
// Solidity: function bisectExecutionStoppedShort(uint256 _challengedSegmentLength, bytes32 _oldEndHash, bytes32[] _chainHashes, uint256 _newSegmentLength, bytes32 _startAssertionHash) returns()
func (_Challenge *ChallengeSession) BisectExecutionStoppedShort(_challengedSegmentLength *big.Int, _oldEndHash [32]byte, _chainHashes [][32]byte, _newSegmentLength *big.Int, _startAssertionHash [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.BisectExecutionStoppedShort(&_Challenge.TransactOpts, _challengedSegmentLength, _oldEndHash, _chainHashes, _newSegmentLength, _startAssertionHash)
}

// BisectExecutionStoppedShort is a paid mutator transaction binding the contract method 0xa63bde8d.
//
// Solidity: function bisectExecutionStoppedShort(uint256 _challengedSegmentLength, bytes32 _oldEndHash, bytes32[] _chainHashes, uint256 _newSegmentLength, bytes32 _startAssertionHash) returns()
func (_Challenge *ChallengeTransactorSession) BisectExecutionStoppedShort(_challengedSegmentLength *big.Int, _oldEndHash [32]byte, _chainHashes [][32]byte, _newSegmentLength *big.Int, _startAssertionHash [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.BisectExecutionStoppedShort(&_Challenge.TransactOpts, _challengedSegmentLength, _oldEndHash, _chainHashes, _newSegmentLength, _startAssertionHash)
}

// BisectInboxConsistency is a paid mutator transaction binding the contract method 0x3d4dd60a.
//
// Solidity: function bisectInboxConsistency(uint256 _challengedSegmentIndex, bytes _proof, uint256 _challengedSegmentStart, uint256 _challengedSegmentLength, bytes32 _oldEndHash, bytes32[] _chainHashes) returns()
func (_Challenge *ChallengeTransactor) BisectInboxConsistency(opts *bind.TransactOpts, _challengedSegmentIndex *big.Int, _proof []byte, _challengedSegmentStart *big.Int, _challengedSegmentLength *big.Int, _oldEndHash [32]byte, _chainHashes [][32]byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "bisectInboxConsistency", _challengedSegmentIndex, _proof, _challengedSegmentStart, _challengedSegmentLength, _oldEndHash, _chainHashes)
}

// BisectInboxConsistency is a paid mutator transaction binding the contract method 0x3d4dd60a.
//
// Solidity: function bisectInboxConsistency(uint256 _challengedSegmentIndex, bytes _proof, uint256 _challengedSegmentStart, uint256 _challengedSegmentLength, bytes32 _oldEndHash, bytes32[] _chainHashes) returns()
func (_Challenge *ChallengeSession) BisectInboxConsistency(_challengedSegmentIndex *big.Int, _proof []byte, _challengedSegmentStart *big.Int, _challengedSegmentLength *big.Int, _oldEndHash [32]byte, _chainHashes [][32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.BisectInboxConsistency(&_Challenge.TransactOpts, _challengedSegmentIndex, _proof, _challengedSegmentStart, _challengedSegmentLength, _oldEndHash, _chainHashes)
}

// BisectInboxConsistency is a paid mutator transaction binding the contract method 0x3d4dd60a.
//
// Solidity: function bisectInboxConsistency(uint256 _challengedSegmentIndex, bytes _proof, uint256 _challengedSegmentStart, uint256 _challengedSegmentLength, bytes32 _oldEndHash, bytes32[] _chainHashes) returns()
func (_Challenge *ChallengeTransactorSession) BisectInboxConsistency(_challengedSegmentIndex *big.Int, _proof []byte, _challengedSegmentStart *big.Int, _challengedSegmentLength *big.Int, _oldEndHash [32]byte, _chainHashes [][32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.BisectInboxConsistency(&_Challenge.TransactOpts, _challengedSegmentIndex, _proof, _challengedSegmentStart, _challengedSegmentLength, _oldEndHash, _chainHashes)
}

// BisectInboxDelta is a paid mutator transaction binding the contract method 0x93c6e9d7.
//
// Solidity: function bisectInboxDelta(uint256 _challengedSegmentIndex, bytes _proof, uint256 _challengedSegmentStart, uint256 _challengedSegmentLength, bytes32 _oldInboxDelta, bytes32[] _inboxAccHashes, bytes32[] _inboxDeltaHashes) returns()
func (_Challenge *ChallengeTransactor) BisectInboxDelta(opts *bind.TransactOpts, _challengedSegmentIndex *big.Int, _proof []byte, _challengedSegmentStart *big.Int, _challengedSegmentLength *big.Int, _oldInboxDelta [32]byte, _inboxAccHashes [][32]byte, _inboxDeltaHashes [][32]byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "bisectInboxDelta", _challengedSegmentIndex, _proof, _challengedSegmentStart, _challengedSegmentLength, _oldInboxDelta, _inboxAccHashes, _inboxDeltaHashes)
}

// BisectInboxDelta is a paid mutator transaction binding the contract method 0x93c6e9d7.
//
// Solidity: function bisectInboxDelta(uint256 _challengedSegmentIndex, bytes _proof, uint256 _challengedSegmentStart, uint256 _challengedSegmentLength, bytes32 _oldInboxDelta, bytes32[] _inboxAccHashes, bytes32[] _inboxDeltaHashes) returns()
func (_Challenge *ChallengeSession) BisectInboxDelta(_challengedSegmentIndex *big.Int, _proof []byte, _challengedSegmentStart *big.Int, _challengedSegmentLength *big.Int, _oldInboxDelta [32]byte, _inboxAccHashes [][32]byte, _inboxDeltaHashes [][32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.BisectInboxDelta(&_Challenge.TransactOpts, _challengedSegmentIndex, _proof, _challengedSegmentStart, _challengedSegmentLength, _oldInboxDelta, _inboxAccHashes, _inboxDeltaHashes)
}

// BisectInboxDelta is a paid mutator transaction binding the contract method 0x93c6e9d7.
//
// Solidity: function bisectInboxDelta(uint256 _challengedSegmentIndex, bytes _proof, uint256 _challengedSegmentStart, uint256 _challengedSegmentLength, bytes32 _oldInboxDelta, bytes32[] _inboxAccHashes, bytes32[] _inboxDeltaHashes) returns()
func (_Challenge *ChallengeTransactorSession) BisectInboxDelta(_challengedSegmentIndex *big.Int, _proof []byte, _challengedSegmentStart *big.Int, _challengedSegmentLength *big.Int, _oldInboxDelta [32]byte, _inboxAccHashes [][32]byte, _inboxDeltaHashes [][32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.BisectInboxDelta(&_Challenge.TransactOpts, _challengedSegmentIndex, _proof, _challengedSegmentStart, _challengedSegmentLength, _oldInboxDelta, _inboxAccHashes, _inboxDeltaHashes)
}

// ConstraintWinExecution is a paid mutator transaction binding the contract method 0x0615e06e.
//
// Solidity: function constraintWinExecution(uint256 _challengedSegmentStart, uint256 _challengedSegmentLength, uint256 _challengedSegmentIndex, bytes _proof, bytes32 _oldEndHash, uint256 _gasUsedBefore, bytes32 _assertionRest) returns()
func (_Challenge *ChallengeTransactor) ConstraintWinExecution(opts *bind.TransactOpts, _challengedSegmentStart *big.Int, _challengedSegmentLength *big.Int, _challengedSegmentIndex *big.Int, _proof []byte, _oldEndHash [32]byte, _gasUsedBefore *big.Int, _assertionRest [32]byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "constraintWinExecution", _challengedSegmentStart, _challengedSegmentLength, _challengedSegmentIndex, _proof, _oldEndHash, _gasUsedBefore, _assertionRest)
}

// ConstraintWinExecution is a paid mutator transaction binding the contract method 0x0615e06e.
//
// Solidity: function constraintWinExecution(uint256 _challengedSegmentStart, uint256 _challengedSegmentLength, uint256 _challengedSegmentIndex, bytes _proof, bytes32 _oldEndHash, uint256 _gasUsedBefore, bytes32 _assertionRest) returns()
func (_Challenge *ChallengeSession) ConstraintWinExecution(_challengedSegmentStart *big.Int, _challengedSegmentLength *big.Int, _challengedSegmentIndex *big.Int, _proof []byte, _oldEndHash [32]byte, _gasUsedBefore *big.Int, _assertionRest [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.ConstraintWinExecution(&_Challenge.TransactOpts, _challengedSegmentStart, _challengedSegmentLength, _challengedSegmentIndex, _proof, _oldEndHash, _gasUsedBefore, _assertionRest)
}

// ConstraintWinExecution is a paid mutator transaction binding the contract method 0x0615e06e.
//
// Solidity: function constraintWinExecution(uint256 _challengedSegmentStart, uint256 _challengedSegmentLength, uint256 _challengedSegmentIndex, bytes _proof, bytes32 _oldEndHash, uint256 _gasUsedBefore, bytes32 _assertionRest) returns()
func (_Challenge *ChallengeTransactorSession) ConstraintWinExecution(_challengedSegmentStart *big.Int, _challengedSegmentLength *big.Int, _challengedSegmentIndex *big.Int, _proof []byte, _oldEndHash [32]byte, _gasUsedBefore *big.Int, _assertionRest [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.ConstraintWinExecution(&_Challenge.TransactOpts, _challengedSegmentStart, _challengedSegmentLength, _challengedSegmentIndex, _proof, _oldEndHash, _gasUsedBefore, _assertionRest)
}

// InitializeChallenge is a paid mutator transaction binding the contract method 0x928afed0.
//
// Solidity: function initializeChallenge(address _executionOneStepProofCon, address _executionOneStepProof2Con, address _rollupAddress, bytes32 _inboxConsistencyHash, bytes32 _inboxDeltaHash, bytes32 _executionHash, uint256 _executionCheckTimeBlocks, address _asserter, address _challenger, uint256 _challengePeriodBlocks) returns()
func (_Challenge *ChallengeTransactor) InitializeChallenge(opts *bind.TransactOpts, _executionOneStepProofCon common.Address, _executionOneStepProof2Con common.Address, _rollupAddress common.Address, _inboxConsistencyHash [32]byte, _inboxDeltaHash [32]byte, _executionHash [32]byte, _executionCheckTimeBlocks *big.Int, _asserter common.Address, _challenger common.Address, _challengePeriodBlocks *big.Int) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "initializeChallenge", _executionOneStepProofCon, _executionOneStepProof2Con, _rollupAddress, _inboxConsistencyHash, _inboxDeltaHash, _executionHash, _executionCheckTimeBlocks, _asserter, _challenger, _challengePeriodBlocks)
}

// InitializeChallenge is a paid mutator transaction binding the contract method 0x928afed0.
//
// Solidity: function initializeChallenge(address _executionOneStepProofCon, address _executionOneStepProof2Con, address _rollupAddress, bytes32 _inboxConsistencyHash, bytes32 _inboxDeltaHash, bytes32 _executionHash, uint256 _executionCheckTimeBlocks, address _asserter, address _challenger, uint256 _challengePeriodBlocks) returns()
func (_Challenge *ChallengeSession) InitializeChallenge(_executionOneStepProofCon common.Address, _executionOneStepProof2Con common.Address, _rollupAddress common.Address, _inboxConsistencyHash [32]byte, _inboxDeltaHash [32]byte, _executionHash [32]byte, _executionCheckTimeBlocks *big.Int, _asserter common.Address, _challenger common.Address, _challengePeriodBlocks *big.Int) (*types.Transaction, error) {
	return _Challenge.Contract.InitializeChallenge(&_Challenge.TransactOpts, _executionOneStepProofCon, _executionOneStepProof2Con, _rollupAddress, _inboxConsistencyHash, _inboxDeltaHash, _executionHash, _executionCheckTimeBlocks, _asserter, _challenger, _challengePeriodBlocks)
}

// InitializeChallenge is a paid mutator transaction binding the contract method 0x928afed0.
//
// Solidity: function initializeChallenge(address _executionOneStepProofCon, address _executionOneStepProof2Con, address _rollupAddress, bytes32 _inboxConsistencyHash, bytes32 _inboxDeltaHash, bytes32 _executionHash, uint256 _executionCheckTimeBlocks, address _asserter, address _challenger, uint256 _challengePeriodBlocks) returns()
func (_Challenge *ChallengeTransactorSession) InitializeChallenge(_executionOneStepProofCon common.Address, _executionOneStepProof2Con common.Address, _rollupAddress common.Address, _inboxConsistencyHash [32]byte, _inboxDeltaHash [32]byte, _executionHash [32]byte, _executionCheckTimeBlocks *big.Int, _asserter common.Address, _challenger common.Address, _challengePeriodBlocks *big.Int) (*types.Transaction, error) {
	return _Challenge.Contract.InitializeChallenge(&_Challenge.TransactOpts, _executionOneStepProofCon, _executionOneStepProof2Con, _rollupAddress, _inboxConsistencyHash, _inboxDeltaHash, _executionHash, _executionCheckTimeBlocks, _asserter, _challenger, _challengePeriodBlocks)
}

// OneStepProveExecution is a paid mutator transaction binding the contract method 0x282a3701.
//
// Solidity: function oneStepProveExecution(uint256 _challengedSegmentStart, uint256 _challengedSegmentIndex, bytes _proof, bytes32 _oldEndHash, bytes32[3] _machineFields, uint64 _initialGasUsed, uint256 _initialMessageCount, uint256 _initialLogCount, bytes _executionProof, bytes _bufferProof) returns()
func (_Challenge *ChallengeTransactor) OneStepProveExecution(opts *bind.TransactOpts, _challengedSegmentStart *big.Int, _challengedSegmentIndex *big.Int, _proof []byte, _oldEndHash [32]byte, _machineFields [3][32]byte, _initialGasUsed uint64, _initialMessageCount *big.Int, _initialLogCount *big.Int, _executionProof []byte, _bufferProof []byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "oneStepProveExecution", _challengedSegmentStart, _challengedSegmentIndex, _proof, _oldEndHash, _machineFields, _initialGasUsed, _initialMessageCount, _initialLogCount, _executionProof, _bufferProof)
}

// OneStepProveExecution is a paid mutator transaction binding the contract method 0x282a3701.
//
// Solidity: function oneStepProveExecution(uint256 _challengedSegmentStart, uint256 _challengedSegmentIndex, bytes _proof, bytes32 _oldEndHash, bytes32[3] _machineFields, uint64 _initialGasUsed, uint256 _initialMessageCount, uint256 _initialLogCount, bytes _executionProof, bytes _bufferProof) returns()
func (_Challenge *ChallengeSession) OneStepProveExecution(_challengedSegmentStart *big.Int, _challengedSegmentIndex *big.Int, _proof []byte, _oldEndHash [32]byte, _machineFields [3][32]byte, _initialGasUsed uint64, _initialMessageCount *big.Int, _initialLogCount *big.Int, _executionProof []byte, _bufferProof []byte) (*types.Transaction, error) {
	return _Challenge.Contract.OneStepProveExecution(&_Challenge.TransactOpts, _challengedSegmentStart, _challengedSegmentIndex, _proof, _oldEndHash, _machineFields, _initialGasUsed, _initialMessageCount, _initialLogCount, _executionProof, _bufferProof)
}

// OneStepProveExecution is a paid mutator transaction binding the contract method 0x282a3701.
//
// Solidity: function oneStepProveExecution(uint256 _challengedSegmentStart, uint256 _challengedSegmentIndex, bytes _proof, bytes32 _oldEndHash, bytes32[3] _machineFields, uint64 _initialGasUsed, uint256 _initialMessageCount, uint256 _initialLogCount, bytes _executionProof, bytes _bufferProof) returns()
func (_Challenge *ChallengeTransactorSession) OneStepProveExecution(_challengedSegmentStart *big.Int, _challengedSegmentIndex *big.Int, _proof []byte, _oldEndHash [32]byte, _machineFields [3][32]byte, _initialGasUsed uint64, _initialMessageCount *big.Int, _initialLogCount *big.Int, _executionProof []byte, _bufferProof []byte) (*types.Transaction, error) {
	return _Challenge.Contract.OneStepProveExecution(&_Challenge.TransactOpts, _challengedSegmentStart, _challengedSegmentIndex, _proof, _oldEndHash, _machineFields, _initialGasUsed, _initialMessageCount, _initialLogCount, _executionProof, _bufferProof)
}

// OneStepProveInboxConsistency is a paid mutator transaction binding the contract method 0xed569319.
//
// Solidity: function oneStepProveInboxConsistency(uint256 _challengedSegmentIndex, bytes _proof, uint256 _challengedSegmentStart, bytes32 _oldEndHash, bytes32 _lowerHash, bytes32 _value) returns()
func (_Challenge *ChallengeTransactor) OneStepProveInboxConsistency(opts *bind.TransactOpts, _challengedSegmentIndex *big.Int, _proof []byte, _challengedSegmentStart *big.Int, _oldEndHash [32]byte, _lowerHash [32]byte, _value [32]byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "oneStepProveInboxConsistency", _challengedSegmentIndex, _proof, _challengedSegmentStart, _oldEndHash, _lowerHash, _value)
}

// OneStepProveInboxConsistency is a paid mutator transaction binding the contract method 0xed569319.
//
// Solidity: function oneStepProveInboxConsistency(uint256 _challengedSegmentIndex, bytes _proof, uint256 _challengedSegmentStart, bytes32 _oldEndHash, bytes32 _lowerHash, bytes32 _value) returns()
func (_Challenge *ChallengeSession) OneStepProveInboxConsistency(_challengedSegmentIndex *big.Int, _proof []byte, _challengedSegmentStart *big.Int, _oldEndHash [32]byte, _lowerHash [32]byte, _value [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.OneStepProveInboxConsistency(&_Challenge.TransactOpts, _challengedSegmentIndex, _proof, _challengedSegmentStart, _oldEndHash, _lowerHash, _value)
}

// OneStepProveInboxConsistency is a paid mutator transaction binding the contract method 0xed569319.
//
// Solidity: function oneStepProveInboxConsistency(uint256 _challengedSegmentIndex, bytes _proof, uint256 _challengedSegmentStart, bytes32 _oldEndHash, bytes32 _lowerHash, bytes32 _value) returns()
func (_Challenge *ChallengeTransactorSession) OneStepProveInboxConsistency(_challengedSegmentIndex *big.Int, _proof []byte, _challengedSegmentStart *big.Int, _oldEndHash [32]byte, _lowerHash [32]byte, _value [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.OneStepProveInboxConsistency(&_Challenge.TransactOpts, _challengedSegmentIndex, _proof, _challengedSegmentStart, _oldEndHash, _lowerHash, _value)
}

// OneStepProveInboxDelta is a paid mutator transaction binding the contract method 0x225c245c.
//
// Solidity: function oneStepProveInboxDelta(uint256 _challengedSegmentStart, uint256 _challengedSegmentIndex, bytes _proof, bytes32 _oldEndHash, bytes32 _prevInboxDelta, bytes32 _nextInboxAcc, uint8 _kind, uint256 _blockNumber, uint256 _timestamp, address _sender, uint256 _inboxSeqNum, bytes _msgData) returns()
func (_Challenge *ChallengeTransactor) OneStepProveInboxDelta(opts *bind.TransactOpts, _challengedSegmentStart *big.Int, _challengedSegmentIndex *big.Int, _proof []byte, _oldEndHash [32]byte, _prevInboxDelta [32]byte, _nextInboxAcc [32]byte, _kind uint8, _blockNumber *big.Int, _timestamp *big.Int, _sender common.Address, _inboxSeqNum *big.Int, _msgData []byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "oneStepProveInboxDelta", _challengedSegmentStart, _challengedSegmentIndex, _proof, _oldEndHash, _prevInboxDelta, _nextInboxAcc, _kind, _blockNumber, _timestamp, _sender, _inboxSeqNum, _msgData)
}

// OneStepProveInboxDelta is a paid mutator transaction binding the contract method 0x225c245c.
//
// Solidity: function oneStepProveInboxDelta(uint256 _challengedSegmentStart, uint256 _challengedSegmentIndex, bytes _proof, bytes32 _oldEndHash, bytes32 _prevInboxDelta, bytes32 _nextInboxAcc, uint8 _kind, uint256 _blockNumber, uint256 _timestamp, address _sender, uint256 _inboxSeqNum, bytes _msgData) returns()
func (_Challenge *ChallengeSession) OneStepProveInboxDelta(_challengedSegmentStart *big.Int, _challengedSegmentIndex *big.Int, _proof []byte, _oldEndHash [32]byte, _prevInboxDelta [32]byte, _nextInboxAcc [32]byte, _kind uint8, _blockNumber *big.Int, _timestamp *big.Int, _sender common.Address, _inboxSeqNum *big.Int, _msgData []byte) (*types.Transaction, error) {
	return _Challenge.Contract.OneStepProveInboxDelta(&_Challenge.TransactOpts, _challengedSegmentStart, _challengedSegmentIndex, _proof, _oldEndHash, _prevInboxDelta, _nextInboxAcc, _kind, _blockNumber, _timestamp, _sender, _inboxSeqNum, _msgData)
}

// OneStepProveInboxDelta is a paid mutator transaction binding the contract method 0x225c245c.
//
// Solidity: function oneStepProveInboxDelta(uint256 _challengedSegmentStart, uint256 _challengedSegmentIndex, bytes _proof, bytes32 _oldEndHash, bytes32 _prevInboxDelta, bytes32 _nextInboxAcc, uint8 _kind, uint256 _blockNumber, uint256 _timestamp, address _sender, uint256 _inboxSeqNum, bytes _msgData) returns()
func (_Challenge *ChallengeTransactorSession) OneStepProveInboxDelta(_challengedSegmentStart *big.Int, _challengedSegmentIndex *big.Int, _proof []byte, _oldEndHash [32]byte, _prevInboxDelta [32]byte, _nextInboxAcc [32]byte, _kind uint8, _blockNumber *big.Int, _timestamp *big.Int, _sender common.Address, _inboxSeqNum *big.Int, _msgData []byte) (*types.Transaction, error) {
	return _Challenge.Contract.OneStepProveInboxDelta(&_Challenge.TransactOpts, _challengedSegmentStart, _challengedSegmentIndex, _proof, _oldEndHash, _prevInboxDelta, _nextInboxAcc, _kind, _blockNumber, _timestamp, _sender, _inboxSeqNum, _msgData)
}

// OneStepProveStoppedShortCanRun is a paid mutator transaction binding the contract method 0x5c522251.
//
// Solidity: function oneStepProveStoppedShortCanRun(bytes32[3] _machineFields, uint64 _initialGasUsed, uint256 _initialMessageCount, uint256 _initialLogCount, bytes _executionProof) returns()
func (_Challenge *ChallengeTransactor) OneStepProveStoppedShortCanRun(opts *bind.TransactOpts, _machineFields [3][32]byte, _initialGasUsed uint64, _initialMessageCount *big.Int, _initialLogCount *big.Int, _executionProof []byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "oneStepProveStoppedShortCanRun", _machineFields, _initialGasUsed, _initialMessageCount, _initialLogCount, _executionProof)
}

// OneStepProveStoppedShortCanRun is a paid mutator transaction binding the contract method 0x5c522251.
//
// Solidity: function oneStepProveStoppedShortCanRun(bytes32[3] _machineFields, uint64 _initialGasUsed, uint256 _initialMessageCount, uint256 _initialLogCount, bytes _executionProof) returns()
func (_Challenge *ChallengeSession) OneStepProveStoppedShortCanRun(_machineFields [3][32]byte, _initialGasUsed uint64, _initialMessageCount *big.Int, _initialLogCount *big.Int, _executionProof []byte) (*types.Transaction, error) {
	return _Challenge.Contract.OneStepProveStoppedShortCanRun(&_Challenge.TransactOpts, _machineFields, _initialGasUsed, _initialMessageCount, _initialLogCount, _executionProof)
}

// OneStepProveStoppedShortCanRun is a paid mutator transaction binding the contract method 0x5c522251.
//
// Solidity: function oneStepProveStoppedShortCanRun(bytes32[3] _machineFields, uint64 _initialGasUsed, uint256 _initialMessageCount, uint256 _initialLogCount, bytes _executionProof) returns()
func (_Challenge *ChallengeTransactorSession) OneStepProveStoppedShortCanRun(_machineFields [3][32]byte, _initialGasUsed uint64, _initialMessageCount *big.Int, _initialLogCount *big.Int, _executionProof []byte) (*types.Transaction, error) {
	return _Challenge.Contract.OneStepProveStoppedShortCanRun(&_Challenge.TransactOpts, _machineFields, _initialGasUsed, _initialMessageCount, _initialLogCount, _executionProof)
}

// Timeout is a paid mutator transaction binding the contract method 0x70dea79a.
//
// Solidity: function timeout() returns()
func (_Challenge *ChallengeTransactor) Timeout(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "timeout")
}

// Timeout is a paid mutator transaction binding the contract method 0x70dea79a.
//
// Solidity: function timeout() returns()
func (_Challenge *ChallengeSession) Timeout() (*types.Transaction, error) {
	return _Challenge.Contract.Timeout(&_Challenge.TransactOpts)
}

// Timeout is a paid mutator transaction binding the contract method 0x70dea79a.
//
// Solidity: function timeout() returns()
func (_Challenge *ChallengeTransactorSession) Timeout() (*types.Transaction, error) {
	return _Challenge.Contract.Timeout(&_Challenge.TransactOpts)
}

// ChallengeAsserterTimedOutIterator is returned from FilterAsserterTimedOut and is used to iterate over the raw logs and unpacked data for AsserterTimedOut events raised by the Challenge contract.
type ChallengeAsserterTimedOutIterator struct {
	Event *ChallengeAsserterTimedOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChallengeAsserterTimedOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChallengeAsserterTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChallengeAsserterTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChallengeAsserterTimedOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChallengeAsserterTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChallengeAsserterTimedOut represents a AsserterTimedOut event raised by the Challenge contract.
type ChallengeAsserterTimedOut struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAsserterTimedOut is a free log retrieval operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_Challenge *ChallengeFilterer) FilterAsserterTimedOut(opts *bind.FilterOpts) (*ChallengeAsserterTimedOutIterator, error) {

	logs, sub, err := _Challenge.contract.FilterLogs(opts, "AsserterTimedOut")
	if err != nil {
		return nil, err
	}
	return &ChallengeAsserterTimedOutIterator{contract: _Challenge.contract, event: "AsserterTimedOut", logs: logs, sub: sub}, nil
}

// WatchAsserterTimedOut is a free log subscription operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_Challenge *ChallengeFilterer) WatchAsserterTimedOut(opts *bind.WatchOpts, sink chan<- *ChallengeAsserterTimedOut) (event.Subscription, error) {

	logs, sub, err := _Challenge.contract.WatchLogs(opts, "AsserterTimedOut")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChallengeAsserterTimedOut)
				if err := _Challenge.contract.UnpackLog(event, "AsserterTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAsserterTimedOut is a log parse operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_Challenge *ChallengeFilterer) ParseAsserterTimedOut(log types.Log) (*ChallengeAsserterTimedOut, error) {
	event := new(ChallengeAsserterTimedOut)
	if err := _Challenge.contract.UnpackLog(event, "AsserterTimedOut", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChallengeBisectedIterator is returned from FilterBisected and is used to iterate over the raw logs and unpacked data for Bisected events raised by the Challenge contract.
type ChallengeBisectedIterator struct {
	Event *ChallengeBisected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChallengeBisectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChallengeBisected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChallengeBisected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChallengeBisectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChallengeBisectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChallengeBisected represents a Bisected event raised by the Challenge contract.
type ChallengeBisected struct {
	ChallengeRoot           [32]byte
	ChallengedSegmentStart  *big.Int
	ChallengedSegmentLength *big.Int
	ChainHashes             [][32]byte
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterBisected is a free log retrieval operation binding the contract event 0x0a2bdfea671da507e80b0cbae49dd25100a5bdacc5dff43a9163a3fcbd7c3c7d.
//
// Solidity: event Bisected(bytes32 indexed challengeRoot, uint256 challengedSegmentStart, uint256 challengedSegmentLength, bytes32[] chainHashes)
func (_Challenge *ChallengeFilterer) FilterBisected(opts *bind.FilterOpts, challengeRoot [][32]byte) (*ChallengeBisectedIterator, error) {

	var challengeRootRule []interface{}
	for _, challengeRootItem := range challengeRoot {
		challengeRootRule = append(challengeRootRule, challengeRootItem)
	}

	logs, sub, err := _Challenge.contract.FilterLogs(opts, "Bisected", challengeRootRule)
	if err != nil {
		return nil, err
	}
	return &ChallengeBisectedIterator{contract: _Challenge.contract, event: "Bisected", logs: logs, sub: sub}, nil
}

// WatchBisected is a free log subscription operation binding the contract event 0x0a2bdfea671da507e80b0cbae49dd25100a5bdacc5dff43a9163a3fcbd7c3c7d.
//
// Solidity: event Bisected(bytes32 indexed challengeRoot, uint256 challengedSegmentStart, uint256 challengedSegmentLength, bytes32[] chainHashes)
func (_Challenge *ChallengeFilterer) WatchBisected(opts *bind.WatchOpts, sink chan<- *ChallengeBisected, challengeRoot [][32]byte) (event.Subscription, error) {

	var challengeRootRule []interface{}
	for _, challengeRootItem := range challengeRoot {
		challengeRootRule = append(challengeRootRule, challengeRootItem)
	}

	logs, sub, err := _Challenge.contract.WatchLogs(opts, "Bisected", challengeRootRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChallengeBisected)
				if err := _Challenge.contract.UnpackLog(event, "Bisected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBisected is a log parse operation binding the contract event 0x0a2bdfea671da507e80b0cbae49dd25100a5bdacc5dff43a9163a3fcbd7c3c7d.
//
// Solidity: event Bisected(bytes32 indexed challengeRoot, uint256 challengedSegmentStart, uint256 challengedSegmentLength, bytes32[] chainHashes)
func (_Challenge *ChallengeFilterer) ParseBisected(log types.Log) (*ChallengeBisected, error) {
	event := new(ChallengeBisected)
	if err := _Challenge.contract.UnpackLog(event, "Bisected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChallengeBisectedInboxDeltaIterator is returned from FilterBisectedInboxDelta and is used to iterate over the raw logs and unpacked data for BisectedInboxDelta events raised by the Challenge contract.
type ChallengeBisectedInboxDeltaIterator struct {
	Event *ChallengeBisectedInboxDelta // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChallengeBisectedInboxDeltaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChallengeBisectedInboxDelta)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChallengeBisectedInboxDelta)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChallengeBisectedInboxDeltaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChallengeBisectedInboxDeltaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChallengeBisectedInboxDelta represents a BisectedInboxDelta event raised by the Challenge contract.
type ChallengeBisectedInboxDelta struct {
	ChallengeRoot           [32]byte
	ChallengedSegmentStart  *big.Int
	ChallengedSegmentLength *big.Int
	InboxAccHashes          [][32]byte
	InboxDeltaHashes        [][32]byte
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterBisectedInboxDelta is a free log retrieval operation binding the contract event 0x6e5d76fc08059c2b77929c1ea9521cd1219030ea4a6f76c3f89d15975479ea50.
//
// Solidity: event BisectedInboxDelta(bytes32 indexed challengeRoot, uint256 challengedSegmentStart, uint256 challengedSegmentLength, bytes32[] inboxAccHashes, bytes32[] inboxDeltaHashes)
func (_Challenge *ChallengeFilterer) FilterBisectedInboxDelta(opts *bind.FilterOpts, challengeRoot [][32]byte) (*ChallengeBisectedInboxDeltaIterator, error) {

	var challengeRootRule []interface{}
	for _, challengeRootItem := range challengeRoot {
		challengeRootRule = append(challengeRootRule, challengeRootItem)
	}

	logs, sub, err := _Challenge.contract.FilterLogs(opts, "BisectedInboxDelta", challengeRootRule)
	if err != nil {
		return nil, err
	}
	return &ChallengeBisectedInboxDeltaIterator{contract: _Challenge.contract, event: "BisectedInboxDelta", logs: logs, sub: sub}, nil
}

// WatchBisectedInboxDelta is a free log subscription operation binding the contract event 0x6e5d76fc08059c2b77929c1ea9521cd1219030ea4a6f76c3f89d15975479ea50.
//
// Solidity: event BisectedInboxDelta(bytes32 indexed challengeRoot, uint256 challengedSegmentStart, uint256 challengedSegmentLength, bytes32[] inboxAccHashes, bytes32[] inboxDeltaHashes)
func (_Challenge *ChallengeFilterer) WatchBisectedInboxDelta(opts *bind.WatchOpts, sink chan<- *ChallengeBisectedInboxDelta, challengeRoot [][32]byte) (event.Subscription, error) {

	var challengeRootRule []interface{}
	for _, challengeRootItem := range challengeRoot {
		challengeRootRule = append(challengeRootRule, challengeRootItem)
	}

	logs, sub, err := _Challenge.contract.WatchLogs(opts, "BisectedInboxDelta", challengeRootRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChallengeBisectedInboxDelta)
				if err := _Challenge.contract.UnpackLog(event, "BisectedInboxDelta", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBisectedInboxDelta is a log parse operation binding the contract event 0x6e5d76fc08059c2b77929c1ea9521cd1219030ea4a6f76c3f89d15975479ea50.
//
// Solidity: event BisectedInboxDelta(bytes32 indexed challengeRoot, uint256 challengedSegmentStart, uint256 challengedSegmentLength, bytes32[] inboxAccHashes, bytes32[] inboxDeltaHashes)
func (_Challenge *ChallengeFilterer) ParseBisectedInboxDelta(log types.Log) (*ChallengeBisectedInboxDelta, error) {
	event := new(ChallengeBisectedInboxDelta)
	if err := _Challenge.contract.UnpackLog(event, "BisectedInboxDelta", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChallengeChallengerTimedOutIterator is returned from FilterChallengerTimedOut and is used to iterate over the raw logs and unpacked data for ChallengerTimedOut events raised by the Challenge contract.
type ChallengeChallengerTimedOutIterator struct {
	Event *ChallengeChallengerTimedOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChallengeChallengerTimedOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChallengeChallengerTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChallengeChallengerTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChallengeChallengerTimedOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChallengeChallengerTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChallengeChallengerTimedOut represents a ChallengerTimedOut event raised by the Challenge contract.
type ChallengeChallengerTimedOut struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterChallengerTimedOut is a free log retrieval operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_Challenge *ChallengeFilterer) FilterChallengerTimedOut(opts *bind.FilterOpts) (*ChallengeChallengerTimedOutIterator, error) {

	logs, sub, err := _Challenge.contract.FilterLogs(opts, "ChallengerTimedOut")
	if err != nil {
		return nil, err
	}
	return &ChallengeChallengerTimedOutIterator{contract: _Challenge.contract, event: "ChallengerTimedOut", logs: logs, sub: sub}, nil
}

// WatchChallengerTimedOut is a free log subscription operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_Challenge *ChallengeFilterer) WatchChallengerTimedOut(opts *bind.WatchOpts, sink chan<- *ChallengeChallengerTimedOut) (event.Subscription, error) {

	logs, sub, err := _Challenge.contract.WatchLogs(opts, "ChallengerTimedOut")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChallengeChallengerTimedOut)
				if err := _Challenge.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengerTimedOut is a log parse operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_Challenge *ChallengeFilterer) ParseChallengerTimedOut(log types.Log) (*ChallengeChallengerTimedOut, error) {
	event := new(ChallengeChallengerTimedOut)
	if err := _Challenge.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChallengeConstraintWinIterator is returned from FilterConstraintWin and is used to iterate over the raw logs and unpacked data for ConstraintWin events raised by the Challenge contract.
type ChallengeConstraintWinIterator struct {
	Event *ChallengeConstraintWin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChallengeConstraintWinIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChallengeConstraintWin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChallengeConstraintWin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChallengeConstraintWinIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChallengeConstraintWinIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChallengeConstraintWin represents a ConstraintWin event raised by the Challenge contract.
type ChallengeConstraintWin struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterConstraintWin is a free log retrieval operation binding the contract event 0x6af162552a4b84b5de3ae085d52a72f3600612e1900ffd795ee386297eaaa558.
//
// Solidity: event ConstraintWin()
func (_Challenge *ChallengeFilterer) FilterConstraintWin(opts *bind.FilterOpts) (*ChallengeConstraintWinIterator, error) {

	logs, sub, err := _Challenge.contract.FilterLogs(opts, "ConstraintWin")
	if err != nil {
		return nil, err
	}
	return &ChallengeConstraintWinIterator{contract: _Challenge.contract, event: "ConstraintWin", logs: logs, sub: sub}, nil
}

// WatchConstraintWin is a free log subscription operation binding the contract event 0x6af162552a4b84b5de3ae085d52a72f3600612e1900ffd795ee386297eaaa558.
//
// Solidity: event ConstraintWin()
func (_Challenge *ChallengeFilterer) WatchConstraintWin(opts *bind.WatchOpts, sink chan<- *ChallengeConstraintWin) (event.Subscription, error) {

	logs, sub, err := _Challenge.contract.WatchLogs(opts, "ConstraintWin")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChallengeConstraintWin)
				if err := _Challenge.contract.UnpackLog(event, "ConstraintWin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConstraintWin is a log parse operation binding the contract event 0x6af162552a4b84b5de3ae085d52a72f3600612e1900ffd795ee386297eaaa558.
//
// Solidity: event ConstraintWin()
func (_Challenge *ChallengeFilterer) ParseConstraintWin(log types.Log) (*ChallengeConstraintWin, error) {
	event := new(ChallengeConstraintWin)
	if err := _Challenge.contract.UnpackLog(event, "ConstraintWin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChallengeInitiatedChallengeIterator is returned from FilterInitiatedChallenge and is used to iterate over the raw logs and unpacked data for InitiatedChallenge events raised by the Challenge contract.
type ChallengeInitiatedChallengeIterator struct {
	Event *ChallengeInitiatedChallenge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChallengeInitiatedChallengeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChallengeInitiatedChallenge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChallengeInitiatedChallenge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChallengeInitiatedChallengeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChallengeInitiatedChallengeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChallengeInitiatedChallenge represents a InitiatedChallenge event raised by the Challenge contract.
type ChallengeInitiatedChallenge struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterInitiatedChallenge is a free log retrieval operation binding the contract event 0x7003482dc89fcecb9f14e280f21ee716bd54187f7f3b0ab5ed78f3648218f2de.
//
// Solidity: event InitiatedChallenge()
func (_Challenge *ChallengeFilterer) FilterInitiatedChallenge(opts *bind.FilterOpts) (*ChallengeInitiatedChallengeIterator, error) {

	logs, sub, err := _Challenge.contract.FilterLogs(opts, "InitiatedChallenge")
	if err != nil {
		return nil, err
	}
	return &ChallengeInitiatedChallengeIterator{contract: _Challenge.contract, event: "InitiatedChallenge", logs: logs, sub: sub}, nil
}

// WatchInitiatedChallenge is a free log subscription operation binding the contract event 0x7003482dc89fcecb9f14e280f21ee716bd54187f7f3b0ab5ed78f3648218f2de.
//
// Solidity: event InitiatedChallenge()
func (_Challenge *ChallengeFilterer) WatchInitiatedChallenge(opts *bind.WatchOpts, sink chan<- *ChallengeInitiatedChallenge) (event.Subscription, error) {

	logs, sub, err := _Challenge.contract.WatchLogs(opts, "InitiatedChallenge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChallengeInitiatedChallenge)
				if err := _Challenge.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiatedChallenge is a log parse operation binding the contract event 0x7003482dc89fcecb9f14e280f21ee716bd54187f7f3b0ab5ed78f3648218f2de.
//
// Solidity: event InitiatedChallenge()
func (_Challenge *ChallengeFilterer) ParseInitiatedChallenge(log types.Log) (*ChallengeInitiatedChallenge, error) {
	event := new(ChallengeInitiatedChallenge)
	if err := _Challenge.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChallengeOneStepProofCompletedIterator is returned from FilterOneStepProofCompleted and is used to iterate over the raw logs and unpacked data for OneStepProofCompleted events raised by the Challenge contract.
type ChallengeOneStepProofCompletedIterator struct {
	Event *ChallengeOneStepProofCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChallengeOneStepProofCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChallengeOneStepProofCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChallengeOneStepProofCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChallengeOneStepProofCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChallengeOneStepProofCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChallengeOneStepProofCompleted represents a OneStepProofCompleted event raised by the Challenge contract.
type ChallengeOneStepProofCompleted struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOneStepProofCompleted is a free log retrieval operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_Challenge *ChallengeFilterer) FilterOneStepProofCompleted(opts *bind.FilterOpts) (*ChallengeOneStepProofCompletedIterator, error) {

	logs, sub, err := _Challenge.contract.FilterLogs(opts, "OneStepProofCompleted")
	if err != nil {
		return nil, err
	}
	return &ChallengeOneStepProofCompletedIterator{contract: _Challenge.contract, event: "OneStepProofCompleted", logs: logs, sub: sub}, nil
}

// WatchOneStepProofCompleted is a free log subscription operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_Challenge *ChallengeFilterer) WatchOneStepProofCompleted(opts *bind.WatchOpts, sink chan<- *ChallengeOneStepProofCompleted) (event.Subscription, error) {

	logs, sub, err := _Challenge.contract.WatchLogs(opts, "OneStepProofCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChallengeOneStepProofCompleted)
				if err := _Challenge.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOneStepProofCompleted is a log parse operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_Challenge *ChallengeFilterer) ParseOneStepProofCompleted(log types.Log) (*ChallengeOneStepProofCompleted, error) {
	event := new(ChallengeOneStepProofCompleted)
	if err := _Challenge.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
