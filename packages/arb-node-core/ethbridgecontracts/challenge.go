// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgecontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ChallengeABI is the input ABI used to generate the binding from.
const ChallengeABI = "[{\"anonymous\":false,\"inputs\":[],\"name\":\"AsserterTimedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"challengeRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"segmentStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"segmentLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"chainHashes\",\"type\":\"bytes32[]\"}],\"name\":\"Bisected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ChallengerTimedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ConstraintWin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InitiatedChallenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OneStepProofCompleted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"asserter\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segmentToChallenge\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"_chainHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_segmentStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_segmentLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_oldEndHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_gasUsedBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_assertionRest\",\"type\":\"bytes32\"}],\"name\":\"bisectExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_chainHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_segmentLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_oldEndHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_newSegmentLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_startAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"bisectExecutionStoppedShort\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segmentToChallenge\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"_chainHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_segmentStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_segmentLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_oldEndHash\",\"type\":\"bytes32\"}],\"name\":\"bisectInboxConsistency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segmentToChallenge\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"_chainHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_segmentStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_segmentLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_oldInboxAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_oldInboxDelta\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_newInboxDelta\",\"type\":\"bytes32\"}],\"name\":\"bisectInboxDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengedNodeNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challenger\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segmentToChallenge\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_segmentStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_segmentLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_oldEndHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_gasUsedBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_assertionRest\",\"type\":\"bytes32\"}],\"name\":\"constraintWinExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentResponder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadlineBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executionOneStepProofCon\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_executionOneStepProof2Con\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rollupAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_challengedNode\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_inboxConsistencyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_inboxDeltaHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_executionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_executionCheckTimeBlocks\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"_asserter\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_challenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_challengePeriodBlocks\",\"type\":\"uint256\"}],\"name\":\"initializeChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMaster\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kind\",\"outputs\":[{\"internalType\":\"enumChallenge.Kind\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segmentToChallenge\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_segmentStart\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_oldEndHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[3]\",\"name\":\"_machineFields\",\"type\":\"bytes32[3]\"},{\"internalType\":\"uint64\",\"name\":\"_initialGasUsed\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_initialMessageCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialLogCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_executionProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_bufferProof\",\"type\":\"bytes\"}],\"name\":\"oneStepProveExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segmentToChallenge\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_segmentStart\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_oldEndHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_lowerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"oneStepProveInboxConsistency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segmentToChallenge\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_segmentStart\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_oldEndHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_prevInboxAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_prevInboxDelta\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nextInboxAcc\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inboxSeqNum\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_msgData\",\"type\":\"bytes\"}],\"name\":\"oneStepProveInboxDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"_machineFields\",\"type\":\"bytes32[3]\"},{\"internalType\":\"uint64\",\"name\":\"_initialGasUsed\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_initialMessageCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialLogCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_executionProof\",\"type\":\"bytes\"}],\"name\":\"oneStepProveStoppedShortCanRun\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turn\",\"outputs\":[{\"internalType\":\"enumChallenge.Turn\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ChallengeFuncSigs maps the 4-byte function signature to its string representation.
var ChallengeFuncSigs = map[string]string{
	"bb4af0b1": "asserter()",
	"6b01f4eb": "bisectExecution(uint256,bytes,bytes32[],uint256,uint256,bytes32,uint256,bytes32)",
	"1fda25ba": "bisectExecutionStoppedShort(bytes32[],uint256,bytes32,uint256,bytes32)",
	"7b8866c7": "bisectInboxConsistency(uint256,bytes,bytes32[],uint256,uint256,bytes32)",
	"50151e99": "bisectInboxDelta(uint256,bytes,bytes32[],uint256,uint256,bytes32,bytes32,bytes32)",
	"fb1bd967": "challengedNodeNum()",
	"534db0e2": "challenger()",
	"bca060af": "constraintWinExecution(uint256,bytes,uint256,uint256,bytes32,uint256,bytes32)",
	"8a8cd218": "currentResponder()",
	"2edfb42a": "deadlineBlock()",
	"f9559d38": "initializeChallenge(address,address,address,uint256,bytes32,bytes32,bytes32,uint256,address,address,uint256)",
	"6f791d29": "isMaster()",
	"04baa00b": "kind()",
	"ed6b8d5c": "oneStepProveExecution(uint256,bytes,uint256,bytes32,bytes32[3],uint64,uint256,uint256,bytes,bytes)",
	"ed569319": "oneStepProveInboxConsistency(uint256,bytes,uint256,bytes32,bytes32,bytes32)",
	"a6acf41f": "oneStepProveInboxDelta(uint256,bytes,uint256,bytes32,bytes32,bytes32,bytes32,uint8,uint256,uint256,address,uint256,bytes)",
	"5c522251": "oneStepProveStoppedShortCanRun(bytes32[3],uint64,uint256,uint256,bytes)",
	"70dea79a": "timeout()",
	"8b299903": "turn()",
}

// ChallengeBin is the compiled bytecode used for deploying new contracts.
var ChallengeBin = "0x608060405234801561001057600080fd5b506000805460ff19166001179055613a518061002d6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80637b8866c7116100ad578063bca060af11610071578063bca060af146106f1578063ed5693191461077e578063ed6b8d5c14610805578063f9559d3814610a10578063fb1bd96714610a8057610121565b80637b8866c71461047c5780638a8cd2181461054d5780638b29990314610555578063a6acf41f1461056d578063bb4af0b1146106e957610121565b8063534db0e2116100f4578063534db0e2146102c95780635c522251146102ed5780636b01f4eb1461037a5780636f791d291461045857806370dea79a1461047457610121565b806304baa00b146101265780631fda25ba1461014f5780632edfb42a146101d157806350151e99146101eb575b600080fd5b61012e610a88565b6040518082600481111561013e57fe5b815260200191505060405180910390f35b6101cf600480360360a081101561016557600080fd5b810190602081018135600160201b81111561017f57600080fd5b82018360208201111561019157600080fd5b803590602001918460208302840111600160201b831117156101b257600080fd5b919350915080359060208101359060408101359060600135610a91565b005b6101d9610d2c565b60408051918252519081900360200190f35b6101cf600480360361010081101561020257600080fd5b81359190810190604081016020820135600160201b81111561022357600080fd5b82018360208201111561023557600080fd5b803590602001918460018302840111600160201b8311171561025657600080fd5b919390929091602081019035600160201b81111561027357600080fd5b82018360208201111561028557600080fd5b803590602001918460208302840111600160201b831117156102a657600080fd5b919350915080359060208101359060408101359060608101359060800135610d32565b6102d161101d565b604080516001600160a01b039092168252519081900360200190f35b6101cf600480360360e081101561030357600080fd5b67ffffffffffffffff6060830135169060808301359060a08401359084018460e0810160c0820135600160201b81111561033c57600080fd5b82018360208201111561034e57600080fd5b803590602001918460018302840111600160201b8311171561036f57600080fd5b50909250905061102c565b6101cf600480360361010081101561039157600080fd5b81359190810190604081016020820135600160201b8111156103b257600080fd5b8201836020820111156103c457600080fd5b803590602001918460018302840111600160201b831117156103e557600080fd5b919390929091602081019035600160201b81111561040257600080fd5b82018360208201111561041457600080fd5b803590602001918460208302840111600160201b8311171561043557600080fd5b9193509150803590602081013590604081013590606081013590608001356112a9565b6104606116a3565b604080519115158252519081900360200190f35b6101cf6116ad565b6101cf600480360360c081101561049257600080fd5b81359190810190604081016020820135600160201b8111156104b357600080fd5b8201836020820111156104c557600080fd5b803590602001918460018302840111600160201b831117156104e657600080fd5b919390929091602081019035600160201b81111561050357600080fd5b82018360208201111561051557600080fd5b803590602001918460208302840111600160201b8311171561053657600080fd5b9193509150803590602081013590604001356117aa565b6102d1611a5d565b61055d611aec565b6040518082600281111561013e57fe5b6101cf60048036036101a081101561058457600080fd5b81359190810190604081016020820135600160201b8111156105a557600080fd5b8201836020820111156105b757600080fd5b803590602001918460018302840111600160201b831117156105d857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929584359560208601359560408101359550606081013594506080810135935060ff60a0820135169260c08201359260e0830135926001600160a01b0361010082013516926101208201359290916101608101906101400135600160201b81111561067557600080fd5b82018360208201111561068757600080fd5b803590602001918460018302840111600160201b831117156106a857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611af5945050505050565b6102d1611c83565b6101cf600480360360e081101561070757600080fd5b81359190810190604081016020820135600160201b81111561072857600080fd5b82018360208201111561073a57600080fd5b803590602001918460018302840111600160201b8311171561075b57600080fd5b919350915080359060208101359060408101359060608101359060800135611c92565b6101cf600480360360c081101561079457600080fd5b81359190810190604081016020820135600160201b8111156107b557600080fd5b8201836020820111156107c757600080fd5b803590602001918460018302840111600160201b831117156107e857600080fd5b919350915080359060208101359060408101359060600135611eca565b6101cf600480360361018081101561081c57600080fd5b81359190810190604081016020820135600160201b81111561083d57600080fd5b82018360208201111561084f57600080fd5b803590602001918460018302840111600160201b8311171561087057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051606081810183529497863597602088013597919690955060a082019450919201906003908390839080828437600092019190915250919467ffffffffffffffff843516946020850135946040810135945091925090608081019060600135600160201b81111561091757600080fd5b82018360208201111561092957600080fd5b803590602001918460018302840111600160201b8311171561094a57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561099c57600080fd5b8201836020820111156109ae57600080fd5b803590602001918460018302840111600160201b831117156109cf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612086945050505050565b6101cf6004803603610160811015610a2757600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359160808201359160a08101359160c08201359160e0810135916101008201358116916101208101359091169061014001356124d0565b6101d9612637565b600b5460ff1681565b610a99611a5d565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b81525090610b595760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b1e578181015183820152602001610b06565b50505050905090810190601f168015610b4b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600c544311156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b81525090610bd15760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b1e578181015183820152602001610b06565b506000600b5460ff166004811115610be557fe5b14610bef57600080fd5b610bf88261263d565b8514610c0357600080fd5b838210610c0f57600080fd5b600654610c1f6000868487612658565b14610c2957600080fd5b8115610c8f57610c6d868680806020026020016040519081016040528093929190818152602001838360200280828437600092018290525092508691506126969050565b5085856000198101818110610c7e57fe5b602002919091013560065550610c95565b60068190555b600b805460ff191660049081179091556000908190556005819055600655600a54610cbf906127c5565b600e546000805160206139fc833981519152600086898960405180858152602001848152602001806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f191690920182900397509095505050505050a2505050505050565b600c5481565b610d3f6001600554612809565b610d47611a5d565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b81525090610dca5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b1e578181015183820152602001610b06565b50600c544311156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b81525090610e425760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b1e578181015183820152602001610b06565b5060018411610e8e576040805162461bcd60e51b8152602060048201526013602482015272189a5cd958dd1a5bdb881d1bdbc81cda1bdc9d606a1b604482015290519081900360640190fd5b610e978461263d565b8614610ea257600080fd5b81811415610eaf57600080fd5b6000610ebb8484612884565b90506000610ec98584612884565b90508089896000198101818110610edc57fe5b9050602002013514610eed57600080fd5b6000610f0e88888c8c6000818110610f0157fe5b9050602002013586612658565b9050610f5f8c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050828f6128b0565b610f9f8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508c92508b91506126969050565b50610faa60016127c5565b600e546000805160206139fc83398151915289898d8d60405180858152602001848152602001806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f191690920182900397509095505050505050a250505050505050505050505050565b6008546001600160a01b031681565b611034611a5d565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b815250906110b75760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b1e578181015183820152602001610b06565b50600c544311156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b8152509061112f5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b1e578181015183820152602001610b06565b506004600b5460ff16600481111561114357fe5b1461114d57600080fd5b611155613981565b600054604051633d19f60360e11b81526101009091046001600160a01b031690637a33ec06908990869086906004018084606080828437600083820152601f01601f1916909101828103602090810182528101849052905060408101848480828437600083820152604051601f909101601f1916909201965060c09550909350505081840390508186803b1580156111ec57600080fd5b505afa158015611200573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060c081101561122557600080fd5b50600654604080516060818101909252602090930193509091611265918a9060039083908390808284376000920191909152508a9150899050888661293c565b1461126f57600080fd5b6040517f117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f590600090a16112a0612978565b50505050505050565b6004600b5460ff1660048111156112bc57fe5b14156112d557600b805460ff1916600317905560006006555b6112e26003600654612809565b6112ea611a5d565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b8152509061136d5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b1e578181015183820152602001610b06565b50600c544311156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b815250906113e55760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b1e578181015183820152602001610b06565b5060018411611427576040805162461bcd60e51b81526020600482015260096024820152681513d3d7d4d213d49560ba1b604482015290519081900360640190fd5b6114308461263d565b8614611473576040805162461bcd60e51b815260206004820152600d60248201526c4249534543545f44454752454560981b604482015290519081900360640190fd5b828787600019810181811061148457fe5b9050602002013514156114c9576040805162461bcd60e51b815260206004820152600860248201526714d0535157d1539160c21b604482015290519081900360640190fd5b6114d38282612884565b878760008181106114e057fe5b905060200201351461152e576040805162461bcd60e51b81526020600482015260126024820152717365676d656e74207072652d6669656c647360701b604482015290519081900360640190fd5b838501821061157d576040805162461bcd60e51b81526020600482015260166024820152750d2dcecc2d8d2c840e6cacedacadce840d8cadccee8d60531b604482015290519081900360640190fd5b600061159e86868a8a600081811061159157fe5b9050602002013587612658565b90506115e38a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508592508f91506128b09050565b6116268888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a92505050878101869003612696565b50611632600a546127c5565b600e546000805160206139fc83398151915287878b8b60405180858152602001848152602001806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f191690920182900397509095505050505050a25050505050505050505050565b60005460ff165b90565b600c5443116040518060400160405280601081526020016f54494d454f55545f444541444c494e4560801b815250906117275760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b1e578181015183820152602001610b06565b506001600d5460ff16600281111561173b57fe5b1415611777576040517f2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f090600090a161177261299d565b6117a8565b6040517f4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a90600090a16117a8612a19565b565b6117b76001600454612809565b6117bf611a5d565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b815250906118425760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b1e578181015183820152602001610b06565b50600c544311156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b815250906118ba5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b1e578181015183820152602001610b06565b5060018211611906576040805162461bcd60e51b8152602060048201526013602482015272189a5cd958dd1a5bdb881d1bdbc81cda1bdc9d606a1b604482015290519081900360640190fd5b61190f8261263d565b841461191a57600080fd5b808585600019810181811061192b57fe5b90506020020135141561193d57600080fd5b600061195e84848888600081811061195157fe5b9050602002013585612658565b90506119a388888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508592508d91506128b09050565b6119e38686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508892508791506126969050565b506119ee60016127c5565b600e546000805160206139fc8339815191528585898960405180858152602001848152602001806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f191690920182900397509095505050505050a2505050505050505050565b60006001600d5460ff166002811115611a7257fe5b1415611a8a57506007546001600160a01b03166116aa565b6002600d5460ff166002811115611a9d57fe5b1415611ab557506008546001600160a01b03166116aa565b6040805162461bcd60e51b81526020600482015260076024820152662727afaa2aa92760c91b604482015290519081900360640190fd5b600d5460ff1681565b611b026001600554612809565b611b0a611a5d565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b81525090611b8d5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b1e578181015183820152602001610b06565b50600c544311156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b81525090611c055760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b1e578181015183820152602001610b06565b50611c17898989898989898989612a74565b8a1415611c2357600080fd5b611c438c611c3d8d6001611c378e8e612884565b8f612658565b8f6128b0565b6040517f117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f590600090a1611c74612978565b50505050505050505050505050565b6007546001600160a01b031681565b6004600b5460ff166004811115611ca557fe5b1415611cbe57600b805460ff1916600317905560006006555b611ccb6003600654612809565b611cd3611a5d565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b81525090611d565760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b1e578181015183820152602001610b06565b50600c544311156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b81525090611dce5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b1e578181015183820152602001610b06565b5060018411611e10576040805162461bcd60e51b81526020600482015260096024820152681513d3c814d213d49560ba1b604482015290519081900360640190fd5b6000611e1c8383612884565b90506000611e2c87878488612658565b9050611e7189898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508592508e91506128b09050565b858701841015611e8057600080fd5b84821415611e8d57600080fd5b6040517f6af162552a4b84b5de3ae085d52a72f3600612e1900ffd795ee386297eaaa55890600090a1611ebe612978565b50505050505050505050565b611ed76001600454612809565b611edf611a5d565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b81525090611f625760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b1e578181015183820152602001610b06565b50600c544311156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b81525090611fda5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b1e578181015183820152602001610b06565b5082821415611fe857600080fd5b6000611ff48383612884565b905060006120058660018487612658565b905061204a88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508592508d91506128b09050565b6040517f117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f590600090a161207b612978565b505050505050505050565b6004600b5460ff16600481111561209957fe5b14156120b257600b805460ff1916600317905560006006555b6120bf6003600654612809565b6120c7611a5d565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b8152509061214a5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b1e578181015183820152602001610b06565b50600c544311156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b815250906121c25760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b1e578181015183820152602001610b06565b5060006121cd613981565b825161230357600060019054906101000a90046001600160a01b03166001600160a01b0316637a33ec0689866040518363ffffffff1660e01b81526004018083600360200280838360005b83811015612230578181015183820152602001612218565b5050505090500180602001828103825283818151815260200191508051906020019080838360005b83811015612270578181015183820152602001612258565b50505050905090810190601f16801561229d5780820380516001836020036101000a031916815260200191505b50935050505060c06040518083038186803b1580156122bb57600080fd5b505afa1580156122cf573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060c08110156122f457600080fd5b50805192506020019050612485565b600154604051630e81abbb60e21b81526001600160a01b0390911690633a06aeec908a90879087906004018084606080838360005b83811015612350578181015183820152602001612338565b505050509050018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561239457818101518382015260200161237c565b50505050905090810190601f1680156123c15780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156123f45781810151838201526020016123dc565b50505050905090810190601f1680156124215780820380516001836020036101000a031916815260200191505b509550505050505060c06040518083038186803b15801561244157600080fd5b505afa158015612455573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060c081101561247a57600080fd5b508051925060200190505b612493888888888686612ac6565b89141561249f57600080fd5b60006124c38b8467ffffffffffffffff166124bd8c8c8c8c8961293c565b8d612658565b9050611c438c828f6128b0565b6000600d5460ff1660028111156124e357fe5b146040518060400160405280600f81526020016e4348414c5f494e49545f535441544560881b815250906125585760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b1e578181015183820152602001610b06565b5060008054610100600160a81b0319166101006001600160a01b038e811691909102919091178255600180546001600160a01b03199081168e8416179091556002805482168d841617815560038c905560048b905560058a90556006899055600780548316888516179055600880549092169286169290921790556009839055600a869055600b805460ff199081169091554384018701600c55600d80549091169091179055600e8190556040517f7003482dc89fcecb9f14e280f21ee716bd54187f7f3b0ab5ed78f3648218f2de9190a15050505050505050505050565b60035481565b6000601482101561264f575080612653565b5060145b919050565b604080516020808201969096528082019490945260608401929092526080808401919091528151808403909101815260a09092019052805191012090565b82516000906000190160608167ffffffffffffffff811180156126b857600080fd5b506040519080825280602002602001820160405280156126e2578160200160208202803683370190505b50905060006126f18584612b3e565b9050600086905061272c81838a60008151811061270a57fe5b60200260200101518b60018151811061271f57fe5b6020026020010151612658565b8360008151811061273957fe5b602090810291909101015281016127508685612b5c565b915060015b848110156127a85761278582848b848151811061276e57fe5b60200260200101518c856001018151811061271f57fe5b84828151811061279157fe5b602090810291909101015290820190600101612755565b5060006127b484612b6f565b50600e555093979650505050505050565b6002600d5460ff1660028111156127d857fe5b14156127f057600d805460ff191660011790556127fe565b600d805460ff191660021790555b600954430101600c55565b6000600b5460ff16600481111561281c57fe5b141561285957600e819055600b805483919060ff1916600183600481111561284057fe5b0217905550600060048190556005819055600655612880565b81600481111561286557fe5b600b5460ff16600481111561287657fe5b1461288057600080fd5b5050565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b60006128c0848484600101612ce0565b50905080600e5414604051806040016040528060088152602001672124a9afa82922ab60c11b815250906129355760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b1e578181015183820152602001610b06565b5050505050565b845181516020870151604088015160009361296e9367ffffffffffffffff8a1693612969938a908a612ded565b612884565b9695505050505050565b6001600d5460ff16600281111561298b57fe5b141561299957611772612a19565b6117a85b60025460085460075460408051637d3c01f360e11b81526001600160a01b039384166004820152918316602483015251919092169163fa7803e691604480830192600092919082900301818387803b1580156129f857600080fd5b505af1158015612a0c573d6000803e3d6000fd5b505050506117a833612e38565b60025460075460085460408051637d3c01f360e11b81526001600160a01b039384166004820152918316602483015251919092169163fa7803e691604480830192600092919082900301818387803b1580156129f857600080fd5b6000612a9088612969612a8b8a8a8a8a8a8a612eb8565b612fe0565b8a14612a9b57600080fd5b612ab8886129698b6129698b898c8c8b8b8051906020012061314d565b9a9950505050505050505050565b6040810151602080830151606084015191890151600093612b3393878b0167ffffffffffffffff1693612969939091908114612b03576001612b06565b60005b608089015160408f015160ff929092168d01918114612b26576001612b29565b60005b60ff168c01612ded565b979650505050505050565b6000818381612b4957fe5b06828481612b5357fe5b04019392505050565b6000818381612b6757fe5b049392505050565b600080600183511015612b8157600080fd5b6001835b600181511115612cbf5760606002825160010181612b9f57fe5b0467ffffffffffffffff81118015612bb657600080fd5b50604051908082528060200260200182016040528015612be0578160200160208202803683370190505b50905060005b8151811015612cb1578251816002026001011015612c7957828160020281518110612c0d57fe5b6020026020010151838260020260010181518110612c2757fe5b6020026020010151604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120828281518110612c6857fe5b602002602001018181525050612ca9565b828160020281518110612c8857fe5b6020026020010151828281518110612c9c57fe5b6020026020010181815250505b600101612be6565b506001909201919050612b85565b80600081518110612ccc57fe5b602002602001015182935093505050915091565b60008080848160205b88518111612ddf578089015193506020818a510360200181612d0757fe5b0491505b600082118015612d1e5750600287066001145b8015612d2c57508160020a87115b15612d44576002909604600190810196940193612d0b565b60028706612d8f578383604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120925060028781612d8757fe5b049650612dd1565b8284604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120925060028781612dca57fe5b0460010196505b600190940193602001612ce9565b509093505050935093915050565b60408051602080820198909852808201969096526060860194909452608085019290925260a084015260c0808401919091528151808403909101815260e09092019052805191012090565b6000546040805180820190915260098152684e4f545f434c4f4e4560b81b60208201529060ff1615612eab5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b1e578181015183820152602001610b06565b50806001600160a01b0316ff5b612ec061399f565b60408051600680825260e08201909252606091816020015b612ee061399f565b815260200190600190039081612ed8579050509050612f018860ff166131bb565b81600081518110612f0e57fe5b6020026020010181905250612f22876131bb565b81600181518110612f2f57fe5b6020026020010181905250612f43866131bb565b81600281518110612f5057fe5b6020026020010181905250612f6d856001600160a01b03166131bb565b81600381518110612f7a57fe5b6020026020010181905250612f8e846131bb565b81600481518110612f9b57fe5b6020026020010181905250612fb3836000855161327b565b81600581518110612fc057fe5b6020026020010181905250612fd4816133e8565b98975050505050505050565b6000612fea61352a565b60ff16826080015160ff16141561300d5781516130069061352f565b9050612653565b613015613553565b60ff16826080015160ff161415613033576130068260200151613558565b61303b61364d565b60ff16826080015160ff16141561305d57815160a08301516130069190613652565b6130656136a0565b60ff16826080015160ff16141561309e5761307e61399f565b61308b83604001516136a5565b905061309681612fe0565b915050612653565b6130a6613811565b60ff16826080015160ff1614156130bf57508051612653565b6130c7613816565b60ff16826080015160ff16141561310c575060608082015160408051607b60208083019190915281830193909352815180820383018152930190528151910120612653565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b6040805160f89790971b6001600160f81b03191660208089019190915260609690961b6bffffffffffffffffffffffff191660218801526035870194909452605586019290925260758501526095808501919091528151808503909101815260b59093019052815191012090565b6131c361399f565b6040805160c0810182528381528151606081018352600080825260208083018290528451828152808201865293949085019390830191613219565b61320661399f565b8152602001906001900390816131fe5790505b5090528152602001600060405190808252806020026020018201604052801561325c57816020015b61324961399f565b8152602001906001900390816132415790505b5081526000602082018190526040820152600160609091015292915050565b61328361399f565b6020820461328f61399f565b61329761381b565b60408051600280825260608281019093529293509091816020015b6132ba61399f565b8152602001906001900390816132b257905050905060005b83811015613335576132f16132ec89602084028a01613862565b6131bb565b826000815181106132fe57fe5b6020026020010181905250828260018151811061331757fe5b602002602001018190525061332b826136a5565b92506001016132d2565b5060208506156133a557600061335188601f1989890101613862565b9050602086066020036008021b613367816131bb565b8260008151811061337457fe5b6020026020010181905250828260018151811061338d57fe5b60200260200101819052506133a1826136a5565b9250505b6133ae856131bb565b816000815181106133bb57fe5b602002602001018190525081816001815181106133d457fe5b6020026020010181905250612b33816136a5565b6133f061399f565b6133fa82516138bb565b61344b576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b83518110156134825783818151811061346557fe5b602002602001015160a00151820191508080600101915050613450565b506040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b8152602001600067ffffffffffffffff811180156134cb57600080fd5b5060405190808252806020026020018201604052801561350557816020015b6134f261399f565b8152602001906001900390816134ea5790505b5090528152602081019490945260006040850152600360608501526080909301525090565b600090565b60408051602080820193909352815180820384018152908201909152805191012090565b600190565b600060028260400151511061356957fe5b6040820151516135cc5761357b613553565b82600001518360200151604051602001808460ff1660f81b81526001018360ff1660f81b81526001018281526020019350505050604051602081830303815290604052805190602001209050612653565b6135d4613553565b82600001516135fa84604001516000815181106135ed57fe5b6020026020010151612fe0565b8460200151604051602001808560ff1660f81b81526001018460ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b600290565b600061365c6136a0565b8383604051602001808460ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b600390565b6136ad61399f565b6008825111156136fb576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b6060825167ffffffffffffffff8111801561371557600080fd5b5060405190808252806020026020018201604052801561373f578160200160208202803683370190505b508051909150600160005b828110156137a2576137618682815181106135ed57fe5b84828151811061376d57fe5b60200260200101818152505085818151811061378557fe5b602002602001015160a0015182019150808060010191505061374a565b506000835184604051602001808360ff1660f81b8152600101828051906020019060200280838360005b838110156137e45781810151838201526020016137cc565b505050509050019250505060405160208183030381529060405280519060200120905061296e81836138c2565b606490565b600c90565b61382361399f565b6040805160008082526020820190925261385d91613857565b61384461399f565b81526020019060019003908161383c5790505b506133e8565b905090565b600081602001835110156138b2576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b6008101590565b6138ca61399f565b6040805160c0810182528481528151606081018352600080825260208083018290528451828152808201865293949085019390830191613920565b61390d61399f565b8152602001906001900390816139055790505b5090528152602001600060405190808252806020026020018201604052801561396357816020015b61395061399f565b8152602001906001900390816139485790505b50815260006020820152600260408201526060019290925250919050565b6040518060a001604052806005906020820280368337509192915050565b6040518060c00160405280600081526020016139b96139dc565b815260606020820181905260006040830181905290820181905260809091015290565b604080516060808201835260008083526020830152918101919091529056fe0a2bdfea671da507e80b0cbae49dd25100a5bdacc5dff43a9163a3fcbd7c3c7da264697066735822122034a70b3af493f990da24d5c0cfd7759c284c1f768e28774cd3088fd63143c85364736f6c634300060c0033"

// DeployChallenge deploys a new Ethereum contract, binding an instance of Challenge to it.
func DeployChallenge(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Challenge, error) {
	parsed, err := abi.JSON(strings.NewReader(ChallengeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ChallengeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Challenge{ChallengeCaller: ChallengeCaller{contract: contract}, ChallengeTransactor: ChallengeTransactor{contract: contract}, ChallengeFilterer: ChallengeFilterer{contract: contract}}, nil
}

// Challenge is an auto generated Go binding around an Ethereum contract.
type Challenge struct {
	ChallengeCaller     // Read-only binding to the contract
	ChallengeTransactor // Write-only binding to the contract
	ChallengeFilterer   // Log filterer for contract events
}

// ChallengeCaller is an auto generated read-only Go binding around an Ethereum contract.
type ChallengeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChallengeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ChallengeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChallengeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ChallengeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChallengeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ChallengeSession struct {
	Contract     *Challenge        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ChallengeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ChallengeCallerSession struct {
	Contract *ChallengeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ChallengeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ChallengeTransactorSession struct {
	Contract     *ChallengeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ChallengeRaw is an auto generated low-level Go binding around an Ethereum contract.
type ChallengeRaw struct {
	Contract *Challenge // Generic contract binding to access the raw methods on
}

// ChallengeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ChallengeCallerRaw struct {
	Contract *ChallengeCaller // Generic read-only contract binding to access the raw methods on
}

// ChallengeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ChallengeTransactorRaw struct {
	Contract *ChallengeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewChallenge creates a new instance of Challenge, bound to a specific deployed contract.
func NewChallenge(address common.Address, backend bind.ContractBackend) (*Challenge, error) {
	contract, err := bindChallenge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Challenge{ChallengeCaller: ChallengeCaller{contract: contract}, ChallengeTransactor: ChallengeTransactor{contract: contract}, ChallengeFilterer: ChallengeFilterer{contract: contract}}, nil
}

// NewChallengeCaller creates a new read-only instance of Challenge, bound to a specific deployed contract.
func NewChallengeCaller(address common.Address, caller bind.ContractCaller) (*ChallengeCaller, error) {
	contract, err := bindChallenge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ChallengeCaller{contract: contract}, nil
}

// NewChallengeTransactor creates a new write-only instance of Challenge, bound to a specific deployed contract.
func NewChallengeTransactor(address common.Address, transactor bind.ContractTransactor) (*ChallengeTransactor, error) {
	contract, err := bindChallenge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ChallengeTransactor{contract: contract}, nil
}

// NewChallengeFilterer creates a new log filterer instance of Challenge, bound to a specific deployed contract.
func NewChallengeFilterer(address common.Address, filterer bind.ContractFilterer) (*ChallengeFilterer, error) {
	contract, err := bindChallenge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ChallengeFilterer{contract: contract}, nil
}

// bindChallenge binds a generic wrapper to an already deployed contract.
func bindChallenge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ChallengeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Challenge *ChallengeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Challenge.Contract.ChallengeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Challenge *ChallengeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Challenge.Contract.ChallengeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Challenge *ChallengeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Challenge.Contract.ChallengeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Challenge *ChallengeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Challenge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Challenge *ChallengeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Challenge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Challenge *ChallengeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Challenge.Contract.contract.Transact(opts, method, params...)
}

// Asserter is a free data retrieval call binding the contract method 0xbb4af0b1.
//
// Solidity: function asserter() view returns(address)
func (_Challenge *ChallengeCaller) Asserter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Challenge.contract.Call(opts, &out, "asserter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Asserter is a free data retrieval call binding the contract method 0xbb4af0b1.
//
// Solidity: function asserter() view returns(address)
func (_Challenge *ChallengeSession) Asserter() (common.Address, error) {
	return _Challenge.Contract.Asserter(&_Challenge.CallOpts)
}

// Asserter is a free data retrieval call binding the contract method 0xbb4af0b1.
//
// Solidity: function asserter() view returns(address)
func (_Challenge *ChallengeCallerSession) Asserter() (common.Address, error) {
	return _Challenge.Contract.Asserter(&_Challenge.CallOpts)
}

// ChallengedNodeNum is a free data retrieval call binding the contract method 0xfb1bd967.
//
// Solidity: function challengedNodeNum() view returns(uint256)
func (_Challenge *ChallengeCaller) ChallengedNodeNum(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Challenge.contract.Call(opts, &out, "challengedNodeNum")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChallengedNodeNum is a free data retrieval call binding the contract method 0xfb1bd967.
//
// Solidity: function challengedNodeNum() view returns(uint256)
func (_Challenge *ChallengeSession) ChallengedNodeNum() (*big.Int, error) {
	return _Challenge.Contract.ChallengedNodeNum(&_Challenge.CallOpts)
}

// ChallengedNodeNum is a free data retrieval call binding the contract method 0xfb1bd967.
//
// Solidity: function challengedNodeNum() view returns(uint256)
func (_Challenge *ChallengeCallerSession) ChallengedNodeNum() (*big.Int, error) {
	return _Challenge.Contract.ChallengedNodeNum(&_Challenge.CallOpts)
}

// Challenger is a free data retrieval call binding the contract method 0x534db0e2.
//
// Solidity: function challenger() view returns(address)
func (_Challenge *ChallengeCaller) Challenger(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Challenge.contract.Call(opts, &out, "challenger")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Challenger is a free data retrieval call binding the contract method 0x534db0e2.
//
// Solidity: function challenger() view returns(address)
func (_Challenge *ChallengeSession) Challenger() (common.Address, error) {
	return _Challenge.Contract.Challenger(&_Challenge.CallOpts)
}

// Challenger is a free data retrieval call binding the contract method 0x534db0e2.
//
// Solidity: function challenger() view returns(address)
func (_Challenge *ChallengeCallerSession) Challenger() (common.Address, error) {
	return _Challenge.Contract.Challenger(&_Challenge.CallOpts)
}

// CurrentResponder is a free data retrieval call binding the contract method 0x8a8cd218.
//
// Solidity: function currentResponder() view returns(address)
func (_Challenge *ChallengeCaller) CurrentResponder(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Challenge.contract.Call(opts, &out, "currentResponder")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CurrentResponder is a free data retrieval call binding the contract method 0x8a8cd218.
//
// Solidity: function currentResponder() view returns(address)
func (_Challenge *ChallengeSession) CurrentResponder() (common.Address, error) {
	return _Challenge.Contract.CurrentResponder(&_Challenge.CallOpts)
}

// CurrentResponder is a free data retrieval call binding the contract method 0x8a8cd218.
//
// Solidity: function currentResponder() view returns(address)
func (_Challenge *ChallengeCallerSession) CurrentResponder() (common.Address, error) {
	return _Challenge.Contract.CurrentResponder(&_Challenge.CallOpts)
}

// DeadlineBlock is a free data retrieval call binding the contract method 0x2edfb42a.
//
// Solidity: function deadlineBlock() view returns(uint256)
func (_Challenge *ChallengeCaller) DeadlineBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Challenge.contract.Call(opts, &out, "deadlineBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DeadlineBlock is a free data retrieval call binding the contract method 0x2edfb42a.
//
// Solidity: function deadlineBlock() view returns(uint256)
func (_Challenge *ChallengeSession) DeadlineBlock() (*big.Int, error) {
	return _Challenge.Contract.DeadlineBlock(&_Challenge.CallOpts)
}

// DeadlineBlock is a free data retrieval call binding the contract method 0x2edfb42a.
//
// Solidity: function deadlineBlock() view returns(uint256)
func (_Challenge *ChallengeCallerSession) DeadlineBlock() (*big.Int, error) {
	return _Challenge.Contract.DeadlineBlock(&_Challenge.CallOpts)
}

// IsMaster is a free data retrieval call binding the contract method 0x6f791d29.
//
// Solidity: function isMaster() view returns(bool)
func (_Challenge *ChallengeCaller) IsMaster(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Challenge.contract.Call(opts, &out, "isMaster")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMaster is a free data retrieval call binding the contract method 0x6f791d29.
//
// Solidity: function isMaster() view returns(bool)
func (_Challenge *ChallengeSession) IsMaster() (bool, error) {
	return _Challenge.Contract.IsMaster(&_Challenge.CallOpts)
}

// IsMaster is a free data retrieval call binding the contract method 0x6f791d29.
//
// Solidity: function isMaster() view returns(bool)
func (_Challenge *ChallengeCallerSession) IsMaster() (bool, error) {
	return _Challenge.Contract.IsMaster(&_Challenge.CallOpts)
}

// Kind is a free data retrieval call binding the contract method 0x04baa00b.
//
// Solidity: function kind() view returns(uint8)
func (_Challenge *ChallengeCaller) Kind(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Challenge.contract.Call(opts, &out, "kind")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Kind is a free data retrieval call binding the contract method 0x04baa00b.
//
// Solidity: function kind() view returns(uint8)
func (_Challenge *ChallengeSession) Kind() (uint8, error) {
	return _Challenge.Contract.Kind(&_Challenge.CallOpts)
}

// Kind is a free data retrieval call binding the contract method 0x04baa00b.
//
// Solidity: function kind() view returns(uint8)
func (_Challenge *ChallengeCallerSession) Kind() (uint8, error) {
	return _Challenge.Contract.Kind(&_Challenge.CallOpts)
}

// Turn is a free data retrieval call binding the contract method 0x8b299903.
//
// Solidity: function turn() view returns(uint8)
func (_Challenge *ChallengeCaller) Turn(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Challenge.contract.Call(opts, &out, "turn")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Turn is a free data retrieval call binding the contract method 0x8b299903.
//
// Solidity: function turn() view returns(uint8)
func (_Challenge *ChallengeSession) Turn() (uint8, error) {
	return _Challenge.Contract.Turn(&_Challenge.CallOpts)
}

// Turn is a free data retrieval call binding the contract method 0x8b299903.
//
// Solidity: function turn() view returns(uint8)
func (_Challenge *ChallengeCallerSession) Turn() (uint8, error) {
	return _Challenge.Contract.Turn(&_Challenge.CallOpts)
}

// BisectExecution is a paid mutator transaction binding the contract method 0x6b01f4eb.
//
// Solidity: function bisectExecution(uint256 _segmentToChallenge, bytes _proof, bytes32[] _chainHashes, uint256 _segmentStart, uint256 _segmentLength, bytes32 _oldEndHash, uint256 _gasUsedBefore, bytes32 _assertionRest) returns()
func (_Challenge *ChallengeTransactor) BisectExecution(opts *bind.TransactOpts, _segmentToChallenge *big.Int, _proof []byte, _chainHashes [][32]byte, _segmentStart *big.Int, _segmentLength *big.Int, _oldEndHash [32]byte, _gasUsedBefore *big.Int, _assertionRest [32]byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "bisectExecution", _segmentToChallenge, _proof, _chainHashes, _segmentStart, _segmentLength, _oldEndHash, _gasUsedBefore, _assertionRest)
}

// BisectExecution is a paid mutator transaction binding the contract method 0x6b01f4eb.
//
// Solidity: function bisectExecution(uint256 _segmentToChallenge, bytes _proof, bytes32[] _chainHashes, uint256 _segmentStart, uint256 _segmentLength, bytes32 _oldEndHash, uint256 _gasUsedBefore, bytes32 _assertionRest) returns()
func (_Challenge *ChallengeSession) BisectExecution(_segmentToChallenge *big.Int, _proof []byte, _chainHashes [][32]byte, _segmentStart *big.Int, _segmentLength *big.Int, _oldEndHash [32]byte, _gasUsedBefore *big.Int, _assertionRest [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.BisectExecution(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _chainHashes, _segmentStart, _segmentLength, _oldEndHash, _gasUsedBefore, _assertionRest)
}

// BisectExecution is a paid mutator transaction binding the contract method 0x6b01f4eb.
//
// Solidity: function bisectExecution(uint256 _segmentToChallenge, bytes _proof, bytes32[] _chainHashes, uint256 _segmentStart, uint256 _segmentLength, bytes32 _oldEndHash, uint256 _gasUsedBefore, bytes32 _assertionRest) returns()
func (_Challenge *ChallengeTransactorSession) BisectExecution(_segmentToChallenge *big.Int, _proof []byte, _chainHashes [][32]byte, _segmentStart *big.Int, _segmentLength *big.Int, _oldEndHash [32]byte, _gasUsedBefore *big.Int, _assertionRest [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.BisectExecution(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _chainHashes, _segmentStart, _segmentLength, _oldEndHash, _gasUsedBefore, _assertionRest)
}

// BisectExecutionStoppedShort is a paid mutator transaction binding the contract method 0x1fda25ba.
//
// Solidity: function bisectExecutionStoppedShort(bytes32[] _chainHashes, uint256 _segmentLength, bytes32 _oldEndHash, uint256 _newSegmentLength, bytes32 _startAssertionHash) returns()
func (_Challenge *ChallengeTransactor) BisectExecutionStoppedShort(opts *bind.TransactOpts, _chainHashes [][32]byte, _segmentLength *big.Int, _oldEndHash [32]byte, _newSegmentLength *big.Int, _startAssertionHash [32]byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "bisectExecutionStoppedShort", _chainHashes, _segmentLength, _oldEndHash, _newSegmentLength, _startAssertionHash)
}

// BisectExecutionStoppedShort is a paid mutator transaction binding the contract method 0x1fda25ba.
//
// Solidity: function bisectExecutionStoppedShort(bytes32[] _chainHashes, uint256 _segmentLength, bytes32 _oldEndHash, uint256 _newSegmentLength, bytes32 _startAssertionHash) returns()
func (_Challenge *ChallengeSession) BisectExecutionStoppedShort(_chainHashes [][32]byte, _segmentLength *big.Int, _oldEndHash [32]byte, _newSegmentLength *big.Int, _startAssertionHash [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.BisectExecutionStoppedShort(&_Challenge.TransactOpts, _chainHashes, _segmentLength, _oldEndHash, _newSegmentLength, _startAssertionHash)
}

// BisectExecutionStoppedShort is a paid mutator transaction binding the contract method 0x1fda25ba.
//
// Solidity: function bisectExecutionStoppedShort(bytes32[] _chainHashes, uint256 _segmentLength, bytes32 _oldEndHash, uint256 _newSegmentLength, bytes32 _startAssertionHash) returns()
func (_Challenge *ChallengeTransactorSession) BisectExecutionStoppedShort(_chainHashes [][32]byte, _segmentLength *big.Int, _oldEndHash [32]byte, _newSegmentLength *big.Int, _startAssertionHash [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.BisectExecutionStoppedShort(&_Challenge.TransactOpts, _chainHashes, _segmentLength, _oldEndHash, _newSegmentLength, _startAssertionHash)
}

// BisectInboxConsistency is a paid mutator transaction binding the contract method 0x7b8866c7.
//
// Solidity: function bisectInboxConsistency(uint256 _segmentToChallenge, bytes _proof, bytes32[] _chainHashes, uint256 _segmentStart, uint256 _segmentLength, bytes32 _oldEndHash) returns()
func (_Challenge *ChallengeTransactor) BisectInboxConsistency(opts *bind.TransactOpts, _segmentToChallenge *big.Int, _proof []byte, _chainHashes [][32]byte, _segmentStart *big.Int, _segmentLength *big.Int, _oldEndHash [32]byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "bisectInboxConsistency", _segmentToChallenge, _proof, _chainHashes, _segmentStart, _segmentLength, _oldEndHash)
}

// BisectInboxConsistency is a paid mutator transaction binding the contract method 0x7b8866c7.
//
// Solidity: function bisectInboxConsistency(uint256 _segmentToChallenge, bytes _proof, bytes32[] _chainHashes, uint256 _segmentStart, uint256 _segmentLength, bytes32 _oldEndHash) returns()
func (_Challenge *ChallengeSession) BisectInboxConsistency(_segmentToChallenge *big.Int, _proof []byte, _chainHashes [][32]byte, _segmentStart *big.Int, _segmentLength *big.Int, _oldEndHash [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.BisectInboxConsistency(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _chainHashes, _segmentStart, _segmentLength, _oldEndHash)
}

// BisectInboxConsistency is a paid mutator transaction binding the contract method 0x7b8866c7.
//
// Solidity: function bisectInboxConsistency(uint256 _segmentToChallenge, bytes _proof, bytes32[] _chainHashes, uint256 _segmentStart, uint256 _segmentLength, bytes32 _oldEndHash) returns()
func (_Challenge *ChallengeTransactorSession) BisectInboxConsistency(_segmentToChallenge *big.Int, _proof []byte, _chainHashes [][32]byte, _segmentStart *big.Int, _segmentLength *big.Int, _oldEndHash [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.BisectInboxConsistency(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _chainHashes, _segmentStart, _segmentLength, _oldEndHash)
}

// BisectInboxDelta is a paid mutator transaction binding the contract method 0x50151e99.
//
// Solidity: function bisectInboxDelta(uint256 _segmentToChallenge, bytes _proof, bytes32[] _chainHashes, uint256 _segmentStart, uint256 _segmentLength, bytes32 _oldInboxAcc, bytes32 _oldInboxDelta, bytes32 _newInboxDelta) returns()
func (_Challenge *ChallengeTransactor) BisectInboxDelta(opts *bind.TransactOpts, _segmentToChallenge *big.Int, _proof []byte, _chainHashes [][32]byte, _segmentStart *big.Int, _segmentLength *big.Int, _oldInboxAcc [32]byte, _oldInboxDelta [32]byte, _newInboxDelta [32]byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "bisectInboxDelta", _segmentToChallenge, _proof, _chainHashes, _segmentStart, _segmentLength, _oldInboxAcc, _oldInboxDelta, _newInboxDelta)
}

// BisectInboxDelta is a paid mutator transaction binding the contract method 0x50151e99.
//
// Solidity: function bisectInboxDelta(uint256 _segmentToChallenge, bytes _proof, bytes32[] _chainHashes, uint256 _segmentStart, uint256 _segmentLength, bytes32 _oldInboxAcc, bytes32 _oldInboxDelta, bytes32 _newInboxDelta) returns()
func (_Challenge *ChallengeSession) BisectInboxDelta(_segmentToChallenge *big.Int, _proof []byte, _chainHashes [][32]byte, _segmentStart *big.Int, _segmentLength *big.Int, _oldInboxAcc [32]byte, _oldInboxDelta [32]byte, _newInboxDelta [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.BisectInboxDelta(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _chainHashes, _segmentStart, _segmentLength, _oldInboxAcc, _oldInboxDelta, _newInboxDelta)
}

// BisectInboxDelta is a paid mutator transaction binding the contract method 0x50151e99.
//
// Solidity: function bisectInboxDelta(uint256 _segmentToChallenge, bytes _proof, bytes32[] _chainHashes, uint256 _segmentStart, uint256 _segmentLength, bytes32 _oldInboxAcc, bytes32 _oldInboxDelta, bytes32 _newInboxDelta) returns()
func (_Challenge *ChallengeTransactorSession) BisectInboxDelta(_segmentToChallenge *big.Int, _proof []byte, _chainHashes [][32]byte, _segmentStart *big.Int, _segmentLength *big.Int, _oldInboxAcc [32]byte, _oldInboxDelta [32]byte, _newInboxDelta [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.BisectInboxDelta(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _chainHashes, _segmentStart, _segmentLength, _oldInboxAcc, _oldInboxDelta, _newInboxDelta)
}

// ConstraintWinExecution is a paid mutator transaction binding the contract method 0xbca060af.
//
// Solidity: function constraintWinExecution(uint256 _segmentToChallenge, bytes _proof, uint256 _segmentStart, uint256 _segmentLength, bytes32 _oldEndHash, uint256 _gasUsedBefore, bytes32 _assertionRest) returns()
func (_Challenge *ChallengeTransactor) ConstraintWinExecution(opts *bind.TransactOpts, _segmentToChallenge *big.Int, _proof []byte, _segmentStart *big.Int, _segmentLength *big.Int, _oldEndHash [32]byte, _gasUsedBefore *big.Int, _assertionRest [32]byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "constraintWinExecution", _segmentToChallenge, _proof, _segmentStart, _segmentLength, _oldEndHash, _gasUsedBefore, _assertionRest)
}

// ConstraintWinExecution is a paid mutator transaction binding the contract method 0xbca060af.
//
// Solidity: function constraintWinExecution(uint256 _segmentToChallenge, bytes _proof, uint256 _segmentStart, uint256 _segmentLength, bytes32 _oldEndHash, uint256 _gasUsedBefore, bytes32 _assertionRest) returns()
func (_Challenge *ChallengeSession) ConstraintWinExecution(_segmentToChallenge *big.Int, _proof []byte, _segmentStart *big.Int, _segmentLength *big.Int, _oldEndHash [32]byte, _gasUsedBefore *big.Int, _assertionRest [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.ConstraintWinExecution(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _segmentStart, _segmentLength, _oldEndHash, _gasUsedBefore, _assertionRest)
}

// ConstraintWinExecution is a paid mutator transaction binding the contract method 0xbca060af.
//
// Solidity: function constraintWinExecution(uint256 _segmentToChallenge, bytes _proof, uint256 _segmentStart, uint256 _segmentLength, bytes32 _oldEndHash, uint256 _gasUsedBefore, bytes32 _assertionRest) returns()
func (_Challenge *ChallengeTransactorSession) ConstraintWinExecution(_segmentToChallenge *big.Int, _proof []byte, _segmentStart *big.Int, _segmentLength *big.Int, _oldEndHash [32]byte, _gasUsedBefore *big.Int, _assertionRest [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.ConstraintWinExecution(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _segmentStart, _segmentLength, _oldEndHash, _gasUsedBefore, _assertionRest)
}

// InitializeChallenge is a paid mutator transaction binding the contract method 0xf9559d38.
//
// Solidity: function initializeChallenge(address _executionOneStepProofCon, address _executionOneStepProof2Con, address _rollupAddress, uint256 _challengedNode, bytes32 _inboxConsistencyHash, bytes32 _inboxDeltaHash, bytes32 _executionHash, uint256 _executionCheckTimeBlocks, address _asserter, address _challenger, uint256 _challengePeriodBlocks) returns()
func (_Challenge *ChallengeTransactor) InitializeChallenge(opts *bind.TransactOpts, _executionOneStepProofCon common.Address, _executionOneStepProof2Con common.Address, _rollupAddress common.Address, _challengedNode *big.Int, _inboxConsistencyHash [32]byte, _inboxDeltaHash [32]byte, _executionHash [32]byte, _executionCheckTimeBlocks *big.Int, _asserter common.Address, _challenger common.Address, _challengePeriodBlocks *big.Int) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "initializeChallenge", _executionOneStepProofCon, _executionOneStepProof2Con, _rollupAddress, _challengedNode, _inboxConsistencyHash, _inboxDeltaHash, _executionHash, _executionCheckTimeBlocks, _asserter, _challenger, _challengePeriodBlocks)
}

// InitializeChallenge is a paid mutator transaction binding the contract method 0xf9559d38.
//
// Solidity: function initializeChallenge(address _executionOneStepProofCon, address _executionOneStepProof2Con, address _rollupAddress, uint256 _challengedNode, bytes32 _inboxConsistencyHash, bytes32 _inboxDeltaHash, bytes32 _executionHash, uint256 _executionCheckTimeBlocks, address _asserter, address _challenger, uint256 _challengePeriodBlocks) returns()
func (_Challenge *ChallengeSession) InitializeChallenge(_executionOneStepProofCon common.Address, _executionOneStepProof2Con common.Address, _rollupAddress common.Address, _challengedNode *big.Int, _inboxConsistencyHash [32]byte, _inboxDeltaHash [32]byte, _executionHash [32]byte, _executionCheckTimeBlocks *big.Int, _asserter common.Address, _challenger common.Address, _challengePeriodBlocks *big.Int) (*types.Transaction, error) {
	return _Challenge.Contract.InitializeChallenge(&_Challenge.TransactOpts, _executionOneStepProofCon, _executionOneStepProof2Con, _rollupAddress, _challengedNode, _inboxConsistencyHash, _inboxDeltaHash, _executionHash, _executionCheckTimeBlocks, _asserter, _challenger, _challengePeriodBlocks)
}

// InitializeChallenge is a paid mutator transaction binding the contract method 0xf9559d38.
//
// Solidity: function initializeChallenge(address _executionOneStepProofCon, address _executionOneStepProof2Con, address _rollupAddress, uint256 _challengedNode, bytes32 _inboxConsistencyHash, bytes32 _inboxDeltaHash, bytes32 _executionHash, uint256 _executionCheckTimeBlocks, address _asserter, address _challenger, uint256 _challengePeriodBlocks) returns()
func (_Challenge *ChallengeTransactorSession) InitializeChallenge(_executionOneStepProofCon common.Address, _executionOneStepProof2Con common.Address, _rollupAddress common.Address, _challengedNode *big.Int, _inboxConsistencyHash [32]byte, _inboxDeltaHash [32]byte, _executionHash [32]byte, _executionCheckTimeBlocks *big.Int, _asserter common.Address, _challenger common.Address, _challengePeriodBlocks *big.Int) (*types.Transaction, error) {
	return _Challenge.Contract.InitializeChallenge(&_Challenge.TransactOpts, _executionOneStepProofCon, _executionOneStepProof2Con, _rollupAddress, _challengedNode, _inboxConsistencyHash, _inboxDeltaHash, _executionHash, _executionCheckTimeBlocks, _asserter, _challenger, _challengePeriodBlocks)
}

// OneStepProveExecution is a paid mutator transaction binding the contract method 0xed6b8d5c.
//
// Solidity: function oneStepProveExecution(uint256 _segmentToChallenge, bytes _proof, uint256 _segmentStart, bytes32 _oldEndHash, bytes32[3] _machineFields, uint64 _initialGasUsed, uint256 _initialMessageCount, uint256 _initialLogCount, bytes _executionProof, bytes _bufferProof) returns()
func (_Challenge *ChallengeTransactor) OneStepProveExecution(opts *bind.TransactOpts, _segmentToChallenge *big.Int, _proof []byte, _segmentStart *big.Int, _oldEndHash [32]byte, _machineFields [3][32]byte, _initialGasUsed uint64, _initialMessageCount *big.Int, _initialLogCount *big.Int, _executionProof []byte, _bufferProof []byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "oneStepProveExecution", _segmentToChallenge, _proof, _segmentStart, _oldEndHash, _machineFields, _initialGasUsed, _initialMessageCount, _initialLogCount, _executionProof, _bufferProof)
}

// OneStepProveExecution is a paid mutator transaction binding the contract method 0xed6b8d5c.
//
// Solidity: function oneStepProveExecution(uint256 _segmentToChallenge, bytes _proof, uint256 _segmentStart, bytes32 _oldEndHash, bytes32[3] _machineFields, uint64 _initialGasUsed, uint256 _initialMessageCount, uint256 _initialLogCount, bytes _executionProof, bytes _bufferProof) returns()
func (_Challenge *ChallengeSession) OneStepProveExecution(_segmentToChallenge *big.Int, _proof []byte, _segmentStart *big.Int, _oldEndHash [32]byte, _machineFields [3][32]byte, _initialGasUsed uint64, _initialMessageCount *big.Int, _initialLogCount *big.Int, _executionProof []byte, _bufferProof []byte) (*types.Transaction, error) {
	return _Challenge.Contract.OneStepProveExecution(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _segmentStart, _oldEndHash, _machineFields, _initialGasUsed, _initialMessageCount, _initialLogCount, _executionProof, _bufferProof)
}

// OneStepProveExecution is a paid mutator transaction binding the contract method 0xed6b8d5c.
//
// Solidity: function oneStepProveExecution(uint256 _segmentToChallenge, bytes _proof, uint256 _segmentStart, bytes32 _oldEndHash, bytes32[3] _machineFields, uint64 _initialGasUsed, uint256 _initialMessageCount, uint256 _initialLogCount, bytes _executionProof, bytes _bufferProof) returns()
func (_Challenge *ChallengeTransactorSession) OneStepProveExecution(_segmentToChallenge *big.Int, _proof []byte, _segmentStart *big.Int, _oldEndHash [32]byte, _machineFields [3][32]byte, _initialGasUsed uint64, _initialMessageCount *big.Int, _initialLogCount *big.Int, _executionProof []byte, _bufferProof []byte) (*types.Transaction, error) {
	return _Challenge.Contract.OneStepProveExecution(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _segmentStart, _oldEndHash, _machineFields, _initialGasUsed, _initialMessageCount, _initialLogCount, _executionProof, _bufferProof)
}

// OneStepProveInboxConsistency is a paid mutator transaction binding the contract method 0xed569319.
//
// Solidity: function oneStepProveInboxConsistency(uint256 _segmentToChallenge, bytes _proof, uint256 _segmentStart, bytes32 _oldEndHash, bytes32 _lowerHash, bytes32 _value) returns()
func (_Challenge *ChallengeTransactor) OneStepProveInboxConsistency(opts *bind.TransactOpts, _segmentToChallenge *big.Int, _proof []byte, _segmentStart *big.Int, _oldEndHash [32]byte, _lowerHash [32]byte, _value [32]byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "oneStepProveInboxConsistency", _segmentToChallenge, _proof, _segmentStart, _oldEndHash, _lowerHash, _value)
}

// OneStepProveInboxConsistency is a paid mutator transaction binding the contract method 0xed569319.
//
// Solidity: function oneStepProveInboxConsistency(uint256 _segmentToChallenge, bytes _proof, uint256 _segmentStart, bytes32 _oldEndHash, bytes32 _lowerHash, bytes32 _value) returns()
func (_Challenge *ChallengeSession) OneStepProveInboxConsistency(_segmentToChallenge *big.Int, _proof []byte, _segmentStart *big.Int, _oldEndHash [32]byte, _lowerHash [32]byte, _value [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.OneStepProveInboxConsistency(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _segmentStart, _oldEndHash, _lowerHash, _value)
}

// OneStepProveInboxConsistency is a paid mutator transaction binding the contract method 0xed569319.
//
// Solidity: function oneStepProveInboxConsistency(uint256 _segmentToChallenge, bytes _proof, uint256 _segmentStart, bytes32 _oldEndHash, bytes32 _lowerHash, bytes32 _value) returns()
func (_Challenge *ChallengeTransactorSession) OneStepProveInboxConsistency(_segmentToChallenge *big.Int, _proof []byte, _segmentStart *big.Int, _oldEndHash [32]byte, _lowerHash [32]byte, _value [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.OneStepProveInboxConsistency(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _segmentStart, _oldEndHash, _lowerHash, _value)
}

// OneStepProveInboxDelta is a paid mutator transaction binding the contract method 0xa6acf41f.
//
// Solidity: function oneStepProveInboxDelta(uint256 _segmentToChallenge, bytes _proof, uint256 _segmentStart, bytes32 _oldEndHash, bytes32 _prevInboxAcc, bytes32 _prevInboxDelta, bytes32 _nextInboxAcc, uint8 _kind, uint256 _blockNumber, uint256 _timestamp, address _sender, uint256 _inboxSeqNum, bytes _msgData) returns()
func (_Challenge *ChallengeTransactor) OneStepProveInboxDelta(opts *bind.TransactOpts, _segmentToChallenge *big.Int, _proof []byte, _segmentStart *big.Int, _oldEndHash [32]byte, _prevInboxAcc [32]byte, _prevInboxDelta [32]byte, _nextInboxAcc [32]byte, _kind uint8, _blockNumber *big.Int, _timestamp *big.Int, _sender common.Address, _inboxSeqNum *big.Int, _msgData []byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "oneStepProveInboxDelta", _segmentToChallenge, _proof, _segmentStart, _oldEndHash, _prevInboxAcc, _prevInboxDelta, _nextInboxAcc, _kind, _blockNumber, _timestamp, _sender, _inboxSeqNum, _msgData)
}

// OneStepProveInboxDelta is a paid mutator transaction binding the contract method 0xa6acf41f.
//
// Solidity: function oneStepProveInboxDelta(uint256 _segmentToChallenge, bytes _proof, uint256 _segmentStart, bytes32 _oldEndHash, bytes32 _prevInboxAcc, bytes32 _prevInboxDelta, bytes32 _nextInboxAcc, uint8 _kind, uint256 _blockNumber, uint256 _timestamp, address _sender, uint256 _inboxSeqNum, bytes _msgData) returns()
func (_Challenge *ChallengeSession) OneStepProveInboxDelta(_segmentToChallenge *big.Int, _proof []byte, _segmentStart *big.Int, _oldEndHash [32]byte, _prevInboxAcc [32]byte, _prevInboxDelta [32]byte, _nextInboxAcc [32]byte, _kind uint8, _blockNumber *big.Int, _timestamp *big.Int, _sender common.Address, _inboxSeqNum *big.Int, _msgData []byte) (*types.Transaction, error) {
	return _Challenge.Contract.OneStepProveInboxDelta(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _segmentStart, _oldEndHash, _prevInboxAcc, _prevInboxDelta, _nextInboxAcc, _kind, _blockNumber, _timestamp, _sender, _inboxSeqNum, _msgData)
}

// OneStepProveInboxDelta is a paid mutator transaction binding the contract method 0xa6acf41f.
//
// Solidity: function oneStepProveInboxDelta(uint256 _segmentToChallenge, bytes _proof, uint256 _segmentStart, bytes32 _oldEndHash, bytes32 _prevInboxAcc, bytes32 _prevInboxDelta, bytes32 _nextInboxAcc, uint8 _kind, uint256 _blockNumber, uint256 _timestamp, address _sender, uint256 _inboxSeqNum, bytes _msgData) returns()
func (_Challenge *ChallengeTransactorSession) OneStepProveInboxDelta(_segmentToChallenge *big.Int, _proof []byte, _segmentStart *big.Int, _oldEndHash [32]byte, _prevInboxAcc [32]byte, _prevInboxDelta [32]byte, _nextInboxAcc [32]byte, _kind uint8, _blockNumber *big.Int, _timestamp *big.Int, _sender common.Address, _inboxSeqNum *big.Int, _msgData []byte) (*types.Transaction, error) {
	return _Challenge.Contract.OneStepProveInboxDelta(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _segmentStart, _oldEndHash, _prevInboxAcc, _prevInboxDelta, _nextInboxAcc, _kind, _blockNumber, _timestamp, _sender, _inboxSeqNum, _msgData)
}

// OneStepProveStoppedShortCanRun is a paid mutator transaction binding the contract method 0x5c522251.
//
// Solidity: function oneStepProveStoppedShortCanRun(bytes32[3] _machineFields, uint64 _initialGasUsed, uint256 _initialMessageCount, uint256 _initialLogCount, bytes _executionProof) returns()
func (_Challenge *ChallengeTransactor) OneStepProveStoppedShortCanRun(opts *bind.TransactOpts, _machineFields [3][32]byte, _initialGasUsed uint64, _initialMessageCount *big.Int, _initialLogCount *big.Int, _executionProof []byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "oneStepProveStoppedShortCanRun", _machineFields, _initialGasUsed, _initialMessageCount, _initialLogCount, _executionProof)
}

// OneStepProveStoppedShortCanRun is a paid mutator transaction binding the contract method 0x5c522251.
//
// Solidity: function oneStepProveStoppedShortCanRun(bytes32[3] _machineFields, uint64 _initialGasUsed, uint256 _initialMessageCount, uint256 _initialLogCount, bytes _executionProof) returns()
func (_Challenge *ChallengeSession) OneStepProveStoppedShortCanRun(_machineFields [3][32]byte, _initialGasUsed uint64, _initialMessageCount *big.Int, _initialLogCount *big.Int, _executionProof []byte) (*types.Transaction, error) {
	return _Challenge.Contract.OneStepProveStoppedShortCanRun(&_Challenge.TransactOpts, _machineFields, _initialGasUsed, _initialMessageCount, _initialLogCount, _executionProof)
}

// OneStepProveStoppedShortCanRun is a paid mutator transaction binding the contract method 0x5c522251.
//
// Solidity: function oneStepProveStoppedShortCanRun(bytes32[3] _machineFields, uint64 _initialGasUsed, uint256 _initialMessageCount, uint256 _initialLogCount, bytes _executionProof) returns()
func (_Challenge *ChallengeTransactorSession) OneStepProveStoppedShortCanRun(_machineFields [3][32]byte, _initialGasUsed uint64, _initialMessageCount *big.Int, _initialLogCount *big.Int, _executionProof []byte) (*types.Transaction, error) {
	return _Challenge.Contract.OneStepProveStoppedShortCanRun(&_Challenge.TransactOpts, _machineFields, _initialGasUsed, _initialMessageCount, _initialLogCount, _executionProof)
}

// Timeout is a paid mutator transaction binding the contract method 0x70dea79a.
//
// Solidity: function timeout() returns()
func (_Challenge *ChallengeTransactor) Timeout(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "timeout")
}

// Timeout is a paid mutator transaction binding the contract method 0x70dea79a.
//
// Solidity: function timeout() returns()
func (_Challenge *ChallengeSession) Timeout() (*types.Transaction, error) {
	return _Challenge.Contract.Timeout(&_Challenge.TransactOpts)
}

// Timeout is a paid mutator transaction binding the contract method 0x70dea79a.
//
// Solidity: function timeout() returns()
func (_Challenge *ChallengeTransactorSession) Timeout() (*types.Transaction, error) {
	return _Challenge.Contract.Timeout(&_Challenge.TransactOpts)
}

// ChallengeAsserterTimedOutIterator is returned from FilterAsserterTimedOut and is used to iterate over the raw logs and unpacked data for AsserterTimedOut events raised by the Challenge contract.
type ChallengeAsserterTimedOutIterator struct {
	Event *ChallengeAsserterTimedOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChallengeAsserterTimedOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChallengeAsserterTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChallengeAsserterTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChallengeAsserterTimedOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChallengeAsserterTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChallengeAsserterTimedOut represents a AsserterTimedOut event raised by the Challenge contract.
type ChallengeAsserterTimedOut struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAsserterTimedOut is a free log retrieval operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_Challenge *ChallengeFilterer) FilterAsserterTimedOut(opts *bind.FilterOpts) (*ChallengeAsserterTimedOutIterator, error) {

	logs, sub, err := _Challenge.contract.FilterLogs(opts, "AsserterTimedOut")
	if err != nil {
		return nil, err
	}
	return &ChallengeAsserterTimedOutIterator{contract: _Challenge.contract, event: "AsserterTimedOut", logs: logs, sub: sub}, nil
}

// WatchAsserterTimedOut is a free log subscription operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_Challenge *ChallengeFilterer) WatchAsserterTimedOut(opts *bind.WatchOpts, sink chan<- *ChallengeAsserterTimedOut) (event.Subscription, error) {

	logs, sub, err := _Challenge.contract.WatchLogs(opts, "AsserterTimedOut")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChallengeAsserterTimedOut)
				if err := _Challenge.contract.UnpackLog(event, "AsserterTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAsserterTimedOut is a log parse operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_Challenge *ChallengeFilterer) ParseAsserterTimedOut(log types.Log) (*ChallengeAsserterTimedOut, error) {
	event := new(ChallengeAsserterTimedOut)
	if err := _Challenge.contract.UnpackLog(event, "AsserterTimedOut", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChallengeBisectedIterator is returned from FilterBisected and is used to iterate over the raw logs and unpacked data for Bisected events raised by the Challenge contract.
type ChallengeBisectedIterator struct {
	Event *ChallengeBisected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChallengeBisectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChallengeBisected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChallengeBisected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChallengeBisectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChallengeBisectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChallengeBisected represents a Bisected event raised by the Challenge contract.
type ChallengeBisected struct {
	ChallengeRoot [32]byte
	SegmentStart  *big.Int
	SegmentLength *big.Int
	ChainHashes   [][32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterBisected is a free log retrieval operation binding the contract event 0x0a2bdfea671da507e80b0cbae49dd25100a5bdacc5dff43a9163a3fcbd7c3c7d.
//
// Solidity: event Bisected(bytes32 indexed challengeRoot, uint256 segmentStart, uint256 segmentLength, bytes32[] chainHashes)
func (_Challenge *ChallengeFilterer) FilterBisected(opts *bind.FilterOpts, challengeRoot [][32]byte) (*ChallengeBisectedIterator, error) {

	var challengeRootRule []interface{}
	for _, challengeRootItem := range challengeRoot {
		challengeRootRule = append(challengeRootRule, challengeRootItem)
	}

	logs, sub, err := _Challenge.contract.FilterLogs(opts, "Bisected", challengeRootRule)
	if err != nil {
		return nil, err
	}
	return &ChallengeBisectedIterator{contract: _Challenge.contract, event: "Bisected", logs: logs, sub: sub}, nil
}

// WatchBisected is a free log subscription operation binding the contract event 0x0a2bdfea671da507e80b0cbae49dd25100a5bdacc5dff43a9163a3fcbd7c3c7d.
//
// Solidity: event Bisected(bytes32 indexed challengeRoot, uint256 segmentStart, uint256 segmentLength, bytes32[] chainHashes)
func (_Challenge *ChallengeFilterer) WatchBisected(opts *bind.WatchOpts, sink chan<- *ChallengeBisected, challengeRoot [][32]byte) (event.Subscription, error) {

	var challengeRootRule []interface{}
	for _, challengeRootItem := range challengeRoot {
		challengeRootRule = append(challengeRootRule, challengeRootItem)
	}

	logs, sub, err := _Challenge.contract.WatchLogs(opts, "Bisected", challengeRootRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChallengeBisected)
				if err := _Challenge.contract.UnpackLog(event, "Bisected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBisected is a log parse operation binding the contract event 0x0a2bdfea671da507e80b0cbae49dd25100a5bdacc5dff43a9163a3fcbd7c3c7d.
//
// Solidity: event Bisected(bytes32 indexed challengeRoot, uint256 segmentStart, uint256 segmentLength, bytes32[] chainHashes)
func (_Challenge *ChallengeFilterer) ParseBisected(log types.Log) (*ChallengeBisected, error) {
	event := new(ChallengeBisected)
	if err := _Challenge.contract.UnpackLog(event, "Bisected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChallengeChallengerTimedOutIterator is returned from FilterChallengerTimedOut and is used to iterate over the raw logs and unpacked data for ChallengerTimedOut events raised by the Challenge contract.
type ChallengeChallengerTimedOutIterator struct {
	Event *ChallengeChallengerTimedOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChallengeChallengerTimedOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChallengeChallengerTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChallengeChallengerTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChallengeChallengerTimedOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChallengeChallengerTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChallengeChallengerTimedOut represents a ChallengerTimedOut event raised by the Challenge contract.
type ChallengeChallengerTimedOut struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterChallengerTimedOut is a free log retrieval operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_Challenge *ChallengeFilterer) FilterChallengerTimedOut(opts *bind.FilterOpts) (*ChallengeChallengerTimedOutIterator, error) {

	logs, sub, err := _Challenge.contract.FilterLogs(opts, "ChallengerTimedOut")
	if err != nil {
		return nil, err
	}
	return &ChallengeChallengerTimedOutIterator{contract: _Challenge.contract, event: "ChallengerTimedOut", logs: logs, sub: sub}, nil
}

// WatchChallengerTimedOut is a free log subscription operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_Challenge *ChallengeFilterer) WatchChallengerTimedOut(opts *bind.WatchOpts, sink chan<- *ChallengeChallengerTimedOut) (event.Subscription, error) {

	logs, sub, err := _Challenge.contract.WatchLogs(opts, "ChallengerTimedOut")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChallengeChallengerTimedOut)
				if err := _Challenge.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengerTimedOut is a log parse operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_Challenge *ChallengeFilterer) ParseChallengerTimedOut(log types.Log) (*ChallengeChallengerTimedOut, error) {
	event := new(ChallengeChallengerTimedOut)
	if err := _Challenge.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChallengeConstraintWinIterator is returned from FilterConstraintWin and is used to iterate over the raw logs and unpacked data for ConstraintWin events raised by the Challenge contract.
type ChallengeConstraintWinIterator struct {
	Event *ChallengeConstraintWin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChallengeConstraintWinIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChallengeConstraintWin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChallengeConstraintWin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChallengeConstraintWinIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChallengeConstraintWinIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChallengeConstraintWin represents a ConstraintWin event raised by the Challenge contract.
type ChallengeConstraintWin struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterConstraintWin is a free log retrieval operation binding the contract event 0x6af162552a4b84b5de3ae085d52a72f3600612e1900ffd795ee386297eaaa558.
//
// Solidity: event ConstraintWin()
func (_Challenge *ChallengeFilterer) FilterConstraintWin(opts *bind.FilterOpts) (*ChallengeConstraintWinIterator, error) {

	logs, sub, err := _Challenge.contract.FilterLogs(opts, "ConstraintWin")
	if err != nil {
		return nil, err
	}
	return &ChallengeConstraintWinIterator{contract: _Challenge.contract, event: "ConstraintWin", logs: logs, sub: sub}, nil
}

// WatchConstraintWin is a free log subscription operation binding the contract event 0x6af162552a4b84b5de3ae085d52a72f3600612e1900ffd795ee386297eaaa558.
//
// Solidity: event ConstraintWin()
func (_Challenge *ChallengeFilterer) WatchConstraintWin(opts *bind.WatchOpts, sink chan<- *ChallengeConstraintWin) (event.Subscription, error) {

	logs, sub, err := _Challenge.contract.WatchLogs(opts, "ConstraintWin")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChallengeConstraintWin)
				if err := _Challenge.contract.UnpackLog(event, "ConstraintWin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConstraintWin is a log parse operation binding the contract event 0x6af162552a4b84b5de3ae085d52a72f3600612e1900ffd795ee386297eaaa558.
//
// Solidity: event ConstraintWin()
func (_Challenge *ChallengeFilterer) ParseConstraintWin(log types.Log) (*ChallengeConstraintWin, error) {
	event := new(ChallengeConstraintWin)
	if err := _Challenge.contract.UnpackLog(event, "ConstraintWin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChallengeInitiatedChallengeIterator is returned from FilterInitiatedChallenge and is used to iterate over the raw logs and unpacked data for InitiatedChallenge events raised by the Challenge contract.
type ChallengeInitiatedChallengeIterator struct {
	Event *ChallengeInitiatedChallenge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChallengeInitiatedChallengeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChallengeInitiatedChallenge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChallengeInitiatedChallenge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChallengeInitiatedChallengeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChallengeInitiatedChallengeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChallengeInitiatedChallenge represents a InitiatedChallenge event raised by the Challenge contract.
type ChallengeInitiatedChallenge struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterInitiatedChallenge is a free log retrieval operation binding the contract event 0x7003482dc89fcecb9f14e280f21ee716bd54187f7f3b0ab5ed78f3648218f2de.
//
// Solidity: event InitiatedChallenge()
func (_Challenge *ChallengeFilterer) FilterInitiatedChallenge(opts *bind.FilterOpts) (*ChallengeInitiatedChallengeIterator, error) {

	logs, sub, err := _Challenge.contract.FilterLogs(opts, "InitiatedChallenge")
	if err != nil {
		return nil, err
	}
	return &ChallengeInitiatedChallengeIterator{contract: _Challenge.contract, event: "InitiatedChallenge", logs: logs, sub: sub}, nil
}

// WatchInitiatedChallenge is a free log subscription operation binding the contract event 0x7003482dc89fcecb9f14e280f21ee716bd54187f7f3b0ab5ed78f3648218f2de.
//
// Solidity: event InitiatedChallenge()
func (_Challenge *ChallengeFilterer) WatchInitiatedChallenge(opts *bind.WatchOpts, sink chan<- *ChallengeInitiatedChallenge) (event.Subscription, error) {

	logs, sub, err := _Challenge.contract.WatchLogs(opts, "InitiatedChallenge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChallengeInitiatedChallenge)
				if err := _Challenge.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiatedChallenge is a log parse operation binding the contract event 0x7003482dc89fcecb9f14e280f21ee716bd54187f7f3b0ab5ed78f3648218f2de.
//
// Solidity: event InitiatedChallenge()
func (_Challenge *ChallengeFilterer) ParseInitiatedChallenge(log types.Log) (*ChallengeInitiatedChallenge, error) {
	event := new(ChallengeInitiatedChallenge)
	if err := _Challenge.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChallengeOneStepProofCompletedIterator is returned from FilterOneStepProofCompleted and is used to iterate over the raw logs and unpacked data for OneStepProofCompleted events raised by the Challenge contract.
type ChallengeOneStepProofCompletedIterator struct {
	Event *ChallengeOneStepProofCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChallengeOneStepProofCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChallengeOneStepProofCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChallengeOneStepProofCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChallengeOneStepProofCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChallengeOneStepProofCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChallengeOneStepProofCompleted represents a OneStepProofCompleted event raised by the Challenge contract.
type ChallengeOneStepProofCompleted struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOneStepProofCompleted is a free log retrieval operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_Challenge *ChallengeFilterer) FilterOneStepProofCompleted(opts *bind.FilterOpts) (*ChallengeOneStepProofCompletedIterator, error) {

	logs, sub, err := _Challenge.contract.FilterLogs(opts, "OneStepProofCompleted")
	if err != nil {
		return nil, err
	}
	return &ChallengeOneStepProofCompletedIterator{contract: _Challenge.contract, event: "OneStepProofCompleted", logs: logs, sub: sub}, nil
}

// WatchOneStepProofCompleted is a free log subscription operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_Challenge *ChallengeFilterer) WatchOneStepProofCompleted(opts *bind.WatchOpts, sink chan<- *ChallengeOneStepProofCompleted) (event.Subscription, error) {

	logs, sub, err := _Challenge.contract.WatchLogs(opts, "OneStepProofCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChallengeOneStepProofCompleted)
				if err := _Challenge.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOneStepProofCompleted is a log parse operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_Challenge *ChallengeFilterer) ParseOneStepProofCompleted(log types.Log) (*ChallengeOneStepProofCompleted, error) {
	event := new(ChallengeOneStepProofCompleted)
	if err := _Challenge.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
