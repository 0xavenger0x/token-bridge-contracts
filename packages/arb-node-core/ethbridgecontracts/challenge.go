// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgecontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ChallengeABI is the input ABI used to generate the binding from.
const ChallengeABI = "[{\"anonymous\":false,\"inputs\":[],\"name\":\"AsserterTimedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"challengeRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"segmentStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"segmentLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"chainHashes\",\"type\":\"bytes32[]\"}],\"name\":\"Bisected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ChallengerTimedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ConstraintWin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InitiatedChallenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OneStepProofCompleted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"asserter\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segmentToChallenge\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"_chainHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_segmentStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_segmentLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_oldEndHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_gasUsedBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_assertionRest\",\"type\":\"bytes32\"}],\"name\":\"bisectExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_chainHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_segmentLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_oldEndHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_newSegmentLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_startAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"bisectExecutionStoppedShort\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segmentToChallenge\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"_chainHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_segmentStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_segmentLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_oldEndHash\",\"type\":\"bytes32\"}],\"name\":\"bisectInboxConsistency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segmentToChallenge\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"_chainHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_segmentStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_segmentLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_oldInboxAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_oldInboxDelta\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_newInboxDelta\",\"type\":\"bytes32\"}],\"name\":\"bisectInboxDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeState\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challenger\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segmentToChallenge\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_segmentStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_segmentLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_oldEndHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_gasUsedBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_assertionRest\",\"type\":\"bytes32\"}],\"name\":\"constraintWinExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentResponder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadlineBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executionOneStepProofCon\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_executionOneStepProof2Con\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rollupAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_inboxConsistencyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_inboxDeltaHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_executionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_executionCheckTimeBlocks\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"_asserter\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_challenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_challengePeriodBlocks\",\"type\":\"uint256\"}],\"name\":\"initializeChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMaster\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kind\",\"outputs\":[{\"internalType\":\"enumChallenge.Kind\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segmentToChallenge\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_segmentStart\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_oldEndHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[3]\",\"name\":\"_machineFields\",\"type\":\"bytes32[3]\"},{\"internalType\":\"uint64\",\"name\":\"_initialGasUsed\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_initialMessageCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialLogCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_executionProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_bufferProof\",\"type\":\"bytes\"}],\"name\":\"oneStepProveExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segmentToChallenge\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_segmentStart\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_oldEndHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_lowerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"oneStepProveInboxConsistency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_segmentToChallenge\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_segmentStart\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_oldEndHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_prevInboxAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_prevInboxDelta\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nextInboxAcc\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inboxSeqNum\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_msgData\",\"type\":\"bytes\"}],\"name\":\"oneStepProveInboxDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"_machineFields\",\"type\":\"bytes32[3]\"},{\"internalType\":\"uint64\",\"name\":\"_initialGasUsed\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_initialMessageCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialLogCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_executionProof\",\"type\":\"bytes\"}],\"name\":\"oneStepProveStoppedShortCanRun\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turn\",\"outputs\":[{\"internalType\":\"enumChallenge.Turn\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ChallengeFuncSigs maps the 4-byte function signature to its string representation.
var ChallengeFuncSigs = map[string]string{
	"bb4af0b1": "asserter()",
	"6b01f4eb": "bisectExecution(uint256,bytes,bytes32[],uint256,uint256,bytes32,uint256,bytes32)",
	"1fda25ba": "bisectExecutionStoppedShort(bytes32[],uint256,bytes32,uint256,bytes32)",
	"7b8866c7": "bisectInboxConsistency(uint256,bytes,bytes32[],uint256,uint256,bytes32)",
	"50151e99": "bisectInboxDelta(uint256,bytes,bytes32[],uint256,uint256,bytes32,bytes32,bytes32)",
	"843d5a5c": "challengeState()",
	"534db0e2": "challenger()",
	"bca060af": "constraintWinExecution(uint256,bytes,uint256,uint256,bytes32,uint256,bytes32)",
	"8a8cd218": "currentResponder()",
	"2edfb42a": "deadlineBlock()",
	"928afed0": "initializeChallenge(address,address,address,bytes32,bytes32,bytes32,uint256,address,address,uint256)",
	"6f791d29": "isMaster()",
	"04baa00b": "kind()",
	"ed6b8d5c": "oneStepProveExecution(uint256,bytes,uint256,bytes32,bytes32[3],uint64,uint256,uint256,bytes,bytes)",
	"ed569319": "oneStepProveInboxConsistency(uint256,bytes,uint256,bytes32,bytes32,bytes32)",
	"a6acf41f": "oneStepProveInboxDelta(uint256,bytes,uint256,bytes32,bytes32,bytes32,bytes32,uint8,uint256,uint256,address,uint256,bytes)",
	"5c522251": "oneStepProveStoppedShortCanRun(bytes32[3],uint64,uint256,uint256,bytes)",
	"70dea79a": "timeout()",
	"8b299903": "turn()",
}

// ChallengeBin is the compiled bytecode used for deploying new contracts.
var ChallengeBin = ""

// DeployChallenge deploys a new Ethereum contract, binding an instance of Challenge to it.
func DeployChallenge(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Challenge, error) {
	parsed, err := abi.JSON(strings.NewReader(ChallengeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ChallengeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Challenge{ChallengeCaller: ChallengeCaller{contract: contract}, ChallengeTransactor: ChallengeTransactor{contract: contract}, ChallengeFilterer: ChallengeFilterer{contract: contract}}, nil
}

// Challenge is an auto generated Go binding around an Ethereum contract.
type Challenge struct {
	ChallengeCaller     // Read-only binding to the contract
	ChallengeTransactor // Write-only binding to the contract
	ChallengeFilterer   // Log filterer for contract events
}

// ChallengeCaller is an auto generated read-only Go binding around an Ethereum contract.
type ChallengeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChallengeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ChallengeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChallengeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ChallengeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChallengeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ChallengeSession struct {
	Contract     *Challenge        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ChallengeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ChallengeCallerSession struct {
	Contract *ChallengeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ChallengeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ChallengeTransactorSession struct {
	Contract     *ChallengeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ChallengeRaw is an auto generated low-level Go binding around an Ethereum contract.
type ChallengeRaw struct {
	Contract *Challenge // Generic contract binding to access the raw methods on
}

// ChallengeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ChallengeCallerRaw struct {
	Contract *ChallengeCaller // Generic read-only contract binding to access the raw methods on
}

// ChallengeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ChallengeTransactorRaw struct {
	Contract *ChallengeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewChallenge creates a new instance of Challenge, bound to a specific deployed contract.
func NewChallenge(address common.Address, backend bind.ContractBackend) (*Challenge, error) {
	contract, err := bindChallenge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Challenge{ChallengeCaller: ChallengeCaller{contract: contract}, ChallengeTransactor: ChallengeTransactor{contract: contract}, ChallengeFilterer: ChallengeFilterer{contract: contract}}, nil
}

// NewChallengeCaller creates a new read-only instance of Challenge, bound to a specific deployed contract.
func NewChallengeCaller(address common.Address, caller bind.ContractCaller) (*ChallengeCaller, error) {
	contract, err := bindChallenge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ChallengeCaller{contract: contract}, nil
}

// NewChallengeTransactor creates a new write-only instance of Challenge, bound to a specific deployed contract.
func NewChallengeTransactor(address common.Address, transactor bind.ContractTransactor) (*ChallengeTransactor, error) {
	contract, err := bindChallenge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ChallengeTransactor{contract: contract}, nil
}

// NewChallengeFilterer creates a new log filterer instance of Challenge, bound to a specific deployed contract.
func NewChallengeFilterer(address common.Address, filterer bind.ContractFilterer) (*ChallengeFilterer, error) {
	contract, err := bindChallenge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ChallengeFilterer{contract: contract}, nil
}

// bindChallenge binds a generic wrapper to an already deployed contract.
func bindChallenge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ChallengeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Challenge *ChallengeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Challenge.Contract.ChallengeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Challenge *ChallengeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Challenge.Contract.ChallengeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Challenge *ChallengeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Challenge.Contract.ChallengeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Challenge *ChallengeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Challenge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Challenge *ChallengeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Challenge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Challenge *ChallengeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Challenge.Contract.contract.Transact(opts, method, params...)
}

// Asserter is a free data retrieval call binding the contract method 0xbb4af0b1.
//
// Solidity: function asserter() view returns(address)
func (_Challenge *ChallengeCaller) Asserter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Challenge.contract.Call(opts, &out, "asserter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Asserter is a free data retrieval call binding the contract method 0xbb4af0b1.
//
// Solidity: function asserter() view returns(address)
func (_Challenge *ChallengeSession) Asserter() (common.Address, error) {
	return _Challenge.Contract.Asserter(&_Challenge.CallOpts)
}

// Asserter is a free data retrieval call binding the contract method 0xbb4af0b1.
//
// Solidity: function asserter() view returns(address)
func (_Challenge *ChallengeCallerSession) Asserter() (common.Address, error) {
	return _Challenge.Contract.Asserter(&_Challenge.CallOpts)
}

// ChallengeState is a free data retrieval call binding the contract method 0x843d5a5c.
//
// Solidity: function challengeState() view returns(bytes32)
func (_Challenge *ChallengeCaller) ChallengeState(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Challenge.contract.Call(opts, &out, "challengeState")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ChallengeState is a free data retrieval call binding the contract method 0x843d5a5c.
//
// Solidity: function challengeState() view returns(bytes32)
func (_Challenge *ChallengeSession) ChallengeState() ([32]byte, error) {
	return _Challenge.Contract.ChallengeState(&_Challenge.CallOpts)
}

// ChallengeState is a free data retrieval call binding the contract method 0x843d5a5c.
//
// Solidity: function challengeState() view returns(bytes32)
func (_Challenge *ChallengeCallerSession) ChallengeState() ([32]byte, error) {
	return _Challenge.Contract.ChallengeState(&_Challenge.CallOpts)
}

// Challenger is a free data retrieval call binding the contract method 0x534db0e2.
//
// Solidity: function challenger() view returns(address)
func (_Challenge *ChallengeCaller) Challenger(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Challenge.contract.Call(opts, &out, "challenger")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Challenger is a free data retrieval call binding the contract method 0x534db0e2.
//
// Solidity: function challenger() view returns(address)
func (_Challenge *ChallengeSession) Challenger() (common.Address, error) {
	return _Challenge.Contract.Challenger(&_Challenge.CallOpts)
}

// Challenger is a free data retrieval call binding the contract method 0x534db0e2.
//
// Solidity: function challenger() view returns(address)
func (_Challenge *ChallengeCallerSession) Challenger() (common.Address, error) {
	return _Challenge.Contract.Challenger(&_Challenge.CallOpts)
}

// CurrentResponder is a free data retrieval call binding the contract method 0x8a8cd218.
//
// Solidity: function currentResponder() view returns(address)
func (_Challenge *ChallengeCaller) CurrentResponder(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Challenge.contract.Call(opts, &out, "currentResponder")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CurrentResponder is a free data retrieval call binding the contract method 0x8a8cd218.
//
// Solidity: function currentResponder() view returns(address)
func (_Challenge *ChallengeSession) CurrentResponder() (common.Address, error) {
	return _Challenge.Contract.CurrentResponder(&_Challenge.CallOpts)
}

// CurrentResponder is a free data retrieval call binding the contract method 0x8a8cd218.
//
// Solidity: function currentResponder() view returns(address)
func (_Challenge *ChallengeCallerSession) CurrentResponder() (common.Address, error) {
	return _Challenge.Contract.CurrentResponder(&_Challenge.CallOpts)
}

// DeadlineBlock is a free data retrieval call binding the contract method 0x2edfb42a.
//
// Solidity: function deadlineBlock() view returns(uint256)
func (_Challenge *ChallengeCaller) DeadlineBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Challenge.contract.Call(opts, &out, "deadlineBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DeadlineBlock is a free data retrieval call binding the contract method 0x2edfb42a.
//
// Solidity: function deadlineBlock() view returns(uint256)
func (_Challenge *ChallengeSession) DeadlineBlock() (*big.Int, error) {
	return _Challenge.Contract.DeadlineBlock(&_Challenge.CallOpts)
}

// DeadlineBlock is a free data retrieval call binding the contract method 0x2edfb42a.
//
// Solidity: function deadlineBlock() view returns(uint256)
func (_Challenge *ChallengeCallerSession) DeadlineBlock() (*big.Int, error) {
	return _Challenge.Contract.DeadlineBlock(&_Challenge.CallOpts)
}

// IsMaster is a free data retrieval call binding the contract method 0x6f791d29.
//
// Solidity: function isMaster() view returns(bool)
func (_Challenge *ChallengeCaller) IsMaster(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Challenge.contract.Call(opts, &out, "isMaster")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMaster is a free data retrieval call binding the contract method 0x6f791d29.
//
// Solidity: function isMaster() view returns(bool)
func (_Challenge *ChallengeSession) IsMaster() (bool, error) {
	return _Challenge.Contract.IsMaster(&_Challenge.CallOpts)
}

// IsMaster is a free data retrieval call binding the contract method 0x6f791d29.
//
// Solidity: function isMaster() view returns(bool)
func (_Challenge *ChallengeCallerSession) IsMaster() (bool, error) {
	return _Challenge.Contract.IsMaster(&_Challenge.CallOpts)
}

// Kind is a free data retrieval call binding the contract method 0x04baa00b.
//
// Solidity: function kind() view returns(uint8)
func (_Challenge *ChallengeCaller) Kind(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Challenge.contract.Call(opts, &out, "kind")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Kind is a free data retrieval call binding the contract method 0x04baa00b.
//
// Solidity: function kind() view returns(uint8)
func (_Challenge *ChallengeSession) Kind() (uint8, error) {
	return _Challenge.Contract.Kind(&_Challenge.CallOpts)
}

// Kind is a free data retrieval call binding the contract method 0x04baa00b.
//
// Solidity: function kind() view returns(uint8)
func (_Challenge *ChallengeCallerSession) Kind() (uint8, error) {
	return _Challenge.Contract.Kind(&_Challenge.CallOpts)
}

// Turn is a free data retrieval call binding the contract method 0x8b299903.
//
// Solidity: function turn() view returns(uint8)
func (_Challenge *ChallengeCaller) Turn(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Challenge.contract.Call(opts, &out, "turn")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Turn is a free data retrieval call binding the contract method 0x8b299903.
//
// Solidity: function turn() view returns(uint8)
func (_Challenge *ChallengeSession) Turn() (uint8, error) {
	return _Challenge.Contract.Turn(&_Challenge.CallOpts)
}

// Turn is a free data retrieval call binding the contract method 0x8b299903.
//
// Solidity: function turn() view returns(uint8)
func (_Challenge *ChallengeCallerSession) Turn() (uint8, error) {
	return _Challenge.Contract.Turn(&_Challenge.CallOpts)
}

// BisectExecution is a paid mutator transaction binding the contract method 0x6b01f4eb.
//
// Solidity: function bisectExecution(uint256 _segmentToChallenge, bytes _proof, bytes32[] _chainHashes, uint256 _segmentStart, uint256 _segmentLength, bytes32 _oldEndHash, uint256 _gasUsedBefore, bytes32 _assertionRest) returns()
func (_Challenge *ChallengeTransactor) BisectExecution(opts *bind.TransactOpts, _segmentToChallenge *big.Int, _proof []byte, _chainHashes [][32]byte, _segmentStart *big.Int, _segmentLength *big.Int, _oldEndHash [32]byte, _gasUsedBefore *big.Int, _assertionRest [32]byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "bisectExecution", _segmentToChallenge, _proof, _chainHashes, _segmentStart, _segmentLength, _oldEndHash, _gasUsedBefore, _assertionRest)
}

// BisectExecution is a paid mutator transaction binding the contract method 0x6b01f4eb.
//
// Solidity: function bisectExecution(uint256 _segmentToChallenge, bytes _proof, bytes32[] _chainHashes, uint256 _segmentStart, uint256 _segmentLength, bytes32 _oldEndHash, uint256 _gasUsedBefore, bytes32 _assertionRest) returns()
func (_Challenge *ChallengeSession) BisectExecution(_segmentToChallenge *big.Int, _proof []byte, _chainHashes [][32]byte, _segmentStart *big.Int, _segmentLength *big.Int, _oldEndHash [32]byte, _gasUsedBefore *big.Int, _assertionRest [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.BisectExecution(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _chainHashes, _segmentStart, _segmentLength, _oldEndHash, _gasUsedBefore, _assertionRest)
}

// BisectExecution is a paid mutator transaction binding the contract method 0x6b01f4eb.
//
// Solidity: function bisectExecution(uint256 _segmentToChallenge, bytes _proof, bytes32[] _chainHashes, uint256 _segmentStart, uint256 _segmentLength, bytes32 _oldEndHash, uint256 _gasUsedBefore, bytes32 _assertionRest) returns()
func (_Challenge *ChallengeTransactorSession) BisectExecution(_segmentToChallenge *big.Int, _proof []byte, _chainHashes [][32]byte, _segmentStart *big.Int, _segmentLength *big.Int, _oldEndHash [32]byte, _gasUsedBefore *big.Int, _assertionRest [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.BisectExecution(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _chainHashes, _segmentStart, _segmentLength, _oldEndHash, _gasUsedBefore, _assertionRest)
}

// BisectExecutionStoppedShort is a paid mutator transaction binding the contract method 0x1fda25ba.
//
// Solidity: function bisectExecutionStoppedShort(bytes32[] _chainHashes, uint256 _segmentLength, bytes32 _oldEndHash, uint256 _newSegmentLength, bytes32 _startAssertionHash) returns()
func (_Challenge *ChallengeTransactor) BisectExecutionStoppedShort(opts *bind.TransactOpts, _chainHashes [][32]byte, _segmentLength *big.Int, _oldEndHash [32]byte, _newSegmentLength *big.Int, _startAssertionHash [32]byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "bisectExecutionStoppedShort", _chainHashes, _segmentLength, _oldEndHash, _newSegmentLength, _startAssertionHash)
}

// BisectExecutionStoppedShort is a paid mutator transaction binding the contract method 0x1fda25ba.
//
// Solidity: function bisectExecutionStoppedShort(bytes32[] _chainHashes, uint256 _segmentLength, bytes32 _oldEndHash, uint256 _newSegmentLength, bytes32 _startAssertionHash) returns()
func (_Challenge *ChallengeSession) BisectExecutionStoppedShort(_chainHashes [][32]byte, _segmentLength *big.Int, _oldEndHash [32]byte, _newSegmentLength *big.Int, _startAssertionHash [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.BisectExecutionStoppedShort(&_Challenge.TransactOpts, _chainHashes, _segmentLength, _oldEndHash, _newSegmentLength, _startAssertionHash)
}

// BisectExecutionStoppedShort is a paid mutator transaction binding the contract method 0x1fda25ba.
//
// Solidity: function bisectExecutionStoppedShort(bytes32[] _chainHashes, uint256 _segmentLength, bytes32 _oldEndHash, uint256 _newSegmentLength, bytes32 _startAssertionHash) returns()
func (_Challenge *ChallengeTransactorSession) BisectExecutionStoppedShort(_chainHashes [][32]byte, _segmentLength *big.Int, _oldEndHash [32]byte, _newSegmentLength *big.Int, _startAssertionHash [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.BisectExecutionStoppedShort(&_Challenge.TransactOpts, _chainHashes, _segmentLength, _oldEndHash, _newSegmentLength, _startAssertionHash)
}

// BisectInboxConsistency is a paid mutator transaction binding the contract method 0x7b8866c7.
//
// Solidity: function bisectInboxConsistency(uint256 _segmentToChallenge, bytes _proof, bytes32[] _chainHashes, uint256 _segmentStart, uint256 _segmentLength, bytes32 _oldEndHash) returns()
func (_Challenge *ChallengeTransactor) BisectInboxConsistency(opts *bind.TransactOpts, _segmentToChallenge *big.Int, _proof []byte, _chainHashes [][32]byte, _segmentStart *big.Int, _segmentLength *big.Int, _oldEndHash [32]byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "bisectInboxConsistency", _segmentToChallenge, _proof, _chainHashes, _segmentStart, _segmentLength, _oldEndHash)
}

// BisectInboxConsistency is a paid mutator transaction binding the contract method 0x7b8866c7.
//
// Solidity: function bisectInboxConsistency(uint256 _segmentToChallenge, bytes _proof, bytes32[] _chainHashes, uint256 _segmentStart, uint256 _segmentLength, bytes32 _oldEndHash) returns()
func (_Challenge *ChallengeSession) BisectInboxConsistency(_segmentToChallenge *big.Int, _proof []byte, _chainHashes [][32]byte, _segmentStart *big.Int, _segmentLength *big.Int, _oldEndHash [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.BisectInboxConsistency(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _chainHashes, _segmentStart, _segmentLength, _oldEndHash)
}

// BisectInboxConsistency is a paid mutator transaction binding the contract method 0x7b8866c7.
//
// Solidity: function bisectInboxConsistency(uint256 _segmentToChallenge, bytes _proof, bytes32[] _chainHashes, uint256 _segmentStart, uint256 _segmentLength, bytes32 _oldEndHash) returns()
func (_Challenge *ChallengeTransactorSession) BisectInboxConsistency(_segmentToChallenge *big.Int, _proof []byte, _chainHashes [][32]byte, _segmentStart *big.Int, _segmentLength *big.Int, _oldEndHash [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.BisectInboxConsistency(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _chainHashes, _segmentStart, _segmentLength, _oldEndHash)
}

// BisectInboxDelta is a paid mutator transaction binding the contract method 0x50151e99.
//
// Solidity: function bisectInboxDelta(uint256 _segmentToChallenge, bytes _proof, bytes32[] _chainHashes, uint256 _segmentStart, uint256 _segmentLength, bytes32 _oldInboxAcc, bytes32 _oldInboxDelta, bytes32 _newInboxDelta) returns()
func (_Challenge *ChallengeTransactor) BisectInboxDelta(opts *bind.TransactOpts, _segmentToChallenge *big.Int, _proof []byte, _chainHashes [][32]byte, _segmentStart *big.Int, _segmentLength *big.Int, _oldInboxAcc [32]byte, _oldInboxDelta [32]byte, _newInboxDelta [32]byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "bisectInboxDelta", _segmentToChallenge, _proof, _chainHashes, _segmentStart, _segmentLength, _oldInboxAcc, _oldInboxDelta, _newInboxDelta)
}

// BisectInboxDelta is a paid mutator transaction binding the contract method 0x50151e99.
//
// Solidity: function bisectInboxDelta(uint256 _segmentToChallenge, bytes _proof, bytes32[] _chainHashes, uint256 _segmentStart, uint256 _segmentLength, bytes32 _oldInboxAcc, bytes32 _oldInboxDelta, bytes32 _newInboxDelta) returns()
func (_Challenge *ChallengeSession) BisectInboxDelta(_segmentToChallenge *big.Int, _proof []byte, _chainHashes [][32]byte, _segmentStart *big.Int, _segmentLength *big.Int, _oldInboxAcc [32]byte, _oldInboxDelta [32]byte, _newInboxDelta [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.BisectInboxDelta(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _chainHashes, _segmentStart, _segmentLength, _oldInboxAcc, _oldInboxDelta, _newInboxDelta)
}

// BisectInboxDelta is a paid mutator transaction binding the contract method 0x50151e99.
//
// Solidity: function bisectInboxDelta(uint256 _segmentToChallenge, bytes _proof, bytes32[] _chainHashes, uint256 _segmentStart, uint256 _segmentLength, bytes32 _oldInboxAcc, bytes32 _oldInboxDelta, bytes32 _newInboxDelta) returns()
func (_Challenge *ChallengeTransactorSession) BisectInboxDelta(_segmentToChallenge *big.Int, _proof []byte, _chainHashes [][32]byte, _segmentStart *big.Int, _segmentLength *big.Int, _oldInboxAcc [32]byte, _oldInboxDelta [32]byte, _newInboxDelta [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.BisectInboxDelta(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _chainHashes, _segmentStart, _segmentLength, _oldInboxAcc, _oldInboxDelta, _newInboxDelta)
}

// ConstraintWinExecution is a paid mutator transaction binding the contract method 0xbca060af.
//
// Solidity: function constraintWinExecution(uint256 _segmentToChallenge, bytes _proof, uint256 _segmentStart, uint256 _segmentLength, bytes32 _oldEndHash, uint256 _gasUsedBefore, bytes32 _assertionRest) returns()
func (_Challenge *ChallengeTransactor) ConstraintWinExecution(opts *bind.TransactOpts, _segmentToChallenge *big.Int, _proof []byte, _segmentStart *big.Int, _segmentLength *big.Int, _oldEndHash [32]byte, _gasUsedBefore *big.Int, _assertionRest [32]byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "constraintWinExecution", _segmentToChallenge, _proof, _segmentStart, _segmentLength, _oldEndHash, _gasUsedBefore, _assertionRest)
}

// ConstraintWinExecution is a paid mutator transaction binding the contract method 0xbca060af.
//
// Solidity: function constraintWinExecution(uint256 _segmentToChallenge, bytes _proof, uint256 _segmentStart, uint256 _segmentLength, bytes32 _oldEndHash, uint256 _gasUsedBefore, bytes32 _assertionRest) returns()
func (_Challenge *ChallengeSession) ConstraintWinExecution(_segmentToChallenge *big.Int, _proof []byte, _segmentStart *big.Int, _segmentLength *big.Int, _oldEndHash [32]byte, _gasUsedBefore *big.Int, _assertionRest [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.ConstraintWinExecution(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _segmentStart, _segmentLength, _oldEndHash, _gasUsedBefore, _assertionRest)
}

// ConstraintWinExecution is a paid mutator transaction binding the contract method 0xbca060af.
//
// Solidity: function constraintWinExecution(uint256 _segmentToChallenge, bytes _proof, uint256 _segmentStart, uint256 _segmentLength, bytes32 _oldEndHash, uint256 _gasUsedBefore, bytes32 _assertionRest) returns()
func (_Challenge *ChallengeTransactorSession) ConstraintWinExecution(_segmentToChallenge *big.Int, _proof []byte, _segmentStart *big.Int, _segmentLength *big.Int, _oldEndHash [32]byte, _gasUsedBefore *big.Int, _assertionRest [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.ConstraintWinExecution(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _segmentStart, _segmentLength, _oldEndHash, _gasUsedBefore, _assertionRest)
}

// InitializeChallenge is a paid mutator transaction binding the contract method 0x928afed0.
//
// Solidity: function initializeChallenge(address _executionOneStepProofCon, address _executionOneStepProof2Con, address _rollupAddress, bytes32 _inboxConsistencyHash, bytes32 _inboxDeltaHash, bytes32 _executionHash, uint256 _executionCheckTimeBlocks, address _asserter, address _challenger, uint256 _challengePeriodBlocks) returns()
func (_Challenge *ChallengeTransactor) InitializeChallenge(opts *bind.TransactOpts, _executionOneStepProofCon common.Address, _executionOneStepProof2Con common.Address, _rollupAddress common.Address, _inboxConsistencyHash [32]byte, _inboxDeltaHash [32]byte, _executionHash [32]byte, _executionCheckTimeBlocks *big.Int, _asserter common.Address, _challenger common.Address, _challengePeriodBlocks *big.Int) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "initializeChallenge", _executionOneStepProofCon, _executionOneStepProof2Con, _rollupAddress, _inboxConsistencyHash, _inboxDeltaHash, _executionHash, _executionCheckTimeBlocks, _asserter, _challenger, _challengePeriodBlocks)
}

// InitializeChallenge is a paid mutator transaction binding the contract method 0x928afed0.
//
// Solidity: function initializeChallenge(address _executionOneStepProofCon, address _executionOneStepProof2Con, address _rollupAddress, bytes32 _inboxConsistencyHash, bytes32 _inboxDeltaHash, bytes32 _executionHash, uint256 _executionCheckTimeBlocks, address _asserter, address _challenger, uint256 _challengePeriodBlocks) returns()
func (_Challenge *ChallengeSession) InitializeChallenge(_executionOneStepProofCon common.Address, _executionOneStepProof2Con common.Address, _rollupAddress common.Address, _inboxConsistencyHash [32]byte, _inboxDeltaHash [32]byte, _executionHash [32]byte, _executionCheckTimeBlocks *big.Int, _asserter common.Address, _challenger common.Address, _challengePeriodBlocks *big.Int) (*types.Transaction, error) {
	return _Challenge.Contract.InitializeChallenge(&_Challenge.TransactOpts, _executionOneStepProofCon, _executionOneStepProof2Con, _rollupAddress, _inboxConsistencyHash, _inboxDeltaHash, _executionHash, _executionCheckTimeBlocks, _asserter, _challenger, _challengePeriodBlocks)
}

// InitializeChallenge is a paid mutator transaction binding the contract method 0x928afed0.
//
// Solidity: function initializeChallenge(address _executionOneStepProofCon, address _executionOneStepProof2Con, address _rollupAddress, bytes32 _inboxConsistencyHash, bytes32 _inboxDeltaHash, bytes32 _executionHash, uint256 _executionCheckTimeBlocks, address _asserter, address _challenger, uint256 _challengePeriodBlocks) returns()
func (_Challenge *ChallengeTransactorSession) InitializeChallenge(_executionOneStepProofCon common.Address, _executionOneStepProof2Con common.Address, _rollupAddress common.Address, _inboxConsistencyHash [32]byte, _inboxDeltaHash [32]byte, _executionHash [32]byte, _executionCheckTimeBlocks *big.Int, _asserter common.Address, _challenger common.Address, _challengePeriodBlocks *big.Int) (*types.Transaction, error) {
	return _Challenge.Contract.InitializeChallenge(&_Challenge.TransactOpts, _executionOneStepProofCon, _executionOneStepProof2Con, _rollupAddress, _inboxConsistencyHash, _inboxDeltaHash, _executionHash, _executionCheckTimeBlocks, _asserter, _challenger, _challengePeriodBlocks)
}

// OneStepProveExecution is a paid mutator transaction binding the contract method 0xed6b8d5c.
//
// Solidity: function oneStepProveExecution(uint256 _segmentToChallenge, bytes _proof, uint256 _segmentStart, bytes32 _oldEndHash, bytes32[3] _machineFields, uint64 _initialGasUsed, uint256 _initialMessageCount, uint256 _initialLogCount, bytes _executionProof, bytes _bufferProof) returns()
func (_Challenge *ChallengeTransactor) OneStepProveExecution(opts *bind.TransactOpts, _segmentToChallenge *big.Int, _proof []byte, _segmentStart *big.Int, _oldEndHash [32]byte, _machineFields [3][32]byte, _initialGasUsed uint64, _initialMessageCount *big.Int, _initialLogCount *big.Int, _executionProof []byte, _bufferProof []byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "oneStepProveExecution", _segmentToChallenge, _proof, _segmentStart, _oldEndHash, _machineFields, _initialGasUsed, _initialMessageCount, _initialLogCount, _executionProof, _bufferProof)
}

// OneStepProveExecution is a paid mutator transaction binding the contract method 0xed6b8d5c.
//
// Solidity: function oneStepProveExecution(uint256 _segmentToChallenge, bytes _proof, uint256 _segmentStart, bytes32 _oldEndHash, bytes32[3] _machineFields, uint64 _initialGasUsed, uint256 _initialMessageCount, uint256 _initialLogCount, bytes _executionProof, bytes _bufferProof) returns()
func (_Challenge *ChallengeSession) OneStepProveExecution(_segmentToChallenge *big.Int, _proof []byte, _segmentStart *big.Int, _oldEndHash [32]byte, _machineFields [3][32]byte, _initialGasUsed uint64, _initialMessageCount *big.Int, _initialLogCount *big.Int, _executionProof []byte, _bufferProof []byte) (*types.Transaction, error) {
	return _Challenge.Contract.OneStepProveExecution(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _segmentStart, _oldEndHash, _machineFields, _initialGasUsed, _initialMessageCount, _initialLogCount, _executionProof, _bufferProof)
}

// OneStepProveExecution is a paid mutator transaction binding the contract method 0xed6b8d5c.
//
// Solidity: function oneStepProveExecution(uint256 _segmentToChallenge, bytes _proof, uint256 _segmentStart, bytes32 _oldEndHash, bytes32[3] _machineFields, uint64 _initialGasUsed, uint256 _initialMessageCount, uint256 _initialLogCount, bytes _executionProof, bytes _bufferProof) returns()
func (_Challenge *ChallengeTransactorSession) OneStepProveExecution(_segmentToChallenge *big.Int, _proof []byte, _segmentStart *big.Int, _oldEndHash [32]byte, _machineFields [3][32]byte, _initialGasUsed uint64, _initialMessageCount *big.Int, _initialLogCount *big.Int, _executionProof []byte, _bufferProof []byte) (*types.Transaction, error) {
	return _Challenge.Contract.OneStepProveExecution(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _segmentStart, _oldEndHash, _machineFields, _initialGasUsed, _initialMessageCount, _initialLogCount, _executionProof, _bufferProof)
}

// OneStepProveInboxConsistency is a paid mutator transaction binding the contract method 0xed569319.
//
// Solidity: function oneStepProveInboxConsistency(uint256 _segmentToChallenge, bytes _proof, uint256 _segmentStart, bytes32 _oldEndHash, bytes32 _lowerHash, bytes32 _value) returns()
func (_Challenge *ChallengeTransactor) OneStepProveInboxConsistency(opts *bind.TransactOpts, _segmentToChallenge *big.Int, _proof []byte, _segmentStart *big.Int, _oldEndHash [32]byte, _lowerHash [32]byte, _value [32]byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "oneStepProveInboxConsistency", _segmentToChallenge, _proof, _segmentStart, _oldEndHash, _lowerHash, _value)
}

// OneStepProveInboxConsistency is a paid mutator transaction binding the contract method 0xed569319.
//
// Solidity: function oneStepProveInboxConsistency(uint256 _segmentToChallenge, bytes _proof, uint256 _segmentStart, bytes32 _oldEndHash, bytes32 _lowerHash, bytes32 _value) returns()
func (_Challenge *ChallengeSession) OneStepProveInboxConsistency(_segmentToChallenge *big.Int, _proof []byte, _segmentStart *big.Int, _oldEndHash [32]byte, _lowerHash [32]byte, _value [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.OneStepProveInboxConsistency(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _segmentStart, _oldEndHash, _lowerHash, _value)
}

// OneStepProveInboxConsistency is a paid mutator transaction binding the contract method 0xed569319.
//
// Solidity: function oneStepProveInboxConsistency(uint256 _segmentToChallenge, bytes _proof, uint256 _segmentStart, bytes32 _oldEndHash, bytes32 _lowerHash, bytes32 _value) returns()
func (_Challenge *ChallengeTransactorSession) OneStepProveInboxConsistency(_segmentToChallenge *big.Int, _proof []byte, _segmentStart *big.Int, _oldEndHash [32]byte, _lowerHash [32]byte, _value [32]byte) (*types.Transaction, error) {
	return _Challenge.Contract.OneStepProveInboxConsistency(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _segmentStart, _oldEndHash, _lowerHash, _value)
}

// OneStepProveInboxDelta is a paid mutator transaction binding the contract method 0xa6acf41f.
//
// Solidity: function oneStepProveInboxDelta(uint256 _segmentToChallenge, bytes _proof, uint256 _segmentStart, bytes32 _oldEndHash, bytes32 _prevInboxAcc, bytes32 _prevInboxDelta, bytes32 _nextInboxAcc, uint8 _kind, uint256 _blockNumber, uint256 _timestamp, address _sender, uint256 _inboxSeqNum, bytes _msgData) returns()
func (_Challenge *ChallengeTransactor) OneStepProveInboxDelta(opts *bind.TransactOpts, _segmentToChallenge *big.Int, _proof []byte, _segmentStart *big.Int, _oldEndHash [32]byte, _prevInboxAcc [32]byte, _prevInboxDelta [32]byte, _nextInboxAcc [32]byte, _kind uint8, _blockNumber *big.Int, _timestamp *big.Int, _sender common.Address, _inboxSeqNum *big.Int, _msgData []byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "oneStepProveInboxDelta", _segmentToChallenge, _proof, _segmentStart, _oldEndHash, _prevInboxAcc, _prevInboxDelta, _nextInboxAcc, _kind, _blockNumber, _timestamp, _sender, _inboxSeqNum, _msgData)
}

// OneStepProveInboxDelta is a paid mutator transaction binding the contract method 0xa6acf41f.
//
// Solidity: function oneStepProveInboxDelta(uint256 _segmentToChallenge, bytes _proof, uint256 _segmentStart, bytes32 _oldEndHash, bytes32 _prevInboxAcc, bytes32 _prevInboxDelta, bytes32 _nextInboxAcc, uint8 _kind, uint256 _blockNumber, uint256 _timestamp, address _sender, uint256 _inboxSeqNum, bytes _msgData) returns()
func (_Challenge *ChallengeSession) OneStepProveInboxDelta(_segmentToChallenge *big.Int, _proof []byte, _segmentStart *big.Int, _oldEndHash [32]byte, _prevInboxAcc [32]byte, _prevInboxDelta [32]byte, _nextInboxAcc [32]byte, _kind uint8, _blockNumber *big.Int, _timestamp *big.Int, _sender common.Address, _inboxSeqNum *big.Int, _msgData []byte) (*types.Transaction, error) {
	return _Challenge.Contract.OneStepProveInboxDelta(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _segmentStart, _oldEndHash, _prevInboxAcc, _prevInboxDelta, _nextInboxAcc, _kind, _blockNumber, _timestamp, _sender, _inboxSeqNum, _msgData)
}

// OneStepProveInboxDelta is a paid mutator transaction binding the contract method 0xa6acf41f.
//
// Solidity: function oneStepProveInboxDelta(uint256 _segmentToChallenge, bytes _proof, uint256 _segmentStart, bytes32 _oldEndHash, bytes32 _prevInboxAcc, bytes32 _prevInboxDelta, bytes32 _nextInboxAcc, uint8 _kind, uint256 _blockNumber, uint256 _timestamp, address _sender, uint256 _inboxSeqNum, bytes _msgData) returns()
func (_Challenge *ChallengeTransactorSession) OneStepProveInboxDelta(_segmentToChallenge *big.Int, _proof []byte, _segmentStart *big.Int, _oldEndHash [32]byte, _prevInboxAcc [32]byte, _prevInboxDelta [32]byte, _nextInboxAcc [32]byte, _kind uint8, _blockNumber *big.Int, _timestamp *big.Int, _sender common.Address, _inboxSeqNum *big.Int, _msgData []byte) (*types.Transaction, error) {
	return _Challenge.Contract.OneStepProveInboxDelta(&_Challenge.TransactOpts, _segmentToChallenge, _proof, _segmentStart, _oldEndHash, _prevInboxAcc, _prevInboxDelta, _nextInboxAcc, _kind, _blockNumber, _timestamp, _sender, _inboxSeqNum, _msgData)
}

// OneStepProveStoppedShortCanRun is a paid mutator transaction binding the contract method 0x5c522251.
//
// Solidity: function oneStepProveStoppedShortCanRun(bytes32[3] _machineFields, uint64 _initialGasUsed, uint256 _initialMessageCount, uint256 _initialLogCount, bytes _executionProof) returns()
func (_Challenge *ChallengeTransactor) OneStepProveStoppedShortCanRun(opts *bind.TransactOpts, _machineFields [3][32]byte, _initialGasUsed uint64, _initialMessageCount *big.Int, _initialLogCount *big.Int, _executionProof []byte) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "oneStepProveStoppedShortCanRun", _machineFields, _initialGasUsed, _initialMessageCount, _initialLogCount, _executionProof)
}

// OneStepProveStoppedShortCanRun is a paid mutator transaction binding the contract method 0x5c522251.
//
// Solidity: function oneStepProveStoppedShortCanRun(bytes32[3] _machineFields, uint64 _initialGasUsed, uint256 _initialMessageCount, uint256 _initialLogCount, bytes _executionProof) returns()
func (_Challenge *ChallengeSession) OneStepProveStoppedShortCanRun(_machineFields [3][32]byte, _initialGasUsed uint64, _initialMessageCount *big.Int, _initialLogCount *big.Int, _executionProof []byte) (*types.Transaction, error) {
	return _Challenge.Contract.OneStepProveStoppedShortCanRun(&_Challenge.TransactOpts, _machineFields, _initialGasUsed, _initialMessageCount, _initialLogCount, _executionProof)
}

// OneStepProveStoppedShortCanRun is a paid mutator transaction binding the contract method 0x5c522251.
//
// Solidity: function oneStepProveStoppedShortCanRun(bytes32[3] _machineFields, uint64 _initialGasUsed, uint256 _initialMessageCount, uint256 _initialLogCount, bytes _executionProof) returns()
func (_Challenge *ChallengeTransactorSession) OneStepProveStoppedShortCanRun(_machineFields [3][32]byte, _initialGasUsed uint64, _initialMessageCount *big.Int, _initialLogCount *big.Int, _executionProof []byte) (*types.Transaction, error) {
	return _Challenge.Contract.OneStepProveStoppedShortCanRun(&_Challenge.TransactOpts, _machineFields, _initialGasUsed, _initialMessageCount, _initialLogCount, _executionProof)
}

// Timeout is a paid mutator transaction binding the contract method 0x70dea79a.
//
// Solidity: function timeout() returns()
func (_Challenge *ChallengeTransactor) Timeout(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Challenge.contract.Transact(opts, "timeout")
}

// Timeout is a paid mutator transaction binding the contract method 0x70dea79a.
//
// Solidity: function timeout() returns()
func (_Challenge *ChallengeSession) Timeout() (*types.Transaction, error) {
	return _Challenge.Contract.Timeout(&_Challenge.TransactOpts)
}

// Timeout is a paid mutator transaction binding the contract method 0x70dea79a.
//
// Solidity: function timeout() returns()
func (_Challenge *ChallengeTransactorSession) Timeout() (*types.Transaction, error) {
	return _Challenge.Contract.Timeout(&_Challenge.TransactOpts)
}

// ChallengeAsserterTimedOutIterator is returned from FilterAsserterTimedOut and is used to iterate over the raw logs and unpacked data for AsserterTimedOut events raised by the Challenge contract.
type ChallengeAsserterTimedOutIterator struct {
	Event *ChallengeAsserterTimedOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChallengeAsserterTimedOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChallengeAsserterTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChallengeAsserterTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChallengeAsserterTimedOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChallengeAsserterTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChallengeAsserterTimedOut represents a AsserterTimedOut event raised by the Challenge contract.
type ChallengeAsserterTimedOut struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAsserterTimedOut is a free log retrieval operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_Challenge *ChallengeFilterer) FilterAsserterTimedOut(opts *bind.FilterOpts) (*ChallengeAsserterTimedOutIterator, error) {

	logs, sub, err := _Challenge.contract.FilterLogs(opts, "AsserterTimedOut")
	if err != nil {
		return nil, err
	}
	return &ChallengeAsserterTimedOutIterator{contract: _Challenge.contract, event: "AsserterTimedOut", logs: logs, sub: sub}, nil
}

// WatchAsserterTimedOut is a free log subscription operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_Challenge *ChallengeFilterer) WatchAsserterTimedOut(opts *bind.WatchOpts, sink chan<- *ChallengeAsserterTimedOut) (event.Subscription, error) {

	logs, sub, err := _Challenge.contract.WatchLogs(opts, "AsserterTimedOut")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChallengeAsserterTimedOut)
				if err := _Challenge.contract.UnpackLog(event, "AsserterTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAsserterTimedOut is a log parse operation binding the contract event 0x2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f0.
//
// Solidity: event AsserterTimedOut()
func (_Challenge *ChallengeFilterer) ParseAsserterTimedOut(log types.Log) (*ChallengeAsserterTimedOut, error) {
	event := new(ChallengeAsserterTimedOut)
	if err := _Challenge.contract.UnpackLog(event, "AsserterTimedOut", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChallengeBisectedIterator is returned from FilterBisected and is used to iterate over the raw logs and unpacked data for Bisected events raised by the Challenge contract.
type ChallengeBisectedIterator struct {
	Event *ChallengeBisected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChallengeBisectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChallengeBisected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChallengeBisected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChallengeBisectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChallengeBisectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChallengeBisected represents a Bisected event raised by the Challenge contract.
type ChallengeBisected struct {
	ChallengeRoot [32]byte
	SegmentStart  *big.Int
	SegmentLength *big.Int
	ChainHashes   [][32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterBisected is a free log retrieval operation binding the contract event 0x0a2bdfea671da507e80b0cbae49dd25100a5bdacc5dff43a9163a3fcbd7c3c7d.
//
// Solidity: event Bisected(bytes32 indexed challengeRoot, uint256 segmentStart, uint256 segmentLength, bytes32[] chainHashes)
func (_Challenge *ChallengeFilterer) FilterBisected(opts *bind.FilterOpts, challengeRoot [][32]byte) (*ChallengeBisectedIterator, error) {

	var challengeRootRule []interface{}
	for _, challengeRootItem := range challengeRoot {
		challengeRootRule = append(challengeRootRule, challengeRootItem)
	}

	logs, sub, err := _Challenge.contract.FilterLogs(opts, "Bisected", challengeRootRule)
	if err != nil {
		return nil, err
	}
	return &ChallengeBisectedIterator{contract: _Challenge.contract, event: "Bisected", logs: logs, sub: sub}, nil
}

// WatchBisected is a free log subscription operation binding the contract event 0x0a2bdfea671da507e80b0cbae49dd25100a5bdacc5dff43a9163a3fcbd7c3c7d.
//
// Solidity: event Bisected(bytes32 indexed challengeRoot, uint256 segmentStart, uint256 segmentLength, bytes32[] chainHashes)
func (_Challenge *ChallengeFilterer) WatchBisected(opts *bind.WatchOpts, sink chan<- *ChallengeBisected, challengeRoot [][32]byte) (event.Subscription, error) {

	var challengeRootRule []interface{}
	for _, challengeRootItem := range challengeRoot {
		challengeRootRule = append(challengeRootRule, challengeRootItem)
	}

	logs, sub, err := _Challenge.contract.WatchLogs(opts, "Bisected", challengeRootRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChallengeBisected)
				if err := _Challenge.contract.UnpackLog(event, "Bisected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBisected is a log parse operation binding the contract event 0x0a2bdfea671da507e80b0cbae49dd25100a5bdacc5dff43a9163a3fcbd7c3c7d.
//
// Solidity: event Bisected(bytes32 indexed challengeRoot, uint256 segmentStart, uint256 segmentLength, bytes32[] chainHashes)
func (_Challenge *ChallengeFilterer) ParseBisected(log types.Log) (*ChallengeBisected, error) {
	event := new(ChallengeBisected)
	if err := _Challenge.contract.UnpackLog(event, "Bisected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChallengeChallengerTimedOutIterator is returned from FilterChallengerTimedOut and is used to iterate over the raw logs and unpacked data for ChallengerTimedOut events raised by the Challenge contract.
type ChallengeChallengerTimedOutIterator struct {
	Event *ChallengeChallengerTimedOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChallengeChallengerTimedOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChallengeChallengerTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChallengeChallengerTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChallengeChallengerTimedOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChallengeChallengerTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChallengeChallengerTimedOut represents a ChallengerTimedOut event raised by the Challenge contract.
type ChallengeChallengerTimedOut struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterChallengerTimedOut is a free log retrieval operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_Challenge *ChallengeFilterer) FilterChallengerTimedOut(opts *bind.FilterOpts) (*ChallengeChallengerTimedOutIterator, error) {

	logs, sub, err := _Challenge.contract.FilterLogs(opts, "ChallengerTimedOut")
	if err != nil {
		return nil, err
	}
	return &ChallengeChallengerTimedOutIterator{contract: _Challenge.contract, event: "ChallengerTimedOut", logs: logs, sub: sub}, nil
}

// WatchChallengerTimedOut is a free log subscription operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_Challenge *ChallengeFilterer) WatchChallengerTimedOut(opts *bind.WatchOpts, sink chan<- *ChallengeChallengerTimedOut) (event.Subscription, error) {

	logs, sub, err := _Challenge.contract.WatchLogs(opts, "ChallengerTimedOut")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChallengeChallengerTimedOut)
				if err := _Challenge.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengerTimedOut is a log parse operation binding the contract event 0x4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a.
//
// Solidity: event ChallengerTimedOut()
func (_Challenge *ChallengeFilterer) ParseChallengerTimedOut(log types.Log) (*ChallengeChallengerTimedOut, error) {
	event := new(ChallengeChallengerTimedOut)
	if err := _Challenge.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChallengeConstraintWinIterator is returned from FilterConstraintWin and is used to iterate over the raw logs and unpacked data for ConstraintWin events raised by the Challenge contract.
type ChallengeConstraintWinIterator struct {
	Event *ChallengeConstraintWin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChallengeConstraintWinIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChallengeConstraintWin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChallengeConstraintWin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChallengeConstraintWinIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChallengeConstraintWinIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChallengeConstraintWin represents a ConstraintWin event raised by the Challenge contract.
type ChallengeConstraintWin struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterConstraintWin is a free log retrieval operation binding the contract event 0x6af162552a4b84b5de3ae085d52a72f3600612e1900ffd795ee386297eaaa558.
//
// Solidity: event ConstraintWin()
func (_Challenge *ChallengeFilterer) FilterConstraintWin(opts *bind.FilterOpts) (*ChallengeConstraintWinIterator, error) {

	logs, sub, err := _Challenge.contract.FilterLogs(opts, "ConstraintWin")
	if err != nil {
		return nil, err
	}
	return &ChallengeConstraintWinIterator{contract: _Challenge.contract, event: "ConstraintWin", logs: logs, sub: sub}, nil
}

// WatchConstraintWin is a free log subscription operation binding the contract event 0x6af162552a4b84b5de3ae085d52a72f3600612e1900ffd795ee386297eaaa558.
//
// Solidity: event ConstraintWin()
func (_Challenge *ChallengeFilterer) WatchConstraintWin(opts *bind.WatchOpts, sink chan<- *ChallengeConstraintWin) (event.Subscription, error) {

	logs, sub, err := _Challenge.contract.WatchLogs(opts, "ConstraintWin")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChallengeConstraintWin)
				if err := _Challenge.contract.UnpackLog(event, "ConstraintWin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConstraintWin is a log parse operation binding the contract event 0x6af162552a4b84b5de3ae085d52a72f3600612e1900ffd795ee386297eaaa558.
//
// Solidity: event ConstraintWin()
func (_Challenge *ChallengeFilterer) ParseConstraintWin(log types.Log) (*ChallengeConstraintWin, error) {
	event := new(ChallengeConstraintWin)
	if err := _Challenge.contract.UnpackLog(event, "ConstraintWin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChallengeInitiatedChallengeIterator is returned from FilterInitiatedChallenge and is used to iterate over the raw logs and unpacked data for InitiatedChallenge events raised by the Challenge contract.
type ChallengeInitiatedChallengeIterator struct {
	Event *ChallengeInitiatedChallenge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChallengeInitiatedChallengeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChallengeInitiatedChallenge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChallengeInitiatedChallenge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChallengeInitiatedChallengeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChallengeInitiatedChallengeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChallengeInitiatedChallenge represents a InitiatedChallenge event raised by the Challenge contract.
type ChallengeInitiatedChallenge struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterInitiatedChallenge is a free log retrieval operation binding the contract event 0x7003482dc89fcecb9f14e280f21ee716bd54187f7f3b0ab5ed78f3648218f2de.
//
// Solidity: event InitiatedChallenge()
func (_Challenge *ChallengeFilterer) FilterInitiatedChallenge(opts *bind.FilterOpts) (*ChallengeInitiatedChallengeIterator, error) {

	logs, sub, err := _Challenge.contract.FilterLogs(opts, "InitiatedChallenge")
	if err != nil {
		return nil, err
	}
	return &ChallengeInitiatedChallengeIterator{contract: _Challenge.contract, event: "InitiatedChallenge", logs: logs, sub: sub}, nil
}

// WatchInitiatedChallenge is a free log subscription operation binding the contract event 0x7003482dc89fcecb9f14e280f21ee716bd54187f7f3b0ab5ed78f3648218f2de.
//
// Solidity: event InitiatedChallenge()
func (_Challenge *ChallengeFilterer) WatchInitiatedChallenge(opts *bind.WatchOpts, sink chan<- *ChallengeInitiatedChallenge) (event.Subscription, error) {

	logs, sub, err := _Challenge.contract.WatchLogs(opts, "InitiatedChallenge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChallengeInitiatedChallenge)
				if err := _Challenge.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiatedChallenge is a log parse operation binding the contract event 0x7003482dc89fcecb9f14e280f21ee716bd54187f7f3b0ab5ed78f3648218f2de.
//
// Solidity: event InitiatedChallenge()
func (_Challenge *ChallengeFilterer) ParseInitiatedChallenge(log types.Log) (*ChallengeInitiatedChallenge, error) {
	event := new(ChallengeInitiatedChallenge)
	if err := _Challenge.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChallengeOneStepProofCompletedIterator is returned from FilterOneStepProofCompleted and is used to iterate over the raw logs and unpacked data for OneStepProofCompleted events raised by the Challenge contract.
type ChallengeOneStepProofCompletedIterator struct {
	Event *ChallengeOneStepProofCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChallengeOneStepProofCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChallengeOneStepProofCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChallengeOneStepProofCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChallengeOneStepProofCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChallengeOneStepProofCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChallengeOneStepProofCompleted represents a OneStepProofCompleted event raised by the Challenge contract.
type ChallengeOneStepProofCompleted struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOneStepProofCompleted is a free log retrieval operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_Challenge *ChallengeFilterer) FilterOneStepProofCompleted(opts *bind.FilterOpts) (*ChallengeOneStepProofCompletedIterator, error) {

	logs, sub, err := _Challenge.contract.FilterLogs(opts, "OneStepProofCompleted")
	if err != nil {
		return nil, err
	}
	return &ChallengeOneStepProofCompletedIterator{contract: _Challenge.contract, event: "OneStepProofCompleted", logs: logs, sub: sub}, nil
}

// WatchOneStepProofCompleted is a free log subscription operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_Challenge *ChallengeFilterer) WatchOneStepProofCompleted(opts *bind.WatchOpts, sink chan<- *ChallengeOneStepProofCompleted) (event.Subscription, error) {

	logs, sub, err := _Challenge.contract.WatchLogs(opts, "OneStepProofCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChallengeOneStepProofCompleted)
				if err := _Challenge.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOneStepProofCompleted is a log parse operation binding the contract event 0x117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f5.
//
// Solidity: event OneStepProofCompleted()
func (_Challenge *ChallengeFilterer) ParseOneStepProofCompleted(log types.Log) (*ChallengeOneStepProofCompleted, error) {
	event := new(ChallengeOneStepProofCompleted)
	if err := _Challenge.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
