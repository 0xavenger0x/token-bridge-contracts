// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgetestcontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProofHashABI is the input ABI used to generate the binding from.
const OneStepProofHashABI = "[{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"bridges\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"initialMessagesAndBatchesRead\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"accs\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"uint256[2]\",\"name\":\"afterMessagesAndBatchesRead\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[4]\",\"name\":\"fields\",\"type\":\"bytes32[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"bridges\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"initialMessagesAndBatchesRead\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"accs\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStepDebug\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"startMachine\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"afterMachine\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// OneStepProofHashFuncSigs maps the 4-byte function signature to its string representation.
var OneStepProofHashFuncSigs = map[string]string{
	"11a628e9": "executeStep(address[2],uint256[2],bytes32[2],bytes,bytes)",
	"80c0e1cf": "executeStepDebug(address[2],uint256[2],bytes32[2],bytes,bytes)",
}

// OneStepProofHashBin is the compiled bytecode used for deploying new contracts.
var OneStepProofHashBin = ""

// DeployOneStepProofHash deploys a new Ethereum contract, binding an instance of OneStepProofHash to it.
func DeployOneStepProofHash(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProofHash, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofHashABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofHashBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProofHash{OneStepProofHashCaller: OneStepProofHashCaller{contract: contract}, OneStepProofHashTransactor: OneStepProofHashTransactor{contract: contract}, OneStepProofHashFilterer: OneStepProofHashFilterer{contract: contract}}, nil
}

// OneStepProofHash is an auto generated Go binding around an Ethereum contract.
type OneStepProofHash struct {
	OneStepProofHashCaller     // Read-only binding to the contract
	OneStepProofHashTransactor // Write-only binding to the contract
	OneStepProofHashFilterer   // Log filterer for contract events
}

// OneStepProofHashCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofHashCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofHashTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofHashTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofHashFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofHashFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofHashSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofHashSession struct {
	Contract     *OneStepProofHash // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProofHashCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofHashCallerSession struct {
	Contract *OneStepProofHashCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// OneStepProofHashTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofHashTransactorSession struct {
	Contract     *OneStepProofHashTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// OneStepProofHashRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofHashRaw struct {
	Contract *OneStepProofHash // Generic contract binding to access the raw methods on
}

// OneStepProofHashCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofHashCallerRaw struct {
	Contract *OneStepProofHashCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofHashTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofHashTransactorRaw struct {
	Contract *OneStepProofHashTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProofHash creates a new instance of OneStepProofHash, bound to a specific deployed contract.
func NewOneStepProofHash(address common.Address, backend bind.ContractBackend) (*OneStepProofHash, error) {
	contract, err := bindOneStepProofHash(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProofHash{OneStepProofHashCaller: OneStepProofHashCaller{contract: contract}, OneStepProofHashTransactor: OneStepProofHashTransactor{contract: contract}, OneStepProofHashFilterer: OneStepProofHashFilterer{contract: contract}}, nil
}

// NewOneStepProofHashCaller creates a new read-only instance of OneStepProofHash, bound to a specific deployed contract.
func NewOneStepProofHashCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofHashCaller, error) {
	contract, err := bindOneStepProofHash(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofHashCaller{contract: contract}, nil
}

// NewOneStepProofHashTransactor creates a new write-only instance of OneStepProofHash, bound to a specific deployed contract.
func NewOneStepProofHashTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofHashTransactor, error) {
	contract, err := bindOneStepProofHash(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofHashTransactor{contract: contract}, nil
}

// NewOneStepProofHashFilterer creates a new log filterer instance of OneStepProofHash, bound to a specific deployed contract.
func NewOneStepProofHashFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofHashFilterer, error) {
	contract, err := bindOneStepProofHash(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofHashFilterer{contract: contract}, nil
}

// bindOneStepProofHash binds a generic wrapper to an already deployed contract.
func bindOneStepProofHash(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofHashABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofHash *OneStepProofHashRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProofHash.Contract.OneStepProofHashCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofHash *OneStepProofHashRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofHash.Contract.OneStepProofHashTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofHash *OneStepProofHashRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofHash.Contract.OneStepProofHashTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofHash *OneStepProofHashCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProofHash.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofHash *OneStepProofHashTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofHash.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofHash *OneStepProofHashTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofHash.Contract.contract.Transact(opts, method, params...)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x11a628e9.
//
// Solidity: function executeStep(address[2] bridges, uint256[2] initialMessagesAndBatchesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256[2] afterMessagesAndBatchesRead, bytes32[4] fields)
func (_OneStepProofHash *OneStepProofHashCaller) ExecuteStep(opts *bind.CallOpts, bridges [2]common.Address, initialMessagesAndBatchesRead [2]*big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas                         uint64
	AfterMessagesAndBatchesRead [2]*big.Int
	Fields                      [4][32]byte
}, error) {
	var out []interface{}
	err := _OneStepProofHash.contract.Call(opts, &out, "executeStep", bridges, initialMessagesAndBatchesRead, accs, proof, bproof)

	outstruct := new(struct {
		Gas                         uint64
		AfterMessagesAndBatchesRead [2]*big.Int
		Fields                      [4][32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Gas = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.AfterMessagesAndBatchesRead = *abi.ConvertType(out[1], new([2]*big.Int)).(*[2]*big.Int)
	outstruct.Fields = *abi.ConvertType(out[2], new([4][32]byte)).(*[4][32]byte)

	return *outstruct, err

}

// ExecuteStep is a free data retrieval call binding the contract method 0x11a628e9.
//
// Solidity: function executeStep(address[2] bridges, uint256[2] initialMessagesAndBatchesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256[2] afterMessagesAndBatchesRead, bytes32[4] fields)
func (_OneStepProofHash *OneStepProofHashSession) ExecuteStep(bridges [2]common.Address, initialMessagesAndBatchesRead [2]*big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas                         uint64
	AfterMessagesAndBatchesRead [2]*big.Int
	Fields                      [4][32]byte
}, error) {
	return _OneStepProofHash.Contract.ExecuteStep(&_OneStepProofHash.CallOpts, bridges, initialMessagesAndBatchesRead, accs, proof, bproof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x11a628e9.
//
// Solidity: function executeStep(address[2] bridges, uint256[2] initialMessagesAndBatchesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256[2] afterMessagesAndBatchesRead, bytes32[4] fields)
func (_OneStepProofHash *OneStepProofHashCallerSession) ExecuteStep(bridges [2]common.Address, initialMessagesAndBatchesRead [2]*big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas                         uint64
	AfterMessagesAndBatchesRead [2]*big.Int
	Fields                      [4][32]byte
}, error) {
	return _OneStepProofHash.Contract.ExecuteStep(&_OneStepProofHash.CallOpts, bridges, initialMessagesAndBatchesRead, accs, proof, bproof)
}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0x80c0e1cf.
//
// Solidity: function executeStepDebug(address[2] bridges, uint256[2] initialMessagesAndBatchesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProofHash *OneStepProofHashCaller) ExecuteStepDebug(opts *bind.CallOpts, bridges [2]common.Address, initialMessagesAndBatchesRead [2]*big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	var out []interface{}
	err := _OneStepProofHash.contract.Call(opts, &out, "executeStepDebug", bridges, initialMessagesAndBatchesRead, accs, proof, bproof)

	outstruct := new(struct {
		StartMachine string
		AfterMachine string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.StartMachine = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.AfterMachine = *abi.ConvertType(out[1], new(string)).(*string)

	return *outstruct, err

}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0x80c0e1cf.
//
// Solidity: function executeStepDebug(address[2] bridges, uint256[2] initialMessagesAndBatchesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProofHash *OneStepProofHashSession) ExecuteStepDebug(bridges [2]common.Address, initialMessagesAndBatchesRead [2]*big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	return _OneStepProofHash.Contract.ExecuteStepDebug(&_OneStepProofHash.CallOpts, bridges, initialMessagesAndBatchesRead, accs, proof, bproof)
}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0x80c0e1cf.
//
// Solidity: function executeStepDebug(address[2] bridges, uint256[2] initialMessagesAndBatchesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProofHash *OneStepProofHashCallerSession) ExecuteStepDebug(bridges [2]common.Address, initialMessagesAndBatchesRead [2]*big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	return _OneStepProofHash.Contract.ExecuteStepDebug(&_OneStepProofHash.CallOpts, bridges, initialMessagesAndBatchesRead, accs, proof, bproof)
}
