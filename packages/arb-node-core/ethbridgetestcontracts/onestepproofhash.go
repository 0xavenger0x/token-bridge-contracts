// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgetestcontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProofHashABI is the input ABI used to generate the binding from.
const OneStepProofHashABI = "[{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"bridges\",\"type\":\"address[2]\"},{\"internalType\":\"uint256\",\"name\":\"initialMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[2]\",\"name\":\"accs\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"afterMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[4]\",\"name\":\"fields\",\"type\":\"bytes32[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"bridges\",\"type\":\"address[2]\"},{\"internalType\":\"uint256\",\"name\":\"initialMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[2]\",\"name\":\"accs\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStepDebug\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"startMachine\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"afterMachine\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// OneStepProofHashFuncSigs maps the 4-byte function signature to its string representation.
var OneStepProofHashFuncSigs = map[string]string{
	"47dda1d6": "executeStep(address[2],uint256,bytes32[2],bytes,bytes)",
	"eba67f6e": "executeStepDebug(address[2],uint256,bytes32[2],bytes,bytes)",
}

// OneStepProofHashBin is the compiled bytecode used for deploying new contracts.
var OneStepProofHashBin = "0x608060405234801561001057600080fd5b50613fc4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806347dda1d61461003b578063eba67f6e14610159575b600080fd5b610107600480360360e081101561005157600080fd5b604082013590606083019083018360c0810160a0820135600160201b81111561007957600080fd5b82018360208201111561008b57600080fd5b803590602001918460018302840111600160201b831117156100ac57600080fd5b919390929091602081019035600160201b8111156100c957600080fd5b8201836020820111156100db57600080fd5b803590602001918460018302840111600160201b831117156100fc57600080fd5b509092509050610303565b60405180846001600160401b0316815260200183815260200182600460200280838360005b8381101561014457818101518382015260200161012c565b50505050905001935050505060405180910390f35b610225600480360360e081101561016f57600080fd5b604082013590606083019083018360c0810160a0820135600160201b81111561019757600080fd5b8201836020820111156101a957600080fd5b803590602001918460018302840111600160201b831117156101ca57600080fd5b919390929091602081019035600160201b8111156101e757600080fd5b8201836020820111156101f957600080fd5b803590602001918460018302840111600160201b8311171561021a57600080fd5b5090925090506103c2565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561026657818101518382015260200161024e565b50505050905090810190601f1680156102935780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156102c65781810151838201526020016102ae565b50505050905090810190601f1680156102f35780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b60008061030e613d35565b610316613d53565b61039a8a8a8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b9081908401838280828437600081840152601f19601f820116905080830192505050505050508f610487565b90506103a581610936565b6103ae81610d4c565b935093509350509750975097945050505050565b6060806103cd613d53565b610451898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a9081908401838280828437600081840152601f19601f820116905080830192505050505050508e610487565b905061045c81610936565b6104698160400151610daf565b92506104788160600151610daf565b91505097509795505050505050565b61048f613d53565b60008460008151811061049e57fe5b602001015160f81c60f81b60f81c90506000856001815181106104bd57fe5b602001015160f81c60f81b60f81c90506000866002815181106104dc57fe5b016020015160f81c9050600360606004840160ff166001600160401b038111801561050657600080fd5b5060405190808252806020026020018201604052801561054057816020015b61052d613de5565b8152602001906001900390816105255790505b50905060608360040160ff166001600160401b038111801561056157600080fd5b5060405190808252806020026020018201604052801561059b57816020015b610588613de5565b8152602001906001900390816105805790505b50905060005b8560ff168110156105d7576105b68b85611123565b8483815181106105c257fe5b602090810291909101015293506001016105a1565b5060005b8460ff16811015610611576105f08b85611123565b8383815181106105fc57fe5b602090810291909101015293506001016105db565b5061061a613e22565b6106248b856112e5565b809250819550505060008b858151811061063a57fe5b01602001516001959095019460f81c9050610653613d53565b6001600160a01b038b351680825260208201526040810183905261067683611396565b6060820152608081018f90528d3560a08201526020808f013560c0830152600060e0830181905260408051808201825260ff8c811682528185018a905261010086019190915281518083019092528a8116825292810187905261012084015283821660018114610140850152918b1661016084015261018083018f90526101c083018e90526101e08301526101a08201879052158061071857508160ff166001145b6040518060400160405280600b81526020016a04241445f494d4d5f5459560ac1b815250906107c55760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561078a578181015183820152602001610772565b50505050905090810190601f1680156107b75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506107ce613de5565b60ff83166107ef576107e88a83604001516000015161140a565b905061088f565b6000865111604051806040016040528060068152602001654e4f5f494d4d60d01b8152509061085f5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561078a578181015183820152602001610772565b5061088c8a8360400151600001518860018d0360ff168151811061087f57fe5b602002602001015161146e565b90505b610898816114f2565b60408301515260005b838a0360ff168110156108e0576108d88782815181106108bd57fe5b6020026020010151846040015161165f90919063ffffffff16565b6001016108a1565b5060005b8860ff16811015610921576109198682815181106108fe57fe5b6020026020010151846040015161167990919063ffffffff16565b6001016108e4565b50909f9e505050505050505050505050505050565b6000806000613e8d61094f85610160015160ff16611693565b935093509350935060008411806109695750846101400151155b801561097b5750610100850151518410155b806109a357508461014001518015610991575083155b80156109a35750610100850151516001145b6040518060400160405280600a815260200169535441434b5f4d414e5960b01b81525090610a125760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561078a578181015183820152602001610772565b50610120850151516040805180820190915260088152674155585f4d414e5960c01b602082015290841015610a885760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561078a578181015183820152602001610772565b5061010085015151841115610b4657610aa7610aa261176f565b6114f2565b610ab88660600151602001516114f2565b146040518060400160405280600d81526020016c535441434b5f4d495353494e4760981b81525090610b2b5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561078a578181015183820152602001610772565b50610b378560056117b6565b50610b418561182b565b610c06565b61012085015151831115610be157610b5f610aa261176f565b610b708660600151604001516114f2565b146040518060400160405280600b81526020016a4155585f4d495353494e4760a81b81525090610b2b5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561078a578181015183820152602001610772565b610beb85836117b6565b15610bf957610b418561182b565b610c06858263ffffffff16565b846101e0015115610cab5760408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051910120606086015160c001511415610c6d57610c688560600151611836565b610cab565b60006101e0860152606085015160c081015190526101408501518015610c91575083155b610ca057610100850151600090525b610120850151600090525b60005b61010086015151811015610cf757610cef866101000151602001518281518110610cd457fe5b6020026020010151876060015161165f90919063ffffffff16565b600101610cae565b5060005b61012086015151811015610d4457610d3c866101200151602001518281518110610d2157fe5b6020026020010151876060015161167990919063ffffffff16565b600101610cfb565b505050505050565b600080610d57613d35565b8360e0015184608001516040518060800160405280610d798860400151611841565b8152602001610d8b8860600151611841565b81526020018760a0015181526020018760c001518152509250925092509193909250565b6060610dbe826000015161191b565b610dd3610dce84602001516114f2565b61191b565b610de3610dce85604001516114f2565b610df3610dce86606001516114f2565b610e03610dce87608001516114f2565b610e108760a001516119ea565b610e1d8860c0015161191b565b610e2d610dce8a60e001516114f2565b60405160200180806709ac2c6d0d2dcca560c31b81525060080189805190602001908083835b60208310610e725780518252601f199092019160209182019101610e53565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528a516003909101928b0191508083835b60208310610ec95780518252601f199092019160209182019101610eaa565b51815160209384036101000a60001901801990921691161790526216100560e91b9190930190815289516003909101928a0191508083835b60208310610f205780518252601f199092019160209182019101610f01565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528851600390910192890191508083835b60208310610f775780518252601f199092019160209182019101610f58565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528751600390910192880191508083835b60208310610fce5780518252601f199092019160209182019101610faf565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528651600390910192870191508083835b602083106110255780518252601f199092019160209182019101611006565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528551600390910192860191508083835b6020831061107c5780518252601f19909201916020918201910161105d565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528451600390910192850191508083835b602083106110d35780518252601f1990920191602091820191016110b4565b6001836020036101000a0380198251168184511680821785525050505050509050018061148560f11b8152506002019850505050505050505060405160208183030381529060405290505b919050565b600061112d613de5565b83518310611173576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b6000806111808686611ac4565b9150915061118c611aeb565b60ff168160ff1614156111c05760006111a58784611af0565b9093509050826111b482611b5e565b945094505050506112de565b6111c8611c1e565b60ff168160ff1614156111ea576111df8683611c23565b9350935050506112de565b6111f2611cc5565b60ff168160ff16141561121a57600061120b8784611af0565b9093509050826111b482611cca565b611222611db6565b60ff168160ff161415611239576111df8683611dbb565b611241611e50565b60ff168160ff16101580156112625750611259611e55565b60ff168160ff16105b1561129e576000611271611e50565b820390506060611282828986611e5a565b90945090508361129182611f02565b95509550505050506112de565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b60006112ef613e22565b6112f7613e22565b600061010082018190528061130c8787611af0565b909650915061131b8787611dbb565b6020850152955061132c8787611dbb565b6040850152955061133d8787611123565b6060850152955061134e8787611123565b6080850152955061135f8787611af0565b60a085015295506113708787611af0565b909650905061137f8787611123565b60e085015291835260c08301529590945092505050565b61139e613e22565b60405180610120016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e0015181526020018361010001518152509050919050565b611412613de5565b6040805160608101825260ff8516815260208082018590528251600080825291810184526114659383019161145d565b61144a613de5565b8152602001906001900390816114425790505b509052612043565b90505b92915050565b611476613de5565b604080516001808252818301909252606091816020015b611495613de5565b81526020019060019003908161148d57905050905082816000815181106114b857fe5b60200260200101819052506114e960405180606001604052808760ff16815260200186815260200183815250612043565b95945050505050565b60006114fc611aeb565b60ff16826080015160ff16141561151f578151611518906120d3565b905061111e565b611527611c1e565b60ff16826080015160ff1614156115455761151882602001516120f7565b61154d611db6565b60ff16826080015160ff16141561156f57815160a083015161151891906121ec565b611577611e50565b60ff16826080015160ff1614156115b057611590613de5565b61159d836040015161223a565b90506115a8816114f2565b91505061111e565b6115b86123af565b60ff16826080015160ff1614156115d15750805161111e565b6115d9611cc5565b60ff16826080015160ff16141561161e575060608082015160408051607b6020808301919091528183019390935281518082038301815293019052815191012061111e565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b61166d8260200151826123b4565b82602001819052505050565b6116878260400151826123b4565b82604001819052505050565b60008080613e8d60208514156116b85750600192506000915060079050612432611768565b60218514156116d6575060019250600091506003905061246d611768565b60228514156116f45750600292506000915060089050612497611768565b6023851415611713575060019250600091506102589050612539611768565b60248514156117315750600392506000915060fa9050612725611768565b60405162461bcd60e51b815260040180806020018281038252602c815260200180613f63602c913960400191505060405180910390fd5b9193509193565b611777613de5565b604080516000808252602082019092526117b1916117ab565b611798613de5565b8152602001906001900390816117905790505b50611f02565b905090565b6000816001600160401b0316836060015160a0015110156117fb575060e0820180516005016001600160401b03169052606082015160001960a0909101526001611468565b5060e0820180516001600160401b039083018116909152606083015160a001805191831690910390526000611468565b60016101e090910152565b600161010090910152565b6000600282610100015114156118595750600061111e565b6001826101000151141561186f5750600161111e565b8151602083015161187f906114f2565b61188c84604001516114f2565b61189985606001516114f2565b6118a686608001516114f2565b8660a001518760c001516118bd8960e001516114f2565b604051602001808981526020018881526020018781526020018681526020018581526020018481526020018381526020018281526020019850505050505050505060405160208183030381529060405280519060200120905061111e565b60408051818152606081810183529182919060208201818036833701905050905060005b60208110156119e357600084826020811061195657fe5b1a60f881811b9250601080830480831b9360ff9091169091029003901b61197c826127e3565b85856002028151811061198b57fe5b60200101906001600160f81b031916908160001a9053506119ab816127e3565b8585600202600101815181106119bd57fe5b60200101906001600160f81b031916908160001a905350506001909201915061193f9050565b5092915050565b60608180611a115750506040805180820190915260018152600360fc1b602082015261111e565b8060005b8115611a2957600101600a82049150611a15565b6060816001600160401b0381118015611a4157600080fd5b506040519080825280601f01601f191660200182016040528015611a6c576020820181803683370190505b50905060001982015b8415611aba57600a850660300160f81b82828060019003935081518110611a9857fe5b60200101906001600160f81b031916908160001a905350600a85049450611a75565b5095945050505050565b60008082600101848481518110611ad757fe5b016020015190925060f81c90509250929050565b600090565b60008082845110158015611b08575060208385510310155b611b45576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b60208301611b538585612814565b915091509250929050565b611b66613de5565b6040805160c0810182528381528151606081018352600080825260208083018290528451828152808201865293949085019390830191611bbc565b611ba9613de5565b815260200190600190039081611ba15790505b50905281526020016000604051908082528060200260200182016040528015611bff57816020015b611bec613de5565b815260200190600190039081611be45790505b5081526000602082018190526040820152600160609091015292915050565b600190565b6000611c2d613de5565b82600080611c39613de5565b6000611c458986611ac4565b9095509350611c548986611ac4565b9095509250600160ff85161415611c7557611c6f8986611123565b90955091505b611c7f898661286d565b9095509050600160ff85161415611caa5784611c9c84838561146e565b9650965050505050506112de565b84611cb5848361140a565b9650965050505050509250929050565b600c90565b611cd2613de5565b6040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b0381118015611d1957600080fd5b50604051908082528060200260200182016040528015611d5357816020015b611d40613de5565b815260200190600190039081611d385790505b50905281526020016000604051908082528060200260200182016040528015611d9657816020015b611d83613de5565b815260200190600190039081611d7b5790505b50815260208101849052600c604082015260016060909101529050919050565b600290565b6000611dc5613de5565b82845110158015611dda575060408385510310155b611e17576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b600080611e24868661286d565b9094509150611e338685611af0565b909450905083611e43838361287e565b9350935050509250929050565b600390565b600d90565b60006060828160ff87166001600160401b0381118015611e7957600080fd5b50604051908082528060200260200182016040528015611eb357816020015b611ea0613de5565b815260200190600190039081611e985790505b50905060005b8760ff168160ff161015611ef557611ed18784611123565b838360ff1681518110611ee057fe5b60209081029190910101529250600101611eb9565b5090969095509350505050565b611f0a613de5565b611f14825161293d565b611f65576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b8351811015611f9c57838181518110611f7f57fe5b602002602001015160a00151820191508080600101915050611f6a565b506040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b0381118015611fe457600080fd5b5060405190808252806020026020018201604052801561201e57816020015b61200b613de5565b8152602001906001900390816120035790505b5090528152602081019490945260006040850152600360608501526080909301525090565b61204b613de5565b6040518060c001604052806000815260200183815260200160006001600160401b038111801561207a57600080fd5b506040519080825280602002602001820160405280156120b457816020015b6120a1613de5565b8152602001906001900390816120995790505b5081526000602082015260016040820181905260609091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b600060028260400151511061210857fe5b60408201515161216b5761211a611c1e565b82600001518360200151604051602001808460ff1660f81b81526001018360ff1660f81b8152600101828152602001935050505060405160208183030381529060405280519060200120905061111e565b612173611c1e565b8260000151612199846040015160008151811061218c57fe5b60200260200101516114f2565b8460200151604051602001808560ff1660f81b81526001018460ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b60006121f6611e50565b8383604051602001808460ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b612242613de5565b600882511115612290576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b606082516001600160401b03811180156122a957600080fd5b506040519080825280602002602001820160405280156122d3578160200160208202803683370190505b508051909150600160005b82811015612336576122f586828151811061218c57fe5b84828151811061230157fe5b60200260200101818152505085818151811061231957fe5b602002602001015160a001518201915080806001019150506122de565b506000835184604051602001808360ff1660f81b8152600101828051906020019060200280838360005b83811015612378578181015183820152602001612360565b50505050905001925050506040516020818303038152906040528051906020012090506123a5818361287e565b9695505050505050565b606490565b6123bc613de5565b6040805160028082526060828101909352816020015b6123da613de5565b8152602001906001900390816123d257905050905082816000815181106123fd57fe5b6020026020010181905250838160018151811061241657fe5b602002602001018190525061242a8161223a565b949350505050565b61243a613de5565b612448826101000151612944565b905061246982610100015161246461245f846114f2565b611b5e565b612986565b5050565b612475613de5565b612483826101000151612944565b9050612469826101000151612464836129b0565b61249f613de5565b6124ad826101000151612944565b90506124b7613de5565b6124c5836101000151612944565b90506124d0826129e2565b15806124e257506124e0816129e2565b155b156124f7576124f0836129ed565b5050612536565b8151815160408051602080820185905281830184905282518083038401815260609092019092528051910120610100860151610d449061246483611b5e565b50565b612541613de5565b61254f826101000151612944565b905061255a816129f6565b158061256c5750806040015151600714155b156125805761257a826129ed565b50612536565b604081015160005b60078110156125ca576125ad8282815181106125a057fe5b60200260200101516129e2565b6125c2576125ba846129ed565b505050612536565b600101612588565b506125d3613e8f565b60005b601981101561263757604060038216028360048304815181106125f557fe5b602002602001015160000151901c6001600160401b0316826005838161261757fe5b0460058406600502016019811061262a57fe5b60200201526001016125d6565b5061264181612a03565b604080516007808252610100820190925291925060609190816020015b612666613de5565b81526020019060019003908161265e57905050905060005b60078110156126b0576126916000611b5e565b82828151811061269d57fe5b602090810291909101015260010161267e565b5060005b601981101561270b576040600382160283600583046005840660050201601981106126db57fe5b6020020151901b8260048304815181106126f157fe5b6020908102919091010151805190911790526001016126b4565b5061271e85610100015161246483611f02565b5050505050565b61272d613de5565b61273b826101000151612944565b9050612745613de5565b612753836101000151612944565b905061275d613de5565b61276b846101000151612944565b9050612776836129e2565b15806127885750612786826129e2565b155b806127995750612797816129e2565b155b156127a7576125ba846129ed565b82518251825161010087015160408051808201909152838152602081018390526127da91906124649061245f90876135f1565b50505050505050565b6000600a60f883901c1015612803578160f81c60300160f81b905061111e565b8160f81c60570160f81b905061111e565b60008160200183511015612864576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b60008060208301611b538585612814565b612886613de5565b6040805160c08101825284815281516060810183526000808252602080830182905284518281528082018652939490850193908301916128dc565b6128c9613de5565b8152602001906001900390816128c15790505b5090528152602001600060405190808252806020026020018201604052801561291f57816020015b61290c613de5565b8152602001906001900390816129045790505b50815260006020820152600260408201526060019290925250919050565b6008101590565b61294c613de5565b612954613de5565b826020015160018460000151038151811061296b57fe5b60209081029190910101518351600019018452915050919050565b80826020015183600001518151811061299b57fe5b60209081029190910101525080516001019052565b6129b8613de5565b816080015160ff16600214156129d2576115186003611b5e565b611468826080015160ff16611b5e565b6080015160ff161590565b6125368161182b565b6080015160ff1660031490565b612a0b613e8f565b612a13613eae565b612a1b613eae565b612a23613e8f565b612a2b613ecc565b60405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060005b60188110156135e6576080878101516060808a01516040808c01516020808e01518e511890911890921890931889526101208b01516101008c015160e08d015160c08e015160a08f0151181818189089018190526101c08b01516101a08c01516101808d01516101608e01516101408f0151181818189289019283526102608b01516102408c01516102208d01516102008e01516101e08f015118181818918901919091526103008a01516102e08b01516102c08c01516102a08d01516102808e0151181818189288018390526001600160401b0360028202166001603f1b91829004179092188652510485600260200201516002026001600160401b03161785600060200201511884600160200201526001603f1b856003602002015181612c7457fe5b0485600360200201516002026001600160401b03161785600160200201511884600260200201526001603f1b856004602002015181612caf57fe5b0485600460200201516002026001600160401b03161785600260058110612cd257fe5b602002015118606085015284516001603f1b9086516060808901519390920460029091026001600160401b031617909118608086810191825286518a5118808b5287516020808d018051909218825289516040808f0180519092189091528a518e8801805190911890528a51948e0180519095189094528901805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291880180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292870180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a01805190911890529084525163100000009060208901516001600160401b03641000000000909102169190041761010084015260408701516001603d1b9060408901516001600160401b03600890910216919004176101608401526060870151628000009060608901516001600160401b036502000000000090910216919004176102608401526080870151654000000000009060808901516001600160401b036204000090910216919004176102c084015260a08701516001603f1b900487600560200201516002026001600160401b03161783600260198110612f3c57fe5b602002015260c0870151621000008104651000000000009091026001600160401b039081169190911760a085015260e0880151664000000000000081046104009091028216176101a08501526101008801516208000081046520000000000090910282161761020085015261012088015160048082029092166001603e1b909104176103008501526101408801516101408901516001600160401b036001603e1b90910216919004176080840152610160870151670400000000000000906101608901516001600160401b036040909102169190041760e084015261018087015162200000906101808901516001600160401b036508000000000090910216919004176101408401526101a08701516602000000000000906101a08901516001600160401b0361800090910216919004176102408401526101c08701516008906101c08901516001600160401b036001603d1b90910216919004176102a08401526101e0870151641000000000906101e08901516001600160401b03631000000090910216919004176020840152610200808801516102008901516001600160401b0366800000000000009091021691900417610120840152610220870151648000000000906102208901516001600160401b036302000000909102169190041761018084015261024087015165080000000000906102408901516001600160401b036220000090910216919004176101e0840152610260870151610100906102608901516001600160401b03600160381b90910216919004176102e0840152610280870151642000000000906102808901516001600160401b036308000000909102169190041760608401526102a087015165100000000000906102a08901516001600160401b0362100000909102169190041760c08401526102c08701516302000000906102c08901516001600160401b0364800000000090910216919004176101c08401526102e0870151600160381b906102e08901516001600160401b036101009091021691900417610220840152610300870151660400000000000090048760186020020151614000026001600160401b031617836014602002015282600a602002015183600560200201511916836000602002015118876000602002015282600b602002015183600660200201511916836001602002015118876001602002015282600c602002015183600760200201511916836002602002015118876002602002015282600d602002015183600860200201511916836003602002015118876003602002015282600e602002015183600960200201511916836004602002015118876004602002015282600f602002015183600a602002015119168360056020020151188760056020020152826010602002015183600b602002015119168360066020020151188760066020020152826011602002015183600c602002015119168360076020020151188760076020020152826012602002015183600d602002015119168360086020020151188760086020020152826013602002015183600e602002015119168360096020020151188760096020020152826014602002015183600f6020020151191683600a60200201511887600a602002015282601560200201518360106020020151191683600b60200201511887600b602002015282601660200201518360116020020151191683600c60200201511887600c602002015282601760200201518360126020020151191683600d60200201511887600d602002015282601860200201518360136020020151191683600e60200201511887600e602002015282600060200201518360146020020151191683600f60200201511887600fd457fe5b60200201518751188752600101612b4f565b509495945050505050565b60006135fb613eeb565b50604080516108008101825263428a2f9881526371374491602082015263b5c0fbcf9181019190915263e9b5dba56060820152633956c25b60808201526359f111f160a082015263923f82a460c082015263ab1c5ed560e082015263d807aa986101008201526312835b0161012082015263243185be61014082015263550c7dc36101608201526372be5d746101808201526380deb1fe6101a0820152639bdc06a76101c082015263c19bf1746101e082015263e49b69c161020082015263efbe4786610220820152630fc19dc661024082015263240ca1cc610260820152632de92c6f610280820152634a7484aa6102a0820152635cb0a9dc6102c08201526376f988da6102e082015263983e515261030082015263a831c66d61032082015263b00327c861034082015263bf597fc761036082015263c6e00bf361038082015263d5a791476103a08201526306ca63516103c082015263142929676103e08201526327b70a85610400820152632e1b2138610420820152634d2c6dfc6104408201526353380d1361046082015263650a735461048082015263766a0abb6104a08201526381c2c92e6104c08201526392722c856104e082015263a2bfe8a161050082015263a81a664b61052082015263c24b8b7061054082015263c76c51a361056082015263d192e81961058082015263d69906246105a082015263f40e35856105c082015263106aa0706105e08201526319a4c116610600820152631e376c08610620820152632748774c6106408201526334b0bcb561066082015263391c0cb3610680820152634ed8aa4a6106a0820152635b9cca4f6106c082015263682e6ff36106e082015263748f82ee6107008201526378a5636f6107208201526384c87814610740820152638cc702086107608201526390befffa61078082015263a4506ceb6107a082015263bef9a3f76107c082015263c67178f26107e08201526138c6613eeb565b60005b60088163ffffffff1610156139535763ffffffff6020820260e003168660006020020151901c828263ffffffff166040811061390157fe5b63ffffffff92831660209182029290920191909152820260e003168660016020020151901c828260080163ffffffff166040811061393b57fe5b63ffffffff90921660209290920201526001016138c9565b5060106000805b60408363ffffffff161015613aaf57600384600f850363ffffffff166040811061398057fe5b602002015163ffffffff16901c6139b185600f860363ffffffff16604081106139a557fe5b60200201516012613d0e565b6139d586600f870363ffffffff16604081106139c957fe5b60200201516007613d0e565b18189150600a846002850363ffffffff16604081106139f057fe5b602002015163ffffffff16901c613a21856002860363ffffffff1660408110613a1557fe5b60200201516013613d0e565b613a45866002870363ffffffff1660408110613a3957fe5b60200201516011613d0e565b1818905080846007850363ffffffff1660408110613a5f57fe5b602002015183866010870363ffffffff1660408110613a7a57fe5b6020020151010101848463ffffffff1660408110613a9457fe5b63ffffffff909216602092909202015260019092019161395a565b613ab7613f0a565b600093505b60088463ffffffff161015613b08578360200260e00363ffffffff1688901c818563ffffffff1660088110613aed57fe5b63ffffffff9092166020929092020152600190930192613abc565b60008060008096505b60408763ffffffff161015613c5d576080840151613b30906019613d0e565b6080850151613b4090600b613d0e565b6080860151613b50906006613d0e565b18189450878763ffffffff1660408110613b6657fe5b6020020151898863ffffffff1660408110613b7d57fe5b6020020151608086015160a087015160c0880151613b9c929190613d2c565b878760076020020151010101019250613bbd84600060200201516016613d0e565b8451613bca90600d613d0e565b8551613bd7906002613d0e565b6040870180516020890180518a5160c08c01805163ffffffff90811660e08f015260a08e018051821690925260808e018051821690925260608e0180518e01821690925280861690915280831690955284811690925280831891909116911618929091189290921881810186810190931687526001999099019897509092509050613b11565b600096505b60088763ffffffff161015613cb1578660200260e00363ffffffff168b901c848863ffffffff1660088110613c9357fe5b60200201805163ffffffff9201919091169052600190960195613c62565b60008097505b60088863ffffffff161015613cfe578760200260e00363ffffffff16858963ffffffff1660088110613ce557fe5b602002015160019099019863ffffffff16901b17613cb7565b9c9b505050505050505050505050565b63ffffffff9182166020829003831681901b919092169190911c1790565b82191691161890565b60405180608001604052806004906020820280368337509192915050565b604080516102008101825260008082526020820152908101613d73613e22565b8152602001613d80613e22565b81526000602082018190526040820181905260608201819052608082015260a001613da9613f29565b8152602001613db6613f29565b81526000602082018190526040820181905260608083018190526080830182905260a083015260c09091015290565b6040518060c0016040528060008152602001613dff613f43565b815260606020820181905260006040830181905290820181905260809091015290565b6040805161012081019091526000815260208101613e3e613de5565b8152602001613e4b613de5565b8152602001613e58613de5565b8152602001613e65613de5565b81526000602082018190526040820152606001613e80613de5565b8152602001600081525090565bfe5b6040518061032001604052806019906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b6040518061030001604052806018906020820280368337509192915050565b6040518061080001604052806040906020820280368337509192915050565b6040518061010001604052806008906020820280368337509192915050565b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fe75736520616e6f7468657220636f6e747261637420746f2068616e646c65206f74686572206f70636f646573a264697066735822122004963a4800f43c9ee2336fc83231e297064155e8ed172cabda2d6e05c47b29dc64736f6c634300060c0033"

// DeployOneStepProofHash deploys a new Ethereum contract, binding an instance of OneStepProofHash to it.
func DeployOneStepProofHash(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProofHash, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofHashABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofHashBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProofHash{OneStepProofHashCaller: OneStepProofHashCaller{contract: contract}, OneStepProofHashTransactor: OneStepProofHashTransactor{contract: contract}, OneStepProofHashFilterer: OneStepProofHashFilterer{contract: contract}}, nil
}

// OneStepProofHash is an auto generated Go binding around an Ethereum contract.
type OneStepProofHash struct {
	OneStepProofHashCaller     // Read-only binding to the contract
	OneStepProofHashTransactor // Write-only binding to the contract
	OneStepProofHashFilterer   // Log filterer for contract events
}

// OneStepProofHashCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofHashCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofHashTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofHashTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofHashFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofHashFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofHashSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofHashSession struct {
	Contract     *OneStepProofHash // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProofHashCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofHashCallerSession struct {
	Contract *OneStepProofHashCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// OneStepProofHashTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofHashTransactorSession struct {
	Contract     *OneStepProofHashTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// OneStepProofHashRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofHashRaw struct {
	Contract *OneStepProofHash // Generic contract binding to access the raw methods on
}

// OneStepProofHashCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofHashCallerRaw struct {
	Contract *OneStepProofHashCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofHashTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofHashTransactorRaw struct {
	Contract *OneStepProofHashTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProofHash creates a new instance of OneStepProofHash, bound to a specific deployed contract.
func NewOneStepProofHash(address common.Address, backend bind.ContractBackend) (*OneStepProofHash, error) {
	contract, err := bindOneStepProofHash(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProofHash{OneStepProofHashCaller: OneStepProofHashCaller{contract: contract}, OneStepProofHashTransactor: OneStepProofHashTransactor{contract: contract}, OneStepProofHashFilterer: OneStepProofHashFilterer{contract: contract}}, nil
}

// NewOneStepProofHashCaller creates a new read-only instance of OneStepProofHash, bound to a specific deployed contract.
func NewOneStepProofHashCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofHashCaller, error) {
	contract, err := bindOneStepProofHash(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofHashCaller{contract: contract}, nil
}

// NewOneStepProofHashTransactor creates a new write-only instance of OneStepProofHash, bound to a specific deployed contract.
func NewOneStepProofHashTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofHashTransactor, error) {
	contract, err := bindOneStepProofHash(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofHashTransactor{contract: contract}, nil
}

// NewOneStepProofHashFilterer creates a new log filterer instance of OneStepProofHash, bound to a specific deployed contract.
func NewOneStepProofHashFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofHashFilterer, error) {
	contract, err := bindOneStepProofHash(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofHashFilterer{contract: contract}, nil
}

// bindOneStepProofHash binds a generic wrapper to an already deployed contract.
func bindOneStepProofHash(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofHashABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofHash *OneStepProofHashRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProofHash.Contract.OneStepProofHashCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofHash *OneStepProofHashRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofHash.Contract.OneStepProofHashTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofHash *OneStepProofHashRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofHash.Contract.OneStepProofHashTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofHash *OneStepProofHashCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProofHash.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofHash *OneStepProofHashTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofHash.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofHash *OneStepProofHashTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofHash.Contract.contract.Transact(opts, method, params...)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x47dda1d6.
//
// Solidity: function executeStep(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 afterMessagesRead, bytes32[4] fields)
func (_OneStepProofHash *OneStepProofHashCaller) ExecuteStep(opts *bind.CallOpts, bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	AfterMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	var out []interface{}
	err := _OneStepProofHash.contract.Call(opts, &out, "executeStep", bridges, initialMessagesRead, accs, proof, bproof)

	outstruct := new(struct {
		Gas               uint64
		AfterMessagesRead *big.Int
		Fields            [4][32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Gas = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.AfterMessagesRead = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Fields = *abi.ConvertType(out[2], new([4][32]byte)).(*[4][32]byte)

	return *outstruct, err

}

// ExecuteStep is a free data retrieval call binding the contract method 0x47dda1d6.
//
// Solidity: function executeStep(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 afterMessagesRead, bytes32[4] fields)
func (_OneStepProofHash *OneStepProofHashSession) ExecuteStep(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	AfterMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	return _OneStepProofHash.Contract.ExecuteStep(&_OneStepProofHash.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x47dda1d6.
//
// Solidity: function executeStep(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 afterMessagesRead, bytes32[4] fields)
func (_OneStepProofHash *OneStepProofHashCallerSession) ExecuteStep(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	AfterMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	return _OneStepProofHash.Contract.ExecuteStep(&_OneStepProofHash.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0xeba67f6e.
//
// Solidity: function executeStepDebug(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProofHash *OneStepProofHashCaller) ExecuteStepDebug(opts *bind.CallOpts, bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	var out []interface{}
	err := _OneStepProofHash.contract.Call(opts, &out, "executeStepDebug", bridges, initialMessagesRead, accs, proof, bproof)

	outstruct := new(struct {
		StartMachine string
		AfterMachine string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.StartMachine = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.AfterMachine = *abi.ConvertType(out[1], new(string)).(*string)

	return *outstruct, err

}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0xeba67f6e.
//
// Solidity: function executeStepDebug(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProofHash *OneStepProofHashSession) ExecuteStepDebug(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	return _OneStepProofHash.Contract.ExecuteStepDebug(&_OneStepProofHash.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0xeba67f6e.
//
// Solidity: function executeStepDebug(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProofHash *OneStepProofHashCallerSession) ExecuteStepDebug(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	return _OneStepProofHash.Contract.ExecuteStepDebug(&_OneStepProofHash.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}
