// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgetestcontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ChallengeTesterABI is the input ABI used to generate the binding from.
const ChallengeTesterABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oneStepProofAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oneStepProof2Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"challenge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeCompleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_loser\",\"type\":\"address\"}],\"name\":\"completeChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"internalType\":\"addresspayable\",\"name\":\"asserter\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"challenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"asserterTimeLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"challengerTimeLeft\",\"type\":\"uint256\"},{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"startChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ChallengeTesterFuncSigs maps the 4-byte function signature to its string representation.
var ChallengeTesterFuncSigs = map[string]string{
	"d2ef7398": "challenge()",
	"e1022602": "challengeCompleted()",
	"fa7803e6": "completeChallenge(address,address)",
	"e82898b3": "loser()",
	"1b9c7c3f": "startChallenge(bytes32,address,address,uint256,uint256,address)",
	"dfbf53ae": "winner()",
}

// ChallengeTesterBin is the compiled bytecode used for deploying new contracts.
var ChallengeTesterBin = "0x608060405234801561001057600080fd5b50604051612ee1380380612ee18339818101604052604081101561003357600080fd5b508051602090910151600080546001600160a01b039384166001600160a01b03199182161790915560018054939092169216919091179055612e678061007a6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631b9c7c3f14610067578063d2ef7398146100b3578063dfbf53ae146100d7578063e1022602146100df578063e82898b3146100fb578063fa7803e614610103575b600080fd5b6100b1600480360360c081101561007d57600080fd5b508035906001600160a01b036020820135811691604081013582169160608201359160808101359160a09091013516610131565b005b6100bb61022b565b604080516001600160a01b039092168252519081900360200190f35b6100bb61023a565b6100e7610249565b604080519115158252519081900360200190f35b6100bb610259565b6100b16004803603604081101561011957600080fd5b506001600160a01b0381358116916020013516610268565b600060405161013f906102a9565b604051809103906000f08015801561015b573d6000803e3d6000fd5b5060008054600154604080516306df522560e01b81526001600160a01b0393841660048201529183166024830152306044830152606482018c90528a8316608483015289831660a483015260c4820189905260e4820188905286831661010483015251939450908416926306df5225926101248084019391929182900301818387803b1580156101ea57600080fd5b505af11580156101fe573d6000803e3d6000fd5b5050600280546001600160a01b0319166001600160a01b0394909416939093179092555050505050505050565b6002546001600160a01b031681565b6003546001600160a01b031681565b600254600160a01b900460ff1681565b6004546001600160a01b031681565b600380546001600160a01b039384166001600160a01b031991821617909155600480549290931691161790556002805460ff60a01b1916600160a01b179055565b612b7b806102b78339019056fe608060405234801561001057600080fd5b506000805460ff19166001179055612b4e8061002d6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80638e7b84c5116100b8578063bb4af0b11161007c578063bb4af0b114610568578063c34c08e514610570578063d3b5fd3514610578578063e78cea92146105a1578063e87e3589146105a9578063f1d1b9d6146105b157610142565b80638e7b84c514610369578063925f9a961461044c5780639a9e4f4414610454578063a5f59af11461045c578063a63bde8d146104e857610142565b806370dea79a1161010a57806370dea79a14610230578063843d5a5c1461023857806386f63a57146102405780638801393f146103515780638a8cd218146103595780638b2999031461036157610142565b806304baa00b1461014757806306df52251461017057806341e8510c146101d6578063534db0e2146101f05780636f791d2914610214575b600080fd5b61014f610783565b6040518082600281111561015f57fe5b815260200191505060405180910390f35b6101d4600480360361012081101561018757600080fd5b506001600160a01b03813581169160208101358216916040820135811691606081013591608082013581169160a081013582169160c08201359160e081013591610100909101351661078c565b005b6101de610922565b60408051918252519081900360200190f35b6101f8610928565b604080516001600160a01b039092168252519081900360200190f35b61021c610937565b604080519115158252519081900360200190f35b6101d4610941565b6101de610a62565b6101d4600480360361012081101561025757600080fd5b813591602081013591604082013591606081019181019060e0810160c0820135600160201b81111561028857600080fd5b82018360208201111561029a57600080fd5b803590602001918460018302840111600160201b831117156102bb57600080fd5b919390929091602081019035600160201b8111156102d857600080fd5b8201836020820111156102ea57600080fd5b803590602001918460018302840111600160201b8311171561030b57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050903560ff169150610a689050565b6101f8610d64565b6101f8610d73565b61014f610e0c565b6101d4600480360361010081101561038057600080fd5b810190602081018135600160201b81111561039a57600080fd5b8201836020820111156103ac57600080fd5b803590602001918460208302840111600160201b831117156103cd57600080fd5b9193909282359260208101359260408201359260608301359260808101359260a082013592909160e081019060c00135600160201b81111561040e57600080fd5b82018360208201111561042057600080fd5b803590602001918460208302840111600160201b8311171561044157600080fd5b509092509050610e1a565b6101de611306565b6101de61130c565b6101d4600480360360e081101561047257600080fd5b810190602081018135600160201b81111561048c57600080fd5b82018360208201111561049e57600080fd5b803590602001918460208302840111600160201b831117156104bf57600080fd5b919350915080359060208101359060408101359060608101359060808101359060a00135611312565b6101d4600480360360a08110156104fe57600080fd5b813591602081013591810190606081016040820135600160201b81111561052457600080fd5b82018360208201111561053657600080fd5b803590602001918460208302840111600160201b8311171561055757600080fd5b91935091508035906020013561160b565b6101f86119f7565b6101f8611a06565b6101d46004803603606081101561058e57600080fd5b5080359060208101359060400135611a1a565b6101f8611c64565b6101de611c73565b6101d460048036036101a08110156105c857600080fd5b810190602081018135600160201b8111156105e257600080fd5b8201836020820111156105f457600080fd5b803590602001918460208302840111600160201b8311171561061557600080fd5b6040805160608181018352949693958335956020850135959385013594818101359460808201359460a0830135949193919261012081019260c090910190600390839083908082843760009201919091525091949392602081019250359050600160201b81111561068557600080fd5b82018360208201111561069757600080fd5b803590602001918460018302840111600160201b831117156106b857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561070a57600080fd5b82018360208201111561071c57600080fd5b803590602001918460018302840111600160201b8311171561073d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050903560ff169150611cc39050565b600a5460ff1681565b6000600a54610100900460ff1660028111156107a457fe5b146040518060400160405280600f81526020016e4348414c5f494e49545f535441544560881b815250906108565760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561081b578181015183820152602001610803565b50505050905090810190601f1680156108485780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008054610100600160a81b0319166101006001600160a01b038c811691909102919091178255600180546001600160a01b03199081168c8416179091556003805482168b8416179055600489905560058054821689841617905560068054821688841617905560088690556009859055600a805461ffff1916610200179055600b83905543600755600280549091169184169190911790556040517f7003482dc89fcecb9f14e280f21ee716bd54187f7f3b0ab5ed78f3648218f2de9190a1505050505050505050565b60095481565b6006546001600160a01b031681565b60005460ff165b90565b600061095860075443611feb90919063ffffffff16565b9050610962611c73565b81116040518060400160405280601081526020016f54494d454f55545f444541444c494e4560801b815250906109d95760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561081b578181015183820152602001610803565b506001600a54610100900460ff1660028111156109f257fe5b1415610a2e576040517f2b92a4b014281aa2424baba9ea60bf4f26833d1c1fbd873e51cd1a6caeef48f090600090a1610a2961202d565b610a5f565b6040517f4e1f1f06cf69d199fcdb4d87a5a92d5248ca6b540e9fc2d3698927c5002a236a90600090a1610a5f6120ab565b50565b600b5481565b610a70610d73565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b81525090610af35760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561081b578181015183820152602001610803565b50610afc611c73565b600754610b0a904390611feb565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b81525090610b7d5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561081b578181015183820152602001610803565b506002600a5460ff166002811115610b9157fe5b14610bd0576040805162461bcd60e51b815260206004820152600a60248201526915d493d391d7d2d2539160b21b604482015290519081900360640190fd5b610bd8612afa565b610c1d828a8a8a89898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b9250612106915050565b92505050600454610c5b8a8a8a8a60038060200260405190810160405280929190826003602002808284376000920191909152508891506123cf9050565b14610c99576040805162461bcd60e51b815260206004820152600960248201526815d493d391d7d1539160ba1b604482015290519081900360640190fd5b6040517f117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f590600090a1610cca612405565b5060025b600a54610100900460ff166002811115610ce457fe5b1415610d2257610d0b610d0260075443611feb90919063ffffffff16565b60095490611feb565b600955600a805461ff001916610100179055610d56565b610d43610d3a60075443611feb90919063ffffffff16565b60085490611feb565b600855600a805461ff0019166102001790555b505043600755505050505050565b6001546001600160a01b031681565b60006001600a54610100900460ff166002811115610d8d57fe5b1415610da557506005546001600160a01b031661093e565b6002600a54610100900460ff166002811115610dbd57fe5b1415610dd557506006546001600160a01b031661093e565b6040805162461bcd60e51b81526020600482015260076024820152662727afaa2aa92760c91b604482015290519081900360640190fd5b600a54610100900460ff1681565b6002600a5460ff166002811115610e2d57fe5b1415610e4657600a805460ff1916600117905560006004555b6000600a5460ff166002811115610e5957fe5b1415610e7c5760048054600b55600a805460ff1916600117905560009055610ece565b6001600a5460ff166002811115610e8f57fe5b14610ece576040805162461bcd60e51b815260206004820152600a60248201526915d493d391d7d2d2539160b21b604482015290519081900360640190fd5b610ed6610d73565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b81525090610f595760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561081b578181015183820152602001610803565b50610f62611c73565b600754610f70904390611feb565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b81525090610fe35760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561081b578181015183820152602001610803565b5060018611611025576040805162461bcd60e51b81526020600482015260096024820152681513d3d7d4d213d49560ba1b604482015290519081900360640190fd5b61103186610190612438565b6001018114611073576040805162461bcd60e51b815260206004820152600960248201526810d55517d0d3d5539560ba1b604482015290519081900360640190fd5b848282600019810181811061108457fe5b9050602002013514156110c9576040805162461bcd60e51b815260206004820152600860248201526714d0535157d1539160c21b604482015290519081900360640190fd5b6110d38484612450565b828260008181106110e057fe5b905060200201351461112e576040805162461bcd60e51b81526020600482015260126024820152717365676d656e74207072652d6669656c647360701b604482015290519081900360640190fd5b611138878761247c565b8410611184576040805162461bcd60e51b81526020600482015260166024820152750d2dcecc2d8d2c840e6cacedacadce840d8cadccee8d60531b604482015290519081900360640190fd5b60006111a588888585600081811061119857fe5b90506020020135896124ca565b90506111b3818c8c8c612508565b6112068383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508c925061120191508990506111fb838d61247c565b90611feb565b6125c0565b50600b547f0a2bdfea671da507e80b0cbae49dd25100a5bdacc5dff43a9163a3fcbd7c3c7d8989868660405180858152602001848152602001806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f191690920182900397509095505050505050a2506002600a54610100900460ff16600281111561129657fe5b14156112cb576112b4610d0260075443611feb90919063ffffffff16565b600955600a805461ff0019166101001790556112f6565b6112e3610d3a60075443611feb90919063ffffffff16565b600855600a805461ff0019166102001790555b5050436007555050505050505050565b60075481565b60085481565b6002600a5460ff16600281111561132557fe5b141561133e57600a805460ff1916600117905560006004555b6000600a5460ff16600281111561135157fe5b14156113745760048054600b55600a805460ff19166001179055600090556113c6565b6001600a5460ff16600281111561138757fe5b146113c6576040805162461bcd60e51b815260206004820152600a60248201526915d493d391d7d2d2539160b21b604482015290519081900360640190fd5b6113ce610d73565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b815250906114515760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561081b578181015183820152602001610803565b5061145a611c73565b600754611468904390611feb565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b815250906114db5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561081b578181015183820152602001610803565b506001841161151d576040805162461bcd60e51b81526020600482015260096024820152681513d3c814d213d49560ba1b604482015290519081900360640190fd5b60006115298383612450565b90506000611539878784886124ca565b9050611547818b8b8b612508565b611551878761247c565b84101561158f576040805162461bcd60e51b81526020600482015260076024820152664241445f47415360c81b604482015290519081900360640190fd5b848214156115d0576040805162461bcd60e51b815260206004820152600960248201526815d493d391d7d1539160ba1b604482015290519081900360640190fd5b6040517f6af162552a4b84b5de3ae085d52a72f3600612e1900ffd795ee386297eaaa55890600090a1611601612405565b5060029050610cce565b611613610d73565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b815250906116965760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561081b578181015183820152602001610803565b5061169f611c73565b6007546116ad904390611feb565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b815250906117205760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561081b578181015183820152602001610803565b506000600a5460ff16600281111561173457fe5b14611771576040805162461bcd60e51b815260206004820152600860248201526710905117d2d2539160c21b604482015290519081900360640190fd5b600082116117b3576040805162461bcd60e51b815260206004820152600a6024820152690848288be988a9c8ea8960b31b604482015290519081900360640190fd5b6117bf82610190612438565b6001018314611801576040805162461bcd60e51b815260206004820152600960248201526810d55517d0d3d5539560ba1b604482015290519081900360640190fd5b858210611840576040805162461bcd60e51b8152602060048201526008602482015267544f4f5f4c4f4e4760c01b604482015290519081900360640190fd5b60045461185060008884896124ca565b1461188d576040805162461bcd60e51b815260206004820152600860248201526708a9c88be9082a6960c31b604482015290519081900360640190fd5b6118cb848480806020026020016040519081016040528093929190818152602001838360200280828437600092018290525092508691506125c09050565b50838360001981018181106118dc57fe5b602002919091013560045550600a80546002919060ff19166001830217905550600b547f0a2bdfea671da507e80b0cbae49dd25100a5bdacc5dff43a9163a3fcbd7c3c7d600088878760405180858152602001848152602001806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f191690920182900397509095505050505050a26002600a54610100900460ff16600281111561198b57fe5b14156119c0576119a9610d0260075443611feb90919063ffffffff16565b600955600a805461ff0019166101001790556119eb565b6119d8610d3a60075443611feb90919063ffffffff16565b600855600a805461ff0019166102001790555b50504360075550505050565b6005546001600160a01b031681565b60005461010090046001600160a01b031681565b611a22610d73565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b81525090611aa55760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561081b578181015183820152602001610803565b50611aae611c73565b600754611abc904390611feb565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b81525090611b2f5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561081b578181015183820152602001610803565b506000600a5460ff166002811115611b4357fe5b14611b82576040805162461bcd60e51b815260206004820152600a60248201526915d493d391d7d2d2539160b21b604482015290519081900360640190fd5b600454611b9260008584866124ca565b14611bd1576040805162461bcd60e51b815260206004820152600a60248201526915d493d391d7d2d2539160b21b604482015290519081900360640190fd5b6004819055600a805460ff19166002908117918290559060ff6101009091041681811115611bfb57fe5b1415611c3057611c19610d0260075443611feb90919063ffffffff16565b600955600a805461ff001916610100179055611c5b565b611c48610d3a60075443611feb90919063ffffffff16565b600855600a805461ff0019166102001790555b50504360075550565b6002546001600160a01b031681565b60006001600a54610100900460ff166002811115611c8d57fe5b1415611c9c575060085461093e565b6002600a54610100900460ff166002811115611cb457fe5b1415610dd5575060095461093e565b6002600a5460ff166002811115611cd657fe5b1415611cef57600a805460ff1916600117905560006004555b6000600a5460ff166002811115611d0257fe5b1415611d255760048054600b55600a805460ff1916600117905560009055611d77565b6001600a5460ff166002811115611d3857fe5b14611d77576040805162461bcd60e51b815260206004820152600a60248201526915d493d391d7d2d2539160b21b604482015290519081900360640190fd5b611d7f610d73565b6001600160a01b0316336001600160a01b0316146040518060400160405280600a8152602001692124a9afa9a2a72222a960b11b81525090611e025760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561081b578181015183820152602001610803565b50611e0b611c73565b600754611e19904390611feb565b11156040518060400160405280600c81526020016b4249535f444541444c494e4560a01b81525090611e8c5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561081b578181015183820152602001610803565b506000806000611e9a612afa565b611ea8858c8c8c8b8b612106565b925092509250611ebc8a8a8a8686866126fd565b8c1415611efc576040805162461bcd60e51b815260206004820152600960248201526815d493d391d7d1539160ba1b604482015290519081900360640190fd5b611f1e8d8467ffffffffffffffff16611f188e8e8e8e886123cf565b8f6124ca565b9350505050611f2f818e8e8e612508565b6040517f117efdf1fdd8be5a6ff0fb3c32333d7033bbd9523924bd0d9ca28f43540516f590600090a1611f60612405565b506002600a54610100900460ff166002811115611f7957fe5b1415611fae57611f97610d0260075443611feb90919063ffffffff16565b600955600a805461ff001916610100179055611fd9565b611fc6610d3a60075443611feb90919063ffffffff16565b600855600a805461ff0019166102001790555b50504360075550505050505050505050565b60006120248383604051806040016040528060148152602001737375627472616374696f6e206f766572666c6f7760601b815250612781565b90505b92915050565b60035460065460055460408051637d3c01f360e11b81526001600160a01b039384166004820152918316602483015251919092169163fa7803e691604480830192600092919082900301818387803b15801561208857600080fd5b505af115801561209c573d6000803e3d6000fd5b505050506120a9336127db565b565b60035460055460065460408051637d3c01f360e11b81526001600160a01b039384166004820152918316602483015251919092169163fa7803e691604480830192600092919082900301818387803b15801561208857600080fd5b600080612111612afa565b60ff89166122495760008054600254604051636ad5b95b60e11b81526001600160a01b0391821660048201818152602483018e9052604483018d9052606483018c905260a0608484019081528b5160a48501528b516101009096049094169563d5ab72b69592948f948f948f948f9490939260c4019160208601918190849084905b838110156121ab578181015183820152602001612193565b50505050905090810190601f1680156121d85780820380516001836020036101000a031916815260200191505b50965050505050505060c06040518083038186803b1580156121f957600080fd5b505afa15801561220d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060c081101561223257600080fd5b5080516020820151909450925060400190506123c3565b8860ff16600114156123855760015460405163103d451360e31b8152600481018a8152602482018a90526044820189905260a060648301908152885160a484015288516001600160a01b03909416936381ea2898938d938d938d938d938d939291608482019160c40190602087019080838360005b838110156122d65781810151838201526020016122be565b50505050905090810190601f1680156123035780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561233657818101518382015260200161231e565b50505050905090810190601f1680156123635780820380516001836020036101000a031916815260200191505b5097505050505050505060c06040518083038186803b1580156121f957600080fd5b6040805162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa82927ab22a960911b604482015290519081900360640190fd5b96509650969350505050565b81518151602084015160408501516000936123fb9390926123f6928b92918b918b9061285b565b612450565b9695505050505050565b6001600a54610100900460ff16600281111561241d57fe5b14156124305761242b6120ab565b6120a9565b6120a961202d565b600081831015612449575081612027565b5080612027565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600082820183811015612024576040805162461bcd60e51b81526020600482015260116024820152706164646974696f6e206f766572666c6f7760781b604482015290519081900360640190fd5b604080516020808201969096528082019490945260608401929092526080808401919091528151808403909101815260a09092019052805191012090565b6125488383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508592508891506128a69050565b600b5414604051806040016040528060088152602001672124a9afa82922ab60c11b815250906125b95760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561081b578181015183820152602001610803565b5050505050565b82516000906000190160608167ffffffffffffffff811180156125e257600080fd5b5060405190808252806020026020018201604052801561260c578160200160208202803683370190505b509050600061261b8584612974565b9050600086905061265681838a60008151811061263457fe5b60200260200101518b60018151811061264957fe5b60200260200101516124ca565b8360008151811061266357fe5b6020908102919091010152612678818361247c565b90506126848685612992565b915060015b848110156126e4576126b982848b84815181106126a257fe5b60200260200101518c856001018151811061264957fe5b8482815181106126c557fe5b60209081029190910101526126da828461247c565b9150600101612689565b506126ee836129a5565b600b5550929695505050505050565b600061277661271e67ffffffffffffffff861687845b60200201519061247c565b602084015160408501516123f691879161274d8d821461273f576001612742565b60005b60ff168c6001612713565b60608901516127718e8214612763576001612766565b60005b60ff168e6002612713565b61285b565b979650505050505050565b600081848411156127d35760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561081b578181015183820152602001610803565b505050900390565b6000546040805180820190915260098152684e4f545f434c4f4e4560b81b60208201529060ff161561284e5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561081b578181015183820152602001610803565b50806001600160a01b0316ff5b60408051602080820198909852808201969096526060860194909452608085019290925260a084015260c0808401919091528151808403909101815260e09092019052805191012090565b82516000906101008111156128ba57600080fd5b8260005b8281101561296a5760028606612917578681815181106128da57fe5b602002602001015182604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120915061295c565b8187828151811061292457fe5b602002602001015160405160200180838152602001828152602001925050506040516020818303038152906040528051906020012091505b6002860495506001016128be565b5095945050505050565b600081838161297f57fe5b0682848161298957fe5b04019392505050565b600081838161299d57fe5b049392505050565b6000815b600181511115612add57606060028251600101816129c357fe5b0467ffffffffffffffff811180156129da57600080fd5b50604051908082528060200260200182016040528015612a04578160200160208202803683370190505b50905060005b8151811015612ad5578251816002026001011015612a9d57828160020281518110612a3157fe5b6020026020010151838260020260010181518110612a4b57fe5b6020026020010151604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120828281518110612a8c57fe5b602002602001018181525050612acd565b828160020281518110612aac57fe5b6020026020010151828281518110612ac057fe5b6020026020010181815250505b600101612a0a565b5090506129a9565b80600081518110612aea57fe5b6020026020010151915050919050565b6040518060800160405280600490602082028036833750919291505056fea264697066735822122006c727ef868ba60b18dcc32392d748545e7d06703292a1e467da572838cedcb964736f6c634300060c0033a26469706673582212202d6dba2f54a4291334bb4bb3e8599706fab2577e79faa5a326ba87f4228dfcba64736f6c634300060c0033"

// DeployChallengeTester deploys a new Ethereum contract, binding an instance of ChallengeTester to it.
func DeployChallengeTester(auth *bind.TransactOpts, backend bind.ContractBackend, _oneStepProofAddress common.Address, _oneStepProof2Address common.Address) (common.Address, *types.Transaction, *ChallengeTester, error) {
	parsed, err := abi.JSON(strings.NewReader(ChallengeTesterABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ChallengeTesterBin), backend, _oneStepProofAddress, _oneStepProof2Address)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ChallengeTester{ChallengeTesterCaller: ChallengeTesterCaller{contract: contract}, ChallengeTesterTransactor: ChallengeTesterTransactor{contract: contract}, ChallengeTesterFilterer: ChallengeTesterFilterer{contract: contract}}, nil
}

// ChallengeTester is an auto generated Go binding around an Ethereum contract.
type ChallengeTester struct {
	ChallengeTesterCaller     // Read-only binding to the contract
	ChallengeTesterTransactor // Write-only binding to the contract
	ChallengeTesterFilterer   // Log filterer for contract events
}

// ChallengeTesterCaller is an auto generated read-only Go binding around an Ethereum contract.
type ChallengeTesterCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChallengeTesterTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ChallengeTesterTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChallengeTesterFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ChallengeTesterFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChallengeTesterSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ChallengeTesterSession struct {
	Contract     *ChallengeTester  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ChallengeTesterCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ChallengeTesterCallerSession struct {
	Contract *ChallengeTesterCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ChallengeTesterTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ChallengeTesterTransactorSession struct {
	Contract     *ChallengeTesterTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ChallengeTesterRaw is an auto generated low-level Go binding around an Ethereum contract.
type ChallengeTesterRaw struct {
	Contract *ChallengeTester // Generic contract binding to access the raw methods on
}

// ChallengeTesterCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ChallengeTesterCallerRaw struct {
	Contract *ChallengeTesterCaller // Generic read-only contract binding to access the raw methods on
}

// ChallengeTesterTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ChallengeTesterTransactorRaw struct {
	Contract *ChallengeTesterTransactor // Generic write-only contract binding to access the raw methods on
}

// NewChallengeTester creates a new instance of ChallengeTester, bound to a specific deployed contract.
func NewChallengeTester(address common.Address, backend bind.ContractBackend) (*ChallengeTester, error) {
	contract, err := bindChallengeTester(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ChallengeTester{ChallengeTesterCaller: ChallengeTesterCaller{contract: contract}, ChallengeTesterTransactor: ChallengeTesterTransactor{contract: contract}, ChallengeTesterFilterer: ChallengeTesterFilterer{contract: contract}}, nil
}

// NewChallengeTesterCaller creates a new read-only instance of ChallengeTester, bound to a specific deployed contract.
func NewChallengeTesterCaller(address common.Address, caller bind.ContractCaller) (*ChallengeTesterCaller, error) {
	contract, err := bindChallengeTester(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ChallengeTesterCaller{contract: contract}, nil
}

// NewChallengeTesterTransactor creates a new write-only instance of ChallengeTester, bound to a specific deployed contract.
func NewChallengeTesterTransactor(address common.Address, transactor bind.ContractTransactor) (*ChallengeTesterTransactor, error) {
	contract, err := bindChallengeTester(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ChallengeTesterTransactor{contract: contract}, nil
}

// NewChallengeTesterFilterer creates a new log filterer instance of ChallengeTester, bound to a specific deployed contract.
func NewChallengeTesterFilterer(address common.Address, filterer bind.ContractFilterer) (*ChallengeTesterFilterer, error) {
	contract, err := bindChallengeTester(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ChallengeTesterFilterer{contract: contract}, nil
}

// bindChallengeTester binds a generic wrapper to an already deployed contract.
func bindChallengeTester(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ChallengeTesterABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ChallengeTester *ChallengeTesterRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ChallengeTester.Contract.ChallengeTesterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ChallengeTester *ChallengeTesterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ChallengeTester.Contract.ChallengeTesterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ChallengeTester *ChallengeTesterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ChallengeTester.Contract.ChallengeTesterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ChallengeTester *ChallengeTesterCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ChallengeTester.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ChallengeTester *ChallengeTesterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ChallengeTester.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ChallengeTester *ChallengeTesterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ChallengeTester.Contract.contract.Transact(opts, method, params...)
}

// Challenge is a free data retrieval call binding the contract method 0xd2ef7398.
//
// Solidity: function challenge() view returns(address)
func (_ChallengeTester *ChallengeTesterCaller) Challenge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ChallengeTester.contract.Call(opts, &out, "challenge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Challenge is a free data retrieval call binding the contract method 0xd2ef7398.
//
// Solidity: function challenge() view returns(address)
func (_ChallengeTester *ChallengeTesterSession) Challenge() (common.Address, error) {
	return _ChallengeTester.Contract.Challenge(&_ChallengeTester.CallOpts)
}

// Challenge is a free data retrieval call binding the contract method 0xd2ef7398.
//
// Solidity: function challenge() view returns(address)
func (_ChallengeTester *ChallengeTesterCallerSession) Challenge() (common.Address, error) {
	return _ChallengeTester.Contract.Challenge(&_ChallengeTester.CallOpts)
}

// ChallengeCompleted is a free data retrieval call binding the contract method 0xe1022602.
//
// Solidity: function challengeCompleted() view returns(bool)
func (_ChallengeTester *ChallengeTesterCaller) ChallengeCompleted(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ChallengeTester.contract.Call(opts, &out, "challengeCompleted")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ChallengeCompleted is a free data retrieval call binding the contract method 0xe1022602.
//
// Solidity: function challengeCompleted() view returns(bool)
func (_ChallengeTester *ChallengeTesterSession) ChallengeCompleted() (bool, error) {
	return _ChallengeTester.Contract.ChallengeCompleted(&_ChallengeTester.CallOpts)
}

// ChallengeCompleted is a free data retrieval call binding the contract method 0xe1022602.
//
// Solidity: function challengeCompleted() view returns(bool)
func (_ChallengeTester *ChallengeTesterCallerSession) ChallengeCompleted() (bool, error) {
	return _ChallengeTester.Contract.ChallengeCompleted(&_ChallengeTester.CallOpts)
}

// Loser is a free data retrieval call binding the contract method 0xe82898b3.
//
// Solidity: function loser() view returns(address)
func (_ChallengeTester *ChallengeTesterCaller) Loser(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ChallengeTester.contract.Call(opts, &out, "loser")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Loser is a free data retrieval call binding the contract method 0xe82898b3.
//
// Solidity: function loser() view returns(address)
func (_ChallengeTester *ChallengeTesterSession) Loser() (common.Address, error) {
	return _ChallengeTester.Contract.Loser(&_ChallengeTester.CallOpts)
}

// Loser is a free data retrieval call binding the contract method 0xe82898b3.
//
// Solidity: function loser() view returns(address)
func (_ChallengeTester *ChallengeTesterCallerSession) Loser() (common.Address, error) {
	return _ChallengeTester.Contract.Loser(&_ChallengeTester.CallOpts)
}

// Winner is a free data retrieval call binding the contract method 0xdfbf53ae.
//
// Solidity: function winner() view returns(address)
func (_ChallengeTester *ChallengeTesterCaller) Winner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ChallengeTester.contract.Call(opts, &out, "winner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Winner is a free data retrieval call binding the contract method 0xdfbf53ae.
//
// Solidity: function winner() view returns(address)
func (_ChallengeTester *ChallengeTesterSession) Winner() (common.Address, error) {
	return _ChallengeTester.Contract.Winner(&_ChallengeTester.CallOpts)
}

// Winner is a free data retrieval call binding the contract method 0xdfbf53ae.
//
// Solidity: function winner() view returns(address)
func (_ChallengeTester *ChallengeTesterCallerSession) Winner() (common.Address, error) {
	return _ChallengeTester.Contract.Winner(&_ChallengeTester.CallOpts)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0xfa7803e6.
//
// Solidity: function completeChallenge(address _winner, address _loser) returns()
func (_ChallengeTester *ChallengeTesterTransactor) CompleteChallenge(opts *bind.TransactOpts, _winner common.Address, _loser common.Address) (*types.Transaction, error) {
	return _ChallengeTester.contract.Transact(opts, "completeChallenge", _winner, _loser)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0xfa7803e6.
//
// Solidity: function completeChallenge(address _winner, address _loser) returns()
func (_ChallengeTester *ChallengeTesterSession) CompleteChallenge(_winner common.Address, _loser common.Address) (*types.Transaction, error) {
	return _ChallengeTester.Contract.CompleteChallenge(&_ChallengeTester.TransactOpts, _winner, _loser)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0xfa7803e6.
//
// Solidity: function completeChallenge(address _winner, address _loser) returns()
func (_ChallengeTester *ChallengeTesterTransactorSession) CompleteChallenge(_winner common.Address, _loser common.Address) (*types.Transaction, error) {
	return _ChallengeTester.Contract.CompleteChallenge(&_ChallengeTester.TransactOpts, _winner, _loser)
}

// StartChallenge is a paid mutator transaction binding the contract method 0x1b9c7c3f.
//
// Solidity: function startChallenge(bytes32 executionHash, address asserter, address challenger, uint256 asserterTimeLeft, uint256 challengerTimeLeft, address bridge) returns()
func (_ChallengeTester *ChallengeTesterTransactor) StartChallenge(opts *bind.TransactOpts, executionHash [32]byte, asserter common.Address, challenger common.Address, asserterTimeLeft *big.Int, challengerTimeLeft *big.Int, bridge common.Address) (*types.Transaction, error) {
	return _ChallengeTester.contract.Transact(opts, "startChallenge", executionHash, asserter, challenger, asserterTimeLeft, challengerTimeLeft, bridge)
}

// StartChallenge is a paid mutator transaction binding the contract method 0x1b9c7c3f.
//
// Solidity: function startChallenge(bytes32 executionHash, address asserter, address challenger, uint256 asserterTimeLeft, uint256 challengerTimeLeft, address bridge) returns()
func (_ChallengeTester *ChallengeTesterSession) StartChallenge(executionHash [32]byte, asserter common.Address, challenger common.Address, asserterTimeLeft *big.Int, challengerTimeLeft *big.Int, bridge common.Address) (*types.Transaction, error) {
	return _ChallengeTester.Contract.StartChallenge(&_ChallengeTester.TransactOpts, executionHash, asserter, challenger, asserterTimeLeft, challengerTimeLeft, bridge)
}

// StartChallenge is a paid mutator transaction binding the contract method 0x1b9c7c3f.
//
// Solidity: function startChallenge(bytes32 executionHash, address asserter, address challenger, uint256 asserterTimeLeft, uint256 challengerTimeLeft, address bridge) returns()
func (_ChallengeTester *ChallengeTesterTransactorSession) StartChallenge(executionHash [32]byte, asserter common.Address, challenger common.Address, asserterTimeLeft *big.Int, challengerTimeLeft *big.Int, bridge common.Address) (*types.Transaction, error) {
	return _ChallengeTester.Contract.StartChallenge(&_ChallengeTester.TransactOpts, executionHash, asserter, challenger, asserterTimeLeft, challengerTimeLeft, bridge)
}
