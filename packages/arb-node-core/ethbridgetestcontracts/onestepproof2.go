// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgetestcontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProof2ABI is the input ABI used to generate the binding from.
const OneStepProof2ABI = "[{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"_machineFields\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[5]\",\"name\":\"fields\",\"type\":\"bytes32[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"parseProof\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// OneStepProof2FuncSigs maps the 4-byte function signature to its string representation.
var OneStepProof2FuncSigs = map[string]string{
	"3a06aeec": "executeStep(bytes32[3],bytes,bytes)",
	"793deea3": "parseProof(bytes)",
}

// OneStepProof2Bin is the compiled bytecode used for deploying new contracts.
var OneStepProof2Bin = "0x608060405234801561001057600080fd5b50613a54806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633a06aeec1461003b578063793deea314610149575b600080fd5b610100600480360360a081101561005157600080fd5b81018160808101606082013564010000000081111561006f57600080fd5b82018360208201111561008157600080fd5b803590602001918460018302840111640100000000831117156100a357600080fd5b9193909290916020810190356401000000008111156100c157600080fd5b8201836020820111156100d357600080fd5b803590602001918460018302840111640100000000831117156100f557600080fd5b509092509050610312565b60405167ffffffffffffffff83168152602081018260a080838360005b8381101561013557818101518382015260200161011d565b505050509050019250505060405180910390f35b6101ef6004803603602081101561015f57600080fd5b81019060208101813564010000000081111561017a57600080fd5b82018360208201111561018c57600080fd5b803590602001918460018302840111640100000000831117156101ae57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506103c4945050505050565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b8381101561023b578181015183820152602001610223565b50505050905001858103845288818151815260200191508051906020019060200280838360005b8381101561027a578181015183820152602001610262565b50505050905001858103835287818151815260200191508051906020019060200280838360005b838110156102b95781810151838201526020016102a1565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156102f85781810151838201526020016102e0565b505050509050019850505050505050505060405180910390f35b600061031c613823565b610324613841565b604080516020601f890181900481028201810183528882526103a1928b3592828d013592918d0135918c908c908190840183828082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b908190840183828082843760009201919091525061040092505050565b90506103ac816108de565b6103b581610cdd565b92509250509550959350505050565b6060806060806103d26138c7565b6103db86610d40565b80516020820151604083015160609093015191975095509093509150505b9193509193565b610408613841565b60008360008151811061041757fe5b602001015160f81c60f81b60f81c905060008460018151811061043657fe5b016020015160f81c9050600260606004840160ff1667ffffffffffffffff8111801561046157600080fd5b5060405190808252806020026020018201604052801561049b57816020015b6104886138ef565b8152602001906001900390816104805790505b50905060608360040160ff1667ffffffffffffffff811180156104bd57600080fd5b506040519080825280602002602001820160405280156104f757816020015b6104e46138ef565b8152602001906001900390816104dc5790505b50905060005b8560ff16811015610533576105128985610e38565b84838151811061051e57fe5b602090810291909101015293506001016104fd565b5060005b8460ff1681101561056d5761054c8985610e38565b83838151811061055857fe5b60209081029190910101529350600101610537565b5061057661392c565b6105808985610ffa565b909450905061058d613841565b604051806101c001604052808381526020016105a8846110ab565b81526020018e81526020018d81526020018c8152602001600067ffffffffffffffff16815260200160405180604001604052808a60ff16815260200187815250815260200160405180604001604052808960ff1681526020018681525081526020018b878151811061061657fe5b602001015160f81c60f81b60f81c60ff16600114151581526020018b876001018151811061064057fe5b602001015160f81c60f81b60f81c60ff1681526020018b81526020018660020181526020018a815260200160001515815250905060008a868151811061068257fe5b602001015160f81c60f81b60f81c905060008b87600101815181106106a357fe5b01602001516002979097019660f81c905060ff821615806106c757508160ff166001145b6040518060400160405280600b81526020016a04241445f494d4d5f5459560ac1b815250906107745760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610739578181015183820152602001610721565b50505050905090810190601f1680156107665780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5061077d6138ef565b60ff831661079a5783515161079390839061111f565b905061083a565b6000875111604051806040016040528060068152602001654e4f5f494d4d60d01b8152509061080a5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610739578181015183820152602001610721565b50610837828560000151600001518960018e0360ff168151811061082a57fe5b6020026020010151611183565b90505b61084381611209565b84515260005b838b0360ff168110156108885761088088828151811061086557fe5b6020026020010151866000015161137690919063ffffffff16565b600101610849565b5060005b8960ff168110156108c9576108c18782815181106108a657fe5b6020026020010151866000015161139090919063ffffffff16565b60010161088c565b50929f9e505050505050505050505050505050565b60008060006139976108f785610120015160ff166113aa565b935093509350935060008411806109115750846101000151155b8015610922575060c0850151518410155b8061094957508461010001518015610938575083155b8015610949575060c0850151516001145b6040518060400160405280600a815260200169535441434b5f4d414e5960b01b815250906109b85760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610739578181015183820152602001610721565b5060e0850151516040805180820190915260088152674155585f4d414e5960c01b602082015290841015610a2d5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610739578181015183820152602001610721565b50610a3885836114ba565b15610a4b57610a468561151d565b610b9d565b60c085015151841115610af657610a68610a63611528565b611209565b610a79866020015160200151611209565b146040518060400160405280600d81526020016c535441434b5f4d495353494e4760981b81525090610aec5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610739578181015183820152602001610721565b50610a468561151d565b60e085015151831115610b9057610b0e610a63611528565b610b1f866020015160400151611209565b146040518060400160405280600b81526020016a4155585f4d495353494e4760a81b81525090610aec5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610739578181015183820152602001610721565b610b9d858263ffffffff16565b846101a0015115610c405760408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051908201209086015160c001511415610c0457610bff856020015161156f565b610c40565b60006101a0860152602085015160c081015190526101008501518015610c28575083155b610c365760c0850151600090525b60e0850151600090525b60005b60c086015151811015610c8a57610c828660c00151602001518281518110610c6757fe5b6020026020010151876020015161137690919063ffffffff16565b600101610c43565b5060005b60e086015151811015610cd557610ccd8660e00151602001518281518110610cb257fe5b6020026020010151876020015161139090919063ffffffff16565b600101610c8e565b505050505050565b6000610ce7613823565b8260a001516040518060a00160405280610d04866000015161157a565b8152602001610d16866020015161157a565b81526020018560400151815260200185606001518152602001856080015181525091509150915091565b610d486138c7565b6060610d878384600081518110610d5b57fe5b602001015160f81c60f81b85600181518110610d7357fe5b01602001516001600160f81b031916611654565b90506060610db48485600181518110610d9c57fe5b602001015160f81c60f81b86600281518110610d7357fe5b90506060610de18586600281518110610dc957fe5b602001015160f81c60f81b87600381518110610d7357fe5b90506060610e0e8687600381518110610df657fe5b602001015160f81c60f81b88600481518110610d7357fe5b6040805160808101825295865260208601949094529284019190915250606082015290505b919050565b6000610e426138ef565b83518310610e88576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b600080610e9586866116f2565b91509150610ea1611719565b60ff168160ff161415610ed5576000610eba878461171e565b909350905082610ec98261178c565b94509450505050610ff3565b610edd61184c565b60ff168160ff161415610eff57610ef48683611851565b935093505050610ff3565b610f076118f3565b60ff168160ff161415610f2f576000610f20878461171e565b909350905082610ec9826118f8565b610f376119e5565b60ff168160ff161415610f4e57610ef486836119ea565b610f56611a7f565b60ff168160ff1610158015610f775750610f6e611a84565b60ff168160ff16105b15610fb3576000610f86611a7f565b820390506060610f97828986611a89565b909450905083610fa682611b32565b9550955050505050610ff3565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b600061100461392c565b61100c61392c565b6000610100820181905280611021878761171e565b909650915061103087876119ea565b6020850152955061104187876119ea565b604085015295506110528787610e38565b606085015295506110638787610e38565b60808501529550611074878761171e565b60a08501529550611085878761171e565b90965090506110948787610e38565b60e085015291835260c08301529590945092505050565b6110b361392c565b60405180610120016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e0015181526020018361010001518152509050919050565b6111276138ef565b6040805160608101825260ff85168152602080820185905282516000808252918101845261117a93830191611172565b61115f6138ef565b8152602001906001900390816111575790505b509052611c74565b90505b92915050565b61118b6138ef565b604080516001808252818301909252606091816020015b6111aa6138ef565b8152602001906001900390816111a257905050905082816000815181106111cd57fe5b60200260200101819052506111fe60405180606001604052808760ff16815260200186815260200183815250611c74565b9150505b9392505050565b6000611213611719565b60ff16826080015160ff16141561123657815161122f90611d05565b9050610e33565b61123e61184c565b60ff16826080015160ff16141561125c5761122f8260200151611d29565b6112646119e5565b60ff16826080015160ff16141561128657815160a083015161122f9190611e1e565b61128e611a7f565b60ff16826080015160ff1614156112c7576112a76138ef565b6112b48360400151611e6c565b90506112bf81611209565b915050610e33565b6112cf611fe2565b60ff16826080015160ff1614156112e857508051610e33565b6112f06118f3565b60ff16826080015160ff161415611335575060608082015160408051607b60208083019190915281830193909352815180820383018152930190528151910120610e33565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b611384826020015182611fe7565b82602001819052505050565b61139e826040015182611fe7565b82604001819052505050565b6000808061399760a18514156113cf57506002925060009150600a90506120656103f9565b60a28514156113ed57506002925060009150600a905061214b6103f9565b60a385141561140b57506002925060009150600a90506122116103f9565b60a485141561142957506003925060009150606490506122d76103f9565b60a585141561144757506003925060009150606490506123e66103f9565b60a685141561146557506003925060009150606490506124d96103f9565b607085141561148357506002925060009150606490506125cc6103f9565b60405162461bcd60e51b815260040180806020018281038252602c8152602001806139f3602c913960400191505060405180910390fd5b60a0808301805167ffffffffffffffff9084018116909152602084015190910151600091831611156114fc5750602082015160001960a090910152600161117d565b50602082015160a001805167ffffffffffffffff831690039052600061117d565b60016101a090910152565b6115306138ef565b6040805160008082526020820190925261156a91611564565b6115516138ef565b8152602001906001900390816115495790505b50611b32565b905090565b600161010090910152565b60006002826101000151141561159257506000610e33565b600182610100015114156115a857506001610e33565b815160208301516115b890611209565b6115c58460400151611209565b6115d28560600151611209565b6115df8660800151611209565b8660a001518760c001516115f68960e00151611209565b6040516020018089815260200188815260200187815260200186815260200185815260200184815260200183815260200182815260200198505050505050505050604051602081830303815290604052805190602001209050610e33565b606060f883811c9083901c81900360ff1690828267ffffffffffffffff8111801561167e57600080fd5b506040519080825280602002602001820160405280156116a8578160200160208202803683370190505b50905060005b838110156116e7576116c588828501602002612757565b60001b8282815181106116d457fe5b60209081029190910101526001016116ae565b509695505050505050565b6000808260010184848151811061170557fe5b016020015190925060f81c90509250929050565b600090565b60008082845110158015611736575060208385510310155b611773576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b602083016117818585612797565b915091509250929050565b6117946138ef565b6040805160c08101825283815281516060810183526000808252602080830182905284518281528082018652939490850193908301916117ea565b6117d76138ef565b8152602001906001900390816117cf5790505b5090528152602001600060405190808252806020026020018201604052801561182d57816020015b61181a6138ef565b8152602001906001900390816118125790505b5081526000602082018190526040820152600160609091015292915050565b600190565b600061185b6138ef565b826000806118676138ef565b600061187389866116f2565b909550935061188289866116f2565b9095509250600160ff851614156118a35761189d8986610e38565b90955091505b6118ad89866127f0565b9095509050600160ff851614156118d857846118ca848385611183565b965096505050505050610ff3565b846118e3848361111f565b9650965050505050509250929050565b600c90565b6119006138ef565b6040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b8152602001600067ffffffffffffffff8111801561194857600080fd5b5060405190808252806020026020018201604052801561198257816020015b61196f6138ef565b8152602001906001900390816119675790505b509052815260200160006040519080825280602002602001820160405280156119c557816020015b6119b26138ef565b8152602001906001900390816119aa5790505b50815260208101849052600c604082015260016060909101529050919050565b600290565b60006119f46138ef565b82845110158015611a09575060408385510310155b611a46576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b600080611a5386866127f0565b9094509150611a62868561171e565b909450905083611a728383612801565b9350935050509250929050565b600390565b600d90565b60006060828160ff871667ffffffffffffffff81118015611aa957600080fd5b50604051908082528060200260200182016040528015611ae357816020015b611ad06138ef565b815260200190600190039081611ac85790505b50905060005b8760ff168160ff161015611b2557611b018784610e38565b838360ff1681518110611b1057fe5b60209081029190910101529250600101611ae9565b5090969095509350505050565b611b3a6138ef565b611b4482516128c0565b611b95576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b8351811015611bcc57838181518110611baf57fe5b602002602001015160a00151820191508080600101915050611b9a565b506040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b8152602001600067ffffffffffffffff81118015611c1557600080fd5b50604051908082528060200260200182016040528015611c4f57816020015b611c3c6138ef565b815260200190600190039081611c345790505b5090528152602081019490945260006040850152600360608501526080909301525090565b611c7c6138ef565b6040518060c0016040528060008152602001838152602001600067ffffffffffffffff81118015611cac57600080fd5b50604051908082528060200260200182016040528015611ce657816020015b611cd36138ef565b815260200190600190039081611ccb5790505b5081526000602082015260016040820181905260609091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b6000600282604001515110611d3a57fe5b604082015151611d9d57611d4c61184c565b82600001518360200151604051602001808460ff1660f81b81526001018360ff1660f81b81526001018281526020019350505050604051602081830303815290604052805190602001209050610e33565b611da561184c565b8260000151611dcb8460400151600081518110611dbe57fe5b6020026020010151611209565b8460200151604051602001808560ff1660f81b81526001018460ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b6000611e28611a7f565b8383604051602001808460ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b611e746138ef565b600882511115611ec2576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b6060825167ffffffffffffffff81118015611edc57600080fd5b50604051908082528060200260200182016040528015611f06578160200160208202803683370190505b508051909150600160005b82811015611f6957611f28868281518110611dbe57fe5b848281518110611f3457fe5b602002602001018181525050858181518110611f4c57fe5b602002602001015160a00151820191508080600101915050611f11565b506000835184604051602001808360ff1660f81b8152600101828051906020019060200280838360005b83811015611fab578181015183820152602001611f93565b5050505090500192505050604051602081830303815290604052805190602001209050611fd88183612801565b9695505050505050565b606490565b611fef6138ef565b6040805160028082526060828101909352816020015b61200d6138ef565b815260200190600190039081612005579050509050828160008151811061203057fe5b6020026020010181905250838160018151811061204957fe5b602002602001018190525061205d81611e6c565b949350505050565b61206d6138ef565b61207a8260c001516128c7565b90506120846138ef565b6120918360c001516128c7565b905061209c82612909565b15806120ae57506120ac81612927565b155b156120c3576120bc83612934565b5050612148565b8151600160401b1161210a576040805162461bcd60e51b815260206004820152601b60248201526000805160206139d3833981519152604482015290519081900360640190fd5b600061212c82606001518460000151612127876101800151610d40565b61293d565b90506121448460c0015161213f8361178c565b61295f565b5050505b50565b6121536138ef565b6121608260c001516128c7565b905061216a6138ef565b6121778360c001516128c7565b905061218282612909565b1580612194575061219281612927565b155b156121a2576120bc83612934565b600160401b8260000151600701106121ef576040805162461bcd60e51b815260206004820152601b60248201526000805160206139d3833981519152604482015290519081900360640190fd5b600061212c8260600151846000015161220c876101800151610d40565b612989565b6122196138ef565b6122268260c001516128c7565b90506122306138ef565b61223d8360c001516128c7565b905061224882612909565b158061225a575061225881612927565b155b15612268576120bc83612934565b600160401b8260000151601f01106122b5576040805162461bcd60e51b815260206004820152601b60248201526000805160206139d3833981519152604482015290519081900360640190fd5b600061212c826060015184600001516122d2876101800151610d40565b612ae8565b6122df6138ef565b6122ec8260c001516128c7565b90506122f66138ef565b6123038360c001516128c7565b905061230d6138ef565b61231a8460c001516128c7565b905061232583612909565b1580612337575061233582612c1b565b155b80612348575061234681612927565b155b1561235e5761235684612934565b505050612148565b8251600160401b116123a5576040805162461bcd60e51b815260206004820152601b60248201526000805160206139d3833981519152604482015290519081900360640190fd5b60006123cc8260600151856000015185600001516123c7896101800151610d40565b612c26565b90506123df8560c0015161213f836118f8565b5050505050565b6123ee6138ef565b6123fb8260c001516128c7565b90506124056138ef565b6124128360c001516128c7565b905061241c6138ef565b6124298460c001516128c7565b905061243483612909565b1580612446575061244482612c1b565b155b80612457575061245581612927565b155b156124655761235684612934565b600160401b8360000151600701106124b2576040805162461bcd60e51b815260206004820152601b60248201526000805160206139d3833981519152604482015290519081900360640190fd5b60006123cc8260600151856000015185600001516124d4896101800151610d40565b612c6f565b6124e16138ef565b6124ee8260c001516128c7565b90506124f86138ef565b6125058360c001516128c7565b905061250f6138ef565b61251c8460c001516128c7565b905061252783612909565b1580612539575061253782612c1b565b155b8061254a575061254881612927565b155b156125585761235684612934565b600160401b8360000151601f01106125a5576040805162461bcd60e51b815260206004820152601b60248201526000805160206139d3833981519152604482015290519081900360640190fd5b60006123cc8260600151856000015185600001516125c7896101800151610d40565b612db7565b6125d46138ef565b6125e18260c001516128c7565b90506125eb6138ef565b6125f88360c001516128c7565b905061260382612909565b1580612615575061261381612927565b155b15612623576120bc83612934565b81516127101015612637576120bc83612934565b8261014001515183610160015110156126ea5761016083015182516101408501516000612665828585612e88565b90508061267186611209565b146126b0576040805162461bcd60e51b815260206004820152600a60248201526915d493d391d7d4d1539160b21b604482015290519081900360640190fd5b5060209201820120606085810180516040805180870192909252818101949094528351808203850181529201909252805192019190912090525b61270a81606001518360000151612705866101800151610d40565b612ea6565b15612749576040805162461bcd60e51b815260206004820152600a602482015269084aa8cbe988a9c8ea8960b31b604482015290519081900360640190fd5b61275283612934565b505050565b600080805b602081101561278f57600882901b9150848185018151811061277a57fe5b016020015160f81c919091179060010161275c565b509392505050565b600081602001835110156127e7576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b600080602083016117818585612797565b6128096138ef565b6040805160c081018252848152815160608101835260008082526020808301829052845182815280820186529394908501939083019161285f565b61284c6138ef565b8152602001906001900390816128445790505b509052815260200160006040519080825280602002602001820160405280156128a257816020015b61288f6138ef565b8152602001906001900390816128875790505b50815260006020820152600260408201526060019290925250919050565b6008101590565b6128cf6138ef565b6128d76138ef565b82602001516001846000015103815181106128ee57fe5b60209081029190910101518351600019018452915050919050565b608081015160009060ff1615801561117d57505051600160401b1190565b6080015160ff16600c1490565b6121488161151d565b600061205d612955856020865b048560000151612efa565b6020855b06613068565b80826020015183600001518151811061297457fe5b60209081029190910101525080516001019052565b6040805160088082528183019092526000916060919060208201818036833701905050905060006129c3866020875b048660000151612efa565b9050602080860660080110612a965760006129ea876020885b046001018760400151612efa565b905060005b6018601f881660080301811015612a3e57612a10838260208a5b0601613068565b60f81b848281518110612a1f57fe5b60200101906001600160f81b031916908160001a9053506001016129ef565b506018601f8716600803015b6008811015612a8f57612a61826020898401612959565b60f81b848281518110612a7057fe5b60200101906001600160f81b031916908160001a905350600101612a4a565b5050612adf565b60005b6008811015612add57612aaf8282602089612a09565b60f81b838281518110612abe57fe5b60200101906001600160f81b031916908160001a905350600101612a99565b505b611fd882613075565b604080516020808252818301909252600091606091906020820181803683370190505090506000612b1b866020876129b8565b9050602080860660200110612bd4576000612b38876020886129dc565b905060005b601f8716602003811015612b8657612b58838260208a612a09565b60f81b848281518110612b6757fe5b60200101906001600160f81b031916908160001a905350600101612b3d565b50601f86166008035b6020811015612a8f57612ba6826020898401612959565b60f81b848281518110612bb557fe5b60200101906001600160f81b031916908160001a905350600101612b8f565b60005b6020811015612add57612bed8282602089612a09565b60f81b838281518110612bfc57fe5b60200101906001600160f81b031916908160001a905350600101612bd7565b6080015160ff161590565b600080612c358660208761294a565b90506000612c478260208806876130b2565b90506000612c63886020890484886000015189602001516130f1565b98975050505050505050565b60006060612c7c84613197565b90506000612c8c876020886129b8565b9050602080870660080110612d6d5760005b6018601f881660080301811015612ce657612cdc82602089840106858460180181518110612cc857fe5b01602001516001600160f81b031916613201565b9150600101612c9e565b50612d00876020885b0483876000015188602001516130f1565b96506000612d10886020896129dc565b90506018601f8816600803015b6008811015612d4957612d3f8260208a840106868460180181518110612cc857fe5b9150600101612d1d565b50612d65886020890460010183886040015189606001516130f1565b975050612dac565b60005b6008811015612d9c57612d92828260208a0601858460180181518110612cc857fe5b9150600101612d70565b50612da987602088612cef565b96505b509495945050505050565b60006060612dc484613197565b90506000612dd4876020886129b8565b9050602080870660200110612e655760005b601f8716602003811015612e1557612e0b828260208a5b0601858481518110612cc857fe5b9150600101612de6565b50612e2287602088612cef565b96506000612e32886020896129dc565b9050601f87166020035b6020811015612d4957612e5b8260208a840106868481518110612cc857fe5b9150600101612e3c565b60005b6020811015612d9c57612e7e828260208a612dfd565b9150600101612e68565b825160009061205d90612ea1607b81888888600161321d565b6132c4565b600080612eb58560208661294a565b9050601f84165b6020811015612ee757612ecf8282613068565b15612edf57600092505050611202565b600101612ebc565b506111fe856020860485600001516132f0565b6000815160001415612f6357612f106000611d05565b8414612f5b576040805162461bcd60e51b815260206004820152601560248201527432bc3832b1ba32b21032b6b83a3c90313ab33332b960591b604482015290519081900360640190fd5b506000611202565b6000612f8283600081518110612f7557fe5b6020026020010151611d05565b905060015b8351811015612fec578460011660011415612fc057612fb9848281518110612fab57fe5b6020026020010151836132c4565b9150612fe0565b612fdd82858381518110612fd057fe5b60200260200101516132c4565b91505b600194851c9401612f87565b50848114613039576040805162461bcd60e51b8152602060048201526015602482015274195e1c1958dd19590818dbdc9c9958dd081c9bdbdd605a1b604482015290519081900360640190fd5b8315613049575060009050611202565b8260008151811061305657fe5b60200260200101519150509392505050565b601f036008021c60ff1690565b600080805b83518110156130ab57600882901b915083818151811061309657fe5b016020015160f81c919091179060010161307a565b5092915050565b600060606130bf85613197565b90508260f81b8185815181106130d157fe5b60200101906001600160f81b031916908160001a9053506111fe81613075565b60008151600314613149576040805162461bcd60e51b815260206004820152601760248201527f4241445f4e4f524d414c495a4154494f4e5f50524f4f46000000000000000000604482015290519081900360640190fd5b611fd8868686868660008151811061315d57fe5b602002602001015160001c8760018151811061317557fe5b60200260200101518860028151811061318a57fe5b6020026020010151613476565b6040805160208082528183019092526060918391839160208201818036833701905050905060005b602081101561278f578260f81b8282601f03815181106131db57fe5b60200101906001600160f81b031916908160001a90535060089290921c916001016131bf565b6000606061320e85613197565b9050828185815181106130d157fe5b6000602083116132525784518410613240576132396000611d05565b905061205d565b61323961324d8686613705565b611d05565b600061326a866002860487016002875b04600061321d565b90506132766000611d05565b811480156132815750825b1561329e57613296868660028704600161321d565b91505061205d565b60006132ad8787600288613262565b90506132b981836132c4565b979650505050505050565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6000815160001415613359576133066000611d05565b8414613351576040805162461bcd60e51b815260206004820152601560248201527432bc3832b1ba32b21032b6b83a3c90313ab33332b960591b604482015290519081900360640190fd5b506001611202565b600061336b83600081518110612f7557fe5b90506001606061337961375c565b905060015b855181101561340d5786600116600114156133b7576133b08682815181106133a257fe5b6020026020010151856132c4565b9350613401565b6133c784878381518110612fd057fe5b93508280156133fe57508160018203815181106133e057fe5b60200260200101518682815181106133f457fe5b6020026020010151145b92505b600196871c960161337e565b5086831461345a576040805162461bcd60e51b8152602060048201526015602482015274195e1c1958dd19590818dbdc9c9958dd081c9bdbdd605a1b604482015290519081900360640190fd5b851561346c5760019350505050611202565b5095945050505050565b60008061348287611d05565b905061348f898988612efa565b50606061349a61375c565b905060018751036001901b891061355e57876134ba5789925050506132b9565b60006134c58a6137fd565b88519091505b600182038110156134f3576134e98c846001840381518110612fd057fe5b9b506001016134cb565b5060015b60018203811015613549578a60011660011415613527576135208360018303815181106133a257fe5b935061353d565b61353a84846001840381518110612fd057fe5b93505b60019a8b1c9a016134f7565b506135548b846132c4565b93505050506132b9565b60015b87518110156135de5760008a60011660011461357d5783613592565b88828151811061358957fe5b60200260200101515b905060008b6001166001146135ba578983815181106135ad57fe5b60200260200101516135bc565b845b90506135c882826132c4565b60019c8d1c9c9095509290920191506135619050565b5087156135ed575090506132b9565b8086815181106135f957fe5b60200260200101518414158061360d575085155b61365e576040805162461bcd60e51b815260206004820152601c60248201527f726967687420737562747265652063616e6e6f74206265207a65726f00000000604482015290519081900360640190fd5b600086156136755761367086866132c4565b613677565b855b9050861561368757600019909601955b80875b60018a51038110156136b0576136a682858381518110612fd057fe5b915060010161368a565b508381146136f6576040805162461bcd60e51b815260206004820152600e60248201526d0caf0e0cac6e8cac840dac2e8c6d60931b604482015290519081900360640190fd5b509a9950505050505050505050565b600080805b602081101561278f57600882901b9150600081850186511161372d57600061374b565b858286018151811061373b57fe5b01602001516001600160f81b0319165b60f81c92909217915060010161370a565b6040805181815261082081018252606091829190602082016108008036833701905050905061378b6000611d05565b8160008151811061379857fe5b602090810291909101015260015b60408110156137f7576137d88260018303815181106137c157fe5b6020026020010151836001840381518110612fd057fe5b8282815181106137e457fe5b60209081029190910101526001016137a6565b50905090565b60008161380c57506001610e33565b613819600183901c6137fd565b6001019050610e33565b6040518060a001604052806005906020820280368337509192915050565b604051806101c0016040528061385561392c565b815260200161386261392c565b81526000602082018190526040820181905260608201819052608082015260a00161388b613999565b8152602001613898613999565b81526000602082018190526040820181905260608083018190526080830182905260a083015260c09091015290565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b6040518060c00160405280600081526020016139096139b3565b815260606020820181905260006040830181905290820181905260809091015290565b60408051610120810190915260008152602081016139486138ef565b81526020016139556138ef565b81526020016139626138ef565b815260200161396f6138ef565b8152600060208201819052604082015260600161398a6138ef565b8152602001600081525090565bfe5b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fe62756666657220696e646578206d7573742062652036342d626974000000000075736520616e6f7468657220636f6e747261637420746f2068616e646c65206f74686572206f70636f646573a2646970667358221220d39e11f8cf77dff3def196550336165d0bc532cc1c49cc63501919d29defa56d64736f6c634300060c0033"

// DeployOneStepProof2 deploys a new Ethereum contract, binding an instance of OneStepProof2 to it.
func DeployOneStepProof2(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof2, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProof2ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProof2Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof2{OneStepProof2Caller: OneStepProof2Caller{contract: contract}, OneStepProof2Transactor: OneStepProof2Transactor{contract: contract}, OneStepProof2Filterer: OneStepProof2Filterer{contract: contract}}, nil
}

// OneStepProof2 is an auto generated Go binding around an Ethereum contract.
type OneStepProof2 struct {
	OneStepProof2Caller     // Read-only binding to the contract
	OneStepProof2Transactor // Write-only binding to the contract
	OneStepProof2Filterer   // Log filterer for contract events
}

// OneStepProof2Caller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProof2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProof2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProof2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProof2Session struct {
	Contract     *OneStepProof2    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProof2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProof2CallerSession struct {
	Contract *OneStepProof2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// OneStepProof2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProof2TransactorSession struct {
	Contract     *OneStepProof2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// OneStepProof2Raw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProof2Raw struct {
	Contract *OneStepProof2 // Generic contract binding to access the raw methods on
}

// OneStepProof2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProof2CallerRaw struct {
	Contract *OneStepProof2Caller // Generic read-only contract binding to access the raw methods on
}

// OneStepProof2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProof2TransactorRaw struct {
	Contract *OneStepProof2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof2 creates a new instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2(address common.Address, backend bind.ContractBackend) (*OneStepProof2, error) {
	contract, err := bindOneStepProof2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2{OneStepProof2Caller: OneStepProof2Caller{contract: contract}, OneStepProof2Transactor: OneStepProof2Transactor{contract: contract}, OneStepProof2Filterer: OneStepProof2Filterer{contract: contract}}, nil
}

// NewOneStepProof2Caller creates a new read-only instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Caller(address common.Address, caller bind.ContractCaller) (*OneStepProof2Caller, error) {
	contract, err := bindOneStepProof2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Caller{contract: contract}, nil
}

// NewOneStepProof2Transactor creates a new write-only instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Transactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProof2Transactor, error) {
	contract, err := bindOneStepProof2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Transactor{contract: contract}, nil
}

// NewOneStepProof2Filterer creates a new log filterer instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Filterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProof2Filterer, error) {
	contract, err := bindOneStepProof2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Filterer{contract: contract}, nil
}

// bindOneStepProof2 binds a generic wrapper to an already deployed contract.
func bindOneStepProof2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProof2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof2 *OneStepProof2Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProof2.Contract.OneStepProof2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof2 *OneStepProof2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof2.Contract.OneStepProof2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof2 *OneStepProof2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof2.Contract.OneStepProof2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof2 *OneStepProof2CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProof2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof2 *OneStepProof2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof2 *OneStepProof2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof2.Contract.contract.Transact(opts, method, params...)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x3a06aeec.
//
// Solidity: function executeStep(bytes32[3] _machineFields, bytes proof, bytes bproof) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof2 *OneStepProof2Caller) ExecuteStep(opts *bind.CallOpts, _machineFields [3][32]byte, proof []byte, bproof []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	var out []interface{}
	err := _OneStepProof2.contract.Call(opts, &out, "executeStep", _machineFields, proof, bproof)

	outstruct := new(struct {
		Gas    uint64
		Fields [5][32]byte
	})

	outstruct.Gas = out[0].(uint64)
	outstruct.Fields = out[1].([5][32]byte)

	return *outstruct, err

}

// ExecuteStep is a free data retrieval call binding the contract method 0x3a06aeec.
//
// Solidity: function executeStep(bytes32[3] _machineFields, bytes proof, bytes bproof) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof2 *OneStepProof2Session) ExecuteStep(_machineFields [3][32]byte, proof []byte, bproof []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	return _OneStepProof2.Contract.ExecuteStep(&_OneStepProof2.CallOpts, _machineFields, proof, bproof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x3a06aeec.
//
// Solidity: function executeStep(bytes32[3] _machineFields, bytes proof, bytes bproof) view returns(uint64 gas, bytes32[5] fields)
func (_OneStepProof2 *OneStepProof2CallerSession) ExecuteStep(_machineFields [3][32]byte, proof []byte, bproof []byte) (struct {
	Gas    uint64
	Fields [5][32]byte
}, error) {
	return _OneStepProof2.Contract.ExecuteStep(&_OneStepProof2.CallOpts, _machineFields, proof, bproof)
}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2Caller) ParseProof(opts *bind.CallOpts, proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	var out []interface{}
	err := _OneStepProof2.contract.Call(opts, &out, "parseProof", proof)

	if err != nil {
		return *new([][32]byte), *new([][32]byte), *new([][32]byte), *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)
	out1 := *abi.ConvertType(out[1], new([][32]byte)).(*[][32]byte)
	out2 := *abi.ConvertType(out[2], new([][32]byte)).(*[][32]byte)
	out3 := *abi.ConvertType(out[3], new([][32]byte)).(*[][32]byte)

	return out0, out1, out2, out3, err

}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2Session) ParseProof(proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	return _OneStepProof2.Contract.ParseProof(&_OneStepProof2.CallOpts, proof)
}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2CallerSession) ParseProof(proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	return _OneStepProof2.Contract.ParseProof(&_OneStepProof2.CallOpts, proof)
}
