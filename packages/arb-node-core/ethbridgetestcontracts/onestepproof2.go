// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgetestcontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProof2ABI is the input ABI used to generate the binding from.
const OneStepProof2ABI = "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"initialSendAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"initialLogAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"totalMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[4]\",\"name\":\"fields\",\"type\":\"bytes32[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"parseProof\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// OneStepProof2FuncSigs maps the 4-byte function signature to its string representation.
var OneStepProof2FuncSigs = map[string]string{
	"81ea2898": "executeStep(uint256,bytes32,bytes32,bytes,bytes)",
	"793deea3": "parseProof(bytes)",
}

// OneStepProof2Bin is the compiled bytecode used for deploying new contracts.
var OneStepProof2Bin = "0x608060405234801561001057600080fd5b506139ee806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063793deea31461003b57806381ea289814610204575b600080fd5b6100e16004803603602081101561005157600080fd5b81019060208101813564010000000081111561006c57600080fd5b82018360208201111561007e57600080fd5b803590602001918460018302840111640100000000831117156100a057600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061032b945050505050565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b8381101561012d578181015183820152602001610115565b50505050905001858103845288818151815260200191508051906020019060200280838360005b8381101561016c578181015183820152602001610154565b50505050905001858103835287818151815260200191508051906020019060200280838360005b838110156101ab578181015183820152602001610193565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156101ea5781810151838201526020016101d2565b505050509050019850505050505050505060405180910390f35b6102d9600480360360a081101561021a57600080fd5b8135916020810135916040820135919081019060808101606082013564010000000081111561024857600080fd5b82018360208201111561025a57600080fd5b8035906020019184600183028401116401000000008311171561027c57600080fd5b91939092909160208101903564010000000081111561029a57600080fd5b8201836020820111156102ac57600080fd5b803590602001918460018302840111640100000000831117156102ce57600080fd5b509092509050610367565b60405180846001600160401b0316815260200183815260200182600460200280838360005b838110156103165781810151838201526020016102fe565b50505050905001935050505060405180910390f35b6060806060806103396137cd565b61034286610418565b80516020820151604083015160609093015191975095509093509150505b9193509193565b6000806103726137f5565b61037a613813565b6103f08b8b8b8b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8f018190048102820181019092528d815292508d91508c908190840183828082843760009201829052509250610510915050565b90506103fb816109f8565b61040481610e06565b935093509350509750975097945050505050565b6104206137cd565b606061045f838460008151811061043357fe5b602001015160f81c60f81b8560018151811061044b57fe5b01602001516001600160f81b031916610e69565b9050606061048c848560018151811061047457fe5b602001015160f81c60f81b8660028151811061044b57fe5b905060606104b985866002815181106104a157fe5b602001015160f81c60f81b8760038151811061044b57fe5b905060606104e686876003815181106104ce57fe5b602001015160f81c60f81b8860048151811061044b57fe5b6040805160808101825295865260208601949094529284019190915250606082015290505b919050565b610518613813565b60008460008151811061052757fe5b602001015160f81c60f81b60f81c905060008560018151811061054657fe5b602001015160f81c60f81b60f81c905060008660028151811061056557fe5b016020015160f81c9050600360606004840160ff166001600160401b038111801561058f57600080fd5b506040519080825280602002602001820160405280156105c957816020015b6105b66138a9565b8152602001906001900390816105ae5790505b50905060608360040160ff166001600160401b03811180156105ea57600080fd5b5060405190808252806020026020018201604052801561062457816020015b6106116138a9565b8152602001906001900390816106095790505b50905060005b8560ff168110156106605761063f8b85610f08565b84838151811061064b57fe5b6020908102919091010152935060010161062a565b5060005b8460ff1681101561069a576106798b85610f08565b83838151811061068557fe5b60209081029190910101529350600101610664565b506106a36138e6565b6106ad8b856110ca565b809250819550505060008b85815181106106c357fe5b01602001516001959095019460f81c90506106dc613813565b6001600160a01b038b168152602081018390526106f88361117b565b81604001819052508f8160600181815250508e8160800181815250508d8160a001818152505060008160c001906001600160401b031690816001600160401b03168152505060405180604001604052808960ff168152602001868152508160e0018190525060405180604001604052808860ff168152602001858152508161010001819052508c868151811061078a57fe5b60209101015160f81c60011461012082015260ff89811661014083015261016082018e90526101a082018d905260006101c08301526101808201879052821615806107d857508160ff166001145b6040518060400160405280600b81526020016a04241445f494d4d5f5459560ac1b815250906108855760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561084a578181015183820152602001610832565b50505050905090810190601f1680156108775780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5061088e6138a9565b60ff83166108af576108a88a8360200151600001516111ef565b905061094f565b6000865111604051806040016040528060068152602001654e4f5f494d4d60d01b8152509061091f5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561084a578181015183820152602001610832565b5061094c8a8360200151600001518860018d0360ff168151811061093f57fe5b6020026020010151611253565b90505b610958816112d7565b60208301515260005b838a0360ff168110156109a05761099887828151811061097d57fe5b6020026020010151846020015161144490919063ffffffff16565b600101610961565b5060005b8860ff168110156109e1576109d98682815181106109be57fe5b6020026020010151846020015161145e90919063ffffffff16565b6001016109a4565b509099505050505050505050509695505050505050565b6000806000613951610a1185610140015160ff16611478565b93509350935093506000841180610a2b5750846101200151155b8015610a3c575060e0850151518410155b80610a6357508461012001518015610a52575083155b8015610a63575060e0850151516001145b6040518060400160405280600a815260200169535441434b5f4d414e5960b01b81525090610ad25760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561084a578181015183820152602001610832565b50610100850151516040805180820190915260088152674155585f4d414e5960c01b602082015290841015610b485760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561084a578181015183820152602001610832565b5060e085015151841115610c0557610b66610b61611588565b6112d7565b610b778660400151602001516112d7565b146040518060400160405280600d81526020016c535441434b5f4d495353494e4760981b81525090610bea5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561084a578181015183820152602001610832565b50610bf68560056115cf565b50610c0085611644565b610cc5565b61010085015151831115610ca057610c1e610b61611588565b610c2f8660400151604001516112d7565b146040518060400160405280600b81526020016a4155585f4d495353494e4760a81b81525090610bea5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561084a578181015183820152602001610832565b610caa85836115cf565b15610cb857610c0085611644565b610cc5858263ffffffff16565b846101c0015115610d675760408051600160f81b602080830191909152600060218301819052602280840191909152835180840390910181526042909201835281519101209086015160c001511415610d2a57610d25856040015161164f565b610d67565b60006101c0860152604085015160c081015190526101208501518015610d4e575083155b610d5c5760e0850151600090525b610100850151600090525b60005b60e086015151811015610db157610da98660e00151602001518281518110610d8e57fe5b6020026020010151876040015161144490919063ffffffff16565b600101610d6a565b5060005b61010086015151811015610dfe57610df6866101000151602001518281518110610ddb57fe5b6020026020010151876040015161145e90919063ffffffff16565b600101610db5565b505050505050565b600080610e116137f5565b8360c0015184606001516040518060800160405280610e33886020015161165a565b8152602001610e45886040015161165a565b8152602001876080015181526020018760a001518152509250925092509193909250565b606060f883811c9083901c81900360ff169082826001600160401b0381118015610e9257600080fd5b50604051908082528060200260200182016040528015610ebc578160200160208202803683370190505b50905060005b83811015610efb57610ed988828501602002611734565b60001b828281518110610ee857fe5b6020908102919091010152600101610ec2565b50925050505b9392505050565b6000610f126138a9565b83518310610f58576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b600080610f658686611774565b91509150610f7161179b565b60ff168160ff161415610fa5576000610f8a87846117a0565b909350905082610f998261180e565b945094505050506110c3565b610fad6118ce565b60ff168160ff161415610fcf57610fc486836118d3565b9350935050506110c3565b610fd7611975565b60ff168160ff161415610fff576000610ff087846117a0565b909350905082610f998261197a565b611007611a66565b60ff168160ff16141561101e57610fc48683611a6b565b611026611b00565b60ff168160ff1610158015611047575061103e611b05565b60ff168160ff16105b15611083576000611056611b00565b820390506060611067828986611b0a565b90945090508361107682611bb2565b95509550505050506110c3565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b60006110d46138e6565b6110dc6138e6565b60006101008201819052806110f187876117a0565b90965091506111008787611a6b565b602085015295506111118787611a6b565b604085015295506111228787610f08565b606085015295506111338787610f08565b6080850152955061114487876117a0565b60a0850152955061115587876117a0565b90965090506111648787610f08565b60e085015291835260c08301529590945092505050565b6111836138e6565b60405180610120016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e0015181526020018361010001518152509050919050565b6111f76138a9565b6040805160608101825260ff85168152602080820185905282516000808252918101845261124a93830191611242565b61122f6138a9565b8152602001906001900390816112275790505b509052611cf3565b90505b92915050565b61125b6138a9565b604080516001808252818301909252606091816020015b61127a6138a9565b815260200190600190039081611272579050509050828160008151811061129d57fe5b60200260200101819052506112ce60405180606001604052808760ff16815260200186815260200183815250611cf3565b95945050505050565b60006112e161179b565b60ff16826080015160ff1614156113045781516112fd90611d83565b905061050b565b61130c6118ce565b60ff16826080015160ff16141561132a576112fd8260200151611da7565b611332611a66565b60ff16826080015160ff16141561135457815160a08301516112fd9190611e9c565b61135c611b00565b60ff16826080015160ff161415611395576113756138a9565b6113828360400151611eea565b905061138d816112d7565b91505061050b565b61139d61205f565b60ff16826080015160ff1614156113b65750805161050b565b6113be611975565b60ff16826080015160ff161415611403575060608082015160408051607b6020808301919091528183019390935281518082038301815293019052815191012061050b565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b611452826020015182612064565b82602001819052505050565b61146c826040015182612064565b82604001819052505050565b6000808061395160a185141561149d57506002925060009150600a90506120e2610360565b60a28514156114bb57506002925060009150600a9050612196610360565b60a38514156114d957506002925060009150600a9050612228610360565b60a48514156114f757506003925060009150606490506122ba610360565b60a585141561151557506003925060009150606490506123a7610360565b60a68514156115335750600392506000915060649050612478610360565b60708514156115515750600292506000915060649050612537610360565b60405162461bcd60e51b815260040180806020018281038252602c81526020018061398d602c913960400191505060405180910390fd5b6115906138a9565b604080516000808252602082019092526115ca916115c4565b6115b16138a9565b8152602001906001900390816115a95790505b50611bb2565b905090565b6000816001600160401b0316836040015160a001511015611614575060c0820180516005016001600160401b03169052604082015160001960a090910152600161124d565b5060c0820180516001600160401b039083018116909152604083015160a00180519183169091039052600061124d565b60016101c090910152565b600161010090910152565b6000600282610100015114156116725750600061050b565b600182610100015114156116885750600161050b565b81516020830151611698906112d7565b6116a584604001516112d7565b6116b285606001516112d7565b6116bf86608001516112d7565b8660a001518760c001516116d68960e001516112d7565b604051602001808981526020018881526020018781526020018681526020018581526020018481526020018381526020018281526020019850505050505050505060405160208183030381529060405280519060200120905061050b565b600080805b602081101561176c57600882901b9150848185018151811061175757fe5b016020015160f81c9190911790600101611739565b509392505050565b6000808260010184848151811061178757fe5b016020015190925060f81c90509250929050565b600090565b600080828451101580156117b8575060208385510310155b6117f5576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b6020830161180385856126d1565b915091509250929050565b6118166138a9565b6040805160c081018252838152815160608101835260008082526020808301829052845182815280820186529394908501939083019161186c565b6118596138a9565b8152602001906001900390816118515790505b509052815260200160006040519080825280602002602001820160405280156118af57816020015b61189c6138a9565b8152602001906001900390816118945790505b5081526000602082018190526040820152600160609091015292915050565b600190565b60006118dd6138a9565b826000806118e96138a9565b60006118f58986611774565b90955093506119048986611774565b9095509250600160ff851614156119255761191f8986610f08565b90955091505b61192f898661272a565b9095509050600160ff8516141561195a578461194c848385611253565b9650965050505050506110c3565b8461196584836111ef565b9650965050505050509250929050565b600c90565b6119826138a9565b6040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b03811180156119c957600080fd5b50604051908082528060200260200182016040528015611a0357816020015b6119f06138a9565b8152602001906001900390816119e85790505b50905281526020016000604051908082528060200260200182016040528015611a4657816020015b611a336138a9565b815260200190600190039081611a2b5790505b50815260208101849052600c604082015260016060909101529050919050565b600290565b6000611a756138a9565b82845110158015611a8a575060408385510310155b611ac7576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b600080611ad4868661272a565b9094509150611ae386856117a0565b909450905083611af3838361273b565b9350935050509250929050565b600390565b600d90565b60006060828160ff87166001600160401b0381118015611b2957600080fd5b50604051908082528060200260200182016040528015611b6357816020015b611b506138a9565b815260200190600190039081611b485790505b50905060005b8760ff168160ff161015611ba557611b818784610f08565b838360ff1681518110611b9057fe5b60209081029190910101529250600101611b69565b5090969095509350505050565b611bba6138a9565b611bc482516127fa565b611c15576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b8351811015611c4c57838181518110611c2f57fe5b602002602001015160a00151820191508080600101915050611c1a565b506040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b0381118015611c9457600080fd5b50604051908082528060200260200182016040528015611cce57816020015b611cbb6138a9565b815260200190600190039081611cb35790505b5090528152602081019490945260006040850152600360608501526080909301525090565b611cfb6138a9565b6040518060c001604052806000815260200183815260200160006001600160401b0381118015611d2a57600080fd5b50604051908082528060200260200182016040528015611d6457816020015b611d516138a9565b815260200190600190039081611d495790505b5081526000602082015260016040820181905260609091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b6000600282604001515110611db857fe5b604082015151611e1b57611dca6118ce565b82600001518360200151604051602001808460ff1660f81b81526001018360ff1660f81b8152600101828152602001935050505060405160208183030381529060405280519060200120905061050b565b611e236118ce565b8260000151611e498460400151600081518110611e3c57fe5b60200260200101516112d7565b8460200151604051602001808560ff1660f81b81526001018460ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b6000611ea6611b00565b8383604051602001808460ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b611ef26138a9565b600882511115611f40576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b606082516001600160401b0381118015611f5957600080fd5b50604051908082528060200260200182016040528015611f83578160200160208202803683370190505b508051909150600160005b82811015611fe657611fa5868281518110611e3c57fe5b848281518110611fb157fe5b602002602001018181525050858181518110611fc957fe5b602002602001015160a00151820191508080600101915050611f8e565b506000835184604051602001808360ff1660f81b8152600101828051906020019060200280838360005b83811015612028578181015183820152602001612010565b5050505090500192505050604051602081830303815290604052805190602001209050612055818361273b565b9695505050505050565b606490565b61206c6138a9565b6040805160028082526060828101909352816020015b61208a6138a9565b81526020019060019003908161208257905050905082816000815181106120ad57fe5b602002602001018190525083816001815181106120c657fe5b60200260200101819052506120da81611eea565b949350505050565b6120ea6138a9565b6120f78260e00151612801565b90506121016138a9565b61210e8360e00151612801565b905061211982612843565b158061212b575061212981612861565b155b15612140576121398361286e565b5050612193565b8151600160401b11612155576121398361286e565b600061217782606001518460000151612172876101a00151610418565b612877565b905061218f8460e0015161218a8361180e565b612899565b5050505b50565b61219e6138a9565b6121ab8260e00151612801565b90506121b56138a9565b6121c28360e00151612801565b90506121cd82612843565b15806121df57506121dd81612861565b155b156121ed576121398361286e565b815167fffffffffffffff911612206576121398361286e565b600061217782606001518460000151612223876101a00151610418565b6128c3565b6122306138a9565b61223d8260e00151612801565b90506122476138a9565b6122548360e00151612801565b905061225f82612843565b1580612271575061226f81612861565b155b1561227f576121398361286e565b815167ffffffffffffffe111612298576121398361286e565b6000612177826060015184600001516122b5876101a00151610418565b612a22565b6122c26138a9565b6122cf8260e00151612801565b90506122d96138a9565b6122e68360e00151612801565b90506122f06138a9565b6122fd8460e00151612801565b905061230883612843565b158061231a575061231882612b55565b155b8061232b575061232981612861565b155b15612341576123398461286e565b505050612193565b8251600160401b1115806123585750815161010011155b15612366576123398461286e565b600061238d826060015185600001518560000151612388896101a00151610418565b612b60565b90506123a08560e0015161218a8361197a565b5050505050565b6123af6138a9565b6123bc8260e00151612801565b90506123c66138a9565b6123d38360e00151612801565b90506123dd6138a9565b6123ea8460e00151612801565b90506123f583612843565b1580612407575061240582612b55565b155b80612418575061241681612861565b155b15612426576123398461286e565b825167fffffffffffffff911158061244357508151600160401b11155b15612451576123398461286e565b600061238d826060015185600001518560000151612473896101a00151610418565b612ba9565b6124806138a9565b61248d8260e00151612801565b90506124976138a9565b6124a48360e00151612801565b90506124ae6138a9565b6124bb8460e00151612801565b90506124c683612843565b15806124d857506124d682612b55565b155b806124e957506124e781612861565b155b156124f7576123398461286e565b825167ffffffffffffffe111612510576123398461286e565b600061238d826060015185600001518560000151612532896101a00151610418565b612cf2565b61253f6138a9565b61254c8260e00151612801565b90506125566138a9565b6125638360e00151612801565b905061256e82612843565b1580612580575061257e81612861565b155b1561258e576121398361286e565b8151612710108061259e57508151155b156125ac576121398361286e565b826101600151518361018001511415612627576125df816060015183600001516125da866101a00151610418565b612dc4565b1561261e576040805162461bcd60e51b815260206004820152600a602482015269084aa8cbe988a9c8ea8960b31b604482015290519081900360640190fd5b6121398361286e565b61018083015182516101608501516000612642828585612e18565b90508061264e866112d7565b1461268d576040805162461bcd60e51b815260206004820152600a60248201526915d493d391d7d4d1539160b21b604482015290519081900360640190fd5b509091016020908101919091206080850180516040805180860192909252818101939093528251808203840181526060909101909252815191909201209052505050565b60008160200183511015612721576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b6000806020830161180385856126d1565b6127436138a9565b6040805160c0810182528481528151606081018352600080825260208083018290528451828152808201865293949085019390830191612799565b6127866138a9565b81526020019060019003908161277e5790505b509052815260200160006040519080825280602002602001820160405280156127dc57816020015b6127c96138a9565b8152602001906001900390816127c15790505b50815260006020820152600260408201526060019290925250919050565b6008101590565b6128096138a9565b6128116138a9565b826020015160018460000151038151811061282857fe5b60209081029190910101518351600019018452915050919050565b608081015160009060ff1615801561124d57505051600160401b1190565b6080015160ff16600c1490565b61219381611644565b60006120da61288f856020865b048560000151612e4a565b6020855b06612fb8565b8082602001518360000151815181106128ae57fe5b60209081029190910101525080516001019052565b6040805160088082528183019092526000916060919060208201818036833701905050905060006128fd866020875b048660000151612e4a565b90506020808606600801106129d0576000612924876020885b046001018760400151612e4a565b905060005b6018601f8816600803018110156129785761294a838260208a5b0601612fb8565b60f81b84828151811061295957fe5b60200101906001600160f81b031916908160001a905350600101612929565b506018601f8716600803015b60088110156129c95761299b826020898401612893565b60f81b8482815181106129aa57fe5b60200101906001600160f81b031916908160001a905350600101612984565b5050612a19565b60005b6008811015612a17576129e98282602089612943565b60f81b8382815181106129f857fe5b60200101906001600160f81b031916908160001a9053506001016129d3565b505b61205582612fc5565b604080516020808252818301909252600091606091906020820181803683370190505090506000612a55866020876128f2565b9050602080860660200110612b0e576000612a7287602088612916565b905060005b601f8716602003811015612ac057612a92838260208a612943565b60f81b848281518110612aa157fe5b60200101906001600160f81b031916908160001a905350600101612a77565b50601f86166008035b60208110156129c957612ae0826020898401612893565b60f81b848281518110612aef57fe5b60200101906001600160f81b031916908160001a905350600101612ac9565b60005b6020811015612a1757612b278282602089612943565b60f81b838281518110612b3657fe5b60200101906001600160f81b031916908160001a905350600101612b11565b6080015160ff161590565b600080612b6f86602087612884565b90506000612b81826020880687613002565b90506000612b9d88602089048488600001518960200151613041565b98975050505050505050565b60006060612bb6846130e7565b90506000612bc6876020886128f2565b905060208087066008011115612ca85760005b6018601f881660080301811015612c2157612c1782602089840106858460180181518110612c0357fe5b01602001516001600160f81b031916613151565b9150600101612bd9565b50612c3b876020885b048387600001518860200151613041565b96506000612c4b88602089612916565b90506018601f8816600803015b6008811015612c8457612c7a8260208a840106868460180181518110612c0357fe5b9150600101612c58565b50612ca088602089046001018388604001518960600151613041565b975050612ce7565b60005b6008811015612cd757612ccd828260208a0601858460180181518110612c0357fe5b9150600101612cab565b50612ce487602088612c2a565b96505b509495945050505050565b60006060612cff846130e7565b90506000612d0f876020886128f2565b905060208087066020011115612da15760005b601f8716602003811015612d5157612d47828260208a5b0601858481518110612c0357fe5b9150600101612d22565b50612d5e87602088612c2a565b96506000612d6e88602089612916565b9050601f87166020035b6020811015612c8457612d978260208a840106868481518110612c0357fe5b9150600101612d78565b60005b6020811015612cd757612dba828260208a612d39565b9150600101612da4565b600080612dd385602086612884565b9050601f84165b6020811015612e0557612ded8282612fb8565b15612dfd57600092505050610f01565b600101612dda565b506112ce8560208604856000015161316d565b600080612e308585612e29866132f3565b600161331e565b5085519091506112ce90612e45607b846133f2565b6133f2565b6000815160001415612eb357612e606000611d83565b8414612eab576040805162461bcd60e51b815260206004820152601560248201527432bc3832b1ba32b21032b6b83a3c90313ab33332b960591b604482015290519081900360640190fd5b506000610f01565b6000612ed283600081518110612ec557fe5b6020026020010151611d83565b905060015b8351811015612f3c578460011660011415612f1057612f09848281518110612efb57fe5b6020026020010151836133f2565b9150612f30565b612f2d82858381518110612f2057fe5b60200260200101516133f2565b91505b600194851c9401612ed7565b50848114612f89576040805162461bcd60e51b8152602060048201526015602482015274195e1c1958dd19590818dbdc9c9958dd081c9bdbdd605a1b604482015290519081900360640190fd5b8315612f99575060009050610f01565b82600081518110612fa657fe5b60200260200101519150509392505050565b601f036008021c60ff1690565b600080805b8351811015612ffb57600882901b9150838181518110612fe657fe5b016020015160f81c9190911790600101612fca565b5092915050565b6000606061300f856130e7565b90508260f81b81858151811061302157fe5b60200101906001600160f81b031916908160001a9053506112ce81612fc5565b60008151600314613099576040805162461bcd60e51b815260206004820152601760248201527f4241445f4e4f524d414c495a4154494f4e5f50524f4f46000000000000000000604482015290519081900360640190fd5b61205586868686866000815181106130ad57fe5b602002602001015160001c876001815181106130c557fe5b6020026020010151886002815181106130da57fe5b602002602001015161341e565b6040805160208082528183019092526060918391839160208201818036833701905050905060005b602081101561176c578260f81b8282601f038151811061312b57fe5b60200101906001600160f81b031916908160001a90535060089290921c9160010161310f565b6000606061315e856130e7565b90508281858151811061302157fe5b60008151600014156131d6576131836000611d83565b84146131ce576040805162461bcd60e51b815260206004820152601560248201527432bc3832b1ba32b21032b6b83a3c90313ab33332b960591b604482015290519081900360640190fd5b506001610f01565b60006131e883600081518110612ec557fe5b9050600160606131f66136af565b905060015b855181101561328a5786600116600114156132345761322d86828151811061321f57fe5b6020026020010151856133f2565b935061327e565b61324484878381518110612f2057fe5b935082801561327b575081600182038151811061325d57fe5b602002602001015186828151811061327157fe5b6020026020010151145b92505b600196871c96016131fb565b508683146132d7576040805162461bcd60e51b8152602060048201526015602482015274195e1c1958dd19590818dbdc9c9958dd081c9bdbdd605a1b604482015290519081900360640190fd5b85156132e95760019350505050610f01565b5095945050505050565b6000600182116133055750600161050b565b613314600260018401046132f3565b600202905061050b565b6000806020841161337257855185106133465761333b6000611d83565b6001915091506133e9565b600061335a6133558888613750565b611d83565b9050806133676000611d83565b9093501490506133e9565b60008061338b886002880489016002895b04600061331e565b915091508080156133995750845b156133b8576133ad8888600289048861331e565b9350935050506133e9565b6000806133c88a8a60028b613383565b915091506133d682856133f2565b8180156133e05750835b95509550505050505b94509492505050565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b60008061342a87611d83565b9050613437898988612e4a565b5060606134426136af565b905060018751036001901b891061350657876134625789925050506136a4565b600061346d8a6137a7565b88519091505b6001820381101561349b576134918c846001840381518110612f2057fe5b9b50600101613473565b5060015b600182038110156134f1578a600116600114156134cf576134c883600183038151811061321f57fe5b93506134e5565b6134e284846001840381518110612f2057fe5b93505b60019a8b1c9a0161349f565b506134fc8b846133f2565b93505050506136a4565b60015b87518110156135865760008a600116600114613525578361353a565b88828151811061353157fe5b60200260200101515b905060008b6001166001146135625789838151811061355557fe5b6020026020010151613564565b845b905061357082826133f2565b60019c8d1c9c9095509290920191506135099050565b508715613595575090506136a4565b8086815181106135a157fe5b6020026020010151841415806135b5575085155b613606576040805162461bcd60e51b815260206004820152601c60248201527f726967687420737562747265652063616e6e6f74206265207a65726f00000000604482015290519081900360640190fd5b6000861561361d5761361886866133f2565b61361f565b855b9050861561362f57600019909601955b80875b60018a51038110156136585761364e82858381518110612f2057fe5b9150600101613632565b5083811461369e576040805162461bcd60e51b815260206004820152600e60248201526d0caf0e0cac6e8cac840dac2e8c6d60931b604482015290519081900360640190fd5b50925050505b979650505050505050565b604080518181526108208101825260609182919060208201610800803683370190505090506136de6000611d83565b816000815181106136eb57fe5b602090810291909101015260015b604081101561374a5761372b82600183038151811061371457fe5b6020026020010151836001840381518110612f2057fe5b82828151811061373757fe5b60209081029190910101526001016136f9565b50905090565b600080805b602081101561176c57600882901b91506000818501865111613778576000613796565b858286018151811061378657fe5b01602001516001600160f81b0319165b60f81c929092179150600101613755565b6000816137b65750600161050b565b6137c3600183901c6137a7565b600101905061050b565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b60405180608001604052806004906020820280368337509192915050565b604051806101e0016040528060006001600160a01b031681526020016138376138e6565b81526020016138446138e6565b81526000602082018190526040820181905260608201819052608082015260a00161386d613953565b815260200161387a613953565b81526000602082018190526040820181905260608083018190526080830182905260a083015260c09091015290565b6040518060c00160405280600081526020016138c361396d565b815260606020820181905260006040830181905290820181905260809091015290565b60408051610120810190915260008152602081016139026138a9565b815260200161390f6138a9565b815260200161391c6138a9565b81526020016139296138a9565b815260006020820181905260408201526060016139446138a9565b8152602001600081525090565bfe5b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fe75736520616e6f7468657220636f6e747261637420746f2068616e646c65206f74686572206f70636f646573a2646970667358221220006a7ed5f2735fe1feeacb6ebb4e90b58048f51b9a20df104b62d29604f0eaa764736f6c634300060c0033"

// DeployOneStepProof2 deploys a new Ethereum contract, binding an instance of OneStepProof2 to it.
func DeployOneStepProof2(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof2, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProof2ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProof2Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof2{OneStepProof2Caller: OneStepProof2Caller{contract: contract}, OneStepProof2Transactor: OneStepProof2Transactor{contract: contract}, OneStepProof2Filterer: OneStepProof2Filterer{contract: contract}}, nil
}

// OneStepProof2 is an auto generated Go binding around an Ethereum contract.
type OneStepProof2 struct {
	OneStepProof2Caller     // Read-only binding to the contract
	OneStepProof2Transactor // Write-only binding to the contract
	OneStepProof2Filterer   // Log filterer for contract events
}

// OneStepProof2Caller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProof2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProof2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProof2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProof2Session struct {
	Contract     *OneStepProof2    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProof2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProof2CallerSession struct {
	Contract *OneStepProof2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// OneStepProof2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProof2TransactorSession struct {
	Contract     *OneStepProof2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// OneStepProof2Raw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProof2Raw struct {
	Contract *OneStepProof2 // Generic contract binding to access the raw methods on
}

// OneStepProof2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProof2CallerRaw struct {
	Contract *OneStepProof2Caller // Generic read-only contract binding to access the raw methods on
}

// OneStepProof2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProof2TransactorRaw struct {
	Contract *OneStepProof2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof2 creates a new instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2(address common.Address, backend bind.ContractBackend) (*OneStepProof2, error) {
	contract, err := bindOneStepProof2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2{OneStepProof2Caller: OneStepProof2Caller{contract: contract}, OneStepProof2Transactor: OneStepProof2Transactor{contract: contract}, OneStepProof2Filterer: OneStepProof2Filterer{contract: contract}}, nil
}

// NewOneStepProof2Caller creates a new read-only instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Caller(address common.Address, caller bind.ContractCaller) (*OneStepProof2Caller, error) {
	contract, err := bindOneStepProof2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Caller{contract: contract}, nil
}

// NewOneStepProof2Transactor creates a new write-only instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Transactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProof2Transactor, error) {
	contract, err := bindOneStepProof2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Transactor{contract: contract}, nil
}

// NewOneStepProof2Filterer creates a new log filterer instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Filterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProof2Filterer, error) {
	contract, err := bindOneStepProof2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Filterer{contract: contract}, nil
}

// bindOneStepProof2 binds a generic wrapper to an already deployed contract.
func bindOneStepProof2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProof2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof2 *OneStepProof2Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProof2.Contract.OneStepProof2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof2 *OneStepProof2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof2.Contract.OneStepProof2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof2 *OneStepProof2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof2.Contract.OneStepProof2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof2 *OneStepProof2CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProof2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof2 *OneStepProof2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof2 *OneStepProof2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof2.Contract.contract.Transact(opts, method, params...)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x81ea2898.
//
// Solidity: function executeStep(uint256 initialMessagesRead, bytes32 initialSendAcc, bytes32 initialLogAcc, bytes proof, bytes bproof) view returns(uint64 gas, uint256 totalMessagesRead, bytes32[4] fields)
func (_OneStepProof2 *OneStepProof2Caller) ExecuteStep(opts *bind.CallOpts, initialMessagesRead *big.Int, initialSendAcc [32]byte, initialLogAcc [32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	TotalMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	var out []interface{}
	err := _OneStepProof2.contract.Call(opts, &out, "executeStep", initialMessagesRead, initialSendAcc, initialLogAcc, proof, bproof)

	outstruct := new(struct {
		Gas               uint64
		TotalMessagesRead *big.Int
		Fields            [4][32]byte
	})

	outstruct.Gas = out[0].(uint64)
	outstruct.TotalMessagesRead = out[1].(*big.Int)
	outstruct.Fields = out[2].([4][32]byte)

	return *outstruct, err

}

// ExecuteStep is a free data retrieval call binding the contract method 0x81ea2898.
//
// Solidity: function executeStep(uint256 initialMessagesRead, bytes32 initialSendAcc, bytes32 initialLogAcc, bytes proof, bytes bproof) view returns(uint64 gas, uint256 totalMessagesRead, bytes32[4] fields)
func (_OneStepProof2 *OneStepProof2Session) ExecuteStep(initialMessagesRead *big.Int, initialSendAcc [32]byte, initialLogAcc [32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	TotalMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	return _OneStepProof2.Contract.ExecuteStep(&_OneStepProof2.CallOpts, initialMessagesRead, initialSendAcc, initialLogAcc, proof, bproof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x81ea2898.
//
// Solidity: function executeStep(uint256 initialMessagesRead, bytes32 initialSendAcc, bytes32 initialLogAcc, bytes proof, bytes bproof) view returns(uint64 gas, uint256 totalMessagesRead, bytes32[4] fields)
func (_OneStepProof2 *OneStepProof2CallerSession) ExecuteStep(initialMessagesRead *big.Int, initialSendAcc [32]byte, initialLogAcc [32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	TotalMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	return _OneStepProof2.Contract.ExecuteStep(&_OneStepProof2.CallOpts, initialMessagesRead, initialSendAcc, initialLogAcc, proof, bproof)
}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2Caller) ParseProof(opts *bind.CallOpts, proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	var out []interface{}
	err := _OneStepProof2.contract.Call(opts, &out, "parseProof", proof)

	if err != nil {
		return *new([][32]byte), *new([][32]byte), *new([][32]byte), *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)
	out1 := *abi.ConvertType(out[1], new([][32]byte)).(*[][32]byte)
	out2 := *abi.ConvertType(out[2], new([][32]byte)).(*[][32]byte)
	out3 := *abi.ConvertType(out[3], new([][32]byte)).(*[][32]byte)

	return out0, out1, out2, out3, err

}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2Session) ParseProof(proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	return _OneStepProof2.Contract.ParseProof(&_OneStepProof2.CallOpts, proof)
}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2CallerSession) ParseProof(proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	return _OneStepProof2.Contract.ParseProof(&_OneStepProof2.CallOpts, proof)
}
