// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgetestcontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProof2ABI is the input ABI used to generate the binding from.
const OneStepProof2ABI = "[{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[2]\",\"name\":\"accs\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"totalMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[4]\",\"name\":\"fields\",\"type\":\"bytes32[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[2]\",\"name\":\"accs\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStepDebug\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"startMachine\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"afterMachine\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"parseProof\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// OneStepProof2FuncSigs maps the 4-byte function signature to its string representation.
var OneStepProof2FuncSigs = map[string]string{
	"9d16dd04": "executeStep(address,uint256,bytes32[2],bytes,bytes)",
	"2ccebb7a": "executeStepDebug(address,uint256,bytes32[2],bytes,bytes)",
	"793deea3": "parseProof(bytes)",
}

// OneStepProof2Bin is the compiled bytecode used for deploying new contracts.
var OneStepProof2Bin = "0x608060405234801561001057600080fd5b5061417f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632ccebb7a14610046578063793deea3146101fd5780639d16dd04146103c4575b600080fd5b61011f600480360360c081101561005c57600080fd5b6001600160a01b038235169160208101359160408201919081019060a081016080820135600160201b81111561009157600080fd5b8201836020820111156100a357600080fd5b803590602001918460018302840111600160201b831117156100c457600080fd5b919390929091602081019035600160201b8111156100e157600080fd5b8201836020820111156100f357600080fd5b803590602001918460018302840111600160201b8311171561011457600080fd5b5090925090506104ef565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610160578181015183820152602001610148565b50505050905090810190601f16801561018d5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156101c05781810151838201526020016101a8565b50505050905090810190601f1680156101ed5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b6102a16004803603602081101561021357600080fd5b810190602081018135600160201b81111561022d57600080fd5b82018360208201111561023f57600080fd5b803590602001918460018302840111600160201b8311171561026057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506105b4945050505050565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b838110156102ed5781810151838201526020016102d5565b50505050905001858103845288818151815260200191508051906020019060200280838360005b8381101561032c578181015183820152602001610314565b50505050905001858103835287818151815260200191508051906020019060200280838360005b8381101561036b578181015183820152602001610353565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156103aa578181015183820152602001610392565b505050509050019850505050505050505060405180910390f35b61049d600480360360c08110156103da57600080fd5b6001600160a01b038235169160208101359160408201919081019060a081016080820135600160201b81111561040f57600080fd5b82018360208201111561042157600080fd5b803590602001918460018302840111600160201b8311171561044257600080fd5b919390929091602081019035600160201b81111561045f57600080fd5b82018360208201111561047157600080fd5b803590602001918460018302840111600160201b8311171561049257600080fd5b5090925090506105f0565b60405180846001600160401b0316815260200183815260200182600460200280838360005b838110156104da5781810151838201526020016104c2565b50505050905001935050505060405180910390f35b6060806104fa613f5b565b61057e898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a9081908401838280828437600081840152601f19601f820116905080830192505050505050508e6106af565b905061058981610b4c565b6105968160400151610f62565b92506105a58160600151610f62565b91505097509795505050505050565b6060806060806105c2613ff4565b6105cb866112d6565b80516020820151604083015160609093015191975095509093509150505b9193509193565b6000806105fb61401c565b610603613f5b565b6106878a8a8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b9081908401838280828437600081840152601f19601f820116905080830192505050505050508f6106af565b905061069281610b4c565b61069b816113cc565b935093509350509750975097945050505050565b6106b7613f5b565b6000846000815181106106c657fe5b602001015160f81c60f81b60f81c90506000856001815181106106e557fe5b602001015160f81c60f81b60f81c905060008660028151811061070457fe5b016020015160f81c9050600360606004840160ff166001600160401b038111801561072e57600080fd5b5060405190808252806020026020018201604052801561076857816020015b61075561403a565b81526020019060019003908161074d5790505b50905060608360040160ff166001600160401b038111801561078957600080fd5b506040519080825280602002602001820160405280156107c357816020015b6107b061403a565b8152602001906001900390816107a85790505b50905060005b8560ff168110156107ff576107de8b85611430565b8483815181106107ea57fe5b602090810291909101015293506001016107c9565b5060005b8460ff16811015610839576108188b85611430565b83838151811061082457fe5b60209081029190910101529350600101610803565b50610842614077565b61084c8b856115f2565b809250819550505060008b858151811061086257fe5b01602001516001959095019460f81c905061087b613f5b565b6040810183905261088b836116a3565b6060820152608081018f90528d3560c08201526020808f013560e08301526000610100830181905260408051808201825260ff8c811682528185018a905261012086019190915281518083019092528a8116825292810187905261014084015283821660018114610160850152918b166101808401526101a083018f90526101e083018e90526102008301526101c08201879052158061092e57508160ff166001145b6040518060400160405280600b81526020016a04241445f494d4d5f5459560ac1b815250906109db5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156109a0578181015183820152602001610988565b50505050905090810190601f1680156109cd5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506109e461403a565b60ff8316610a05576109fe8a836040015160000151611717565b9050610aa5565b6000865111604051806040016040528060068152602001654e4f5f494d4d60d01b81525090610a755760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a0578181015183820152602001610988565b50610aa28a8360400151600001518860018d0360ff1681518110610a9557fe5b602002602001015161177b565b90505b610aae81611801565b60408301515260005b838a0360ff16811015610af657610aee878281518110610ad357fe5b6020026020010151846040015161196e90919063ffffffff16565b600101610ab7565b5060005b8860ff16811015610b3757610b2f868281518110610b1457fe5b6020026020010151846040015161198890919063ffffffff16565b600101610afa565b50909f9e505050505050505050505050505050565b60008060006140e2610b6585610180015160ff166119a2565b93509350935093506000841180610b7f5750846101600151155b8015610b915750610120850151518410155b80610bb957508461016001518015610ba7575083155b8015610bb95750610120850151516001145b6040518060400160405280600a815260200169535441434b5f4d414e5960b01b81525090610c285760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a0578181015183820152602001610988565b50610140850151516040805180820190915260088152674155585f4d414e5960c01b602082015290841015610c9e5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a0578181015183820152602001610988565b5061012085015151841115610d5c57610cbd610cb8611ab2565b611801565b610cce866060015160200151611801565b146040518060400160405280600d81526020016c535441434b5f4d495353494e4760981b81525090610d415760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a0578181015183820152602001610988565b50610d4d856005611af9565b50610d5785611b70565b610e1c565b61014085015151831115610df757610d75610cb8611ab2565b610d86866060015160400151611801565b146040518060400160405280600b81526020016a4155585f4d495353494e4760a81b81525090610d415760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109a0578181015183820152602001610988565b610e018583611af9565b15610e0f57610d5785611b70565b610e1c858263ffffffff16565b84610200015115610ec15760408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051910120606086015160c001511415610e8357610e7e8560600151611b7b565b610ec1565b6000610200860152606085015160c081015190526101608501518015610ea7575083155b610eb657610120850151600090525b610140850151600090525b60005b61012086015151811015610f0d57610f05866101200151602001518281518110610eea57fe5b6020026020010151876060015161196e90919063ffffffff16565b600101610ec4565b5060005b61014086015151811015610f5a57610f52866101400151602001518281518110610f3757fe5b6020026020010151876060015161198890919063ffffffff16565b600101610f11565b505050505050565b6060610f718260000151611b86565b610f86610f818460200151611801565b611b86565b610f96610f818560400151611801565b610fa6610f818660600151611801565b610fb6610f818760800151611801565b610fc38760a00151611c55565b610fd08860c00151611b86565b610fe0610f818a60e00151611801565b60405160200180806709ac2c6d0d2dcca560c31b81525060080189805190602001908083835b602083106110255780518252601f199092019160209182019101611006565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528a516003909101928b0191508083835b6020831061107c5780518252601f19909201916020918201910161105d565b51815160209384036101000a60001901801990921691161790526216100560e91b9190930190815289516003909101928a0191508083835b602083106110d35780518252601f1990920191602091820191016110b4565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528851600390910192890191508083835b6020831061112a5780518252601f19909201916020918201910161110b565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528751600390910192880191508083835b602083106111815780518252601f199092019160209182019101611162565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528651600390910192870191508083835b602083106111d85780518252601f1990920191602091820191016111b9565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528551600390910192860191508083835b6020831061122f5780518252601f199092019160209182019101611210565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528451600390910192850191508083835b602083106112865780518252601f199092019160209182019101611267565b6001836020036101000a0380198251168184511680821785525050505050509050018061148560f11b8152506002019850505050505050505060405160208183030381529060405290505b919050565b6112de613ff4565b606061131d83846000815181106112f157fe5b602001015160f81c60f81b8560018151811061130957fe5b01602001516001600160f81b031916611d2f565b9050606061134a848560018151811061133257fe5b602001015160f81c60f81b8660028151811061130957fe5b90506060611377858660028151811061135f57fe5b602001015160f81c60f81b8760038151811061130957fe5b905060606113a4868760038151811061138c57fe5b602001015160f81c60f81b8860048151811061130957fe5b6040805160808101825295865260208601949094529284019190915250606082015292915050565b6000806113d761401c565b836101000151846080015160405180608001604052806113fa8860400151611dcc565b815260200161140c8860600151611dcc565b81526020018760c0015181526020018760e001518152509250925092509193909250565b600061143a61403a565b83518310611480576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b60008061148d8686611ea6565b91509150611499611ecd565b60ff168160ff1614156114cd5760006114b28784611ed2565b9093509050826114c182611f40565b945094505050506115eb565b6114d5612000565b60ff168160ff1614156114f7576114ec8683612005565b9350935050506115eb565b6114ff6120a7565b60ff168160ff1614156115275760006115188784611ed2565b9093509050826114c1826120ac565b61152f612198565b60ff168160ff161415611546576114ec868361219d565b61154e612232565b60ff168160ff161015801561156f5750611566612237565b60ff168160ff16105b156115ab57600061157e612232565b82039050606061158f82898661223c565b90945090508361159e826122e4565b95509550505050506115eb565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b60006115fc614077565b611604614077565b60006101008201819052806116198787611ed2565b9096509150611628878761219d565b60208501529550611639878761219d565b6040850152955061164a8787611430565b6060850152955061165b8787611430565b6080850152955061166c8787611ed2565b60a0850152955061167d8787611ed2565b909650905061168c8787611430565b60e085015291835260c08301529590945092505050565b6116ab614077565b60405180610120016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e0015181526020018361010001518152509050919050565b61171f61403a565b6040805160608101825260ff8516815260208082018590528251600080825291810184526117729383019161176a565b61175761403a565b81526020019060019003908161174f5790505b509052612425565b90505b92915050565b61178361403a565b604080516001808252818301909252606091816020015b6117a261403a565b81526020019060019003908161179a57905050905082816000815181106117c557fe5b60200260200101819052506117f660405180606001604052808760ff16815260200186815260200183815250612425565b9150505b9392505050565b600061180b611ecd565b60ff16826080015160ff16141561182e578151611827906124b5565b90506112d1565b611836612000565b60ff16826080015160ff1614156118545761182782602001516124d9565b61185c612198565b60ff16826080015160ff16141561187e57815160a083015161182791906125ce565b611886612232565b60ff16826080015160ff1614156118bf5761189f61403a565b6118ac836040015161261c565b90506118b781611801565b9150506112d1565b6118c7612791565b60ff16826080015160ff1614156118e0575080516112d1565b6118e86120a7565b60ff16826080015160ff16141561192d575060608082015160408051607b602080830191909152818301939093528151808203830181529301905281519101206112d1565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b61197c826020015182612796565b82602001819052505050565b611996826040015182612796565b82604001819052505050565b600080806140e260a18514156119c757506002925060009150600a90506128146105e9565b60a28514156119e557506002925060009150600a90506128cb6105e9565b60a3851415611a0357506002925060009150600a905061295f6105e9565b60a4851415611a2157506003925060009150606490506129f36105e9565b60a5851415611a3f5750600392506000915060649050612ae46105e9565b60a6851415611a5d5750600392506000915060649050612bb86105e9565b6070851415611a7b5750600292506000915060649050612c7a6105e9565b60405162461bcd60e51b815260040180806020018281038252602c81526020018061411e602c913960400191505060405180910390fd5b611aba61403a565b60408051600080825260208201909252611af491611aee565b611adb61403a565b815260200190600190039081611ad35790505b506122e4565b905090565b6000816001600160401b0316836060015160a001511015611b3f5750610100820180516005016001600160401b03169052606082015160001960a0909101526001611775565b50610100820180516001600160401b039083018116909152606083015160a001805191831690910390526000611775565b600161020090910152565b600161010090910152565b60408051818152606081810183529182919060208201818036833701905050905060005b6020811015611c4e576000848260208110611bc157fe5b1a60f881811b9250601080830480831b9360ff9091169091029003901b611be782612e16565b858560020281518110611bf657fe5b60200101906001600160f81b031916908160001a905350611c1681612e16565b858560020260010181518110611c2857fe5b60200101906001600160f81b031916908160001a9053505060019092019150611baa9050565b5092915050565b60608180611c7c5750506040805180820190915260018152600360fc1b60208201526112d1565b8060005b8115611c9457600101600a82049150611c80565b6060816001600160401b0381118015611cac57600080fd5b506040519080825280601f01601f191660200182016040528015611cd7576020820181803683370190505b50905060001982015b8415611d2557600a850660300160f81b82828060019003935081518110611d0357fe5b60200101906001600160f81b031916908160001a905350600a85049450611ce0565b5095945050505050565b606060f883811c9083901c81900360ff169082826001600160401b0381118015611d5857600080fd5b50604051908082528060200260200182016040528015611d82578160200160208202803683370190505b50905060005b83811015611dc157611d9f88828501602002612e47565b60001b828281518110611dae57fe5b6020908102919091010152600101611d88565b509695505050505050565b600060028261010001511415611de4575060006112d1565b60018261010001511415611dfa575060016112d1565b81516020830151611e0a90611801565b611e178460400151611801565b611e248560600151611801565b611e318660800151611801565b8660a001518760c00151611e488960e00151611801565b60405160200180898152602001888152602001878152602001868152602001858152602001848152602001838152602001828152602001985050505050505050506040516020818303038152906040528051906020012090506112d1565b60008082600101848481518110611eb957fe5b016020015190925060f81c90509250929050565b600090565b60008082845110158015611eea575060208385510310155b611f27576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b60208301611f358585612e87565b915091509250929050565b611f4861403a565b6040805160c0810182528381528151606081018352600080825260208083018290528451828152808201865293949085019390830191611f9e565b611f8b61403a565b815260200190600190039081611f835790505b50905281526020016000604051908082528060200260200182016040528015611fe157816020015b611fce61403a565b815260200190600190039081611fc65790505b5081526000602082018190526040820152600160609091015292915050565b600190565b600061200f61403a565b8260008061201b61403a565b60006120278986611ea6565b90955093506120368986611ea6565b9095509250600160ff85161415612057576120518986611430565b90955091505b6120618986612ee0565b9095509050600160ff8516141561208c578461207e84838561177b565b9650965050505050506115eb565b846120978483611717565b9650965050505050509250929050565b600c90565b6120b461403a565b6040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b03811180156120fb57600080fd5b5060405190808252806020026020018201604052801561213557816020015b61212261403a565b81526020019060019003908161211a5790505b5090528152602001600060405190808252806020026020018201604052801561217857816020015b61216561403a565b81526020019060019003908161215d5790505b50815260208101849052600c604082015260016060909101529050919050565b600290565b60006121a761403a565b828451101580156121bc575060408385510310155b6121f9576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b6000806122068686612ee0565b90945091506122158685611ed2565b9094509050836122258383612ef1565b9350935050509250929050565b600390565b600d90565b60006060828160ff87166001600160401b038111801561225b57600080fd5b5060405190808252806020026020018201604052801561229557816020015b61228261403a565b81526020019060019003908161227a5790505b50905060005b8760ff168160ff1610156122d7576122b38784611430565b838360ff16815181106122c257fe5b6020908102919091010152925060010161229b565b5090969095509350505050565b6122ec61403a565b6122f68251612fb0565b612347576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b835181101561237e5783818151811061236157fe5b602002602001015160a0015182019150808060010191505061234c565b506040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b03811180156123c657600080fd5b5060405190808252806020026020018201604052801561240057816020015b6123ed61403a565b8152602001906001900390816123e55790505b5090528152602081019490945260006040850152600360608501526080909301525090565b61242d61403a565b6040518060c001604052806000815260200183815260200160006001600160401b038111801561245c57600080fd5b5060405190808252806020026020018201604052801561249657816020015b61248361403a565b81526020019060019003908161247b5790505b5081526000602082015260016040820181905260609091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b60006002826040015151106124ea57fe5b60408201515161254d576124fc612000565b82600001518360200151604051602001808460ff1660f81b81526001018360ff1660f81b815260010182815260200193505050506040516020818303038152906040528051906020012090506112d1565b612555612000565b826000015161257b846040015160008151811061256e57fe5b6020026020010151611801565b8460200151604051602001808560ff1660f81b81526001018460ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b60006125d8612232565b8383604051602001808460ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b61262461403a565b600882511115612672576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b606082516001600160401b038111801561268b57600080fd5b506040519080825280602002602001820160405280156126b5578160200160208202803683370190505b508051909150600160005b82811015612718576126d786828151811061256e57fe5b8482815181106126e357fe5b6020026020010181815250508581815181106126fb57fe5b602002602001015160a001518201915080806001019150506126c0565b506000835184604051602001808360ff1660f81b8152600101828051906020019060200280838360005b8381101561275a578181015183820152602001612742565b50505050905001925050506040516020818303038152906040528051906020012090506127878183612ef1565b9695505050505050565b606490565b61279e61403a565b6040805160028082526060828101909352816020015b6127bc61403a565b8152602001906001900390816127b457905050905082816000815181106127df57fe5b602002602001018190525083816001815181106127f857fe5b602002602001018190525061280c8161261c565b949350505050565b61281c61403a565b61282a826101200151612fb7565b905061283461403a565b612842836101200151612fb7565b905061284d82612ff9565b158061285f575061285d81613017565b155b156128745761286d83613024565b50506128c8565b8151600160401b116128895761286d83613024565b60006128ab826060015184600001516128a6876101e001516112d6565b61302d565b90506128c48461012001516128bf83611f40565b61304f565b5050505b50565b6128d361403a565b6128e1826101200151612fb7565b90506128eb61403a565b6128f9836101200151612fb7565b905061290482612ff9565b1580612916575061291481613017565b155b156129245761286d83613024565b815167fffffffffffffff91161293d5761286d83613024565b60006128ab8260600151846000015161295a876101e001516112d6565b613079565b61296761403a565b612975826101200151612fb7565b905061297f61403a565b61298d836101200151612fb7565b905061299882612ff9565b15806129aa57506129a881613017565b155b156129b85761286d83613024565b815167ffffffffffffffe1116129d15761286d83613024565b60006128ab826060015184600001516129ee876101e001516112d6565b6131d8565b6129fb61403a565b612a09826101200151612fb7565b9050612a1361403a565b612a21836101200151612fb7565b9050612a2b61403a565b612a39846101200151612fb7565b9050612a4483612ff9565b1580612a565750612a548261330b565b155b80612a675750612a6581613017565b155b15612a7d57612a7584613024565b5050506128c8565b8251600160401b111580612a945750815161010011155b15612aa257612a7584613024565b6000612ac9826060015185600001518560000151612ac4896101e001516112d6565b613316565b9050612add8561012001516128bf836120ac565b5050505050565b612aec61403a565b612afa826101200151612fb7565b9050612b0461403a565b612b12836101200151612fb7565b9050612b1c61403a565b612b2a846101200151612fb7565b9050612b3583612ff9565b1580612b475750612b458261330b565b155b80612b585750612b5681613017565b155b15612b6657612a7584613024565b825167fffffffffffffff9111580612b8357508151600160401b11155b15612b9157612a7584613024565b6000612ac9826060015185600001518560000151612bb3896101e001516112d6565b61335f565b612bc061403a565b612bce826101200151612fb7565b9050612bd861403a565b612be6836101200151612fb7565b9050612bf061403a565b612bfe846101200151612fb7565b9050612c0983612ff9565b1580612c1b5750612c198261330b565b155b80612c2c5750612c2a81613017565b155b15612c3a57612a7584613024565b825167ffffffffffffffe111612c5357612a7584613024565b6000612ac9826060015185600001518560000151612c75896101e001516112d6565b6134a8565b612c8261403a565b612c90826101200151612fb7565b9050612c9a61403a565b612ca8836101200151612fb7565b9050612cb382612ff9565b1580612cc55750612cc381613017565b155b15612cd35761286d83613024565b81516127101080612ce357508151155b15612cf15761286d83613024565b826101a0015151836101c001511415612d6c57612d2481606001518360000151612d1f866101e001516112d6565b61357a565b15612d63576040805162461bcd60e51b815260206004820152600a602482015269084aa8cbe988a9c8ea8960b31b604482015290519081900360640190fd5b61286d83613024565b6101c083015182516101a08501516000612d878285856135ce565b905080612d9386611801565b14612dd2576040805162461bcd60e51b815260206004820152600a60248201526915d493d391d7d4d1539160b21b604482015290519081900360640190fd5b5090910160209081019190912060c0850180516040805180860192909252818101939093528251808203840181526060909101909252815191909201209052505050565b6000600a60f883901c1015612e36578160f81c60300160f81b90506112d1565b8160f81c60570160f81b90506112d1565b600080805b6020811015612e7f57600882901b91508481850181518110612e6a57fe5b016020015160f81c9190911790600101612e4c565b509392505050565b60008160200183511015612ed7576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b60008060208301611f358585612e87565b612ef961403a565b6040805160c0810182528481528151606081018352600080825260208083018290528451828152808201865293949085019390830191612f4f565b612f3c61403a565b815260200190600190039081612f345790505b50905281526020016000604051908082528060200260200182016040528015612f9257816020015b612f7f61403a565b815260200190600190039081612f775790505b50815260006020820152600260408201526060019290925250919050565b6008101590565b612fbf61403a565b612fc761403a565b8260200151600184600001510381518110612fde57fe5b60209081029190910101518351600019018452915050919050565b608081015160009060ff1615801561177557505051600160401b1190565b6080015160ff16600c1490565b6128c881611b70565b600061280c613045856020865b048560000151613600565b6020855b0661376e565b80826020015183600001518151811061306457fe5b60209081029190910101525080516001019052565b6040805160088082528183019092526000916060919060208201818036833701905050905060006130b3866020875b048660000151613600565b90506020808606600801106131865760006130da876020885b046001018760400151613600565b905060005b6018601f88166008030181101561312e57613100838260208a5b060161376e565b60f81b84828151811061310f57fe5b60200101906001600160f81b031916908160001a9053506001016130df565b506018601f8716600803015b600881101561317f57613151826020898401613049565b60f81b84828151811061316057fe5b60200101906001600160f81b031916908160001a90535060010161313a565b50506131cf565b60005b60088110156131cd5761319f82826020896130f9565b60f81b8382815181106131ae57fe5b60200101906001600160f81b031916908160001a905350600101613189565b505b6127878261377b565b60408051602080825281830190925260009160609190602082018180368337019050509050600061320b866020876130a8565b90506020808606602001106132c4576000613228876020886130cc565b905060005b601f871660200381101561327657613248838260208a6130f9565b60f81b84828151811061325757fe5b60200101906001600160f81b031916908160001a90535060010161322d565b50601f86166008035b602081101561317f57613296826020898401613049565b60f81b8482815181106132a557fe5b60200101906001600160f81b031916908160001a90535060010161327f565b60005b60208110156131cd576132dd82826020896130f9565b60f81b8382815181106132ec57fe5b60200101906001600160f81b031916908160001a9053506001016132c7565b6080015160ff161590565b6000806133258660208761303a565b905060006133378260208806876137b1565b90506000613353886020890484886000015189602001516137f0565b98975050505050505050565b6000606061336c84613896565b9050600061337c876020886130a8565b90506020808706600801111561345e5760005b6018601f8816600803018110156133d7576133cd826020898401068584601801815181106133b957fe5b01602001516001600160f81b031916613900565b915060010161338f565b506133f1876020885b0483876000015188602001516137f0565b96506000613401886020896130cc565b90506018601f8816600803015b600881101561343a576134308260208a8401068684601801815181106133b957fe5b915060010161340e565b50613456886020890460010183886040015189606001516137f0565b97505061349d565b60005b600881101561348d57613483828260208a06018584601801815181106133b957fe5b9150600101613461565b5061349a876020886133e0565b96505b509495945050505050565b600060606134b584613896565b905060006134c5876020886130a8565b9050602080870660200111156135575760005b601f8716602003811015613507576134fd828260208a5b06018584815181106133b957fe5b91506001016134d8565b50613514876020886133e0565b96506000613524886020896130cc565b9050601f87166020035b602081101561343a5761354d8260208a8401068684815181106133b957fe5b915060010161352e565b60005b602081101561348d57613570828260208a6134ef565b915060010161355a565b6000806135898560208661303a565b9050601f84165b60208110156135bb576135a3828261376e565b156135b3576000925050506117fa565b600101613590565b506117f68560208604856000015161391c565b6000806135e685856135df86613a98565b6001613ac3565b5085519091506117f6906135fb607b84613b97565b613b97565b60008151600014156136695761361660006124b5565b8414613661576040805162461bcd60e51b815260206004820152601560248201527432bc3832b1ba32b21032b6b83a3c90313ab33332b960591b604482015290519081900360640190fd5b5060006117fa565b60006136888360008151811061367b57fe5b60200260200101516124b5565b905060015b83518110156136f25784600116600114156136c6576136bf8482815181106136b157fe5b602002602001015183613b97565b91506136e6565b6136e3828583815181106136d657fe5b6020026020010151613b97565b91505b600194851c940161368d565b5084811461373f576040805162461bcd60e51b8152602060048201526015602482015274195e1c1958dd19590818dbdc9c9958dd081c9bdbdd605a1b604482015290519081900360640190fd5b831561374f5750600090506117fa565b8260008151811061375c57fe5b60200260200101519150509392505050565b601f036008021c60ff1690565b600080805b8351811015611c4e57600882901b915083818151811061379c57fe5b016020015160f81c9190911790600101613780565b600060606137be85613896565b90508260f81b8185815181106137d057fe5b60200101906001600160f81b031916908160001a9053506117f68161377b565b60008151600314613848576040805162461bcd60e51b815260206004820152601760248201527f4241445f4e4f524d414c495a4154494f4e5f50524f4f46000000000000000000604482015290519081900360640190fd5b612787868686868660008151811061385c57fe5b602002602001015160001c8760018151811061387457fe5b60200260200101518860028151811061388957fe5b6020026020010151613bc3565b6040805160208082528183019092526060918391839160208201818036833701905050905060005b6020811015612e7f578260f81b8282601f03815181106138da57fe5b60200101906001600160f81b031916908160001a90535060089290921c916001016138be565b6000606061390d85613896565b9050828185815181106137d057fe5b60008151600014156139855761393260006124b5565b841461397d576040805162461bcd60e51b815260206004820152601560248201527432bc3832b1ba32b21032b6b83a3c90313ab33332b960591b604482015290519081900360640190fd5b5060016117fa565b60006139978360008151811061367b57fe5b9050600160606139a5613e3d565b905060015b8551811015613a395786600116600114156139e3576139dc8682815181106139ce57fe5b602002602001015185613b97565b9350613a2d565b6139f3848783815181106136d657fe5b9350828015613a2a5750816001820381518110613a0c57fe5b6020026020010151868281518110613a2057fe5b6020026020010151145b92505b600196871c96016139aa565b50868314613a86576040805162461bcd60e51b8152602060048201526015602482015274195e1c1958dd19590818dbdc9c9958dd081c9bdbdd605a1b604482015290519081900360640190fd5b8515611d2557600193505050506117fa565b600060018211613aaa575060016112d1565b613ab960026001840104613a98565b60020290506112d1565b60008060208411613b175785518510613aeb57613ae060006124b5565b600191509150613b8e565b6000613aff613afa8888613ede565b6124b5565b905080613b0c60006124b5565b909350149050613b8e565b600080613b30886002880489016002895b046000613ac3565b91509150808015613b3e5750845b15613b5d57613b5288886002890488613ac3565b935093505050613b8e565b600080613b6d8a8a60028b613b28565b91509150613b7b8285613b97565b818015613b855750835b95509550505050505b94509492505050565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600080613bcf876124b5565b9050613bdc898988613600565b506060613be7613e3d565b905060018751036001901b8910613cab5787613c07578992505050613e32565b6000613c128a613f35565b88519091505b60018203811015613c4057613c368c8460018403815181106136d657fe5b9b50600101613c18565b5060015b60018203811015613c96578a60011660011415613c7457613c6d8360018303815181106139ce57fe5b9350613c8a565b613c87848460018403815181106136d657fe5b93505b60019a8b1c9a01613c44565b50613ca18b84613b97565b9350505050613e32565b60015b8751811015613d2b5760008a600116600114613cca5783613cdf565b888281518110613cd657fe5b60200260200101515b905060008b600116600114613d0757898381518110613cfa57fe5b6020026020010151613d09565b845b9050613d158282613b97565b60019c8d1c9c909550929092019150613cae9050565b508715613d3a57509050613e32565b600086613d48575084613dbd565b818781518110613d5457fe5b6020026020010151851415613db0576040805162461bcd60e51b815260206004820152601c60248201527f726967687420737562747265652063616e6e6f74206265207a65726f00000000604482015290519081900360640190fd5b613dba8686613b97565b90505b80875b60018a5103811015613de657613ddc828583815181106136d657fe5b9150600101613dc0565b50838114613e2c576040805162461bcd60e51b815260206004820152600e60248201526d0caf0e0cac6e8cac840dac2e8c6d60931b604482015290519081900360640190fd5b50925050505b979650505050505050565b60408051818152610820810182526060918291906020820161080080368337019050509050613e6c60006124b5565b81600081518110613e7957fe5b602090810291909101015260015b6040811015613ed857613eb9826001830381518110613ea257fe5b60200260200101518360018403815181106136d657fe5b828281518110613ec557fe5b6020908102919091010152600101613e87565b50905090565b600080805b6020811015612e7f57600882901b91506000818501865111613f06576000613f24565b8582860181518110613f1457fe5b01602001516001600160f81b0319165b60f81c929092179150600101613ee3565b600081613f44575060016112d1565b613f51600183901c613f35565b60010190506112d1565b604080516102208101825260008082526020820152908101613f7b614077565b8152602001613f88614077565b815260006020820181905260408201819052606082018190526080820181905260a082015260c001613fb86140e4565b8152602001613fc56140e4565b81526000602082018190526040820181905260608083018190526080830182905260a083015260c09091015290565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b60405180608001604052806004906020820280368337509192915050565b6040518060c00160405280600081526020016140546140fe565b815260606020820181905260006040830181905290820181905260809091015290565b604080516101208101909152600081526020810161409361403a565b81526020016140a061403a565b81526020016140ad61403a565b81526020016140ba61403a565b815260006020820181905260408201526060016140d561403a565b8152602001600081525090565bfe5b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fe75736520616e6f7468657220636f6e747261637420746f2068616e646c65206f74686572206f70636f646573a26469706673582212204501018092dfde9bcce425f78e5c44208394814286c93d68b4f71e72b1778ddf64736f6c634300060c0033"

// DeployOneStepProof2 deploys a new Ethereum contract, binding an instance of OneStepProof2 to it.
func DeployOneStepProof2(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof2, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProof2ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProof2Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof2{OneStepProof2Caller: OneStepProof2Caller{contract: contract}, OneStepProof2Transactor: OneStepProof2Transactor{contract: contract}, OneStepProof2Filterer: OneStepProof2Filterer{contract: contract}}, nil
}

// OneStepProof2 is an auto generated Go binding around an Ethereum contract.
type OneStepProof2 struct {
	OneStepProof2Caller     // Read-only binding to the contract
	OneStepProof2Transactor // Write-only binding to the contract
	OneStepProof2Filterer   // Log filterer for contract events
}

// OneStepProof2Caller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProof2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProof2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProof2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProof2Session struct {
	Contract     *OneStepProof2    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProof2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProof2CallerSession struct {
	Contract *OneStepProof2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// OneStepProof2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProof2TransactorSession struct {
	Contract     *OneStepProof2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// OneStepProof2Raw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProof2Raw struct {
	Contract *OneStepProof2 // Generic contract binding to access the raw methods on
}

// OneStepProof2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProof2CallerRaw struct {
	Contract *OneStepProof2Caller // Generic read-only contract binding to access the raw methods on
}

// OneStepProof2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProof2TransactorRaw struct {
	Contract *OneStepProof2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof2 creates a new instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2(address common.Address, backend bind.ContractBackend) (*OneStepProof2, error) {
	contract, err := bindOneStepProof2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2{OneStepProof2Caller: OneStepProof2Caller{contract: contract}, OneStepProof2Transactor: OneStepProof2Transactor{contract: contract}, OneStepProof2Filterer: OneStepProof2Filterer{contract: contract}}, nil
}

// NewOneStepProof2Caller creates a new read-only instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Caller(address common.Address, caller bind.ContractCaller) (*OneStepProof2Caller, error) {
	contract, err := bindOneStepProof2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Caller{contract: contract}, nil
}

// NewOneStepProof2Transactor creates a new write-only instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Transactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProof2Transactor, error) {
	contract, err := bindOneStepProof2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Transactor{contract: contract}, nil
}

// NewOneStepProof2Filterer creates a new log filterer instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Filterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProof2Filterer, error) {
	contract, err := bindOneStepProof2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Filterer{contract: contract}, nil
}

// bindOneStepProof2 binds a generic wrapper to an already deployed contract.
func bindOneStepProof2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProof2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof2 *OneStepProof2Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProof2.Contract.OneStepProof2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof2 *OneStepProof2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof2.Contract.OneStepProof2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof2 *OneStepProof2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof2.Contract.OneStepProof2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof2 *OneStepProof2CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProof2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof2 *OneStepProof2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof2 *OneStepProof2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof2.Contract.contract.Transact(opts, method, params...)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x9d16dd04.
//
// Solidity: function executeStep(address bridge, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 totalMessagesRead, bytes32[4] fields)
func (_OneStepProof2 *OneStepProof2Caller) ExecuteStep(opts *bind.CallOpts, bridge common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	TotalMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	var out []interface{}
	err := _OneStepProof2.contract.Call(opts, &out, "executeStep", bridge, initialMessagesRead, accs, proof, bproof)

	outstruct := new(struct {
		Gas               uint64
		TotalMessagesRead *big.Int
		Fields            [4][32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Gas = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.TotalMessagesRead = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Fields = *abi.ConvertType(out[2], new([4][32]byte)).(*[4][32]byte)

	return *outstruct, err

}

// ExecuteStep is a free data retrieval call binding the contract method 0x9d16dd04.
//
// Solidity: function executeStep(address bridge, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 totalMessagesRead, bytes32[4] fields)
func (_OneStepProof2 *OneStepProof2Session) ExecuteStep(bridge common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	TotalMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	return _OneStepProof2.Contract.ExecuteStep(&_OneStepProof2.CallOpts, bridge, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x9d16dd04.
//
// Solidity: function executeStep(address bridge, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 totalMessagesRead, bytes32[4] fields)
func (_OneStepProof2 *OneStepProof2CallerSession) ExecuteStep(bridge common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	TotalMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	return _OneStepProof2.Contract.ExecuteStep(&_OneStepProof2.CallOpts, bridge, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0x2ccebb7a.
//
// Solidity: function executeStepDebug(address bridge, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProof2 *OneStepProof2Caller) ExecuteStepDebug(opts *bind.CallOpts, bridge common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	var out []interface{}
	err := _OneStepProof2.contract.Call(opts, &out, "executeStepDebug", bridge, initialMessagesRead, accs, proof, bproof)

	outstruct := new(struct {
		StartMachine string
		AfterMachine string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.StartMachine = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.AfterMachine = *abi.ConvertType(out[1], new(string)).(*string)

	return *outstruct, err

}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0x2ccebb7a.
//
// Solidity: function executeStepDebug(address bridge, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProof2 *OneStepProof2Session) ExecuteStepDebug(bridge common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	return _OneStepProof2.Contract.ExecuteStepDebug(&_OneStepProof2.CallOpts, bridge, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0x2ccebb7a.
//
// Solidity: function executeStepDebug(address bridge, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProof2 *OneStepProof2CallerSession) ExecuteStepDebug(bridge common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	return _OneStepProof2.Contract.ExecuteStepDebug(&_OneStepProof2.CallOpts, bridge, initialMessagesRead, accs, proof, bproof)
}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2Caller) ParseProof(opts *bind.CallOpts, proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	var out []interface{}
	err := _OneStepProof2.contract.Call(opts, &out, "parseProof", proof)

	if err != nil {
		return *new([][32]byte), *new([][32]byte), *new([][32]byte), *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)
	out1 := *abi.ConvertType(out[1], new([][32]byte)).(*[][32]byte)
	out2 := *abi.ConvertType(out[2], new([][32]byte)).(*[][32]byte)
	out3 := *abi.ConvertType(out[3], new([][32]byte)).(*[][32]byte)

	return out0, out1, out2, out3, err

}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2Session) ParseProof(proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	return _OneStepProof2.Contract.ParseProof(&_OneStepProof2.CallOpts, proof)
}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2CallerSession) ParseProof(proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	return _OneStepProof2.Contract.ParseProof(&_OneStepProof2.CallOpts, proof)
}
