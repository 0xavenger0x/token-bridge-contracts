/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface ArbSysInterface extends ethers.utils.Interface {
  functions: {
    'arbOSVersion()': FunctionFragment
    'getStorageAt(address,uint256)': FunctionFragment
    'getTransactionCount(address)': FunctionFragment
    'sendTxToL1(address,bytes)': FunctionFragment
    'withdrawEth(address)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'arbOSVersion',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getStorageAt',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getTransactionCount',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'sendTxToL1',
    values: [string, BytesLike]
  ): string
  encodeFunctionData(functionFragment: 'withdrawEth', values: [string]): string

  decodeFunctionResult(
    functionFragment: 'arbOSVersion',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getStorageAt',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getTransactionCount',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'sendTxToL1', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawEth', data: BytesLike): Result

  events: {
    'EthWithdrawal(address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'EthWithdrawal'): EventFragment
}

export class ArbSys extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: ArbSysInterface

  functions: {
    arbOSVersion(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    'arbOSVersion()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    getStorageAt(
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    'getStorageAt(address,uint256)'(
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    getTransactionCount(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    'getTransactionCount(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    sendTxToL1(
      destAddr: string,
      calldataForL1: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'sendTxToL1(address,bytes)'(
      destAddr: string,
      calldataForL1: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    withdrawEth(
      dest: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'withdrawEth(address)'(
      dest: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>
  }

  arbOSVersion(overrides?: CallOverrides): Promise<BigNumber>

  'arbOSVersion()'(overrides?: CallOverrides): Promise<BigNumber>

  getStorageAt(
    account: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getStorageAt(address,uint256)'(
    account: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getTransactionCount(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getTransactionCount(address)'(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  sendTxToL1(
    destAddr: string,
    calldataForL1: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'sendTxToL1(address,bytes)'(
    destAddr: string,
    calldataForL1: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  withdrawEth(
    dest: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'withdrawEth(address)'(
    dest: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  callStatic: {
    arbOSVersion(overrides?: CallOverrides): Promise<BigNumber>

    'arbOSVersion()'(overrides?: CallOverrides): Promise<BigNumber>

    getStorageAt(
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getStorageAt(address,uint256)'(
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getTransactionCount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getTransactionCount(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    sendTxToL1(
      destAddr: string,
      calldataForL1: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'sendTxToL1(address,bytes)'(
      destAddr: string,
      calldataForL1: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    withdrawEth(dest: string, overrides?: CallOverrides): Promise<void>

    'withdrawEth(address)'(
      dest: string,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    EthWithdrawal(destAddr: string | null, amount: null): EventFilter
  }

  estimateGas: {
    arbOSVersion(overrides?: CallOverrides): Promise<BigNumber>

    'arbOSVersion()'(overrides?: CallOverrides): Promise<BigNumber>

    getStorageAt(
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getStorageAt(address,uint256)'(
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getTransactionCount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getTransactionCount(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    sendTxToL1(
      destAddr: string,
      calldataForL1: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'sendTxToL1(address,bytes)'(
      destAddr: string,
      calldataForL1: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    withdrawEth(dest: string, overrides?: PayableOverrides): Promise<BigNumber>

    'withdrawEth(address)'(
      dest: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    arbOSVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'arbOSVersion()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getStorageAt(
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getStorageAt(address,uint256)'(
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getTransactionCount(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getTransactionCount(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    sendTxToL1(
      destAddr: string,
      calldataForL1: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'sendTxToL1(address,bytes)'(
      destAddr: string,
      calldataForL1: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    withdrawEth(
      dest: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'withdrawEth(address)'(
      dest: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>
  }
}
