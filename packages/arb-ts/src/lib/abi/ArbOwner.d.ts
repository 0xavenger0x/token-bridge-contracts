/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface ArbOwnerInterface extends ethers.utils.Interface {
  functions: {
    'changeSequencer(address,uint256,uint256)': FunctionFragment
    'continueArbosUpgrade(bytes)': FunctionFragment
    'finishArbosUpgrade()': FunctionFragment
    'giveOwnership(address)': FunctionFragment
    'startArbosUpgrade()': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'changeSequencer',
    values: [string, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'continueArbosUpgrade',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'finishArbosUpgrade',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'giveOwnership',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'startArbosUpgrade',
    values?: undefined
  ): string

  decodeFunctionResult(
    functionFragment: 'changeSequencer',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'continueArbosUpgrade',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'finishArbosUpgrade',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'giveOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'startArbosUpgrade',
    data: BytesLike
  ): Result

  events: {}
}

export class ArbOwner extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: ArbOwnerInterface

  functions: {
    changeSequencer(
      sequencerAddr: string,
      maxDelayBlocks: BigNumberish,
      maxDelaySeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'changeSequencer(address,uint256,uint256)'(
      sequencerAddr: string,
      maxDelayBlocks: BigNumberish,
      maxDelaySeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    continueArbosUpgrade(
      marshalledCode: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'continueArbosUpgrade(bytes)'(
      marshalledCode: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    finishArbosUpgrade(overrides?: Overrides): Promise<ContractTransaction>

    'finishArbosUpgrade()'(overrides?: Overrides): Promise<ContractTransaction>

    giveOwnership(
      newOwnerAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'giveOwnership(address)'(
      newOwnerAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    startArbosUpgrade(overrides?: Overrides): Promise<ContractTransaction>

    'startArbosUpgrade()'(overrides?: Overrides): Promise<ContractTransaction>
  }

  changeSequencer(
    sequencerAddr: string,
    maxDelayBlocks: BigNumberish,
    maxDelaySeconds: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'changeSequencer(address,uint256,uint256)'(
    sequencerAddr: string,
    maxDelayBlocks: BigNumberish,
    maxDelaySeconds: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  continueArbosUpgrade(
    marshalledCode: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'continueArbosUpgrade(bytes)'(
    marshalledCode: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  finishArbosUpgrade(overrides?: Overrides): Promise<ContractTransaction>

  'finishArbosUpgrade()'(overrides?: Overrides): Promise<ContractTransaction>

  giveOwnership(
    newOwnerAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'giveOwnership(address)'(
    newOwnerAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  startArbosUpgrade(overrides?: Overrides): Promise<ContractTransaction>

  'startArbosUpgrade()'(overrides?: Overrides): Promise<ContractTransaction>

  callStatic: {
    changeSequencer(
      sequencerAddr: string,
      maxDelayBlocks: BigNumberish,
      maxDelaySeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'changeSequencer(address,uint256,uint256)'(
      sequencerAddr: string,
      maxDelayBlocks: BigNumberish,
      maxDelaySeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    continueArbosUpgrade(
      marshalledCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'continueArbosUpgrade(bytes)'(
      marshalledCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    finishArbosUpgrade(overrides?: CallOverrides): Promise<void>

    'finishArbosUpgrade()'(overrides?: CallOverrides): Promise<void>

    giveOwnership(
      newOwnerAddr: string,
      overrides?: CallOverrides
    ): Promise<void>

    'giveOwnership(address)'(
      newOwnerAddr: string,
      overrides?: CallOverrides
    ): Promise<void>

    startArbosUpgrade(overrides?: CallOverrides): Promise<void>

    'startArbosUpgrade()'(overrides?: CallOverrides): Promise<void>
  }

  filters: {}

  estimateGas: {
    changeSequencer(
      sequencerAddr: string,
      maxDelayBlocks: BigNumberish,
      maxDelaySeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'changeSequencer(address,uint256,uint256)'(
      sequencerAddr: string,
      maxDelayBlocks: BigNumberish,
      maxDelaySeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    continueArbosUpgrade(
      marshalledCode: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'continueArbosUpgrade(bytes)'(
      marshalledCode: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    finishArbosUpgrade(overrides?: Overrides): Promise<BigNumber>

    'finishArbosUpgrade()'(overrides?: Overrides): Promise<BigNumber>

    giveOwnership(
      newOwnerAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'giveOwnership(address)'(
      newOwnerAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    startArbosUpgrade(overrides?: Overrides): Promise<BigNumber>

    'startArbosUpgrade()'(overrides?: Overrides): Promise<BigNumber>
  }

  populateTransaction: {
    changeSequencer(
      sequencerAddr: string,
      maxDelayBlocks: BigNumberish,
      maxDelaySeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'changeSequencer(address,uint256,uint256)'(
      sequencerAddr: string,
      maxDelayBlocks: BigNumberish,
      maxDelaySeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    continueArbosUpgrade(
      marshalledCode: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'continueArbosUpgrade(bytes)'(
      marshalledCode: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    finishArbosUpgrade(overrides?: Overrides): Promise<PopulatedTransaction>

    'finishArbosUpgrade()'(overrides?: Overrides): Promise<PopulatedTransaction>

    giveOwnership(
      newOwnerAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'giveOwnership(address)'(
      newOwnerAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    startArbosUpgrade(overrides?: Overrides): Promise<PopulatedTransaction>

    'startArbosUpgrade()'(overrides?: Overrides): Promise<PopulatedTransaction>
  }
}
