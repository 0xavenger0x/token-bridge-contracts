/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface EthERC20BridgeInterface extends ethers.utils.Interface {
  functions: {
    'buddyCreated(bool)': FunctionFragment
    'connectToChain(uint256,uint256)': FunctionFragment
    'customL2Tokens(address)': FunctionFragment
    'depositAsERC20(address,address,uint256,uint256,uint256)': FunctionFragment
    'depositAsERC777(address,address,uint256,uint256,uint256)': FunctionFragment
    'fastWithdrawalFromL2(address,bytes,address,uint256,uint256)': FunctionFragment
    'notifyCustomToken(address,uint256,uint256)': FunctionFragment
    'registerCustomL2Token(address)': FunctionFragment
    'updateTokenInfo(address,uint256,uint256,bool)': FunctionFragment
    'withdrawFromL2(uint256,address,address,uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'buddyCreated',
    values: [boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'connectToChain',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'customL2Tokens',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'depositAsERC20',
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'depositAsERC777',
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'fastWithdrawalFromL2',
    values: [string, BytesLike, string, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'notifyCustomToken',
    values: [string, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'registerCustomL2Token',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'updateTokenInfo',
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawFromL2',
    values: [BigNumberish, string, string, BigNumberish]
  ): string

  decodeFunctionResult(
    functionFragment: 'buddyCreated',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'connectToChain',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'customL2Tokens',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'depositAsERC20',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'depositAsERC777',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'fastWithdrawalFromL2',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'notifyCustomToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'registerCustomL2Token',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateTokenInfo',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'withdrawFromL2',
    data: BytesLike
  ): Result

  events: {}
}

export class EthERC20Bridge extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: EthERC20BridgeInterface

  functions: {
    buddyCreated(
      successful: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'buddyCreated(bool)'(
      successful: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    connectToChain(
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'connectToChain(uint256,uint256)'(
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    customL2Tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string
    }>

    'customL2Tokens(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string
    }>

    depositAsERC20(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'depositAsERC20(address,address,uint256,uint256,uint256)'(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    depositAsERC777(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'depositAsERC777(address,address,uint256,uint256,uint256)'(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    fastWithdrawalFromL2(
      liquidityProvider: string,
      liquidityProof: BytesLike,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'fastWithdrawalFromL2(address,bytes,address,uint256,uint256)'(
      liquidityProvider: string,
      liquidityProof: BytesLike,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    notifyCustomToken(
      l1Address: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'notifyCustomToken(address,uint256,uint256)'(
      l1Address: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    registerCustomL2Token(
      l2Address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'registerCustomL2Token(address)'(
      l2Address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    updateTokenInfo(
      erc20: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      isERC20: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'updateTokenInfo(address,uint256,uint256,bool)'(
      erc20: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      isERC20: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    withdrawFromL2(
      exitNum: BigNumberish,
      erc20: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'withdrawFromL2(uint256,address,address,uint256)'(
      exitNum: BigNumberish,
      erc20: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>
  }

  buddyCreated(
    successful: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'buddyCreated(bool)'(
    successful: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  connectToChain(
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'connectToChain(uint256,uint256)'(
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  customL2Tokens(arg0: string, overrides?: CallOverrides): Promise<string>

  'customL2Tokens(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>

  depositAsERC20(
    erc20: string,
    destination: string,
    amount: BigNumberish,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'depositAsERC20(address,address,uint256,uint256,uint256)'(
    erc20: string,
    destination: string,
    amount: BigNumberish,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  depositAsERC777(
    erc20: string,
    destination: string,
    amount: BigNumberish,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'depositAsERC777(address,address,uint256,uint256,uint256)'(
    erc20: string,
    destination: string,
    amount: BigNumberish,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  fastWithdrawalFromL2(
    liquidityProvider: string,
    liquidityProof: BytesLike,
    erc20: string,
    amount: BigNumberish,
    exitNum: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'fastWithdrawalFromL2(address,bytes,address,uint256,uint256)'(
    liquidityProvider: string,
    liquidityProof: BytesLike,
    erc20: string,
    amount: BigNumberish,
    exitNum: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  notifyCustomToken(
    l1Address: string,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'notifyCustomToken(address,uint256,uint256)'(
    l1Address: string,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  registerCustomL2Token(
    l2Address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'registerCustomL2Token(address)'(
    l2Address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  updateTokenInfo(
    erc20: string,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    isERC20: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'updateTokenInfo(address,uint256,uint256,bool)'(
    erc20: string,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    isERC20: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  withdrawFromL2(
    exitNum: BigNumberish,
    erc20: string,
    destination: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'withdrawFromL2(uint256,address,address,uint256)'(
    exitNum: BigNumberish,
    erc20: string,
    destination: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  callStatic: {
    buddyCreated(successful: boolean, overrides?: CallOverrides): Promise<void>

    'buddyCreated(bool)'(
      successful: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    connectToChain(
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'connectToChain(uint256,uint256)'(
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    customL2Tokens(arg0: string, overrides?: CallOverrides): Promise<string>

    'customL2Tokens(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>

    depositAsERC20(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'depositAsERC20(address,address,uint256,uint256,uint256)'(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    depositAsERC777(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'depositAsERC777(address,address,uint256,uint256,uint256)'(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    fastWithdrawalFromL2(
      liquidityProvider: string,
      liquidityProof: BytesLike,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'fastWithdrawalFromL2(address,bytes,address,uint256,uint256)'(
      liquidityProvider: string,
      liquidityProof: BytesLike,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    notifyCustomToken(
      l1Address: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'notifyCustomToken(address,uint256,uint256)'(
      l1Address: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    registerCustomL2Token(
      l2Address: string,
      overrides?: CallOverrides
    ): Promise<void>

    'registerCustomL2Token(address)'(
      l2Address: string,
      overrides?: CallOverrides
    ): Promise<void>

    updateTokenInfo(
      erc20: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      isERC20: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    'updateTokenInfo(address,uint256,uint256,bool)'(
      erc20: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      isERC20: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    withdrawFromL2(
      exitNum: BigNumberish,
      erc20: string,
      destination: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'withdrawFromL2(uint256,address,address,uint256)'(
      exitNum: BigNumberish,
      erc20: string,
      destination: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {}

  estimateGas: {
    buddyCreated(successful: boolean, overrides?: Overrides): Promise<BigNumber>

    'buddyCreated(bool)'(
      successful: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    connectToChain(
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'connectToChain(uint256,uint256)'(
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    customL2Tokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'customL2Tokens(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    depositAsERC20(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'depositAsERC20(address,address,uint256,uint256,uint256)'(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    depositAsERC777(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'depositAsERC777(address,address,uint256,uint256,uint256)'(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    fastWithdrawalFromL2(
      liquidityProvider: string,
      liquidityProof: BytesLike,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'fastWithdrawalFromL2(address,bytes,address,uint256,uint256)'(
      liquidityProvider: string,
      liquidityProof: BytesLike,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    notifyCustomToken(
      l1Address: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'notifyCustomToken(address,uint256,uint256)'(
      l1Address: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    registerCustomL2Token(
      l2Address: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'registerCustomL2Token(address)'(
      l2Address: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    updateTokenInfo(
      erc20: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      isERC20: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'updateTokenInfo(address,uint256,uint256,bool)'(
      erc20: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      isERC20: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    withdrawFromL2(
      exitNum: BigNumberish,
      erc20: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'withdrawFromL2(uint256,address,address,uint256)'(
      exitNum: BigNumberish,
      erc20: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    buddyCreated(
      successful: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'buddyCreated(bool)'(
      successful: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    connectToChain(
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'connectToChain(uint256,uint256)'(
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    customL2Tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'customL2Tokens(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    depositAsERC20(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'depositAsERC20(address,address,uint256,uint256,uint256)'(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    depositAsERC777(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'depositAsERC777(address,address,uint256,uint256,uint256)'(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    fastWithdrawalFromL2(
      liquidityProvider: string,
      liquidityProof: BytesLike,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'fastWithdrawalFromL2(address,bytes,address,uint256,uint256)'(
      liquidityProvider: string,
      liquidityProof: BytesLike,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    notifyCustomToken(
      l1Address: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'notifyCustomToken(address,uint256,uint256)'(
      l1Address: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    registerCustomL2Token(
      l2Address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'registerCustomL2Token(address)'(
      l2Address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    updateTokenInfo(
      erc20: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      isERC20: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'updateTokenInfo(address,uint256,uint256,bool)'(
      erc20: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      isERC20: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    withdrawFromL2(
      exitNum: BigNumberish,
      erc20: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'withdrawFromL2(uint256,address,address,uint256)'(
      exitNum: BigNumberish,
      erc20: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>
  }
}
