/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer } from 'ethers'
import { Provider } from '@ethersproject/providers'

import { ArbOwner } from './ArbOwner'

export class ArbOwnerFactory {
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ArbOwner {
    return new Contract(address, _abi, signerOrProvider) as ArbOwner
  }
}

const _abi = [
  {
    constant: false,
    inputs: [
      {
        internalType: 'address',
        name: 'sequencerAddr',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'maxDelayBlocks',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'maxDelaySeconds',
        type: 'uint256',
      },
    ],
    name: 'changeSequencer',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      {
        internalType: 'bytes',
        name: 'marshalledCode',
        type: 'bytes',
      },
    ],
    name: 'continueArbosUpgrade',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [],
    name: 'finishArbosUpgrade',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      {
        internalType: 'address',
        name: 'newOwnerAddr',
        type: 'address',
      },
    ],
    name: 'giveOwnership',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [],
    name: 'startArbosUpgrade',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
]
