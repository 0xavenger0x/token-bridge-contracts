/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from 'ethers';
import { Listener, Provider } from 'ethers/providers';
import { Arrayish, BigNumber, BigNumberish, Interface } from 'ethers/utils';
import { TransactionOverrides, TypedEventDescription, TypedFunctionDescription } from '.';

interface ArbChannelInterface extends Interface {
    functions: {
        completeChallenge: TypedFunctionDescription<{
            encode([_players, _rewards]: [(string)[], (BigNumberish)[]]): string;
        }>;

        initiateChallenge: TypedFunctionDescription<{
            encode([_assertPreHash]: [Arrayish]): string;
        }>;

        confirmDisputableAsserted: TypedFunctionDescription<{
            encode([
                _preconditionHash,
                _afterHash,
                _numSteps,
                _tokenTypes,
                _messageData,
                _messageTokenNums,
                _messageAmounts,
                _messageDestinations,
                _logsAccHash,
            ]: [
                Arrayish,
                Arrayish,
                BigNumberish,
                (Arrayish)[],
                Arrayish,
                (BigNumberish)[],
                (BigNumberish)[],
                (string)[],
                Arrayish,
            ]): string;
        }>;

        activateVM: TypedFunctionDescription<{ encode([]: []): string }>;

        pendingDisputableAssert: TypedFunctionDescription<{
            encode([
                _fields,
                _numSteps,
                _timeBounds,
                _tokenTypes,
                _messageDataHash,
                _messageTokenNums,
                _messageAmounts,
                _messageDestinations,
            ]: [
                (Arrayish)[],
                BigNumberish,
                (BigNumberish)[],
                (Arrayish)[],
                (Arrayish)[],
                (BigNumberish)[],
                (BigNumberish)[],
                (string)[],
            ]): string;
        }>;

        ownerShutdown: TypedFunctionDescription<{ encode([]: []): string }>;

        increaseDeposit: TypedFunctionDescription<{ encode([]: []): string }>;

        finalizedUnanimousAssert: TypedFunctionDescription<{
            encode([
                _afterHash,
                _newInbox,
                _tokenTypes,
                _messageData,
                _messageTokenNums,
                _messageAmounts,
                _messageDestinations,
                _logsAccHash,
                _signatures,
            ]: [
                Arrayish,
                Arrayish,
                (Arrayish)[],
                Arrayish,
                (BigNumberish)[],
                (BigNumberish)[],
                (string)[],
                Arrayish,
                Arrayish,
            ]): string;
        }>;

        pendingUnanimousAssert: TypedFunctionDescription<{
            encode([
                _unanRest,
                _tokenTypes,
                _messageTokenNums,
                _messageAmounts,
                _sequenceNum,
                _logsAccHash,
                _signatures,
            ]: [Arrayish, (Arrayish)[], (BigNumberish)[], (BigNumberish)[], BigNumberish, Arrayish, Arrayish]): string;
        }>;

        confirmUnanimousAsserted: TypedFunctionDescription<{
            encode([
                _afterHash,
                _newInbox,
                _tokenTypes,
                _messageData,
                _messageTokenNums,
                _messageAmounts,
                _messageDestinations,
            ]: [Arrayish, Arrayish, (Arrayish)[], Arrayish, (BigNumberish)[], (BigNumberish)[], (string)[]]): string;
        }>;
    };

    events: {
        PendingUnanimousAssertion: TypedEventDescription<{
            encodeTopics([unanHash, sequenceNum]: [null, null]): string[];
        }>;

        ConfirmedUnanimousAssertion: TypedEventDescription<{
            encodeTopics([sequenceNum]: [null]): string[];
        }>;

        FinalizedUnanimousAssertion: TypedEventDescription<{
            encodeTopics([unanHash]: [null]): string[];
        }>;

        PendingDisputableAssertion: TypedEventDescription<{
            encodeTopics([fields, asserter, timeBounds, tokenTypes, numSteps, lastMessageHash, logsAccHash, amounts]: [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
            ]): string[];
        }>;

        ConfirmedDisputableAssertion: TypedEventDescription<{
            encodeTopics([newState, logsAccHash]: [null, null]): string[];
        }>;

        InitiatedChallenge: TypedEventDescription<{
            encodeTopics([challenger]: [null]): string[];
        }>;
    };
}

export class ArbChannel extends Contract {
    connect(signerOrProvider: Signer | Provider | string): ArbChannel;
    attach(addressOrName: string): ArbChannel;
    deployed(): Promise<ArbChannel>;

    on(event: EventFilter | string, listener: Listener): ArbChannel;
    once(event: EventFilter | string, listener: Listener): ArbChannel;
    addListener(eventName: EventFilter | string, listener: Listener): ArbChannel;
    removeAllListeners(eventName: EventFilter | string): ArbChannel;
    removeListener(eventName: any, listener: Listener): ArbChannel;

    interface: ArbChannelInterface;

    functions: {
        currentDeposit(validator: string): Promise<BigNumber>;

        vm(): Promise<{
            machineHash: string;
            pendingHash: string;
            inbox: string;
            asserter: string;
            escrowRequired: BigNumber;
            deadline: BigNumber;
            sequenceNum: BigNumber;
            gracePeriod: number;
            maxExecutionSteps: number;
            state: number;
            inChallenge: boolean;
            0: string;
            1: string;
            2: string;
            3: string;
            4: BigNumber;
            5: BigNumber;
            6: BigNumber;
            7: number;
            8: number;
            9: number;
            10: boolean;
        }>;

        isListedValidator(validator: string): Promise<boolean>;

        isValidatorList(_validators: (string)[]): Promise<boolean>;

        completeChallenge(
            _players: (string)[],
            _rewards: (BigNumberish)[],
            overrides?: TransactionOverrides,
        ): Promise<ContractTransaction>;

        initiateChallenge(_assertPreHash: Arrayish, overrides?: TransactionOverrides): Promise<ContractTransaction>;

        confirmDisputableAsserted(
            _preconditionHash: Arrayish,
            _afterHash: Arrayish,
            _numSteps: BigNumberish,
            _tokenTypes: (Arrayish)[],
            _messageData: Arrayish,
            _messageTokenNums: (BigNumberish)[],
            _messageAmounts: (BigNumberish)[],
            _messageDestinations: (string)[],
            _logsAccHash: Arrayish,
            overrides?: TransactionOverrides,
        ): Promise<ContractTransaction>;

        activateVM(overrides?: TransactionOverrides): Promise<ContractTransaction>;

        pendingDisputableAssert(
            _fields: (Arrayish)[],
            _numSteps: BigNumberish,
            _timeBounds: (BigNumberish)[],
            _tokenTypes: (Arrayish)[],
            _messageDataHash: (Arrayish)[],
            _messageTokenNums: (BigNumberish)[],
            _messageAmounts: (BigNumberish)[],
            _messageDestinations: (string)[],
            overrides?: TransactionOverrides,
        ): Promise<ContractTransaction>;

        ownerShutdown(overrides?: TransactionOverrides): Promise<ContractTransaction>;

        increaseDeposit(overrides?: TransactionOverrides): Promise<ContractTransaction>;

        finalizedUnanimousAssert(
            _afterHash: Arrayish,
            _newInbox: Arrayish,
            _tokenTypes: (Arrayish)[],
            _messageData: Arrayish,
            _messageTokenNums: (BigNumberish)[],
            _messageAmounts: (BigNumberish)[],
            _messageDestinations: (string)[],
            _logsAccHash: Arrayish,
            _signatures: Arrayish,
            overrides?: TransactionOverrides,
        ): Promise<ContractTransaction>;

        pendingUnanimousAssert(
            _unanRest: Arrayish,
            _tokenTypes: (Arrayish)[],
            _messageTokenNums: (BigNumberish)[],
            _messageAmounts: (BigNumberish)[],
            _sequenceNum: BigNumberish,
            _logsAccHash: Arrayish,
            _signatures: Arrayish,
            overrides?: TransactionOverrides,
        ): Promise<ContractTransaction>;

        confirmUnanimousAsserted(
            _afterHash: Arrayish,
            _newInbox: Arrayish,
            _tokenTypes: (Arrayish)[],
            _messageData: Arrayish,
            _messageTokenNums: (BigNumberish)[],
            _messageAmounts: (BigNumberish)[],
            _messageDestinations: (string)[],
            overrides?: TransactionOverrides,
        ): Promise<ContractTransaction>;

        challengeManager(): Promise<string>;
        validatorCount(): Promise<number>;
        getState(): Promise<number>;
        terminateAddress(): Promise<string>;
        exitAddress(): Promise<string>;
        activatedValidators(): Promise<number>;
        owner(): Promise<string>;
        escrowRequired(): Promise<BigNumber>;
        globalInbox(): Promise<string>;
    };

    filters: {
        PendingUnanimousAssertion(unanHash: null, sequenceNum: null): EventFilter;

        ConfirmedUnanimousAssertion(sequenceNum: null): EventFilter;

        FinalizedUnanimousAssertion(unanHash: null): EventFilter;

        PendingDisputableAssertion(
            fields: null,
            asserter: null,
            timeBounds: null,
            tokenTypes: null,
            numSteps: null,
            lastMessageHash: null,
            logsAccHash: null,
            amounts: null,
        ): EventFilter;

        ConfirmedDisputableAssertion(newState: null, logsAccHash: null): EventFilter;

        InitiatedChallenge(challenger: null): EventFilter;
    };

    estimate: {
        completeChallenge(_players: (string)[], _rewards: (BigNumberish)[]): Promise<BigNumber>;

        initiateChallenge(_assertPreHash: Arrayish): Promise<BigNumber>;

        confirmDisputableAsserted(
            _preconditionHash: Arrayish,
            _afterHash: Arrayish,
            _numSteps: BigNumberish,
            _tokenTypes: (Arrayish)[],
            _messageData: Arrayish,
            _messageTokenNums: (BigNumberish)[],
            _messageAmounts: (BigNumberish)[],
            _messageDestinations: (string)[],
            _logsAccHash: Arrayish,
        ): Promise<BigNumber>;

        activateVM(): Promise<BigNumber>;

        pendingDisputableAssert(
            _fields: (Arrayish)[],
            _numSteps: BigNumberish,
            _timeBounds: (BigNumberish)[],
            _tokenTypes: (Arrayish)[],
            _messageDataHash: (Arrayish)[],
            _messageTokenNums: (BigNumberish)[],
            _messageAmounts: (BigNumberish)[],
            _messageDestinations: (string)[],
        ): Promise<BigNumber>;

        ownerShutdown(): Promise<BigNumber>;

        increaseDeposit(): Promise<BigNumber>;

        finalizedUnanimousAssert(
            _afterHash: Arrayish,
            _newInbox: Arrayish,
            _tokenTypes: (Arrayish)[],
            _messageData: Arrayish,
            _messageTokenNums: (BigNumberish)[],
            _messageAmounts: (BigNumberish)[],
            _messageDestinations: (string)[],
            _logsAccHash: Arrayish,
            _signatures: Arrayish,
        ): Promise<BigNumber>;

        pendingUnanimousAssert(
            _unanRest: Arrayish,
            _tokenTypes: (Arrayish)[],
            _messageTokenNums: (BigNumberish)[],
            _messageAmounts: (BigNumberish)[],
            _sequenceNum: BigNumberish,
            _logsAccHash: Arrayish,
            _signatures: Arrayish,
        ): Promise<BigNumber>;

        confirmUnanimousAsserted(
            _afterHash: Arrayish,
            _newInbox: Arrayish,
            _tokenTypes: (Arrayish)[],
            _messageData: Arrayish,
            _messageTokenNums: (BigNumberish)[],
            _messageAmounts: (BigNumberish)[],
            _messageDestinations: (string)[],
        ): Promise<BigNumber>;
    };
}
