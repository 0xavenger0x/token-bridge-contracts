/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from 'ethers'
import { Provider } from 'ethers/providers'
import { UnsignedTransaction } from 'ethers/utils/transaction'

import { TransactionOverrides } from '.'
import { ArbFactory } from './ArbFactory'

export class ArbFactoryFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer)
  }

  deploy(
    _rollupTemplate: string,
    _globalInboxAddress: string,
    _challengeFactoryAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ArbFactory> {
    return super.deploy(
      _rollupTemplate,
      _globalInboxAddress,
      _challengeFactoryAddress,
      overrides
    ) as Promise<ArbFactory>
  }
  getDeployTransaction(
    _rollupTemplate: string,
    _globalInboxAddress: string,
    _challengeFactoryAddress: string,
    overrides?: TransactionOverrides
  ): UnsignedTransaction {
    return super.getDeployTransaction(
      _rollupTemplate,
      _globalInboxAddress,
      _challengeFactoryAddress,
      overrides
    )
  }
  attach(address: string): ArbFactory {
    return super.attach(address) as ArbFactory
  }
  connect(signer: Signer): ArbFactoryFactory {
    return super.connect(signer) as ArbFactoryFactory
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ArbFactory {
    return new Contract(address, _abi, signerOrProvider) as ArbFactory
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_rollupTemplate',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_globalInboxAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_challengeFactoryAddress',
        type: 'address',
      },
    ],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'vmAddress',
        type: 'address',
      },
    ],
    name: 'RollupCreated',
    type: 'event',
  },
  {
    constant: true,
    inputs: [],
    name: 'challengeFactoryAddress',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      {
        internalType: 'bytes32',
        name: '_vmState',
        type: 'bytes32',
      },
      {
        internalType: 'uint128',
        name: '_gracePeriodTicks',
        type: 'uint128',
      },
      {
        internalType: 'uint128',
        name: '_arbGasSpeedLimitPerTick',
        type: 'uint128',
      },
      {
        internalType: 'uint64',
        name: '_maxExecutionSteps',
        type: 'uint64',
      },
      {
        internalType: 'uint64[2]',
        name: '_maxTimeBoundsWidth',
        type: 'uint64[2]',
      },
      {
        internalType: 'uint128',
        name: '_stakeRequirement',
        type: 'uint128',
      },
      {
        internalType: 'address payable',
        name: '_owner',
        type: 'address',
      },
    ],
    name: 'createRollup',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'globalInboxAddress',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'rollupTemplate',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
]

const _bytecode =
  '0x608060405234801561001057600080fd5b506040516103b73803806103b78339818101604052606081101561003357600080fd5b5080516020820151604090920151600080546001600160a01b039384166001600160a01b03199182161790915560018054948416948216949094179093556002805492909116919092161790556103288061008f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063582923c71461005157806362e3c0b1146100755780638689d9961461007d578063b10c5f8414610085575b600080fd5b6100596100e9565b604080516001600160a01b039092168252519081900360200190f35b6100596100f8565b610059610107565b6100e7600480360361010081101561009c57600080fd5b5080359060208101356001600160801b03908116916040810135821691606082013567ffffffffffffffff1691608081019160c0820135169060e001356001600160a01b0316610116565b005b6001546001600160a01b031681565b6002546001600160a01b031681565b6000546001600160a01b031681565b6000805461012c906001600160a01b03166102a1565b60025460015460408051638e0f716760e01b8152600481018d81526001600160801b03808e1660248401528c16604483015267ffffffffffffffff8b1660648301529495506001600160a01b0380871695638e0f7167958f958f958f958f958f958f958f95908316949216929091608490910190879080828437600081840152601f19601f820116905080830192505050856001600160801b03166001600160801b03168152602001846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b03168152602001826001600160a01b03166001600160a01b031681526020019950505050505050505050600060405180830381600087803b15801561024257600080fd5b505af1158015610256573d6000803e3d6000fd5b5050604080516001600160a01b038516815290517f84c162f1396badc29f9c932c79d7495db699b615e2c0da163ae26bd5dbe71d7c9350908190036020019150a15050505050505050565b6000808260601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f094935050505056fea265627a7a723158209e1ca52fbca7fc60da71199555b826694ebcc09ac359e7eb2dc968c57172070364736f6c63430005110032'
